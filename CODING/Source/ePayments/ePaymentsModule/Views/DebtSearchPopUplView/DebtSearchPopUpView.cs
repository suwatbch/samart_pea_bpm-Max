//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class DebtSearchPopUpView : UserControl, IDebtSearchPopUpView
    {

        #region "Private variable"
        ClearifyInfo _clearifyItem;
        #endregion

        public DebtSearchPopUpView()
        {
            InitializeComponent();
            DebtSearchGV.AutoGenerateColumns = false;
            _clearifyItem = new ClearifyInfo();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public DebtSearchPopUpViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            ResetControl();
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            ProcessSearch();         
        }

        private void BindingDebtSearchData(List<BPMClearifyInfo> clearifyList)
        {
            DebtSearchGV.AutoGenerateColumns = false;
            DebtSearchGV.DataSource = clearifyList.ToArray();
            DebtSearchGV.Refresh();
        }

        private void btnOk_Click(object sender, EventArgs e)
        {            
            for (int i = 0; i < DebtSearchGV.Rows.Count; i++)
            {
                if (DebtSearchGV.Rows[i].Selected)
                {
                    BPMClearifyInfo clearifyItem = (BPMClearifyInfo)DebtSearchGV.Rows[i].DataBoundItem;
                    _presenter.OnSearchDebtResult(clearifyItem);
                    break;
                }
            }
           BindingDebtSearchData(new List<BPMClearifyInfo>());
            this.ParentForm.Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            BindingDebtSearchData(new List<BPMClearifyInfo>());
            this.ParentForm.Close();
        }

        private void btnSearchCancel_Click(object sender, EventArgs e)
        {
            BindingDebtSearchData(new List<BPMClearifyInfo>());
            //txtAmount.Clear();
            txtCaId.Clear();
            txtInvoiceNo.Clear();
            txtPeriod.Clear();
        }

        private void ResetControl()
        {
            txtCaId.Text = "000";
            txtInvoiceNo.Text = "000";
            txtPeriod.Text = "000";
            txtCaId.ResetText();
            txtInvoiceNo.ResetText();
            txtPeriod.ResetText();
            //txtAmount.ResetText();
            txtCaId.SelectAll();
            txtCaId.Focus();
        }

        private void DebtSearchGV_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {            
            for (int i = 0; i < DebtSearchGV.Rows.Count; i++)
            {
                if (DebtSearchGV.Rows[i].Selected)
                {
                    BPMClearifyInfo bpmClearifyItem = (BPMClearifyInfo)DebtSearchGV.Rows[i].DataBoundItem;
                    _presenter.OnSearchDebtResult(bpmClearifyItem);
                    break;
                }
            }
            BindingDebtSearchData(new List<BPMClearifyInfo>());
            this.ParentForm.Close();
        }
        
        public void AddDebtList(List<BPMClearifyInfo> debtList)
        {
            DebtSearchGV.AutoGenerateColumns = false;
            DebtSearchGV.DataSource = debtList;
            DebtSearchGV.Refresh();
        }

        public void ProcessSearch()
        {
            SearchDebtParam searchDebt = new SearchDebtParam();
            searchDebt.BranchId = null;
            searchDebt.CaId = txtCaId.Text.Trim();
            searchDebt.Period = txtPeriod.Text.Trim()==String.Empty ? null : DaHelper.SetBillPeriod(txtPeriod.Text.Trim());
            searchDebt.InvoiceNo = txtInvoiceNo.Text.Trim() == String.Empty ? null : txtInvoiceNo.Text.Trim().PadLeft(16, '0');
            searchDebt.DebtAmount = txtAmount.Text.Trim() == String.Empty ? 0 : StringConvert.ToDecimal(txtAmount.Text.Trim());

            if (searchDebt.IsValidParam)
            {
                _presenter.OnSearchDebt(searchDebt);
            }
            else
            {
                MessageBox.Show("กรุณาระบุเงื่อนไขในการค้นหา", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }   
        }

        private void txtCaId_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

        private void txtInvoiceNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

        private void txtPeriod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

        //private void txtAmount_KeyDown(object sender, KeyEventArgs e)
        //{
        //    if (e.KeyCode == Keys.Enter)
        //    {
        //        ProcessSearch();
        //    }
        //}


      


        public ClearifyInfo ClearifyItem
        {
            get
            {
                return this._clearifyItem;
            }
            set
            {
                this._clearifyItem = value;
                txtAmount.Text = _clearifyItem.FileAmount.ToString("#,###.##");
            }
        }

      
    }
}

