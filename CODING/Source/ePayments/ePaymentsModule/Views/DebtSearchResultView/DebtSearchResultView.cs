//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class DebtSearchResultView : UserControl, IDebtSearchResultView
    {
        public DebtSearchResultView()
        {
            InitializeComponent();
            DebtSearchGV.AutoGenerateColumns = false;
        }


        public void AddDebtList(List<ClearifyInfo> debtList)
        {
            DebtSearchGV.DataSource = debtList.ToArray();
            DebtSearchGV.Refresh();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public DebtSearchResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void btnOk_Click(object sender, EventArgs e)
        {            
            for(int i=0; i<DebtSearchGV.Rows.Count; i++)
            {
                if(DebtSearchGV.Rows[i].Selected)
                {
                    ClearifyInfo clearifyItem = (ClearifyInfo)DebtSearchGV.Rows[i].DataBoundItem;
                    _presenter.OnGetDebtDetail(clearifyItem);
                     break;
                }
            }
            this.ParentForm.Close();
        }

        private void DebtSearchGV_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {           
            for (int i = 0; i < DebtSearchGV.Rows.Count; i++)
            {
                if (DebtSearchGV.Rows[i].Selected)
                {
                    ClearifyInfo clearifyItem = (ClearifyInfo)DebtSearchGV.Rows[i].DataBoundItem;
                    _presenter.OnGetDebtDetail(clearifyItem);
                    break;
                }
            }
            this.ParentForm.Close();
        }             
    }
}

