//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Collections.Generic;
using System.Windows.Forms;
using PEA.BPM.ePaymentsModule.Interface.Services;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.ReceiptPrinting;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Services;


namespace PEA.BPM.ePaymentsModule
{
    public class FileResultViewPresenter : Presenter<IFileResultView>
    {
        private IBillingService _billingService;
        private IReceiptPrintingService _receiptPrintingService;

        #region Init

        [InjectionConstructor]
        public FileResultViewPresenter([ServiceDependency] IBillingService billingService, IReceiptPrintingService receiptPrintingService)
		{
            this._billingService = billingService;
            this._receiptPrintingService = receiptPrintingService;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        #endregion

        #region Event Subscription

        [EventSubscription(EventTopicNames.GetEPaymentUpload, Thread = ThreadOption.UserInterface)]
        public void GetEPaymentUploadHandler(object sender, EventArgs<List<EpayUploadItem>> e)
        {
            if (e.Data.Count > 0)
            {
                View.AddEPayUploadFile(e.Data);
            }
            else
            {
                MessageBox.Show("ไม่พบข้อมูลที่ได้ทำการอัปโหลด", "ข้อความ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        [EventSubscription(EventTopicNames.GetGroupCompany, Thread = ThreadOption.UserInterface)]
        public void GetGroupCompanyHandler(object sender, EventArgs<List<Company>> e)
        {
            if (e.Data.Count > 0)
            {
                View.SetCompanyGroup(e.Data);
            }
        }
        
        #endregion

        #region Event Publication

        [EventPublication(EventTopicNames.GetEPaymentDetail, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<List<EpayUploadItem>>> GetEPaymentDetail;
        internal void OnGetEPaymentDetail(List<EpayUploadItem> param)
        {
            if (GetEPaymentDetail != null)
                GetEPaymentDetail(this, new EventArgs<List<EpayUploadItem>>(param));
        }

        [EventPublication(EventTopicNames.ResetFileName, PublicationScope.WorkItem)]
        public event EventHandler ResetFileName;
        internal void OnResetFileName()
        {
            if (ResetFileName != null)
                ResetFileName(this, new EventArgs());
        }
  
        #endregion

        #region Internal Function


        internal List<Company> SearchCompany(Company company)
        {
            try
            {
                return _billingService.SearchCompany(company);
            }
            catch (Exception Ex)
            {
                throw;
            }
        }

        internal void InsertEPayUpload(List<EPaymentUploadFile> ePayFileList)
        {
            try
            {
                _billingService.InsertEPayUploadService(ePayFileList);
            }
            catch (Exception Ex)
            {
                throw;
            }
        }

        #endregion

    }
}

