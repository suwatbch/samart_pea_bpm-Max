//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Utilities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using System.Globalization;
using System.Data;
using System.IO;
using System.Text;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class CancelPaymentResultView : UserControl, ICancelPaymentResultView
    {

        #region Global Variable

        private List<CancelPayment> paymentList;
        private List<CancelPayment> cancelPaymentList;

        #endregion

        #region Constructure

        public CancelPaymentResultView()
        {
            InitializeComponent();
            AgentPaymentGV.AutoGenerateColumns = false;
        }

        #endregion

        #region System Init

        [CreateNew]
        public CancelPaymentResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            paymentList = new List<CancelPayment>();
            cancelPaymentList = new List<CancelPayment>();
        }

        #endregion

        #region Member of IPPrintedDepositResultView

        public void SetPaymentSearchResult(List<CancelPayment> param)
        {
            try
            {
                paymentList = param;
                BindingAgentPaymentData();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public void ResetPaymentSearchResult()
        {
            paymentList.Clear();
            BindingAgentPaymentData();
        }

        #endregion

        #region Custom Function

        private void BindingAgentPaymentData()
        {
            try
            {
                chkAll.Checked = false;
                SelectAllGridView(false);
                AgentPaymentGV.DataSource = paymentList.ToArray();
                AgentPaymentGV.Refresh();
                SelectAllGridView(false);
                SummaryCancelPayment();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void GetClearifiedDeposit()
        {
            //pPrintedParamList = new List<PPrintedDeposit>();
            //for (int i = 0; i<DepositGV.Rows.Count; i++)
            //{
            //    object val = DepositGV.Rows[i].Cells["CheckboxGV"].Value;
            //    if (val != null)
            //    {
            //        if ((bool)val)
            //        {
            //            PPrintedDeposit tmpData = (PPrintedDeposit)DepositGV.Rows[i].DataBoundItem;
            //            tmpData.BranchId = Session.Branch.Id;
            //            pPrintedParamList.Add(tmpData);
            //        }
            //    }
            //}
        }

        private void SelectAllGridView(bool setValue)
        {
            foreach (DataGridViewRow r in  AgentPaymentGV.Rows)
            {
                this.AgentPaymentGV["CheckboxGV", r.Index].Value = setValue;
            }
        }

        #endregion

        #region Event Handler

        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                ResetPaymentSearchResult();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            try
            {               
                if (txtPaymentCancel.Text.Trim() != "0")
                {
                    if (DialogResult.OK == MessageBox.Show("คำเตือน: หากทำการยกเลิกการรับชำระเงินแล้ว จะไม่สามารถย้อนกลับรายการได้\n\nโปรดกดปุ่ม 'OK' เพื่อยืนยันการยกเลิก",
                        "ข้อความยืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                    {
                        CancelPayment();
                    }
                }
                else
                {
                    MessageBox.Show("กรุณาเลือกรายการรับชำระเงินของตัวแทนที่ต้องการยกเลิก", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }                
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void chkAll_CheckedChanged(object sender, EventArgs e)
        {
            if (chkAll.Checked)
            {
                SelectAllGridView(true);
                SummaryCancelPayment();
            }
            else
            {
                SelectAllGridView(false);
                SummaryCancelPayment();
            }
        }

        private void SummaryCancelPayment()
        {
            int paymentAll = 0;
            int paymentCancel = 0;
            decimal amountPaymentAll = 0M;
            decimal amountpaymentCancel = 0M;
            try
            {
                foreach (DataGridViewRow r in AgentPaymentGV.Rows)
                {
                    paymentAll++;
                    amountPaymentAll += Convert.ToDecimal(this.AgentPaymentGV["GAmountGV", r.Index].Value);
                    DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)AgentPaymentGV["CheckboxGV", r.Index];
                    if (Convert.ToBoolean(chk.Value))
                    {
                        paymentCancel++;
                        amountpaymentCancel += Convert.ToDecimal(this.AgentPaymentGV["GAmountGV", r.Index].Value);
                    }
                }
                txtPaymentAll.Text = paymentAll.ToString();
                txtPaymentCancel.Text = paymentCancel.ToString();
                txtAmountAll.Text = amountPaymentAll.ToString("#,###,##0.00");
                txtCancelAmount.Text = amountpaymentCancel.ToString("#,###,##0.00");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void CancelPayment()
        {

            string remark = String.Empty;
            if (Authorization.IsAuthorized(SecurityNames.CancelPaymentConfirm,
                    "ยกเลิกการรับชำระเงินของตัวแทน", false, "กรุณากรอกเหตุผลในการยกเลิกการรับชำระเงินของตัวแทน", out remark))
            {
                try
                {
                    BindingCancelAgentPayment(remark);
                    if (cancelPaymentList.Count > 0)
                    {
                        _presenter.InsertCancelPayment(cancelPaymentList);
                        MessageBox.Show("ยกเลิกรายการรับชำระเงินของตัวแทนเรียบร้อย", "ผลการยกเลิก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ResetPaymentSearchResult();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString(), "ยกเลิกการจ่ายเงิน", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("คุณป้อนรหัสประจำตัวหรือรหัสผ่านไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BindingCancelAgentPayment(string Reason)
        {
            try
            {
                DateTime cancelDate = DateTime.Now;
                cancelPaymentList = new List<CancelPayment>();
                foreach (DataGridViewRow r in AgentPaymentGV.Rows)
                {
                    DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)AgentPaymentGV["CheckboxGV", r.Index];
                    if (Convert.ToBoolean(chk.Value))
                    {
                        CancelPayment cancelPayment = (CancelPayment)AgentPaymentGV.Rows[r.Index].DataBoundItem;
                        cancelPayment.PosId = Session.Terminal.Id;
                        cancelPayment.Reason = Reason;
                        cancelPayment.ModifiedDt = cancelDate;
                        cancelPayment.ModifiedBy = Session.User.Id;
                        cancelPaymentList.Add(cancelPayment);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        #endregion

        private void AgentPaymentGV_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                AgentPaymentGV.EndEdit();
                if (e.RowIndex >= 0 && e.ColumnIndex == 0)
                {         
                    SummaryCancelPayment();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

    }
}

