//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Collections.Generic;
using System.Windows.Forms;
using PEA.BPM.ePaymentsModule.Interface.Services;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.ReceiptPrinting;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Services;


namespace PEA.BPM.ePaymentsModule
{
    public class CancelPaymentResultViewPresenter : Presenter<ICancelPaymentResultView>
    {
        private IBillingService _billingService;

        #region Init

        [InjectionConstructor]
        public CancelPaymentResultViewPresenter([ServiceDependency] IBillingService billingService)
		{
            this._billingService = billingService;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        #endregion

        #region Event Subscription

        [EventSubscription(EventTopicNames.SearchPayment, Thread = ThreadOption.UserInterface)]
        public void SearchPaymentHandler(object sender, EventArgs<CancelPayment> e)
        {
            List<CancelPayment> paymentList = _billingService.SearchAgentPayment(e.Data);
            if (paymentList.Count > 0)
            {
                View.SetPaymentSearchResult(paymentList);
            }
            else
            {
                MessageBox.Show("ไม่พบข้อมูลการรับชำระหนี้ตามเงื่อนไขที่กำหนด", "ข้อความ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                View.ResetPaymentSearchResult();
            }
        }

        //[EventSubscription(EventTopicNames.ResetClearifiedList , Thread = ThreadOption.UserInterface)]
        //public void ResetClearifiedListHandler(object sender, EventArgs e)
        //{
        //    //View.ResetClerifiedList();
        //}

        
        #endregion

        #region Event Publication

  
        #endregion

        #region Internal Function

        internal void InsertCancelPayment(List<CancelPayment> paramList)
        {
            try
            {
                _billingService.InsertCancelPayment(paramList);
            }
            catch (Exception Ex)
            {
                throw;
            }
        }

        #endregion

    }
}

