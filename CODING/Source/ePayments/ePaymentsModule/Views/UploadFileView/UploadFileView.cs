//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections;
using System.IO;
using System.Globalization;
using System.Data;
using System.Drawing;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using PEA.BPM.ePaymentsModule.Services;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Utilities;
using PEA.BPM.ePaymentsModule.Interface.Constants;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class UploadFileView : UserControl, IUploadFileView
    {
        private List<EpayUploadItem> uploadItemList;
        private List<Company> compList;
        private string uploadFileName;

        #region Default Constructor

        public UploadFileView()
        {
            InitializeComponent();
        }

        #endregion

        #region Init System

        [CreateNew]
        public UploadFileViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region Event Handler

        private void imgUpload_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog ofd = new OpenFileDialog();
                ofd.Filter = "เฉพาะเท็กซ์ไฟล์เท่านั้น | *.txt";
                ofd.ShowDialog();
                string fileName = Path.GetFileName(ofd.FileName);
                txtFileUpload.Text = fileName;
                txtFileUpload.Tag = ofd.FileName;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnDisplay_Click(object sender, EventArgs e)
        {
            try
            {
                if (!IsValidFileName())
                {
                    MessageBox.Show("กรุณาเลือกไฟล์ที่ต้องการอัปโหลด", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else if (IsUploadFileExist())
                {
                  MessageBox.Show("ไฟล์ที่อัปโหลดมีข้อมูลอยู่แล้วภายในระบบ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);    
                }
                else
                {
                    WaitingFormHelper.ShowWaitingForm();
                    ArrayList dataList = FileManagement.ReadTextFile(txtFileUpload.Tag.ToString());
                    AssignUploadItem(dataList);
                    _presenter.OnGetGroupCompany(compList);
                    _presenter.OnGetEPaymentUpload(uploadItemList);
                    WaitingFormHelper.HideWaitingForm();
                }
            }
            catch (Exception ex)
            {
                WaitingFormHelper.HideWaitingForm();
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            ResetControl();
        }

        #endregion

        #region FileValidate
        
        private bool IsValidFileName()
        {
            if (txtFileUpload.Text.Trim() != "" && txtFileUpload.Text.Contains("."))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool IsUploadFileExist()
        {
            try
            {
                uploadFileName = txtFileUpload.Text.Substring(0, txtFileUpload.Text.IndexOf("."));
                bool result = _presenter.IsUploadFileNameExist(uploadFileName);
                return result;          
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region GetUploadItem (Custom Function)

        private void AssignUploadItem(ArrayList dataList)
        {
            try
            {
                string compId = "";
                string fileName = "";
                uploadItemList = new List<EpayUploadItem>();
                compList = new List<Company>();

                if (txtFileUpload.Text.Contains("."))
                {
                    fileName = txtFileUpload.Text.Substring(0, txtFileUpload.Text.IndexOf("."));
                }

                foreach (string data in dataList)
                {
                    if (data.Trim().Length < EPayUploadName.FILE_MIN_LEN || data.Trim().Length > EPayUploadName.FILE_MAX_LEN)
                    {
                        throw new Exception();
                    }
                    EpayUploadItem ePayUpload = new EpayUploadItem();
                    ePayUpload.BranchId = data.Substring(0, 6).Trim();
                    ePayUpload.CaId = data.Substring(6, 12).Trim();
                    ePayUpload.PayDt = DateFormatter.ToEnDateTime(data.Substring(18, 10));
                    ePayUpload.DueDt = DateFormatter.ToEnDateTime(data.Substring(28, 10));
                    ePayUpload.OutSourceAmount = StringConvert.ToDecimal(data.Substring(38, 12));
                    ePayUpload.RecNo = data.Substring(51, 15).Trim();
                    ePayUpload.Period = data.Substring(66, 6).Trim();
                    ePayUpload.CompanyId = data.Substring(72, 2).Trim();
                    ePayUpload.ActCode = data.Substring(74, 7).Trim();
                    ePayUpload.PosNo = data.Substring(81, 20).Trim();
                    ePayUpload.VatAmount = StringConvert.ToDecimal(data.Substring(101, 12));
                    ePayUpload.InvoiceNo = data.Substring(125).Trim().PadLeft(16, '0');
                    ePayUpload.EpayUploads.FileName = fileName;
                    ePayUpload.EpayUploads.UploadDt = cmbUploadDate.Value.Date;

                    uploadItemList.Add(ePayUpload);

                    if (!compId.Contains(ePayUpload.CompanyId))
                    {
                        compId += ePayUpload.CompanyId;
                        compId += ",";
                    }
                }
                AssignCompanyName(compId);
                GetSystemDebt();
            }
            catch (Exception e)
            {
                throw new Exception("ไฟล์ที่อัปโหลด มีรูปแบบข้อมูลไม่ถูกต้อง");
            }
        }

        private void AssignCompanyName(string compId)
        {

            Company comp = new Company();
            comp.CompanyId = compId;
            compList = _presenter.GetCompany(comp);
        }

        private void GetSystemDebt()
        {
            int count = 0;
            string caInvoiceNo = "";
            List<EpayUploadItem> tmpItemListAll = new List<EpayUploadItem>();
            EpayUploadItem tmpEpayItem = new EpayUploadItem();
            EpayUploadItem item = null;
            try
            {
                foreach (EpayUploadItem ePayUpload in uploadItemList)
                {
                    caInvoiceNo += ePayUpload.CaId.Trim() + "|" + ePayUpload.InvoiceNo.Trim() + ",";
                    count++;
                    if ((count % 250) == 0)
                    {
                        List<EpayUploadItem> tmpItemList = _presenter.GetDebtComparable(caInvoiceNo.Trim());
                        foreach (EpayUploadItem tmpItem in tmpItemList)
                        {
                            tmpItemListAll.Add(tmpItem);
                        }
                        count = 0;
                        caInvoiceNo = "";
                    }
                }
                if (count != 0)
                {
                    List<EpayUploadItem> tmpItemList = _presenter.GetDebtComparable(caInvoiceNo.Trim());
                    foreach (EpayUploadItem tmpItem in tmpItemList)
                    {
                        tmpItemListAll.Add(tmpItem);
                    }
                }
                CommonUtilities.SortUploadItem(ref uploadItemList, EPayUploadItemColumn.CaId, SortDirection.Ascending);
                CommonUtilities.SortUploadItem(ref tmpItemListAll, EPayUploadItemColumn.SysCaId, SortDirection.Ascending);

                for (int i = 0; i < uploadItemList.Count; i++)
                {
                    EpayUploadItem currentuploaditem = uploadItemList[i];
                    string uploadStatus = EPaymentUploadStatus.CLEAR;
                    foreach (Company comp in compList)
                    {
                        if (comp.CompanyId == currentuploaditem.CompanyId)
                        {
                            currentuploaditem.EpayUploads.CompanyName = comp.CompanyName;
                            break;
                        }
                    }
                    if (tmpItemListAll.Count > 0)
                    {
                        //-- ในกรณีที่มีการชำระผ่าน Epayment มากกว่า 1 เดือนใน file เดียวกัน ต้องหาหนี้ที่ถูกต้องมา match กัน
                        foreach (var tempitem in tmpItemListAll)
                        {
                            if (tempitem.SysCaId == currentuploaditem.CaId && tempitem.SysBranchId == currentuploaditem.BranchId &&                                
                                tempitem.SysInvoiceNo == currentuploaditem.InvoiceNo && tempitem.SysPeriod == currentuploaditem.Period)
                            {
                                //-- Caid, BrandhId, InvoiceNo, Period ตรงก็เพียงพอที่จะระบุตัวหนี้ ยอดเงินไม่ตรงไม่เป็นไร เอาไปคำนวนต่อข้างล่างว่าเกิดอะไรขึ้น
                                item = tempitem;
                            }
                        }

                        //-- ถ้าหาไม่แสดงว่ามีหนี้ผิด (ไม่รู้ว่าตัวไหนผิด) ให้เอาหนี้ซักตัวใน CA นั้นมาใช้
                        if (item == null)
                            item = CommonUtilities.SearchSysItem(tmpItemListAll, currentuploaditem);
                    }
                    else
                    {
                        item = new EpayUploadItem();
                    }

                    if (tmpEpayItem.CaId == currentuploaditem.CaId && tmpEpayItem.BranchId == currentuploaditem.BranchId && tmpEpayItem.DueDt == currentuploaditem.DueDt &&
                          tmpEpayItem.OutSourceAmount == currentuploaditem.OutSourceAmount && tmpEpayItem.InvoiceNo == currentuploaditem.InvoiceNo &&
                          tmpEpayItem.Period == currentuploaditem.Period && tmpEpayItem.VatAmount == currentuploaditem.VatAmount)
                    {
                        currentuploaditem.SysCaId = tmpEpayItem.SysCaId;
                        currentuploaditem.CaName = tmpEpayItem.CaName;
                        currentuploaditem.CaAddress = tmpEpayItem.CaAddress;
                        currentuploaditem.SysBranchId = tmpEpayItem.SysBranchId;
                        currentuploaditem.SysDueDate = tmpEpayItem.SysDueDate == null ? tmpEpayItem.SysDueDate : tmpEpayItem.SysDueDate.Value.Date;
                        currentuploaditem.SysGAmount = tmpEpayItem.SysGAmount;
                        currentuploaditem.SysInvoiceNo = tmpEpayItem.SysInvoiceNo;
                        currentuploaditem.SysPeriod = tmpEpayItem.SysPeriod;
                        currentuploaditem.SysVatAmount = tmpEpayItem.SysVatAmount;
                        uploadStatus = EPaymentUploadStatus.DUPPLICATE;
                    }
                    else
                    {

                        if (item.SysCaId == currentuploaditem.CaId)
                        {
                            currentuploaditem.SysCaId = item.SysCaId;
                            currentuploaditem.CaName = item.CaName;
                            currentuploaditem.CaAddress = item.CaAddress;
                            currentuploaditem.SysBranchId = item.SysBranchId;
                            currentuploaditem.SysDueDate = item.SysDueDate.Value.Date;
                            currentuploaditem.SysGAmount = item.SysGAmount;
                            currentuploaditem.SysInvoiceNo = item.SysInvoiceNo;
                            currentuploaditem.SysPeriod = item.SysPeriod;
                            currentuploaditem.SysVatAmount = item.SysVatAmount;

                            if ((item.SysPmId == "C" || item.SysPmId == "B" || item.SysPmId == "G") && item.SysPending == "0")
                            {
                                uploadStatus = EPaymentUploadStatus.PAID;
                            }
                            else if (currentuploaditem.InvoiceNo != item.SysInvoiceNo || currentuploaditem.BranchId != item.SysBranchId ||
                                     currentuploaditem.DueDt != item.SysDueDate || currentuploaditem.Period != item.SysPeriod)
                            {
                                uploadStatus = EPaymentUploadStatus.INCONSIS;
                            }
                            else if (currentuploaditem.OutSourceAmount < item.SysGAmount)
                            {
                                uploadStatus = EPaymentUploadStatus.LESSDEBT;
                            }
                            else if (currentuploaditem.OutSourceAmount > item.SysGAmount)
                            {
                                uploadStatus = EPaymentUploadStatus.MOREDEBT;
                            }
                            else if (item.SysPending == "1" && (item.SysPmId == "G" || item.SysPmId == "B"))
                            {
                                currentuploaditem.SysCaId = null;
                                currentuploaditem.CaName = null;
                                currentuploaditem.CaAddress = null;
                                currentuploaditem.SysBranchId = null;
                                currentuploaditem.SysDueDate = null;
                                currentuploaditem.SysGAmount = null;
                                currentuploaditem.SysInvoiceNo = null;
                                currentuploaditem.SysPeriod = null;
                                currentuploaditem.SysVatAmount = null;
                                uploadStatus = EPaymentUploadStatus.NOCAID;
                            }
                        }
                        else
                        {
                            uploadStatus = EPaymentUploadStatus.NOCAID;
                        }
                    }
                    currentuploaditem.UploadStatus = uploadStatus;
                    tmpEpayItem = currentuploaditem;
                }
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region ResetControl (Custom Function)

        public void ClearFileName()
        {
            ResetControl();
        }


        private void ResetControl()
        {
            txtFileUpload.ResetText();
            cmbUploadDate.Value = DateTime.Now;
        }
        #endregion

    }
}

