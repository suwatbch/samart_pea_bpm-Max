//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using PEA.BPM.ePaymentsModule.Services;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.IO;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class DebtSearchView : UserControl, IDebtSearchView
    {
        public DebtSearchView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public DebtSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            ProcessSearch();
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            ResetControl();
        }

        private void ResetControl()
        {
            txtCaId.ResetText();
            txtBranchId.ResetText();
            txtPeriod.ResetText();
            txtInvoiceNo.ResetText();
            txtCaId.Focus();
        }

        private void ProcessSearch()
        {
            SearchDebtParam searchDebt = new SearchDebtParam();
            searchDebt.BranchId = txtBranchId.Text.Trim();
            searchDebt.CaId = txtCaId.Text.Trim();
            searchDebt.Period = txtPeriod.Text.Trim() == String.Empty ? String.Empty : DaHelper.SetBillPeriod(txtPeriod.Text.Trim()) ;
            searchDebt.InvoiceNo = txtInvoiceNo.Text.Trim() == String.Empty ? String.Empty : txtInvoiceNo.Text.Trim().PadLeft(16,'0') ;
            searchDebt.DebtAmount = 0;
            if (searchDebt.IsValidParam)
            {
                _presenter.OnSearchDebt(searchDebt);
            }
            else
            {
                MessageBox.Show("กรุณาระบุเงื่อนไขในการค้นหา", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning );
                txtCaId.Focus();
            }
        }

        private void txtCaId_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

        private void txtReceipt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

        private void txtPeriod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }
            
        private void txtBranchId_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ProcessSearch();
            }
        }

    }
}

