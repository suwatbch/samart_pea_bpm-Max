//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.Constants;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class DebtClearifyView : UserControl, IDebtClearifyView
    {

        #region "Private Properties"
        private ClearifyInfo _clearifyItem;
        private SaveClearifyInfo _saveClearify;
        private BPMClearifyInfo _bpmClearifyItem;
        #endregion

        #region Constructure

        public DebtClearifyView()
        {
            _clearifyItem = new ClearifyInfo();
            _saveClearify = new SaveClearifyInfo();
            _bpmClearifyItem = new BPMClearifyInfo();
            InitializeComponent();
            DebtDetailGV.AutoGenerateColumns = false;
            DebtSearchResultGV.AutoGenerateColumns = false;
            ResetControl();
        }

        #endregion

        #region Init
        [CreateNew]
        public DebtClearifyViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region IDebtClearifyView

        public void ViewDebtDetail(ClearifyInfo clearifyItem)
        {
            _clearifyItem = clearifyItem;
            txtCaId.Text = _clearifyItem.FileCaId;
            txtAgent.Text = _clearifyItem.AgencyName;
            txtUploadFile.Text = DateFormatter.ToDateThString(_clearifyItem.UploadDt.Value);
            txtErrorType.Text = _clearifyItem.UploadStatusName;
            txtDueDt.Text = clearifyItem.BPMDueDt == null ? string.Empty : DateFormatter.ToDateThString(_clearifyItem.BPMDueDt.Value);
            ViewDebtComparable(_clearifyItem);

            if (_clearifyItem.UploadStatus == EPaymentUploadStatus.INCONSIS)
            {
                txtCaName.Text = clearifyItem.CaName;
                gbDebtSearch.Visible = true;
                btnDebtSearch.Enabled = true;
                btnDebtCancel.Enabled = true;
                gbLessDetb.Visible = false;
                gbMoreDebt.Visible = false;
                if (_bpmClearifyItem.CaId != String.Empty)
                {
                    if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                    {
                        DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (dg == DialogResult.OK)
                        {
                            _bpmClearifyItem = new BPMClearifyInfo();
                            ViewDebtSearchResult(_bpmClearifyItem);
                            rdbTransferAgent.Enabled = true;
                            rdbTransferCa.Enabled = true;
                            rdbTransferAgent.Checked = false;
                            rdbTransferCa.Checked = true;
                        }
                    }
                }
                else
                {
                    rdbTransferCa.Enabled = true;
                    rdbTransferAgent.Enabled = true;
                    rdbTransferCa.Checked = true;
                    rdbTransferAgent.Checked = false;
                }
            }
            else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.NOCAID)
            {
                txtCaName.Text = String.Empty;
                gbDebtSearch.Visible = true;
                btnDebtSearch.Enabled = true;
                btnDebtCancel.Enabled = true;
                gbLessDetb.Visible = false;
                gbMoreDebt.Visible = false;

                if (_bpmClearifyItem.CaId != String.Empty)
                {
                    if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                    {
                        DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (dg == DialogResult.OK)
                        {
                            _bpmClearifyItem = new BPMClearifyInfo();
                            ViewDebtSearchResult(_bpmClearifyItem);
                            rdbTransferAgent.Enabled = true;
                            rdbTransferCa.Enabled = false;
                            rdbTransferAgent.Checked = true;
                            rdbTransferCa.Checked = false;
                        }
                    }
                }
                else
                {
                    if (clearifyItem.BPMCaId != String.Empty)
                    {
                        rdbTransferAgent.Enabled = true;
                        rdbTransferAgent.Checked = false;
                        rdbTransferCa.Enabled = true;
                        rdbTransferCa.Checked = true;
                    }
                    else
                    {
                        rdbTransferAgent.Enabled = true;
                        rdbTransferAgent.Checked = true;
                        rdbTransferCa.Enabled = false;
                        rdbTransferCa.Checked = false;
                    }
                }
            }
            else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.DUPPLICATE && _clearifyItem.BPMCaId == String.Empty)
            {
                txtCaName.Text = String.Empty;
                gbDebtSearch.Visible = true;
                btnDebtSearch.Enabled = true;
                btnDebtCancel.Enabled = true;
                gbLessDetb.Visible = false;
                gbMoreDebt.Visible = false;
                if (_bpmClearifyItem.CaId != String.Empty)
                {
                    if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                    {
                        DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (dg == DialogResult.OK)
                        {
                            _bpmClearifyItem = new BPMClearifyInfo();
                            ViewDebtSearchResult(_bpmClearifyItem);
                            rdbTransferAgent.Enabled = true;
                            rdbTransferCa.Enabled = false;
                            rdbTransferAgent.Checked = true;
                            rdbTransferCa.Checked = false;
                        }
                    }
                }
                else
                {
                    rdbTransferAgent.Enabled = true;
                    rdbTransferAgent.Checked = true;
                    rdbTransferCa.Enabled = false;
                    rdbTransferCa.Checked = false;
                }
            }
            else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.PAID || _clearifyItem.UploadStatus == EPaymentUploadStatus.DUPPLICATE)
            {
                txtCaName.Text = clearifyItem.CaName;
                gbDebtSearch.Visible = true;
                btnDebtSearch.Enabled = true;
                btnDebtCancel.Enabled = true;
                gbLessDetb.Visible = false;
                gbMoreDebt.Visible = false;
                if (_bpmClearifyItem.CaId != String.Empty)
                {
                    if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                    {
                        DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (dg == DialogResult.OK)
                        {
                            _bpmClearifyItem = new BPMClearifyInfo();
                            ViewDebtSearchResult(_bpmClearifyItem);
                            rdbTransferAgent.Enabled = true;
                            rdbTransferCa.Enabled = true;
                            rdbTransferAgent.Checked = false;
                            rdbTransferCa.Checked = true;
                        }
                    }
                }
                else
                {
                    rdbTransferCa.Enabled = true;
                    rdbTransferAgent.Enabled = true;
                    rdbTransferCa.Checked = true;
                    rdbTransferAgent.Checked = false;
                }
            }

            else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.LESSDEBT)
            {
                txtCaName.Text = clearifyItem.CaName;
                gbDebtSearch.Visible = false;
                gbLessDetb.Visible = true;
                gbMoreDebt.Visible = false;
                rdbLessCus.Checked = true;
                rdbLess2.Checked = false;
            }
            else
            {
                txtCaName.Text = _clearifyItem.CaName;
                gbDebtSearch.Visible = false;
                gbLessDetb.Visible = false;
                gbMoreDebt.Visible = true;
                rdbMore2.Checked = true;
                rdbMore1.Checked = false;
            }
        }

        public void ViewDebtComparable(ClearifyInfo clearifyItem)
        {
            List<DebtCompareInfo> debtList = new List<DebtCompareInfo>();
            
            debtList.Add(new DebtCompareInfo("หมายเลขผู้ใช้ไฟฟ้า", clearifyItem.BPMCaId, clearifyItem.FileCaId, false));
            debtList.Add(new DebtCompareInfo("บิลเดือน", clearifyItem.BPMPeriod, clearifyItem.FilePeriod, false));
            debtList.Add(new DebtCompareInfo("วันครบกำหนดชำระ", clearifyItem.BPMDueDt == null ? string.Empty : DateFormatter.ToDateThString(clearifyItem.BPMDueDt.Value), DateFormatter.ToDateThString(clearifyItem.FileDueDt.Value), false));
            debtList.Add(new DebtCompareInfo("ยอดหนี้", clearifyItem.BPMAmount == 0 ? String.Empty : DaHelper.ToMoneyFormat(clearifyItem.BPMAmount), DaHelper.ToMoneyFormat(clearifyItem.FileAmount), false));
            debtList.Add(new DebtCompareInfo("จำนวนเงินภาษี", clearifyItem.BPMVatAmount == 0 ? String.Empty : DaHelper.ToMoneyFormat(clearifyItem.BPMVatAmount), DaHelper.ToMoneyFormat(clearifyItem.FileVatAmount), false));
            debtList.Add(new DebtCompareInfo("เลขที่ใบแจ้งหนี้", clearifyItem.DisplayBPMInvoiceNo, clearifyItem.DisplayFileInvoiceNo, false));

            DebtDetailGV.AutoGenerateColumns = false;
            DebtDetailGV.DataSource = debtList;
            DebtDetailGV.Refresh();
        }

        #endregion  

        #region Event Handler

        private void rdbTransferAgent_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbTransferAgent.Checked && _bpmClearifyItem.CaId != String.Empty)
            {
                if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                {
                    DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (dg == DialogResult.OK)
                    {
                        _bpmClearifyItem = new BPMClearifyInfo();
                        ViewDebtSearchResult(_bpmClearifyItem);
                        rdbTransferAgent.Enabled = true;
                        rdbTransferCa.Enabled = false;
                        rdbTransferAgent.Checked = true;
                        rdbTransferCa.Checked = false;
                    }
                }
            }
        }

        private void rdbTransferCa_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbTransferCa.Checked && _bpmClearifyItem.CaId != String.Empty)
            {
                if (_bpmClearifyItem.DebtAmount != 0 && _clearifyItem.FileAmount != _bpmClearifyItem.DebtAmount)
                {
                    DialogResult dg = MessageBox.Show("คุณต้องการล้างค่าจากการค้นหาข้อมูลหนี้ใช่หรือไม่", "คำเตื่อน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (dg == DialogResult.OK)
                    {
                        _bpmClearifyItem = new BPMClearifyInfo();
                        ViewDebtSearchResult(_bpmClearifyItem);
                        rdbTransferAgent.Enabled = true;
                        rdbTransferCa.Enabled = false;
                        rdbTransferAgent.Checked = true;
                        rdbTransferCa.Checked = false;
                    }
                }
            }
        }


        private void DebtDetailGV_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DebtDetailGV.EndEdit();
            if (e.RowIndex >= 0)
            {                
                DebtCompareInfo compare = (DebtCompareInfo)DebtDetailGV.Rows[e.RowIndex].DataBoundItem;
                if (!compare.FormatStatus)
                {
                    if (compare.BPMValue.CompareTo(compare.FileValue) != 0)
                    {
                        DebtDetailGV.Rows[e.RowIndex].Cells["StatusGV"].Value = Properties.Resources.Exclamation;
                    }
                    else
                    {
                        DebtDetailGV.Rows[e.RowIndex].Cells["StatusGV"].Value = Properties.Resources.Pass;
                    }
                    compare.FormatStatus = true;
                }                
            }
        }

        private void btnDebtSearch_Click(object sender, EventArgs e)
        {
            _presenter.OnSearchDebtPopUp(_clearifyItem);
        }

        private void btnDebtCancel_Click(object sender, EventArgs e)
        {
            _bpmClearifyItem = new BPMClearifyInfo();

            BPMClearifyInfo clearifyItem = new BPMClearifyInfo();
            ViewDebtSearchResult(clearifyItem);
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            ResetControl();
        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            if (IsValideData())
            {
                if (MessageBox.Show("คุณต้องการแก้ไขปัญหา การตัดชำระหนี้ผู้ใช้ไฟที่ผิดพลาดในรูปแบบนี้ ใช่หรือไม่", "ข้อความยืนยัน", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    //save data
                    _saveClearify.ModifeidBy = Session.User.Id;
                    _saveClearify.BranchId = CodeNames.BranchCenter;
                    //save new invoice
                    _saveClearify.IssueId = _clearifyItem.IssueId;
                    _saveClearify.InvoiceNo = _clearifyItem.FileInvoiceNo;
                    _saveClearify.NewInvoiceNo = _bpmClearifyItem.InvoiceNo == String.Empty ? _clearifyItem.FileInvoiceNo : _bpmClearifyItem.InvoiceNo;
                    _saveClearify.AgentId = _clearifyItem.agency.AgencyId;
                    _saveClearify.SaveCaId = _clearifyItem.BPMCaId;
                    _saveClearify.PostId = Session.Terminal.Id;
                    _saveClearify.PaymentDt = _clearifyItem.FilePaymentDt.Value;

                    if (_clearifyItem.UploadStatus == EPaymentUploadStatus.NOCAID || _clearifyItem.UploadStatus == EPaymentUploadStatus.DUPPLICATE
                               || _clearifyItem.UploadStatus == EPaymentUploadStatus.PAID || _clearifyItem.UploadStatus == EPaymentUploadStatus.INCONSIS)
                    {
                        _saveClearify.BPMClearifyItem = _bpmClearifyItem;
                        if (rdbTransferAgent.Checked)
                        {
                            //โอนเงินให้ตัวแทน
                            // Receipt type 5 ใบนำฝากของตัวแทน 6 ใบนำฝากของผู้ใช้ไฟ
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.RETURN_AGENT;
                            _saveClearify.DepReceiptType = "2";
                            _saveClearify.ReceiptPrefix = "D";
                            _saveClearify.PaidAmount = 0;
                            _saveClearify.OverDebtOwner = _clearifyItem.FileAmount;
                            _saveClearify.TotalAmount = _clearifyItem.BPMAmount;

                            _saveClearify.PostId = Session.Terminal.Id;
                            // _saveClearify.PaymentDt = _clearifyItem.FilePaymentDt.Value;
                            _saveClearify.BranchId = _clearifyItem.BPMBranchId;

                        }
                        else if (rdbTransferCa.Checked)
                        {
                            //โอนเงินให้กับลูกค้า
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.RETURN_CUSTOMER;
                            _saveClearify.DepReceiptType = "1";
                            _saveClearify.ReceiptPrefix = "D";
                            _saveClearify.PaidAmount = 0;
                            _saveClearify.OverDebtOwner = _clearifyItem.FileAmount; ;
                            _saveClearify.TotalAmount = _clearifyItem.BPMAmount;

                            _saveClearify.PostId = Session.Terminal.Id;
                            //_saveClearify.PaymentDt = _clearifyItem.FilePaymentDt.Value;
                            _saveClearify.BranchId = _clearifyItem.BPMBranchId;

                        }
                        else
                        {
                            // เลือกลูกค้าอื่นมาชำระแทน
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.CLEAR_PAYMENT;
                            _saveClearify.ReceiptPrefix = "D";
                            _saveClearify.SaveCaId = _bpmClearifyItem.CaId;
                            _saveClearify.PaidAmount = _bpmClearifyItem.DebtAmount;
                            _saveClearify.OverDebtOwner = 0; ;
                            _saveClearify.TotalAmount = _clearifyItem.BPMAmount;

                            _saveClearify.PostId = Session.Terminal.Id;
                            //_saveClearify.PaymentDt = _clearifyItem.FilePaymentDt.Value;
                            _saveClearify.BranchId = _clearifyItem.BPMBranchId;
                            //_saveClearify.PaymentDt = _bpmClearifyItem.PaymentDt.Value;
                        }

                    }
                    else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.LESSDEBT)
                    {
                        if (rdbLessCus.Checked)
                        {
                            // ชำระเงินบางส่วน เรียกผู้ใช้ไฟฟ้ามาชำระเงินเพิ่ม
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.PARTIAL_PAYMENT;
                            _saveClearify.PaidAmount = _clearifyItem.FileAmount;
                            _saveClearify.TotalAmount = _clearifyItem.BPMAmount;
                            _saveClearify.OverDebtOwner = 0;
                        }
                        else
                        {
                            //ชำระยอดเต็ม โอนหนี้ไปให้ตัวแทน
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.CLEAR_PAYMENT;
                            _saveClearify.PaidAmount = _clearifyItem.BPMAmount;
                            _saveClearify.TotalAmount = _clearifyItem.BPMAmount;
                            _saveClearify.OverDebtOwner = _clearifyItem.FileAmount - _clearifyItem.BPMAmount;
                        }
                    }
                    else
                    {
                        if (rdbMore1.Checked)
                        {
                            // ชำระเต็มจำนวน ส่วนที่เหลือเข้าเงินรับฝากของ ตัวแทน
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.CLEAR_PAYMENT;
                            _saveClearify.DepReceiptType = "2";  // Deposit Receipt for Agent
                            _saveClearify.PaidAmount = _clearifyItem.BPMAmount;
                            _saveClearify.TotalAmount = _clearifyItem.FileAmount;
                            _saveClearify.OverDebtOwner = _clearifyItem.FileAmount - _clearifyItem.BPMAmount;
                        }
                        else
                        {
                            // ชำระเต็มจำนวน ส่วนที่เหลือเข้าเงินรับฝากของ ผู้ใช้ไฟ
                            _saveClearify.ClearifyType = CLEARIFY_TYPE.CLEAR_PAYMENT;
                            _saveClearify.DepReceiptType = "1"; // Deposit Receipt for CA
                            _saveClearify.PaidAmount = _clearifyItem.BPMAmount;
                            _saveClearify.TotalAmount = _clearifyItem.FileAmount;
                            _saveClearify.OverDebtOwner = _clearifyItem.FileAmount - _clearifyItem.BPMAmount;
                        }
                    }

                    try
                    {
                        _saveClearify.BranchId = Session.Branch.Id;
                        bool clearyResult = _presenter.SaveClearify(_saveClearify);
                        if (clearyResult)
                        {
                            MessageBox.Show("บันทึกข้อมูลเรียบร้อย", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            ResetControl();
                        }
                        else
                        {
                            MessageBox.Show("ไม่สามารถบันทึกข้อมูลได้ กรุณาติดต่อเจ้าหน้าที่ดูแลระบบ", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            ResetControl();
                        }
                    }
                    catch (Exception ex)
                    {
                        WaitingFormHelper.HideWaitingForm();
                        Logger.WriteError(Logger.Module.EPAYMENT, "แก้ปัญหาการตัดชำระ E-Payment", ex.ToString());
                        MessageBox.Show("ไม่สามารถบันทึกข้อมูลได้ โปรดติดต่อผู้ดูแลระบบ\n", "ข้อผิดพลาด",
                           MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("กรุณาระบุข้อมูลให้ครบ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void DebtDetailGV_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (DebtDetailGV.Rows.Count > 0)
                btnOk.Enabled = true;
        }

        private void DebtDetailGV_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (DebtDetailGV.Rows.Count == 0)
                btnOk.Enabled = false;
        }

        #endregion

        #region Custom Function

        public void ViewDebtSearchResult(BPMClearifyInfo debtParam)
        {
            List<BPMClearifyInfo> debtList = new List<BPMClearifyInfo>();
            debtList.Add(debtParam);
            DebtSearchResultGV.AutoGenerateColumns = false;
            DebtSearchResultGV.DataSource = debtList.ToArray();
            DebtSearchResultGV.Refresh();
            _bpmClearifyItem = debtParam;
            if (debtParam.CaId != "")
            {
                rdbTransferAgent.Checked = false;
                rdbTransferCa.Checked = false;
                rdbTransferAgent.Enabled = false;
                rdbTransferCa.Enabled = false;
            }
            else
            {
                if (_clearifyItem.BPMCaId == String.Empty)
                {
                    rdbTransferAgent.Enabled = true;
                    rdbTransferCa.Enabled = false;
                    rdbTransferCa.Checked = false;
                    rdbTransferAgent.Checked = true;
                }
                else
                {
                    rdbTransferAgent.Enabled = true;
                    rdbTransferCa.Enabled = true;
                    rdbTransferCa.Checked = true;
                    rdbTransferAgent.Checked = false;
                }
            }
        }

        private void ResetControl()
        {
            txtCaId.ResetText();
            txtCaName.ResetText();
            txtAgent.ResetText();
            txtUploadFile.ResetText();
            txtErrorType.ResetText();
            txtDueDt.ResetText();
            BPMClearifyInfo clearifyItem = new BPMClearifyInfo();
            ViewDebtSearchResult(clearifyItem);

            DebtDetailGV.DataSource = new List<PaymentUploadFile>().ToArray();
            DebtDetailGV.Refresh();

            btnDebtSearch.Enabled = true;
            btnDebtCancel.Enabled = true;
            rdbTransferCa.Checked = false;
            rdbTransferAgent.Checked = false;
            rdbLessCus.Checked = true;
            rdbMore2.Checked = true;

            gbDebtSearch.Visible = false;
            gbLessDetb.Visible = false;
            gbMoreDebt.Visible = false;
        }

        private bool IsValideData()
        {
            bool retVal = true;
            if (_clearifyItem.UploadStatus == EPaymentUploadStatus.INCONSIS || _clearifyItem.UploadStatus == EPaymentUploadStatus.NOCAID
                    || _clearifyItem.UploadStatus == EPaymentUploadStatus.PAID || _clearifyItem.UploadStatus == EPaymentUploadStatus.DUPPLICATE)
            {
                if (_bpmClearifyItem.DebtAmount == 0 && !rdbTransferAgent.Checked && !rdbTransferCa.Checked)                
                    retVal = false;                                   
            }          
            else if (_clearifyItem.UploadStatus == EPaymentUploadStatus.LESSDEBT)
            {
                if (!rdbLessCus.Checked && !rdbLess2.Checked)                
                    retVal = false;                                    
            }
            else
            {
                if (!rdbMore1.Checked && !rdbMore2.Checked)
                    retVal = false;
            }
            return retVal;
        }
        

        #endregion

    }
}

