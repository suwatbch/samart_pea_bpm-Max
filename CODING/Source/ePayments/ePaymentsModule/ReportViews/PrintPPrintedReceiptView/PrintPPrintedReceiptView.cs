//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Utilities;
using PEA.BPM.Architecture.PrintUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.ReceiptPrinting;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using System.Globalization;
using System.Data;
using System.IO;
using System.Text;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class PrintPPrintedReceiptView : UserControl, IPrintPPrintedReceiptView
    {

        #region Global Variable

        private CultureInfo ci = new CultureInfo("th-TH");
        private List<PPrintedReceipt> pPrintedList;
        private PPrintedReceiptParam param;

        #endregion

        #region Init Screen

        public PrintPPrintedReceiptView()
        {
            InitializeComponent();
        }

        [CreateNew]
        public PrintPPrintedReceiptViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #endregion

        #region Event Handler

        protected override void OnLoad(EventArgs e)
        {
            try
            {
                _presenter.OnViewReady();
                LoadAgentAll();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                if (ValidateInputForm(false))
                {
                    AssignReceiptCriteria(false);
                    pPrintedList = _presenter.GetPPrintedDataSource(param);
                    if (pPrintedList.Count > 0)
                    {
                        BindingPrePrintedValue();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbPaymentDt_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                BindigAgentPaymnentNum();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbAgent_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                BindigAgentPaymnentNum();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbUploadDt_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                BindigAgentPaymnentNum();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            try
            {
                ResetControl();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnClearReceiptSearch_Click(object sender, EventArgs e)
        {
            ResetSearchByReceiptIdControl();
        }

        private void btnReceiptSearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (ValidateInputForm(true))
                {
                    AssignReceiptCriteria(true);
                    pPrintedList = _presenter.GetPPrintedDataSource(param);
                    if (pPrintedList.Count > 0)
                    {
                        BindingPrePrintedValue();
                    }
                    else
                    {
                        MessageBox.Show("ไม่พบข้อมูลใบเสร็จรับเงิน ตามเงื่อนไขที่กำหนด", "ข้อความ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        #region Receipt Printing

        private void AssignReceiptCriteria(bool isReceiptIdSearch)
        {
            try
            {
                param = new PPrintedReceiptParam();
                if (!isReceiptIdSearch)
                {
                    param.BranchId = Session.Branch.Id;
                    param.CompanyId = cmbAgent.SelectedValue.ToString().Trim();
                    param.UploadDt = cmbUploadDt.Value;
                    param.PaymentDt = Convert.ToDateTime(cmbPaymentNum.SelectedValue);
                    param.ReceiptId = null;
                }
                else
                {
                    param.BranchId = null;
                    param.CompanyId = null;
                    param.UploadDt = null;
                    param.PaymentDt = null;
                    param.ReceiptId = txtReceiptId.Text.Trim();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void BindingPrePrintedValue()
        {
            string payDtDetail = "รับการนำส่งเงินค่าไฟฟ้า";
            string tranfDetail = "โดยใบเข้าบัญชีธนาคาร ";
            string tranfDtDetail = "";
            DateTime previousPayDate = DateTime.MinValue;
            DateTime previousTranfDate = DateTime.MinValue;
            int row = 0;
            decimal totalAmount = 0M;
            try
            {
                foreach(PPrintedReceipt prePrinted in pPrintedList)
                {
                    row++;
                    if (row == 1)
                    {
                        string paymentDate = Convert.ToDateTime(prePrinted.PaymentDt).ToString("d/M/yyyy", ci);
                        prePrinted.ReceiptName = "ใบเสร็จรับเงิน";
                        prePrinted.ReceiptDt = paymentDate.Split('/')[0].Trim();
                        prePrinted.ReceiptMonth = CommonUtilities.GetThaiMonth(Convert.ToInt32(paymentDate.Split('/')[1].Trim()));
                        prePrinted.ReceiptYear = paymentDate.Split('/')[2].Trim();
                        tranfDetail += prePrinted.BankName + "\n\rเลขที่ " + prePrinted.TranfAccNo + " ลว ";
                    }
                    totalAmount += prePrinted.TotalBillAmount.Value;
                    tranfDtDetail += ConcatTranferDetailDt(ref previousTranfDate, Convert.ToDateTime(prePrinted.TranfDt), row == pPrintedList.Count);
                }
                tranfDetail += tranfDtDetail;
          
                if (pPrintedList.Count > 0)
                {
                    payDtDetail += "\n\rประจำวันที่ " + ConcatPaymentDetailDt(pPrintedList[0].PayDtList);
                    payDtDetail += "\n\rจำนวน " + pPrintedList[0].TotalBillCount + " ราย";
                    pPrintedList[0].TotalBillAmount = totalAmount;
                    pPrintedList[0].StrAmount = StringConvert.ConvertAmountToText(totalAmount.ToString("0.00").Trim());
                    pPrintedList[0].ReceiveDtDetail = payDtDetail;
                    pPrintedList[0].TranfDetail = tranfDetail;
                }

                Preview p = new Preview();
              
                /*Print receipt form through printer*/
                p.SetReceiptDatasource(pPrintedList);
                p.PrintReceiptReport();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private string ConcatPaymentDetailDt(List<DateTime> payDtList)
        {
            string result = "";
            int row = 0;
            DateTime pDate = DateTime.MinValue;

            foreach (DateTime cDate in payDtList)
            {
                row++;
                if (pDate == DateTime.MinValue)
                {
                    result = cDate.Day.ToString();
                }
                else
                {
                    if (pDate.Month == cDate.Month && pDate.Year == cDate.Year)
                    {
                        result += ", " + cDate.Day;
                    }
                    else if (pDate.Month != cDate.Month && pDate.Year == cDate.Year)
                    {
                        string thaiMonth = CommonUtilities.GetThaiMonth(pDate.Month);
                        result += " " + thaiMonth + ", " + cDate.Day;
                    }
                    else if (pDate.Month != cDate.Month && pDate.Year != cDate.Year)
                    {
                        string thaiMonth = CommonUtilities.GetThaiMonth(pDate.Month);
                        string thaiYear = DateFormatter.ToYearThString(pDate);
                        result += " " + thaiMonth + " " + thaiYear + ", " + cDate.Day;
                    }
                }
                if (row == payDtList.Count)
                {
                    string thaiMonth = CommonUtilities.GetThaiMonth(cDate.Month);
                    string thaiYear = DateFormatter.ToYearThString(cDate);
                    result += " " + thaiMonth + " " + thaiYear;
                }
                pDate = cDate;
            }

            return result;
        }

        private string ConcatTranferDetailDt(ref DateTime pDate, DateTime cDate, bool lastRec)
        {
            string result = "";

            if (pDate == DateTime.MinValue)
            {
                result = cDate.Day.ToString();
            }
            else if (pDate == cDate)
            {
                result = "";
            }
            else
            {
                if (pDate.Month == cDate.Month && pDate.Year == cDate.Year)
                {
                    result += ", " + cDate.Day;
                }
                else if (pDate.Month != cDate.Month && pDate.Year == cDate.Year)
                {
                    string thaiMonth = CommonUtilities.GetShortThaiMonth(pDate.Month);
                    result += " " + thaiMonth + ", " + cDate.Day;
                }
                else if (pDate.Month != cDate.Month && pDate.Year != cDate.Year)
                {
                    string thaiMonth = CommonUtilities.GetShortThaiMonth(pDate.Month);
                    string thaiYear = DateFormatter.ToShortYearThString(pDate);
                    result += " " + thaiMonth + " " + thaiYear + ", " + cDate.Day;
                }
            }
            if (lastRec)
            {
                string thaiMonth = CommonUtilities.GetShortThaiMonth(cDate.Month);
                string thaiYear = DateFormatter.ToShortYearThString(cDate);
                result += " " + thaiMonth + " " + thaiYear;
            }
            pDate = cDate;

            return result;
        }

        #endregion

        #region Custom Function (Validation)

        private bool ValidateInputForm(bool isReceiptIdSearch)
        {
            bool result = true;
            if (!isReceiptIdSearch)
            {
                if (cmbAgent.Items.Count <= 0)
                {
                    result = false;
                    MessageBox.Show("กรุณาเลือกข้อมูลตัวแทนที่ต้องการพิมพ์ใบเสร็จ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else if (cmbPaymentNum.Items.Count <= 0)
                {
                    result = false;
                    MessageBox.Show("กรุณาเลือกข้อมูลครั้งที่รับชำระเงินของตัวแทน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                if (txtReceiptId.Text.Trim() == "")
                {
                    result = false;
                    MessageBox.Show("กรุณาป้อนเลขที่ใบเสร็จรับเงินที่ต้องการ ก่อนกดปุ่มแสดงข้อมูล", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            return result;
        }


        #endregion

        #region Custom Fucntion

        private EPayUpload BindingSearchValue()
        {
            EPayUpload payment = new EPayUpload();
            payment.UploadDt = cmbUploadDt.Value;
            if (cmbAgent.Items.Count > 0)
            {
                payment.CompanyId = cmbAgent.SelectedValue.ToString();
            }
            payment.PostDt = cmbPaymentDt.Value;
            return payment;
        }


        private void BindigAgentPaymnentNum()
        {
            EPayUpload payment = BindingSearchValue();
            List<EPayUpload> paymentList = _presenter.SearchAgentPaymentNum(payment);

            cmbPaymentNum.DisplayMember = "FileName";
            cmbPaymentNum.ValueMember = "PostDt";
            cmbPaymentNum.DataSource = paymentList.ToArray();
            cmbPaymentNum.Refresh();

            if (cmbPaymentNum.Items.Count > 0)
            {
                cmbPaymentNum.SelectedIndex = 0;
            }

        }

        private void ResetControl()
        {
            cmbUploadDt.Value = DateTime.Now;
            cmbPaymentDt.Value = DateTime.Now;
            if (cmbAgent.Items.Count > 0)
            {
                cmbAgent.SelectedIndex = 0;
            }
            if (cmbPaymentNum.Items.Count > 0)
            {
                cmbPaymentNum.SelectedIndex = 0;
            }
        }

        private void LoadAgentAll()
        {
            List<Company> compList = _presenter.GetAgentAll();
            cmbAgent.DisplayMember = "CompanyName";
            cmbAgent.ValueMember = "CompanyId";
            cmbAgent.DataSource = compList.ToArray();
            cmbAgent.Refresh();

            if (cmbAgent.Items.Count > 0)
            {
                cmbAgent.SelectedIndex = 0;
            }
        }

        private void ResetSearchByReceiptIdControl()
        {
            txtReceiptId.ResetText();
        }

        #endregion

        private void txtReceiptId_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnReceiptSearch.Focus();
            }
        }

    

    }
}

