//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Reporting.WinForms;
using System.Collections.Generic;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class ResultView : UserControl, IResultView
    {
        public ResultView()
        {
            InitializeComponent();
            //rdlcViewer.LocalReport.SubreportProcessing += new SubreportProcessingEventHandler(LocalReport_SubreportProcessing);
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #region IResultView Members

        public void ShowReport(string reportName, ReportDataSource dataSource, ReportParameter[] rParam)
        {
            rdlcViewer.Reset();
            rdlcViewer.ProcessingMode = Microsoft.Reporting.WinForms.ProcessingMode.Local;
            rdlcViewer.LocalReport.ReportEmbeddedResource = reportName;
            rdlcViewer.LocalReport.DataSources.Add(dataSource);
            if (rParam != null)
            {
                rdlcViewer.LocalReport.SetParameters(rParam);
            }            
            rdlcViewer.RefreshReport();
        }

        public void ShowReport(string reportName, ReportDataSource dataSource)
        {
            rdlcViewer.Reset();
            rdlcViewer.ProcessingMode = Microsoft.Reporting.WinForms.ProcessingMode.Local;
            rdlcViewer.LocalReport.ReportEmbeddedResource = reportName;
            rdlcViewer.LocalReport.DataSources.Add(dataSource);
            rdlcViewer.RefreshReport();
        }

        public void ResetReport()
        {
            rdlcViewer.Reset();
            rdlcViewer.Refresh();
        }

        #endregion


        //private void LocalReport_SubreportProcessing(object sender, SubreportProcessingEventArgs e)
        //{
        //    try
        //    {
        //        string controllerId = e.Parameters[0].Values[0].Trim();

        //        List<CAC05Report> report = (List<CAC05Report>)rdlcViewer.LocalReport.DataSources[0].Value;
        //        //int index = report.BinarySearch(new CAC01Report(branchId), new CAC01Report.BranchIdComparer());
        //        //List<CAC01Detail> detail = report[index].Detail;

        //        for (int i = 0; i < report.Count; i++)
        //        {
        //            if (report[i].ControllerId.Trim() == controllerId)
        //            {
        //                List<CAC05Report> newreport = new List<CAC05Report>();
        //                newreport.Add(report[i]);
        //                e.DataSources.Add(new ReportDataSource("PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC05Report", newreport));
        //                break;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString());
        //    }
        //}

        //private void LocalReport_SubreportProcessing(object sender, SubreportProcessingEventArgs e)
        //{
        //    try
        //    {
        //        string branchId = e.Parameters[0].Values[0];

        //        List<CAC01Report> report = (List<CAC01Report>)rdlcViewer.LocalReport.DataSources[0].Value;
        //        int index = report.BinarySearch(new CAC01Report(branchId), new CAC01Report.BranchIdComparer());
        //        List<CAC01Detail> detail = report[index].Detail;
        //        e.DataSources.Add(new ReportDataSource("PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC01Detail", detail));

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString());
        //    }
        //    //e.DataSources.Add(new ReportDataSource("PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC01Detail", books));

        //    //// Author id is passed to the subreport as a parameter.
        //    //int authorId = int.Parse(e.Parameters[0].Values[0]);

        //    //// Search for the author using the supplied id.
        //    //// We can use binary search since we know authors collection is sorted by id.
        //    //int index = m_authors.BinarySearch(new Author(authorId), new AuthorIdComparer());
        //    //Debug.Assert(index >= 0);

        //    //// Get the list of books by this author.
        //    //List<Book> books = m_authors[index].Books;

        //    //// Supply data for the subreport.
        //    //e.DataSources.Add(new ReportDataSource("AuthorBooks_Book", books));
        //}

        #region IResultView Members


      

        #endregion
    }
}

