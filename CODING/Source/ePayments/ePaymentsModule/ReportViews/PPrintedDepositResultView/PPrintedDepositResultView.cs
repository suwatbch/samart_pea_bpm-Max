//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Utilities;
using PEA.BPM.Architecture.PrintUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.ReceiptPrinting;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using System.Globalization;
using System.Data;
using System.IO;
using System.Text;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class PPrintedDepositResultView : UserControl, IPPrintedDepositResultView
    {

        #region Global Variable

        private List<PPrintedDeposit> clearifiedList;
        private List<PPrintedDeposit> pPrintedParamList;
        private List<PPrintedDeposit> pPrintedList;
        private CultureInfo ci = new CultureInfo("th-TH");

        #endregion

        #region Constructure

        public PPrintedDepositResultView()
        {
            InitializeComponent();
            DepositGV.AutoGenerateColumns = false;
        }

        #endregion

        #region System Init

        [CreateNew]
        public PPrintedDepositResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            clearifiedList = new List<PPrintedDeposit>();
            pPrintedParamList = new List<PPrintedDeposit>();
            pPrintedList = new List<PPrintedDeposit>();
        }

        #endregion

        #region Member of IPPrintedDepositResultView

        public void SetClerifiedSearchResult(List<PPrintedDeposit> param)
        {
            try
            {
                clearifiedList = param;
                BindingClerifiedData();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public void ResetClerifiedList()
        {
            clearifiedList.Clear();
            BindingClerifiedData();
        }

        #endregion

        #region Custom Function

        private void SetFormatInvoiceNo(ref List<PPrintedDeposit> tmpList, bool presentFormat)
        {
            foreach (PPrintedDeposit tmp in tmpList)
            {
                if (presentFormat)
                {
                    if (tmp.InvoiceNo.Trim().Length == 16)
                    {
                        tmp.InvoiceNo = tmp.InvoiceNo.Substring(4, 12);
                    }
                }
                else
                {
                    if (tmp.InvoiceNo.Trim().Length == 12)
                    {
                        tmp.InvoiceNo = tmp.InvoiceNo.PadLeft(16, '0');
                    }
                }
            }
        }

        private void BindingClerifiedData()
        {
            chkAll.Checked = false;
            SelectAllGridView(false);
            SetFormatInvoiceNo(ref clearifiedList, true);
            DepositGV.DataSource = clearifiedList.ToArray();
            DepositGV.Refresh();
        }

       

        private void GetClearifiedDeposit()
        {
            pPrintedParamList = new List<PPrintedDeposit>();
            for (int i = 0; i<DepositGV.Rows.Count; i++)
            {
                object val = DepositGV.Rows[i].Cells["CheckboxGV"].Value;
                if (val != null)
                {
                    if ((bool)val)
                    {
                        PPrintedDeposit tmpData = (PPrintedDeposit)DepositGV.Rows[i].DataBoundItem;
                        tmpData.BranchId = Session.Branch.Id;
                        pPrintedParamList.Add(tmpData);
                    }
                }
            }
        }

        private void BindingCaPrePrintedValue(bool isCaDeposit)
        {
            DateTime previousPayDate = DateTime.MinValue;
            DateTime previousTranfDate = DateTime.MinValue;
            try
            {
                foreach (PPrintedDeposit prePrinted in pPrintedList)
                {
                    string paymentDate = Convert.ToDateTime(prePrinted.PayDt).ToString("d/M/yyyy", ci);
                    prePrinted.UploadDetail = Convert.ToDateTime(prePrinted.UploadDt).ToString("dd/MM/yyyy", ci);
                    prePrinted.DepositName = "ใบรับฝากเงิน";
                    prePrinted.DepositDt = paymentDate.Split('/')[0].Trim();
                    prePrinted.DepositMonth = CommonUtilities.GetThaiMonth(Convert.ToInt32(paymentDate.Split('/')[1].Trim()));
                    prePrinted.DepositYear = paymentDate.Split('/')[2].Trim();
                    prePrinted.StrAmount = StringConvert.ConvertAmountToText(prePrinted.GAmount.Value.ToString("0.00").Trim());

                    if (!isCaDeposit)
                    {
                        prePrinted.DepositDetail = "ค่าไฟฟ้าจำนวน " + prePrinted.DebtAmount.Value.ToString("#,###,##0.00") + " บาท";
                    }

                    PrintDeposit(prePrinted, isCaDeposit);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void PrintDeposit(PPrintedDeposit prePrinted, bool isCaDeposit)
        {
            try
            {
                Preview p = new Preview();
                /*Print receipt form through printer*/
                p.SetDepositDatasource(prePrinted);
                if (isCaDeposit)
                {
                    p.PrintCaDepositReport();
                }
                else
                {
                    p.PrintAgentDepositReport();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void SelectAllGridView(bool setValue)
        {
            foreach (DataGridViewRow r in DepositGV.Rows)
            {
                this.DepositGV["CheckboxGV", r.Index].Value = setValue;
            }
        }

        #endregion

        #region Event Handler

        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                ResetClerifiedList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                GetClearifiedDeposit();
                SetFormatInvoiceNo(ref pPrintedParamList, false);
                if (pPrintedParamList.Count > 0)
                {
                    if (pPrintedParamList[0].FixedType == "2")
                    {
                        pPrintedList = _presenter.GetCADepositPPrinted(pPrintedParamList);
                        BindingCaPrePrintedValue(true);
                    }
                    else
                    {
                        pPrintedList = _presenter.GetAgentDepositPPrinted(pPrintedParamList);
                        BindingCaPrePrintedValue(false);
                    }

                }
                else
                {
                    MessageBox.Show("กรุณาเลือกรายการพิมพ์ใบรับฝากเงิน ก่อนกดปุ่มพิมพ์", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void chkAll_CheckedChanged(object sender, EventArgs e)
        {
            if (chkAll.Checked)
            {
                SelectAllGridView(true);
            }
            else
            {
                SelectAllGridView(false);
            }
        }

        #endregion

     
    }
}

