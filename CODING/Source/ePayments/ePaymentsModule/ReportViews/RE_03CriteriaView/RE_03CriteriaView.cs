//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.Reports;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Utilities;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class RE_03CriteriaView : UserControl, IRE_03CriteriaView
    {
        public RE_03CriteriaView()
        {
            InitializeComponent();
        }

        public List<AccountClassInfo> AccountClassList
        {
            set
            {
                List<AccountClassInfo> acList = value;
                if (acList.Count > 0)
                {
                    ddlAccountClass.DisplayMember = "DisplayName";
                    ddlAccountClass.DataSource = acList;
                }
            }
        }


        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public RE_03CriteriaViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            loadAccountClassList();
            txtPeriod.Text = CommonUtilities.GetPeriod(DateTime.Now);
        }

        private void btnReport_Click(object sender, EventArgs e)
        {
            if (IsValid())
            {
                RE03ParamInfo param = new RE03ParamInfo();
                param.AccountClassId = ((AccountClassInfo)ddlAccountClass.SelectedItem).AccountClassId;
                param.PayDt = DateFormatter.PeriodToDateTime(txtPeriod.Text.Trim());
                param.RunningBranchId = Session.Branch.Id;
                _presenter.OnRE_03Report(param);
            }
        }
            
        private void clearData()
        {                       
            ddlAccountClass.SelectedIndex = 0;
            txtPeriod.Text = CommonUtilities.GetPeriod(DateTime.Now);
        }

        private void loadAccountClassList()
        {
            _presenter.LoadAccountClassList(PEA.BPM.ePaymentsModule.Interface.BusinessEntities.Reports.ReportName.RE_03);
        }

        private bool IsValid()
        {
            if (txtPeriod.Text.Trim().Length == 1)
            {
                MessageBox.Show("กรุณาระบุเดือนที่รับชำระสำหรับออกรายงาน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else if ( txtPeriod.Text.Trim().Length != 7)
            {
                MessageBox.Show("เดือนที่รับชำระมีรูปแบบไม่ถูกต้อง", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else if (txtPeriod.Text.Substring(3, 4).Trim().CompareTo("2500") < 0)
            {
                MessageBox.Show("ปีของเดือนที่รับชำระ ต้องมากกว่า 2500", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else if(DateFormatter.PeriodToDateTime(txtPeriod.Text.Trim()) == null)
            {
                 MessageBox.Show("เดือน/ปีที่ระบุไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 txtPeriod.Clear();
                 return false;
            }
            return true;
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            clearData();
        }

        private void txtPeriod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnReport.Focus();
            }
        }
       
    }
}

