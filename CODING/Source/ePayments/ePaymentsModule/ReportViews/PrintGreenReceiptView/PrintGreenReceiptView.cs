//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.PrintUtilities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities;
using PEA.BPM.ePaymentsModule.Interface.BusinessEntities.ReceiptPrinting;
using PEA.BPM.ePaymentsModule.Interface.Constants;
using System.Data;
using System.IO;
using System.Text;

namespace PEA.BPM.ePaymentsModule
{
    [SmartPart]
    public partial class PrintGreenReceiptView : UserControl, IPrintGreenReceiptView
    {

        #region Global Variable

        private ReceiptConditionParam receiptConParam;

        #endregion

        #region Set Initial

        public PrintGreenReceiptView()
        {
            InitializeComponent();
        }

        [CreateNew]
        public PrintGreenReceiptViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #endregion

        #region Event Handler

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            receiptConParam = new ReceiptConditionParam();
            BindingCompanyList();
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                if (CompanyValidation())
                {
                    AssignReceiptCriteria(false);
                    PrintReceipt();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        #region Receipt Printing

        private void BindingCompanyList()
        {
            try
            {
               List<Company> compList =  _presenter.GetCompany(cmbUploadDate.Value.Date);
               ddlAgent.DisplayMember = "DisplayName";
               ddlAgent.DataSource = compList;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private bool CompanyValidation()
        {
            bool result = true;
            if (ddlAgent.Items.Count == 0)
            {
                MessageBox.Show("กรุณาเลือกข้อมูลตัวแทนก่อนการพิมพ์ใบเสร็จรับเงิน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                ddlAgent.Focus();
                result = false;
            }
            return result;
        }

        private void AssignReceiptCriteria(bool isReceipt)
        {
            try
            {
                if (isReceipt)
                {
                    receiptConParam.ReceiptId = txtReceiptId.Text.Trim();
                    receiptConParam.BeginCaId = null;
                    receiptConParam.EndCaId = null;
                    receiptConParam.UploadDt = null;
                }
                else
                {
                    receiptConParam.ReceiptId = null;
                    receiptConParam.BeginCaId = txtCaIdBegin.Text.Trim() == "" ? null : txtCaIdBegin.Text.Trim();
                    receiptConParam.EndCaId = txtCaIdEnd.Text.Trim() == "" ? null : txtCaIdEnd.Text.Trim();
                    receiptConParam.UploadDt = cmbUploadDate.Value.Date;
                    receiptConParam.CompanyId = ((Company)ddlAgent.SelectedItem).CompanyId == "0000" ? null : ((Company)ddlAgent.SelectedItem).CompanyId;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void PrintReceipt()
        {
            StreamWriter sw = null;
            //string fullPath = @"d:\GreenReceiptResult.txt";
            try
            {
                List<Bills> billList = _presenter.GetGreenBill(receiptConParam);
                if (billList.Count > 0)
                {

                    //if (File.Exists(fullPath))
                    //    sw = new StreamWriter(fullPath, true, Encoding.Default);
                    //else
                    //    sw = new StreamWriter(fullPath, false, Encoding.Default);

                    foreach (Bills tmpBill in billList)
                    {
                        //sw.Write(tmpBill.BillTxt);
                        RawPrinterHelper.SendStringToPrinter(GetPrinterName(), tmpBill.BillTxt);
                    }

                    MessageBox.Show("ระบบพร้อมพิมพ์ใบเสร็จรับเงิน กรุณาตรวจสอบเครื่องพิมพ์สำหรับพิมพ์ใบเสร็จ", "ผลการทำงาน", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("ไม่พบข้อมูลใบเสร็จรับเงิน ตามเงื่อนไขที่กำหนด", "ผลการทำงาน", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private string GetPrinterName()
        {
            string printerName = "";
            LocalSettingHelper hp = LocalSettingHelper.Instance();

            if (hp.Read(LocalSettingNames.GreenBillPrinterName) != null)
            {
                printerName = hp.Read(LocalSettingNames.GreenBillPrinterName).ToString();
            }

            return printerName;
        }

        #endregion

        private void btnClear_Click(object sender, EventArgs e)
        {
            try
            {
                ResetControl(false);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnClearReceipt_Click(object sender, EventArgs e)
        {
            try
            {
                ResetControl(true);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #region Custom Function

        private void ResetControl(bool isReceipt)
        {
            if (isReceipt)
            {
                txtReceiptId.ResetText();
            }
            else
            {
                txtCaIdBegin.ResetText();
                txtCaIdEnd.ResetText();
                cmbUploadDate.Value = DateTime.Now;
                if (ddlAgent.Items.Count > 0)
                {
                    ddlAgent.SelectedIndex = 0;
                }
            }
        }

        private bool ValidateControl(bool isReceipt)
        {
            bool result = true;
            if (isReceipt)
            {
                if (txtReceiptId.Text.Trim() == "")
                {
                    result = false;
                    MessageBox.Show("กรุณาป้อนข้อมูลเลขที่ใบเสร็จรับเงิน ก่อนกดปุ่มพิมพ์", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            return result;
        }

        #endregion

        private void btnReceiptPrint_Click(object sender, EventArgs e)
        {
            try
            {
                if (ValidateControl(true))
                {
                    AssignReceiptCriteria(true);
                    PrintReceipt();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtCaIdBegin_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtCaIdEnd.Focus();
            }
        }

        private void txtCaIdEnd_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cmbUploadDate.Focus();
            }
        }

        private void cmbUploadDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnPrint.Focus();
            }
        }

        private void txtReceiptId_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnReceiptPrint.Focus();
            }
        }

        private void cmbUploadDate_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                BindingCompanyList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

       

    }
}

