//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.Data;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class NewPaymentItemView : UserControl, INewPaymentItemView
    {
        private bool _isOffLine = false;
        private bool _isElectricOtherBranch;
        private string _branchId;
        private string _ctId;
        private string _name;
        private string _address;
        private string _caTaxId;
        private string _caTaxBranch;
        private string _techBranchName;
        private string _commBranchId;
        private string _commBranchName;
        private string _controllerId;
        private string _controllerName;
        private string _mruId;
        private System.Drawing.Color maskedTxtboxColor = System.Drawing.SystemColors.Control;

        public NewPaymentItemView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public NewPaymentItemViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        public bool IsElectricOtherBranch
        {
            set
            {
                this._isElectricOtherBranch = value;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            //CheckOffline();

            customerIdMaskedTextBox.Text = "";
            nameMaskedTextBox.Text = "";
            caTaxIdMaskedTextBox.Text = "";
            caTaxBranchMaskedTextBox.Text = "";
            addressMaskedTextBox.Text = "";
            IvIdMaskedTextBox.Text = "";
            descriptionMaskedTextBox.Text = "";
            qtyMaskedTextBox.Text = "";
            totalExcludeVatLabel.Text = "";
            amountMaskedTextBox.Text = "";

            onlineStatusLabel.Text = "ระบบทำงานใน Mode Offline กรุณากรอกข้อมูล ชื่อ-ที่อยู่เอง";
            onlineStatusLabel.Visible = false;

            if (debtTypeComboBox.Items.Count > 0)
            {
                debtTypeComboBox.SelectedIndex = 0;
            }
            if (unitTypeComboBox.Items.Count > 0)
            {
                unitTypeComboBox.SelectedIndex = 0;
            }
            if (vatRateComboBox.Items.Count > 0)
            {
                vatRateComboBox.SelectedIndex = 0;
            }
            debtTypeComboBox.DataSource = new List<DebtType>();
            customerIdMaskedTextBox.Focus();
            dueDateTimePicker.Value = DateTime.Now.Date;


            if (Session.IsNetworkConnectionAvailable)
            {
                _isOffLine = false;
                onlineStatusLabel.Visible = false;
                SetMaskedTxtboxToReadOnly(true);
                IvIdMaskedTextBox.Enabled = false;
            }
            else
            {
                _isOffLine = true;
                onlineStatusLabel.Visible = true;
                SetMaskedTxtboxToReadOnly(false);
                IvIdMaskedTextBox.Enabled = true;
            }

        }

        #region +++ Command Handler +++
        private void okButton_Click(object sender, EventArgs e)
        {
            if (!ValidateForm()) { return; }

            List<Invoice> invoices = new List<Invoice>();
            Invoice inv = new Invoice();

            Bill b = new Bill();
            b.CustomerId = customerIdMaskedTextBox.Text.Trim().Replace(" ","").ToUpper();
            b.Name = _name;
            b.CaTaxId = _caTaxId;
            b.CaTaxBranch = _caTaxBranch;
            b.Address = _address;
            DebtType debtType = (DebtType)debtTypeComboBox.SelectedItem;
            b.DebtId = debtType.DebtId;
            b.DebtType = debtType.DebtName;
            b.Description = descriptionMaskedTextBox.Text.Trim();
            b.Qty = StringConvert.ToDecimal(qtyMaskedTextBox.Text);
            b.FullQty = b.Qty;
            if (unitTypeComboBox.SelectedIndex > 0)
            {
                UnitType unitType = (UnitType)unitTypeComboBox.SelectedItem;
                b.UnitTypeId = unitType.Id;
                b.UnitTypeName = unitType.Name;
            }

            TaxCode taxCode = (TaxCode)vatRateComboBox.SelectedItem;
            b.TaxCode = taxCode.Code;
            b.TaxRate = taxCode.Rate;
            
            b.GAmount = Convert.ToDecimal(amountMaskedTextBox.Text.Trim());
            b.FullGAmount = b.GAmount;

            if (null != b.TaxRate)
            {
                b.VatAmount = StringConvert.ToDecimal(taxLabel.Text.Trim().Replace("(", "").Replace(")", ""));
                b.FullVatAmount = b.VatAmount;
                b.AmountExVat = b.GAmount - b.VatAmount;
                b.FullAmount = b.AmountExVat;
            }
            else
            {
                b.AmountExVat = b.GAmount;
                b.FullAmount = b.AmountExVat;
            }

            if (b.Qty != null && b.Qty != 0)
            {
                b.UnitPrice = b.AmountExVat / b.Qty;
            }

            b.ToPayQty = b.Qty;
            b.ToPayGAmount = b.GAmount;
            b.ToPayVatAmount = b.VatAmount;


            if (_isOffLine)
            {
                b.DataState = BillDataStage.Offline;
                inv.DataState = InvoiceDataStage.Offline;
            }
            else
            {
                b.DataState = BillDataStage.NewItem;
                inv.DataState = InvoiceDataStage.NewItem;
            }

            inv.InvoiceNo = StringConvert.ToString(IvIdMaskedTextBox.Text);
            if (dueDateTimePicker.Enabled)
            {
                b.DueDate = dueDateTimePicker.Value;
                inv.DueDate = dueDateTimePicker.Value;
            }            
            inv.BranchId = _branchId;
            inv.TechBranchName = _techBranchName;
            inv.CommBranchId = _commBranchId;
            inv.CommBranchName = _commBranchName;
            inv.CaId = b.CustomerId;
            inv.Name = nameMaskedTextBox.Text.Trim();
            inv.CaTaxId = caTaxIdMaskedTextBox.Text.Trim();
            inv.CaTaxBranch = caTaxBranchMaskedTextBox.Text.Trim();
            inv.Address = addressMaskedTextBox.Text.Trim();
            inv.DueDate = b.DueDate;
            inv.ControllerId = _controllerId;
            inv.ControllerName = _controllerName;
            inv.MruId = _mruId;
            inv.AmountExVat = b.AmountExVat;
            inv.VatAmount = b.VatAmount;
            inv.GAmount = b.GAmount;
            inv.Qty = b.Qty;
            inv.PaidVatAmount = 0;
            inv.PaidGAmount = 0;
            inv.PaidQty = 0;
            inv.ToPayVatAmount = inv.ToBePaidVatAmount;
            inv.ToPayGAmount = inv.ToBePaidGAmount;            
            inv.ToPayQty = inv.ToBePaidQty;
            inv.Bills = new List<Bill>();
            inv.Bills.Add(b);      
  
            // DCR 67-020 Set flag new item by user. (เป็นการตั้งหนี้ ไม่ต้องทำการปรับปรุงหนี้ จากการค้นหาซ้ำ) 
            inv.InvoiceFromLoal = true;
            invoices.Add(inv);

            _presenter.InvoicesAddedToList(invoices);
            this.ParentForm.Close();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            SearchCustomer();
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchCustomer();
            }
        }

        private void amountMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            CalculateTax();
        }

        private void debtTypeComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                if (!_isOffLine)
                    descriptionMaskedTextBox.Focus();
                else
                    IvIdMaskedTextBox.Focus();
            }
        }

        private void IvIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                descriptionMaskedTextBox.Focus();
            }
        }

        private void descriptionMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                qtyMaskedTextBox.Focus();
            }
        }

        private void qtyMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                unitTypeComboBox.Focus();
            }
        }

        private void amountMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13){ okButton.Focus(); }
            amountMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        public Button CancelButton
        {
            get { return cancelButton; }
        }

        private void vatRateComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            CalculateTax();
        }

        private void addressMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                debtTypeComboBox.Focus();
            }
        }

        private void vatRateComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                amountMaskedTextBox.Focus();
            }
        }

        private void unitTypeComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                vatRateComboBox.Focus();
            }
        }

        private void debtTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (debtTypeComboBox.SelectedIndex > 0)
            {
                List<DebtType> dt = (List<DebtType>)debtTypeComboBox.DataSource;

                string dtId = debtTypeComboBox.SelectedValue.ToString();
                string taxCode = dt.Find(delegate(DebtType d) { return d.DebtId == dtId; }).DefaultTaxCode;
                string selectedCtId = dt.Find(delegate(DebtType d) { return d.DebtId == dtId; }).CategoryPaymentCode;
                bool isFalse = true;

                if (Session.IsNetworkConnectionAvailable)
                {
                    if (selectedCtId != null)
                    {
                        foreach (string ctId in selectedCtId.Split(','))
                        {
                            if (ctId == _ctId)
                            {
                                isFalse = false;
                            }
                        }
                    }
                    else if (selectedCtId == null)
                    {
                        if (selectedCtId == null && _ctId == null)
                        {
                            isFalse = false;
                        }
                    }
                }
                else
                {
                    isFalse = false;
                }

                if (CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.BailDebt.Id).Contains(dtId))
                {
                    if (CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ExceptioalBailDebt.Id).Contains(dtId))
                    {
                        dueDateTimePicker.Value = DateTime.MaxValue.Date.AddYears(-7000);
                        dueDateTimePicker.Enabled = false;
                    }
                    else
                    {
                        dueDateTimePicker.Value = DateTime.Now.Date;
                        dueDateTimePicker.Enabled = true;
                    }
                }
                else
                {
                    dueDateTimePicker.Enabled = false;
                    dueDateTimePicker.Value = DateTime.Now.Date;
                }

                if (isFalse == true)
                {
                    MessageBox.Show("ประเภทหนี้ที่ต้องการเลือกไม่สามารถใช้หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้ดังกล่าวรับชำระเงินได้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    debtTypeComboBox.SelectedIndex = 0;
                    vatRateComboBox.SelectedIndex = 0;
                    return;
                }
                if (taxCode != null)
                {
                    vatRateComboBox.SelectedValue = taxCode;
                }
            }
            else
            {
                dueDateTimePicker.Enabled = false;
            }
        }

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }

        private void debtTypeComboBox_Click(object sender, EventArgs e)
        {
            if (debtTypeComboBox.Items.Count == 0)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                customerIdMaskedTextBox.Focus();
            }
        }

        private void unitTypeComboBox_Click(object sender, EventArgs e)
        {
            if (unitTypeComboBox.Items.Count == 0 && customerIdMaskedTextBox.Text.Trim().Length != 0)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                customerIdMaskedTextBox.Focus();
            }
        }
        #endregion

        #region +++ Custom Function +++
        private bool ValidateForm()
        {
            customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.Trim();
            nameMaskedTextBox.Text = nameMaskedTextBox.Text.Trim();
            caTaxIdMaskedTextBox.Text = caTaxIdMaskedTextBox.Text.Trim();
            caTaxBranchMaskedTextBox.Text = caTaxBranchMaskedTextBox.Text.Trim();
            addressMaskedTextBox.Text = addressMaskedTextBox.Text.Trim();
            amountMaskedTextBox.Text = amountMaskedTextBox.Text.Trim();
            IvIdMaskedTextBox.Text = IvIdMaskedTextBox.Text.Trim();
            descriptionMaskedTextBox.Text = descriptionMaskedTextBox.Text.Trim();
            qtyMaskedTextBox.Text = qtyMaskedTextBox.Text.Trim();


            if (Session.IsNetworkConnectionAvailable)
            {
                try
                {
                    Customer customer = _presenter.GetCustomerDetail(customerIdMaskedTextBox.Text);

                    if (customer == null)
                    {
                        MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    return false;
                }
            }

            //201807171028 Kanokwan.L Defect#120 ยกเลิกการดักตั้งหนี้ < 0.13 แต่เปิดให้เฉพาะ Z0000 ตั้งหนี้ได้เท่านั้น
            string[] branchArray;
            List<string> branchList = new List<string>();
            string[] dtArray;
            List<string> dtList =new List<string>();

            if (CodeTable.Instant.GetAppSettingValue("NEWPAYMENT_BRANCH_012ALLOWED") != null)
            {
                branchArray = CodeTable.Instant.GetAppSettingValue("NEWPAYMENT_BRANCH_012ALLOWED").Split(',');
                branchList = new List<string>(branchArray.Length);
                branchList.AddRange(branchArray);
                branchList.Reverse();
            }
            if (CodeTable.Instant.GetAppSettingValue("NEWPAYMENT_DEPTTYPE_012ALLOWED") != null)
            {
                dtArray = CodeTable.Instant.GetAppSettingValue("NEWPAYMENT_DEPTTYPE_012ALLOWED").Split(',');
                dtList = new List<string>(dtArray.Length);
                dtList.AddRange(dtArray);
                dtList.Reverse();
            }

            if (customerIdMaskedTextBox.Text == "")
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                customerIdMaskedTextBox.Focus();
                return false;
            }
            else if (customerIdMaskedTextBox.Text.Length != 12)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้ให้ครบ 12 หลัก", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                customerIdMaskedTextBox.Focus();
                return false;
            }
            else if (nameMaskedTextBox.Text == "")
            {
                MessageBox.Show("กรุณาใส่ชื่อ", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                nameMaskedTextBox.Focus();
                return false;
            }
            /*
            else if (caTaxIdMaskedTextBox.Text == "")
            {
                MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษี 13 หลัก", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxIdMaskedTextBox.Focus();
                return false;
            }
            */ 
            else if (caTaxIdMaskedTextBox.Text.Trim() != "" && caTaxIdMaskedTextBox.Text.Trim().Length < 13)
            {
                MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษีให้ครบ 13 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxIdMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxBranchMaskedTextBox.Text.Trim() != "" && caTaxBranchMaskedTextBox.Text.Trim().Length < 4)
            {
                MessageBox.Show("กรุณาใส่สาขา 4 หรือ 5 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxBranchMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxIdMaskedTextBox.Text.Trim() == "" && caTaxBranchMaskedTextBox.Text.Trim() != "")
            {
                MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษี 13 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxIdMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxBranchMaskedTextBox.Text.Trim() == "" && caTaxIdMaskedTextBox.Text.Trim() != "")
            {
                MessageBox.Show("กรุณาใส่สาขา", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxBranchMaskedTextBox.Focus();
                return false;
            }
            else if (addressMaskedTextBox.Text == "")
            {
                addressMaskedTextBox.Text = addressMaskedTextBox.Text.Trim();
                MessageBox.Show("กรุณาใส่ที่อยู่", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                addressMaskedTextBox.Focus();
                return false;
            }
            else if (debtTypeComboBox.SelectedIndex == 0)
            {
                MessageBox.Show("กรุณาเลือกประเภทหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            else if (amountMaskedTextBox.Text == "")
            {
                MessageBox.Show("กรุณาใส่จำนวนเงินรวมทั้งสิ้น", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                amountMaskedTextBox.Focus();
                return false;
            }
            else if (StringConvert.ToDecimal(amountMaskedTextBox.Text.Trim()) <= StringConvert.ToDecimal("0.12"))
            {
                //201802211138 Kanokwan.L Defect#53 ดักเงื่อนไขต้องชำระมากกว่า 0.12
                //201804051541 Kanokwan.L Defect#86 ต้องให้เงินรับฝาก (Pay on Account)(dtid=M00900010) สามารถตั้งหนี้ <0.13 ได้
                //201807171028 Kanokwan.L Defect#120 ยกเลิกการดักตั้งหนี้ < 0.13 แต่เปิดให้เฉพาะ Z0000 ตั้งหนี้ได้เท่านั้น
                if (branchList.Count == 0)
                {
                    //NEWPAYMENT_BRANCH_012ALLOWED
                    //กรณีที่ไม่ได้ระบุ Branch ที่อนุญาตให้ตั้งหนี้ < 0.13 บาท
                }
                else
                {
                    //กรณีที่ระบุ Branch จะอนุญาตให้รับเฉพาะ Branch ที่ระบุใน Config เท่านั้น
                    if (!branchList.Contains(Session.Branch.Id))
                    {
                        MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        amountMaskedTextBox.Focus();
                        return false;
                    }
                }


                if (dtList.Count==0)
                {
                    //NEWPAYMENT_DEPTTYPE_012ALLOWED
                    //กรณีที่ไม่ได้ระบุ Debttype ที่อนุญาตให้ตั้งหนี้ < 0.13 บาท
                }
                else
                {
                    //กรณีที่ระบุ DebtType จะไม่อนุญาตให้รับเฉพาะ DebtType ที่ระบุใน Config 
                    if (!dtList.Contains(debtTypeComboBox.SelectedValue.ToString()))
                    {
                        MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        amountMaskedTextBox.Focus();
                        return false;
                    }
                }


            }
            return true;
        }

        private void CheckOffline()
        {
            try
            {
                Customer customoer = _presenter.GetCustomerDetail("");
                _isOffLine = false;
                IvIdMaskedTextBox.Enabled = false;
            }
            catch
            {
                _isOffLine = true;
                IvIdMaskedTextBox.Enabled = true;
            }
        }

        private void LoadComboBox()
        {
            List<DebtType> debtTypes = new List<DebtType>(CodeTable.Instant.ListDebtTypes());
            if (debtTypes.Count > 0)
            {
                debtTypes.Sort(delegate(DebtType d1, DebtType d2) { return d1.DebtName.CompareTo(d2.DebtName); });

                // Not include debts that have own input form
                int noOfRemovedDebt = debtTypes.RemoveAll(
                    delegate(DebtType dt)
                    {
                        return dt.DebtId.IndexOf(CodeNames.DebtType.Electric.Id) > -1
                            || dt.DebtId == CodeNames.DebtType.ReConnectMeter.Id
                            || dt.DebtId == CodeNames.DebtType.Interest.Id
                            || dt.DebtId == CodeNames.DebtType.AgencyAdvancePayment.Id
                            || dt.DebtId == CodeNames.DebtType.APPayment.Id;
                    }
                );

                if (_isOffLine == false)
                {
                    debtTypes.RemoveAll(delegate(DebtType dt) { return dt.NonInvoicePaymentFlag != "1"; });

                    if (_ctId == null)
                    {
                        debtTypes.RemoveAll(delegate(DebtType dt) { return dt.CategoryPaymentCode != null || dt.DebtId.IndexOf("MY") > -1 ; });
                    }
                    else
                    {
                        debtTypes.RemoveAll(delegate(DebtType dt) { return dt.CategoryPaymentCode == null || dt.DebtId.IndexOf("MZ") > -1 ; });
                        debtTypes.RemoveAll(delegate(DebtType dt) { return dt.CategoryPaymentCode.IndexOf(_ctId) == -1; });
                    }                    
                }
                debtTypes.Insert(0, new DebtType("", "- - - - - - - - - - - - - กรุณาเลือกประเภทหนี้ที่ต้องการ - - - - - - - - - - - - -", "", "", "", "", "", "", "", ""));
                debtTypeComboBox.ValueMember = "DebtId";
                debtTypeComboBox.DisplayMember = "DebtName";
                debtTypeComboBox.DataSource = debtTypes;
            }
                        
            List<TaxCode> taxCodes = CodeTable.Instant.ListTaxCode().FindAll( delegate(TaxCode tc){return tc.Name.IndexOf("ขาย") > -1;} );
            if (taxCodes.Count > 0)
            {
                taxCodes.Sort(delegate(TaxCode t1, TaxCode t2) { return t1.Name.CompareTo(t2.Name); });
                vatRateComboBox.DisplayMember = "Name";
                vatRateComboBox.ValueMember = "Code";
                vatRateComboBox.DataSource = taxCodes;
            }

            List<UnitType> unitTypes = new List<UnitType>(CodeTable.Instant.ListUnitType());
            if (unitTypes.Count > 0)
            {
                unitTypes = unitTypes.FindAll(delegate(UnitType u) { return u.Name != null; });
                unitTypes.Sort(delegate(UnitType u1, UnitType u2) { return u1.Name.CompareTo(u2.Name); });
                unitTypes.Insert(0, new UnitType("", ""));
                unitTypeComboBox.DisplayMember = "Name";
                unitTypeComboBox.ValueMember = "Id";
                unitTypeComboBox.DataSource = unitTypes;
            }

            unitTypeComboBox.SelectedIndex = 0;
            vatRateComboBox.SelectedIndex = 0;

            if (_isElectricOtherBranch == true)
            {
                debtTypeComboBox.SelectedValue = CodeNames.DebtType.OtherBranchElectric.Id;
                unitTypeComboBox.SelectedValue = CodeNames.UnitType.KWH.Id;
                vatRateComboBox.SelectedValue = CodeNames.TaxCode.DS.TaxCode;
            }
        }

        private void SetTxtBoxForDummy()
        {
            string id = customerIdMaskedTextBox.Text.Trim();
            if (id.Length >= 6)
            {
                if (id.Substring(0, 6).ToUpper() == Session.Branch.Id.ToUpper())
                {
                    SetMaskedTxtboxToReadOnly(false);
                    nameMaskedTextBox.Focus();
                    nameMaskedTextBox.SelectAll();
                }
                else if (!_isOffLine)//if online mode
                    SetMaskedTxtboxToReadOnly(true);
            }
            else if (!_isOffLine)//if online mode
                SetMaskedTxtboxToReadOnly(true);

        }

        private void SetMaskedTxtboxToReadOnly(bool setStatus)
        {
            if (setStatus)
            {
                nameMaskedTextBox.ReadOnly = true;
                caTaxIdMaskedTextBox.ReadOnly = true;
                caTaxBranchMaskedTextBox.ReadOnly = true;
                addressMaskedTextBox.ReadOnly = true;
                //nameMaskedTextBox.BackColor = addressMaskedTextBox.BackColor = maskedTxtboxColor;
                nameMaskedTextBox.BackColor = maskedTxtboxColor;
                caTaxIdMaskedTextBox.BackColor = maskedTxtboxColor;
                caTaxBranchMaskedTextBox.BackColor = maskedTxtboxColor;
                addressMaskedTextBox.BackColor = maskedTxtboxColor;
            }
            else
            {
                nameMaskedTextBox.ReadOnly = false;
                caTaxIdMaskedTextBox.ReadOnly = false;
                caTaxBranchMaskedTextBox.ReadOnly = false;
                addressMaskedTextBox.ReadOnly = false;
                //nameMaskedTextBox.BackColor = addressMaskedTextBox.BackColor = addressMaskedTextBox.BackColor = System.Drawing.Color.White;
                nameMaskedTextBox.BackColor = System.Drawing.Color.White;
                caTaxIdMaskedTextBox.BackColor = System.Drawing.Color.White;
                caTaxBranchMaskedTextBox.BackColor = System.Drawing.Color.White;
                addressMaskedTextBox.BackColor = System.Drawing.Color.White;
            }
        }

        private void SearchCustomer()
        {
            customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.Trim().Replace(" ","").ToUpper();
            string id = customerIdMaskedTextBox.Text;

            if (id == string.Empty)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/รหัสลูกหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else if (id.Length < 12)
            {
                id = id.PadLeft(12, '0');
                customerIdMaskedTextBox.Text = id;
            }

            //เพิ่มขั้นตอนการเช็ค digit ของบาร์โค๊ดแถวข้าง
            if (id.Length >= 13 && id.Length <= 14)
            {
                if (!CheckDigit_New(customerIdMaskedTextBox.Text.Trim()))
                {
                    MessageBox.Show("รูปแบบบาร์โค้ดไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    customerIdMaskedTextBox.SelectAll();
                    return;
                }
                else
                {
                    customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.Trim().Substring(0, 12);
                    id = customerIdMaskedTextBox.Text.Trim();
                }
            }

            if (Session.IsNetworkConnectionAvailable)
            {
                try
                {
                    this.Cursor = Cursors.WaitCursor;
                    Customer customer = _presenter.GetCustomerDetail(id);
                    this.Cursor = Cursors.Default;

                    if (customer!=null)
                    {
                        _name = customer.Name;
                        _address = customer.Address;
                        _caTaxId = customer.CaTaxId;
                        _caTaxBranch = customer.CaTaxBranch;
                        nameMaskedTextBox.Text = customer.Name;
                        caTaxIdMaskedTextBox.Text = customer.CaTaxId;
                        caTaxBranchMaskedTextBox.Text = customer.CaTaxBranch;
                        addressMaskedTextBox.Text = customer.Address;
                        _branchId = customer.BranchId;
                        _ctId = customer.CtId;
                        _techBranchName = customer.TechBranchName;
                        _commBranchId = customer.CommBranchId;
                        _commBranchName = customer.CommBranchName;
                        _controllerId = customer.ControllerId;
                        _controllerName = customer.ControllerName;
                        _mruId = customer.MruId;

                        if (debtTypeComboBox.Enabled)
                        {
                            debtTypeComboBox.Focus();
                        }
                        else
                        {
                            IvIdMaskedTextBox.Focus();
                        }

                        //if (customer.CustomerId.IndexOf('Z') > -1)
                        //{
                            //EnableDummyMode();
                        //}
                        SetMaskedTxtboxToReadOnly(false);

                        LoadComboBox();
                    }
                    else
                    {
                        nameMaskedTextBox.Text = "";
                        caTaxIdMaskedTextBox.Text = "";
                        caTaxBranchMaskedTextBox.Text = "";
                        addressMaskedTextBox.Text = "";
                        customerIdMaskedTextBox.Focus();
                        customerIdMaskedTextBox.SelectAll();
                        MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }                   
                }
                catch
                {
                    this.Cursor = Cursors.Default;
                    EnableOfflineMode();
                    LoadComboBox();
                }
            }
            else
            {
                EnableOfflineMode();
                nameMaskedTextBox.Focus();
                LoadComboBox();
                GetCaOffline(id);
            }
        }

        private void EnableOfflineMode()
        {
            onlineStatusLabel.Visible = true;
            SetMaskedTxtboxToReadOnly(false);
            nameMaskedTextBox.SelectAll();
            _isOffLine = true;
            
        }

        //Offline by User ,Begin
        private void GetCaOffline(string caid)
        {
            List<ContractAccountOffline> cao = CaOffline.Instant.ListContractAccountOffline(caid);

            if (cao.Count > 0)
            {
                nameMaskedTextBox.Text = cao[0].CaName;
                caTaxIdMaskedTextBox.Text = cao[0].CaTaxId;
                caTaxBranchMaskedTextBox.Text = cao[0].CaTaxBranch;
                addressMaskedTextBox.Text = cao[0].CaAddress;
            }
            else
            {
                MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }
        //Offline by User ,End
        private void EnableDummyMode()
        {
            SetMaskedTxtboxToReadOnly(false);
            nameMaskedTextBox.SelectAll();
        }

        private void CalculateTax()
        {
            if (amountMaskedTextBox.Text.Trim().Length > 0)
            {
                try
                {                    
                    decimal? taxRate = ((TaxCode)vatRateComboBox.SelectedItem).Rate;
                    decimal amount = Convert.ToDecimal(amountMaskedTextBox.Text);

                    if (null == taxRate)
                    {
                        totalExcludeVatLabel.Text = amount.ToString("#,##0.00");
                        taxLabel.Text = "(-)";
                    }
                    else
                    {
                        decimal baseAmount = amount / (1 + (taxRate.Value / 100));
                        decimal taxAmount = amount - baseAmount;

                        totalExcludeVatLabel.Text = baseAmount.ToString("#,##0.00");
                        taxLabel.Text = string.Format("({0})", taxAmount.ToString("#,##0.00"));
                    }
                }
                catch (Exception) // TODO: จะไม่ทำอะไรจริงๆ เหรอ ?
                {
                }
            }
        }
        #endregion        

        private void customerIdMaskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }

        private void nameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                caTaxIdMaskedTextBox.Focus();
            }
        }

        private void caTaxIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8) e.Handled = true;

            if (e.KeyChar == (char)13)
            {
                caTaxBranchMaskedTextBox.Focus();
            }
            caTaxIdMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void caTaxBranchMaskedTextBox_TextChanged(object sender, EventArgs e)
        {

        }

        private void caTaxBranchMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8) e.Handled = true; 

            if (e.KeyChar == (char)13)
            {
                addressMaskedTextBox.Focus();
            }
            caTaxBranchMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        private void dueDateTimePicker_ValueChanged(object sender, EventArgs e)
        {

        }

        //Standard Barcode of Bank Thailand
        private bool CheckDigit_New(string Barcode)
        {
            int? totalValue = 0;
            int? modValue = 0;
            int? iniValue = 0;
            int? lastValue = 0;
            string result = "";
            int[] arrayConstantList = { 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                      };

            try
            {
                for (int i = 0; i < Barcode.Length - 2; i++)
                {

                    iniValue = StringConvert.ToInt32(Barcode.Substring(i, 1));

                    modValue = iniValue * arrayConstantList[i];

                    if (modValue.Value.ToString().Length == 1)
                    {
                        totalValue += modValue.Value;
                    }
                    else
                    {
                        totalValue += (StringConvert.ToInt32(modValue.Value.ToString().Substring(0, 1)) + StringConvert.ToInt32(modValue.Value.ToString().Substring(1, 1)));
                    }
                }

                lastValue = (totalValue * 11) % 100;

                result = (lastValue < 10) ? "0" + lastValue.Value.ToString() : lastValue.Value.ToString();

                if (result.Substring(0, 1) == Barcode.Substring((Barcode.Length - 2), 1)
                        && result.Substring(1, 1) == Barcode.Substring((Barcode.Length - 1), 1))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }




    }
}

