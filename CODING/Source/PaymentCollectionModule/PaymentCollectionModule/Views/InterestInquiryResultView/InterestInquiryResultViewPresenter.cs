//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.PaymentCollectionModule.Views.InterestInquiryResultView;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using System.Windows.Forms;

namespace PEA.BPM.PaymentCollectionModule
{
    public class InterestInquiryResultViewPresenter : Presenter<IInterestInquiryResultView>
    {   
		private IBillingService _billingService;

		[InjectionConstructor]
        public InterestInquiryResultViewPresenter([ServiceDependency] IBillingService billingService)
		{
            _billingService = billingService;
		}

        private DateTime? GetTargetDateTime()
        {
            DateTime? dt = null;

            using (TargetDateSelectionForm td = new TargetDateSelectionForm())
            {
                if (td.ShowDialog() == DialogResult.OK)
                {
                    dt = td.SelectedDate.Date;
                }
            }

            return dt;
        }

        [EventSubscription(EventTopicNames.InvoiceSearchedByCustomerId, Thread = ThreadOption.UserInterface)]
        public void InvoiceSearchedByCustomerIdHandler(object sender, EventArgs<CustomerSearchParam> e)
        {
            try
            {
                DateTime? dt = GetTargetDateTime();

                if (dt != null)
                {
                    WaitingFormHelper.ShowWaitingForm();
                    e.Data.ToPayDate = dt;
                    List<Invoice> invoices = _billingService.SearchInvoiceByCustomerId(e.Data);
                    WaitingFormHelper.HideWaitingForm();

                    if (invoices.Count > 0)
                    {
                        View.SetTargetDate(dt.Value);
                        View.AddInvoices(invoices);
                    }
                    else
                    {
                        MessageBox.Show("ไม่พบรายการหนี้ค้างชำระ", "ข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
            {
                WaitingFormHelper.HideWaitingForm();
                Logger.WriteError(Logger.Module.POS, "ค้นหาข้อมูลหนี้จาก CaId", ex.ToString());

                //MessageBox.Show("ไม่สามารถติดต่อกับฐานข้อมูลได้ โปรดติดต่อผู้ดูแลระบบ\nหรือใช้วิธีการรับชำระเงินในกรณีเครือข่ายมีปัญหาแทน", "ข้อผิดพลาด",
                //    MessageBoxButtons.OK, MessageBoxIcon.Error);

                //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                MessageBox.Show("ไม่สามารถติดต่อกับฐานข้อมูลได้ โปรดติดต่อผู้ดูแลระบบ\nหรือใช้วิธีการรับชำระเงินใน Mode Offline แทน", "ข้อผิดพลาด",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

