//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.Data;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using System.ComponentModel;
using PEA.BPM.PaymentCollectionModule.Views;
using PEA.BPM.PaymentCollectionModule.Views.PaymentMethodSelectionView;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using System.Text.RegularExpressions;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using System.IO;
using System.Runtime.Serialization;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.Runtime.Serialization.Formatters.Binary;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Views.ToBePaidInvoiceView;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class PaymentMethodSelectionView : UserControl, IPaymentMethodSelectionView
    {
        private ScreenType _screenType;
        private List<Invoice> _payingInvoices;
        private List<PaymentMethod> _paymentMethods;
        private decimal _totalAmount = 0;
        private decimal _change = 0;
        private string _paidInvoiceNo = "";
        bool isSaveTextFile = false;
        bool isSaveDatabase = false;
        private ValidatePaymentActive vpa = new ValidatePaymentActive();

        /// <summary>
        /// ถ้าเป็นบวก หมายถึง เงินทอนมากกว่า 12 สตางค์ แล้วปัดขึ้นเป็น 25
        /// </summary>
        private decimal _adjChange = 0;

        public PaymentMethodSelectionView()
        {
            InitializeComponent();
            paymentDataGridView.AutoGenerateColumns = false;

        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PaymentMethodSelectionViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;                
            }
        }

        public bool IsGroupInvoicing 
        {
            get{
                if (_payingInvoices.Count == 1)
                {
                    if (_payingInvoices[0].Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id)
                        return true;
                    else
                        return false;
                }
                else return false;
            }
        }

        public Button CancelButton
        {
            get { return cancelAllButton; }
        }

        public List<Invoice> PayingInvoices
        {
            set { _payingInvoices = value; }
        }


        public List<PaymentMethod> PaymentMethods
        {
            set{ _paymentMethods = value; }         
        }

        protected override void OnLoad(EventArgs e)
        {
            okButton.Enabled = true;
            _presenter.OnViewReady();
            LoadBank();
            LoadAccountNo();
            LoadPaymentSequence();
            _presenter.CheckQRPaymentEnableByBranchId();  // DCR : QR Payment

            if (!addEditButton.Visible)                   // DCR : QR Payment  กรณีเลือกประเภทการชำระเงินในตาราง ถ้าเป็น QR payment ให้ซ่อน
            {
                addEditButton.Visible = true;
                cancelButton.Visible = true;
            }
           
        }

        public void ResetForm()
        {

            _paymentMethods = new List<PaymentMethod>();
            paymentDataGridView.DataSource = new BindingList<PaymentMethod>(_paymentMethods);

            totalPaymentTextBox.Text = string.Empty;

            LoadPaymentAmount();
            LoadFeeVisible();
            paymentTypeTabControl.SelectedIndex = 0;
            ClearControls();
                       

            receiptNoTextBox.Text = string.Empty;
            receiptDateDateTimePicker.Value = Session.BpmDateTime.Now.Date;

            defaultPaperRadioButton.Checked = true;

            _screenType = (ScreenType)_presenter.WorkItem.State["ScreenType"];
            if (_screenType == ScreenType.BillBook)
            {
                foreach (Invoice iv in _payingInvoices)
                {
                    if (iv.DataState == InvoiceDataStage.Invoice || iv.DebtType == "เงินล่วงหน้า 30% ของตัวแทน")
                    {
                        LoadAGPayment();

                        if (paymentTypeTabControl.TabPages[1].Text == "เช็ค")
                        {
                            paymentTypeTabControl.TabPages.Remove(paymentTypeTabControl.TabPages[1]);
                        }
                    }
                }

                receiptGroupBox.Visible = false;

            }

            // Number of transaction to be paid
            label14.Text = string.Format("จำนวนเงินที่ต้องชำระ ({0})", _payingInvoices.Count);

            // DCR : QR Payment
            // Export text file payment 
            this.SaveTextFilePaymentForSmartScreen();
        }


        #region +++ Load Data +++

        private void LoadFeeVisible()
        {
            cashFeeText.Clear();
            cashFeeText.Enabled = false;
            cashFeeCheckBox.Enabled = false;

            chequeFeeText.Clear();
            chequeFeeText.Enabled = false;
            chequeFeeCheckBox.Enabled = false;

            payInFeeText.Clear();
            payInFeeText.Enabled = false;
            payInFeeCheckBox.Enabled = false;
            
            if (_payingInvoices.Count != 0)
            {
                foreach (Invoice inv in _payingInvoices)
                {
                    foreach (Bill b in inv.Bills)
                    {
                        if (b.DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id)
                        {
                            cashFeeCheckBox.Enabled = true;
                            chequeFeeCheckBox.Enabled = true;
                            payInFeeCheckBox.Enabled = true;
                            return;
                        }
                    }
                }
            }            
        }

        private void LoadPaymentAmount()
        {
            decimal totalPayment = 0;

            foreach (Invoice inv in _payingInvoices)
            {
                totalPayment += inv.ToPayGAmount.Value;
            }

            _totalAmount = totalPayment;

            totalPaymentTextBox.Text = _totalAmount.ToString("#,##0.00");
            leftAmountTextBox.Text = _totalAmount.ToString("#,##0.00");
            paidAmountTextBox.Text = "0.00";
            changeAmountTextBox.Text = "0.00";
        }

        private void LoadBank()
        {
            Deposit b = new Deposit("", "", "", "", "", "", "", "");
            List<Deposit> deposit = new List<Deposit>(CodeTable.Instant.ListDepositsByBusinessPlace(Session.Branch.Id.Substring(0, 4)));
            List<Deposit> banks = new List<Deposit>();

            foreach (Deposit d in deposit)
            {
                if (!banks.Exists(delegate(Deposit dd)
                    {
                        return dd.BankName == d.BankName;
                    }
                        ))
                    {
                        banks.Add(d);
                    }
            }

            banks.Insert(0,b);            
            banks.Sort(delegate(Deposit b1, Deposit b2) { return b1.BankName.CompareTo(b2.BankName); });
            depositBankComboBox.DisplayMember = "BankName";
            depositBankComboBox.ValueMember = "BankKey";
            depositBankComboBox.DataSource = banks;
        }

        private void LoadAccountNo()
        {
            Deposit ba = new Deposit("", "", "", "", "", "", "", "");
            List<Deposit> bankAccounts = new List<Deposit>(CodeTable.Instant.ListDepositByBusinessPlace(Session.Branch.Id.Substring(0, 4)));
            //bankAccounts.Insert(0, ba);           
            //bankAccounts.Sort(delegate(Deposit ba1, Deposit ba2) { return ba1.AccountNo.CompareTo(ba2.AccountNo); });
            bankAccounts.Sort(delegate(Deposit ba1, Deposit ba2) { return ba2.AccountType.CompareTo(ba1.AccountType); });
            bankAccounts.Insert(0, ba);
            depositBankAccNoComboBox.DisplayMember = "AccountNoDesc";
            depositBankAccNoComboBox.ValueMember = "AccountNo";
            depositBankAccNoComboBox.DataSource = bankAccounts;
        }

        private void LoadPaymentSequence()
        {
            if (_payingInvoices.Count > 0)
            {
                foreach (Invoice inv in _payingInvoices)
                {
                    inv.PaymentSequence = GetPaymentSequence(inv.Bills[0].DebtId);
                    
                }
            }

            // ก่อน DCR : รวมใบเสร็จแผนผ่อน
            _payingInvoices.Sort(new ObjectComparer<Invoice>("PaymentSequence ASC, GroupInvoiceReceiptType DESC, RowNum ASC", true));

            // DCR : รวมใบเสร็จแผนผ่อน ต้องทำการ Sorting ด้วย DueDate เพิ่ม --> ให้กับไปใช้ concept เดิม
            //_payingInvoices.Sort(new ObjectComparer<Invoice>("PaymentSequence ASC, DueDate ASC ,GroupInvoiceReceiptType DESC, RowNum ASC", true));

        }

        private string GetPaymentSequence(string dtId)
        {
            List<PaymentSequence> paymentSequence = new List<PaymentSequence>(CodeTable.Instant.ListPaymentSequence());

            paymentSequence.Sort(delegate(PaymentSequence ps1, PaymentSequence ps2) { return ps1.Sequence.CompareTo(ps2.Sequence); });

            PaymentSequence ps = paymentSequence.Find(delegate(PaymentSequence p)
                                    {
                                        return p.DtId.IndexOf(dtId) != -1;
                                    }
                                );

            if (ps != null)
            {
                return ps.Sequence;
            }
            else
            {
                return Convert.ToString(StringConvert.ToInt32(paymentSequence[paymentSequence.Count - 1].Sequence) + 1);
            }
        }

        private void depositBankComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (depositBankComboBox.Text != "")
            {
                Deposit ba = new Deposit("", "", "", "", "", "", "", "");
                List<Deposit> bankAccounts = new List<Deposit>(CodeTable.Instant.ListDepositByBankKey(Session.Branch.Id.Substring(0, 4), ((Deposit)depositBankComboBox.SelectedItem).BankKey));
                //string accountNo = (depositBankAccNoComboBox.SelectedValue == null) || (depositBankAccNoComboBox.SelectedValue.ToString() == "") ? "" : depositBankAccNoComboBox.SelectedValue.ToString();
                //bankAccounts.Insert(0, ba);
                //bankAccounts.Sort(delegate(Deposit ba1, Deposit ba2) { return ba1.AccountNo.CompareTo(ba2.AccountNo); });
                bankAccounts.Sort(delegate(Deposit ba1, Deposit ba2) { return ba2.AccountType.CompareTo(ba1.AccountType); });
                bankAccounts.Insert(0, ba);
                depositBankAccNoComboBox.DisplayMember = "AccountNoDesc";
                depositBankAccNoComboBox.ValueMember = "AccountNo";
                depositBankAccNoComboBox.DataSource = bankAccounts;
                //if (depositBankAccNoComboBox.Items.Count > 1 && accountNo != "")
                //{
                //    depositBankAccNoComboBox.SelectedValue = accountNo;
                //}
                //else
                //{
                //    depositBankAccNoComboBox.SelectedIndex = 1;
                //}
                if (depositBankAccNoComboBox.Items.Count > 1)
                {
                    depositBankAccNoComboBox.SelectedIndex = 1;
                }
            }
            else
            {
                LoadBank();
            }
        }

        private void depositBankAccNoComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (depositBankAccNoComboBox.Text != "")
            {
                depositBankComboBox.SelectedValue = ((Deposit)depositBankAccNoComboBox.SelectedItem).BankKey;
            }
            else
            {
                LoadAccountNo();                
            }
        }

        private void SetBankDataSource(ComboBox bankComboBox, Bank bank, bool isDeposit)
        {
            if (isDeposit == true)
            {
                depositBankComboBox.SelectedValue = bank.BankKey;
                if (depositBankAccNoComboBox.Items.Count > 1)
                {
                    depositBankAccNoComboBox.SelectedIndex = 1;
                }
            }
            else
            {
                List<Bank> b = new List<Bank>();
                b.Add(bank);
                chequeBankComboBox.DisplayMember = "BankName";
                chequeBankComboBox.ValueMember = "BankName";
                chequeBankComboBox.DataSource = b;
            }
        }

        private void LoadAGPayment()
        {
            string billBookId = "";

            foreach (Invoice iv in _payingInvoices)
            {
                if (iv.BillBookId != null && iv.BillBookId != "")
                {
                    billBookId += ",'" + iv.BillBookId + "'";
                }            
            }

            if (billBookId.Length>0)
            {
                _paymentMethods = _presenter.SearchAGPayment(billBookId.Substring(1));
                Random rand = new Random();
                foreach (PaymentMethod pm in _paymentMethods)
                {
                    pm.UiRefId = rand.Next();
                }

                paymentDataGridView.DataSource = new BindingList<PaymentMethod>(_paymentMethods);

                if (_paymentMethods.Count > 0)
                {
                    for (int i = 0; i < _paymentMethods.Count; i++)
                    {
                        _paymentMethods[i].PtName = CodeNames.PaymentType.Cheque.Name;
                        _paymentMethods[i].IsAGPayment = true;
                    }

                    for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                    {
                        PaymentMethod pm = (PaymentMethod)paymentDataGridView.Rows[i].DataBoundItem;
                        if(pm.IsAGPayment.Value)
                        {
                            paymentDataGridView.Rows[i].Cells["deleteButton"].Value = null;
                            paymentDataGridView.Rows[i].Cells["deleteButton"].ErrorText = "X";
                        }
                    }

                    CalculateTotalAmount();
                }
            }    
        }

        #endregion

        #region +++ Command Handler +++

        private void addEditButton_Click(object sender, EventArgs e)
        {
            if (!ValidateForm()) { return; }

            paymentDataGridView.Enabled = false;

            switch (paymentTypeTabControl.SelectedTab.Text.Trim())
            {
                case "เงินสด":                    
                    if (validateCashPayment(addEditButton.Text))
                    {
                        _paymentMethods.Add(GetCashPayment());
                    }
                    cashAmountTextBox.Text = "";
                    cashFeeText.Text = "";
                    break;
                case "เช็ค":
                    //if (!validateAgency("1")) { return; }
                    if (validateChequePayment(addEditButton.Text))
                    {
                        _paymentMethods.Add(GetChequePayment());
                    }
                    chequeActualAmountTextBox.Text = "";
                    chequeBankComboBox.DataSource = null;                    
                    chequeNoTextBox.Text = "";
                    chequeBankAccNoTextBox.Text = "";
                    chequeDateDateTimePicker.Value = DateTime.Today.Date; //By Nick
                    chequeFeeText.Text = "";
                    break;
                case "ใบนำฝาก":
                    //if (!validateAgency("2")) { return; }
                    if (validateDepositPayment(addEditButton.Text))
                    {
                        _paymentMethods.Add(GetDepositPayment());
                    }
                    depositActualAmountTextBox.Text = "";
                    depositBankComboBox.SelectedIndex = depositBankComboBox.FindString("");
                    depositBankAccNoComboBox.SelectedIndex = depositBankAccNoComboBox.FindString("");       
                    depositDateDateTimePicker.Value = DateTime.Today.Date; //By Nick
                    payInFeeText.Text = "";
                    break;
                case "QR Payment":
                    if (validateQRPayment(addEditButton.Text))
                    {
                        _paymentMethods.Add(GetQRPayment());
                    }
                    qrCodeAmountTextBoxDecimal.Text = "";
                    break;
                default:
                    break;
            }

            paymentDataGridView.Enabled = true;
            paymentDataGridView.DataSource = new BindingList<PaymentMethod>(_paymentMethods);

            if (addEditButton.Text == "บันทึก")
            {
                addEditButton.Text = "เพิ่ม";
            }
 
            CalculateTotalAmount();
            AssignPaymentMethodToInvoices(false);
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            if (Session.IsNetworkConnectionAvailable)
            {
                vpa.ValidatePaymentActiveFromOffline();
                vpa.ValidatePaymentActiveFromOnline(_presenter._billingService);
                vpa.CheckReceiptRunning(true);
            }
            else
            {
                vpa.ValidatePaymentActiveFromOffline();
                vpa.CheckReceiptRunning(false);
            }

            okButton.Enabled = false;

            if (!ValidateWorkStatus())
            {
                Application.Exit();
                return;
            }

            // Check cashier work status
            if (!ValidateCloseWorkOfCashier())
            {
                okButton.Enabled = true;
                return;
            }

            //// รวมใบเสร็จแผนผ่อน 2021-10-07 Check ใบเสร็จรวม Enable Status from ta.AppSetting
            if (Session.IsNetworkConnectionAvailable)
                Session.IsGroupReceiptEnable = CheckSettingGroupReceiptEnableStatus();
            else
                Session.IsGroupReceiptEnable = "0";

            if (isQRPaymentOnly() && (Convert.ToDecimal(paidAmountTextBox.Text.Trim()) ) < Convert.ToDecimal(totalPaymentTextBox.Text.Trim()))
            {
                MessageBox.Show("จำนวนเงินที่จ่ายต้องไม่น้อยกว่าจำนวนเงินที่ต้องชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                okButton.Enabled = true;
                return;
            }

            if ((Convert.ToDecimal(paidAmountTextBox.Text.Trim()) + Convert.ToDecimal(CodeNames.AcceptableRoundUp)) < Convert.ToDecimal(totalPaymentTextBox.Text.Trim()))
            {
                MessageBox.Show("จำนวนเงินที่จ่ายต้องไม่น้อยกว่าจำนวนเงินที่ต้องชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                okButton.Enabled = true;
                return;
            }

            if (_change > 1000)
            {
                MessageBox.Show("จำนวนเงินทอนต้องไม่มากกว่า 1000 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                okButton.Enabled = true;
                return;
            }

            ExternalReceipt extReceipt = new ExternalReceipt();

            if (receiptNoTextBox.Text.Trim() != string.Empty)
            {
                if (Session.IsNetworkConnectionAvailable == false)
                {
                    //MessageBox.Show("เครือข่ายมีปัญหาไม่สามารถรับชำระเงินได้ (Offline)  \n\nกรุณาลองใหม่อีกครั้งเมื่อเครือข่ายกลับมาเป็นปรกติ", "ข้อผิดพลาด", 
                    //    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                    MessageBox.Show("ระบบไม่สามารถติดต่อกับเครื่องแม่ข่ายได้  \n\nกรุณาลองใหม่อีกครั้ง", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    okButton.Enabled = true;
                    return;
                }

                if (receiptNoTextBox.Text.Trim().Length > 16)
                {
                    MessageBox.Show("ระบบรองรับเลขที่ใบเสร็จภายนอกได้ความยาวไม่เกิน 16 ตัวอักษร\nโปรดป้อนเลขที่ใหม่ให้ถูกต้อง", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    receiptNoTextBox.SelectAll();
                    receiptNoTextBox.Focus();
                    okButton.Enabled = true;
                    return;
                }
                else if (receiptDateDateTimePicker.Value.Date > Session.BpmDateTime.Now.Date)
                {
                    MessageBox.Show("วันที่ใบเสร็จรับเงินที่ป้อนไม่ถูกต้อง วันที่ต้องเป็นวันที่ผ่านมาหรือวันที่ปัจจุบัน", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    receiptDateDateTimePicker.Focus();
                    okButton.Enabled = true;
                    return;
                }
                else if (CheckDuplicateExtReceipt(receiptNoTextBox.Text.Trim()) == true)
                {
                    MessageBox.Show("เลขที่ใบเสร็จรับเงินที่ระบุไว้มีซ้ำอยู่ในระบบแล้ว  กรุณาตรวจสอบเลขที่ใบเสร็จใหม่", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    receiptNoTextBox.SelectAll();
                    receiptNoTextBox.Focus();
                    okButton.Enabled = true;
                    return;
                }
                else
                {
                    extReceipt = new ExternalReceipt(receiptNoTextBox.Text.Trim(), receiptDateDateTimePicker.Value.Date);
                }
            }

            if (_paymentMethods.Count > 0)
            {
                try
                {
                    AssignPaymentMethodToInvoices(true);

                    SummarizeCash();

                    try
                    {
                        // Check .Dat Setting 
                        string pcValidatePay = CodeTable.Instant.GetAppSettingValue("PC_Validate_Payment");
                        if (pcValidatePay.Trim() == "1") 
                        { 
                        
                            // 2024-02-08 ตรวจสอบข้อมูล PaymentType ถูกนำไปตัดชำระให้กับหนี้หรือไม่ 
                            foreach (var pm in _paymentMethods)
                            {
                                //pm.ToPayInvoices.Clear(); 
                                if (pm.ToPayInvoices == null || pm.ToPayInvoices.Count == 0)
                                {
                                    MessageBox.Show("พบข้อผิดพลาดในการรับชำระเงิน กรุณาทำรายการใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                    return;
                                }
                            }

                            // 2024-02-08 ยอดหนี้ที่จะชำระ ARPayment.  ตรงกับยอดใน RT Gamount 
                            foreach (var payInvoice in _payingInvoices)
                            {
                                decimal sumPayMethod = payInvoice.PaymentMethods.Sum(c => c.Amount);
                                if ((payInvoice.ToPayGAmount + payInvoice.ToPayAdjAmount) > sumPayMethod)
                                {
                                    MessageBox.Show("พบข้อผิดพลาดในการรับชำระเงิน กรุณาทำรายการใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                    return;
                                }
                            }
                        }

                    }
                    catch (Exception)
                    {
                    }


                    //// Check adjust amount that calculate at the partial payment invoice
                    //if (!CheckAdjustAmountForPartialPayment())
                    //{
                    //    MessageBox.Show("มีรายการที่จ่ายบางส่วนจำนวนเงิน " + _payingInvoices[_payingInvoices.Count - 1].ToPayGAmount.Value.ToString("#,##0.00") + " บ. ปัดเศษไม่ลงตัว   กรุณาระบุจำนวนเงินใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //    this.ParentForm.Close();
                    //    okButton.Enabled = true;
                    //    return;
                    //}


                    // Check InActive Billbook
                    if (CheckInActiveBillBook())
                    {
                        MessageBox.Show("รายการ Group Invoice ที่ต้องการรับเงินมีการยกเลิกรายการดังกล่าวแล้ว  กรุณาทำการค้นหาเลขที่ มท. ใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        this.ParentForm.Close();
                        okButton.Enabled = true;
                        return;
                    }

                    // Check already paid invoice
                    if (CheckPaidGAmount())
                    {
                        MessageBox.Show("มีรายการที่ถูกชำระเงินแล้ว  กรุณาทำการค้นหาหนี้ใหม่อีกครั้ง", "ข้อผิดพลาด",  MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        this.ParentForm.Close();
                        okButton.Enabled = true;
                        return;
                    }


                    string ret = HaveDepositReceipt();
                    if (ret == "1")
                    {
                        MessageBox.Show("กรณีที่รับเงินแบบเจ้าหนี้จะไม่สามารถรับเงินด้วยเช็คหรือใบนำฝากเกินจำนวนหนี้ที่ต้องชำระได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        okButton.Enabled = true;
                        return;

                        //if (MessageBox.Show("จำนวนเงินที่ชำระเกินยอดหนี้ที่ต้องชำระมา  ระบบจะนำเงินส่วนเกินเข้าใบรับฝาก ต้องการหรือไม่?", "แจ้งเตือน",
                        //    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        //{
                        //    okButton.Enabled = true;
                        //    return;
                        //}   
                    }
                    else if (ret == "2")
                    {
                        if (MessageBox.Show("จำนวนเงินที่ชำระเกินยอดหนี้ที่ต้องชำระมา  ระบบจะนำเงินส่วนเกินเข้าใบรับฝาก ต้องการหรือไม่?", "แจ้งเตือน",
                            MessageBoxButtons.YesNo, MessageBoxIcon.Question , MessageBoxDefaultButton.Button2) == DialogResult.No)
                        {
                            okButton.Enabled = true;
                            return;
                        }
                    }

                    // DCR 67-020 ตรวจสอบการชำระเงิน payment chqueue and deposit ยอดชำระน้อยกว่ามูลค่าหนี้ที่ต้องชำระ <= .12.
                    if (HaveChqOrDepositNotenough())
                    {
                        if (MessageBox.Show("ยอดเงินที่ชำระน้อยกว่าหนี้ น้อยกว่า 13 สตางค์ ต้องการรับชำระหรือไม่ ?", "ยืนยันการชำระเงิน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                        {
                            okButton.Enabled = true;    
                            return;
                        }
                    }

                    // DCR : QR Payment
                    this.SaveTextFilePaymentForSmartScreen();

                    // 20230310 QR Payment
                    PaymentMethod _pmQR = HaveQRPayment();
                    if (_pmQR != null)
                    { 
                        // 20231229 Call method save qr payment bill info.
                        this.SaveQRPaymentBillInfo();

                        // Rest api for payment QR 
                        _presenter.OnQRPaymentMethodClicked(_pmQR);

                        // Bank name ใช้เก็บ Referencse no ของการตัดชำระ QR Payment. 
                        if (_pmQR != null && string.IsNullOrEmpty(_pmQR.GroupBankName))
                        {
                            MessageBox.Show("ไม่สามารถตัดชำระ QR Payment กับทางธนาคารได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            okButton.Enabled = true;
                            return;
                        }
                    }

                    // Check Deposit Receipt for Cheque & BankTransfer
                    CheckDepositReceipt();


                    // Check Offline status
                    if (!CheckOffline())
                    {
                        //MessageBox.Show("เครือข่ายมีปัญหาไม่สามารถรับชำระเงินได้ (Offline)  \n\nกรุณาลองใหม่อีกครั้งเมื่อเครือข่ายกลับมาเป็นปรกติ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                        MessageBox.Show("ระบบไม่สามารถติดต่อกับเครื่องแม่ข่ายได้  \n\nกรุณาลองใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        okButton.Enabled = true;
                        return;
                    }

                    


                    DateTime paymentDate = Session.BpmDateTime.Now;
                    decimal paidAmount = Convert.ToDecimal(paidAmountTextBox.Text);
                    _presenter.WorkItem.State["PaymentMethods"] = _paymentMethods;

                    List<PaymentMethod> groupDividualPaymentMethod = new List<PaymentMethod>();
                    for (int i = 0; i < _paymentMethods.Count; i++)
                    {
                        groupDividualPaymentMethod.Add(new PaymentMethod(_paymentMethods[i]));
                    }
                    
                    for (int i = 0; i < _paymentMethods.Count; i++)
                    {
                        groupDividualPaymentMethod[i].ToPayInvoices = new List<InvoicePaymentMethod>();
                        for (int k = 0; k < _paymentMethods[i].ToPayInvoices.Count; k++)
                        {
                            groupDividualPaymentMethod[i].ToPayInvoices.Add(new InvoicePaymentMethod(_paymentMethods[i].ToPayInvoices[k]));                           
                        }                    
                    }

                    _presenter.WorkItem.State["GroupDividualPaymentMethods"] = groupDividualPaymentMethod;
                    _presenter.WorkItem.State["PaymentDate"] = paymentDate;
                    _presenter.WorkItem.State["PaidAmount"] = paidAmount;
                    _presenter.WorkItem.State["ExtReceipt"] = extReceipt;
                    _presenter.WorkItem.State["ToBePaidInvoices"] = new List<ToBePaidInvoice>();

                    // DCR : รวมใบเสร็จแผนผ่อน ก่อนทำการ implement.
                    _presenter.WorkItem.State["PaidInvoices"] = _payingInvoices;

                    // DCR : รวมใบเสร็จแผนผ่อน ทำการเรียงลำดับ เพื่อให้รอบรับใบเสร็จแผนผ่อน --> กลับไปใช้ concept เดิม
                    //var objPayingInvoices =(from t0 in _payingInvoices orderby t0.PaymentSequence ascending, t0.GroupInvoiceReceiptType descending, t0.DueDate ascending select t0).ToList();
                    //_presenter.WorkItem.State["PaidInvoices"] = objPayingInvoices;


                    if (defaultPaperRadioButton.Checked)
                    {
                        _presenter.OnPaymentMethodSaving(PrintingConstraint.PaperSize.Default);
                    }
                    else if (posSlipRadioButton.Checked)
                    {
                        _presenter.OnPaymentMethodSaving(PrintingConstraint.PaperSize.PosSlip);
                    }
                    else
                    {
                        _presenter.OnPaymentMethodSaving(PrintingConstraint.PaperSize.PrePrinted);
                    }



                    //Check duplicate receipt
                    if (CheckDuplicateReceipt((List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"]) == false
                        || CheckDuplicateReceipt((List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"]) == false)
                    {
                        MessageBox.Show("กรุณาทำการค้นหาหนี้ใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        this.ParentForm.Close();
                        return;
                    }

                    //Assign vat amount to PayingInvoices List for installment case
                    AssignVatAmountForInstallment();

                    //Save text file for report 2.17
                    SaveTextFileForReport();

                    //Save receipt id to IDSetting file
                    SaveIDSetting((IDSettingHelper)_presenter.WorkItem.State["IDSettingHelper"]);


                    bool flagOneTouch = true;
                    bool isOneTouch = false;

                    try
                    {
                        // DCR : รวมใบเสร็จแผนผ่อน sort เพิ่มเติมด้วย DueDate และ InvoiceNo
                        //var objPaying = (from t0 in _payingInvoices orderby t0.PaymentSequence, t0.DueDate ,t0.InvoiceNo select t0).ToList();

                        ResultPayInvoice  obj = _presenter.PayInvoice(
                                                _payingInvoices,
                                                _paymentMethods,
                                                (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"],
                                                (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"],
                                                extReceipt,
                                                paymentDate,
                                                Session.Terminal.Id,
                                                paidAmount,
                                                ((ScreenType)_presenter.WorkItem.State["ScreenType"] == ScreenType.BillBook) ? "BILLBOOK" : "");

                        isSaveDatabase = true;

                        _presenter.WorkItem.State["PaidInvoices"] = obj.PaidInvoices;

                        _presenter.WorkItem.State["PrintingReceipts"] = (obj.Receipts == null) ? _presenter.WorkItem.State["PrintingReceipts"] : obj.Receipts;

                        

                        foreach (Invoice inv in obj.PaidInvoices)
                        {
                            if (inv.DataState == InvoiceDataStage.NewItemOneTouch) //ถ้าเป็น Invoice one touch ให้ ตรวจสอบสถานะการ flag payment
                            {
                                isOneTouch = true;
                                flagOneTouch = obj.OneTouchFlag;
                            }

                        }
                        
                    }
                    catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
                    {
                        if (ex.Message.Contains("Insert Error on pc_ins_Receipt"))
                        {
                            RollBackLastRecord();
                        }
                        isSaveDatabase = false;
                        //RollBackTransactionFile();
                        //okButton.Enabled = true;
                        throw;
                    }

                    //Set PaymentActive = "1" for report 2.17
                    SetPaymentActive();

                    //RealTime-POS : Sync-UP
                    SyncUpForOtherBranchInvoice(_payingInvoices);

                    // Write QR Payment completed.
                    this.SavePaymentCompletedFormSmartScreen();

                    //Print Slip
                    _presenter.OnPrintingTypeSet();

                    _presenter.OnShowingChangeAmount(_change);

                    //ไว้ส่ง Payment กลับ
                    if (isOneTouch == true && flagOneTouch == false)
                    {
                        //MessageBox.Show("เกิดความผิดพลาดของเครือข่าย ระบบไม่สามารถติดต่อกับระบบบริการลูกค้าได้\n\nกรุณานำใบเสร็จไปติดต่อกับระบบบริการลูกค้า", "ข้อความเตือน",
                        //           MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);

                        //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                        MessageBox.Show("ระบบไม่สามารถติดต่อกับเครื่องแม่ข่ายได้\n\nกรุณานำใบเสร็จไปติดต่อกับระบบบริการลูกค้า", "ข้อความเตือน",
                                   MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                    }

                    this.ParentForm.Close();

                    

                }
                catch (Exception ex)
                {
                    //TODO: uncomment for offline in old date
                    if (_presenter.WorkItem.State["PosMachineGotOldDate"] != null && _presenter.WorkItem.State["PosMachineGotOldDate"].ToString() == "กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่")
                    {
                        MessageBox.Show(_presenter.WorkItem.State["PosMachineGotOldDate"].ToString(), "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        _presenter.WorkItem.State["PosMachineGotOldDate"] = null;
                    }
                    else
                    {
                        if (isSaveTextFile && isSaveDatabase)
                        {
                            ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                        }
                        else if (isSaveTextFile && !isSaveDatabase)
                        {
                            //Rollback data in text file
                            //RollBackTransactionFile();
                            ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                        }
                        else
                        {
                            ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                        }
                    }
                }
                finally
                {
                    _presenter.WorkItem.State["PrintingReceipts"] = null;
                    _presenter.WorkItem.State["GroupDividualPrintingReceipts"] = null;
                }
            }

        }

        private void SyncUpForOtherBranchInvoice(List<Invoice> payingInvoices)
        {
            try
            {

                if (!Session.Branch.OnlineConnection && Session.IsNetworkConnectionAvailable)
                {
                    Invoice iv = payingInvoices.Find(delegate(Invoice ivx)
                        {
                            return !String.IsNullOrEmpty(ivx.CommBranchId) && ivx.CommBranchId != Session.Branch.Id;
                        }
                    );

                    if (iv != null)
                    {
                        //MessageBox.Show("Call Sync-UP");
                        //Authorization.SignalSyncup(LocalSettingNames.DL080_UPLOAD_AR_BATCH);
                        Authorization.SignalSyncup(LocalSettingNames.DL090_UPLOAD_PAYMENT_BATCH);
                    }
                }
            }
            catch (Exception ex)
            { 
                //Now, system can not sync-up -> So wait for sync of batch.
            }
        }

        /// <summary>
        /// Haves the deposit receipt?
        /// ตรวจสอบว่า วิธีการชำระเงินที่เลือก มีเช็คหรือใบนำฝากที่จำนวนเงินเกินกว่าหนี้ที่ค้างชำระหรือไม่
        /// </summary>
        /// <returns></returns>
        private string HaveDepositReceipt()
        {
            // Find payment methods that is Cheque or BankTransfer
            List<PaymentMethod> pms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
                        {
                            return pm.PtId == CodeNames.PaymentType.Cheque.Id || pm.PtId == CodeNames.PaymentType.Deposit.Id ;
                        }
                    );

            Invoice iv = null;
            string ret = "3";
            bool isVendor = false;

            if (iv == null)
            {
                iv = new Invoice();
                Bill b = new Bill();

                Invoice ivMaster = _payingInvoices.Find(delegate(Invoice inv)
                {
                    return inv.RowNum == 1;
                }
                                    );
                Bill bMaster = ivMaster.Bills[0];
                if (bMaster.ContractTypeId == null)
                {
                    isVendor = true;
                }
            }

            foreach (PaymentMethod pm in pms)
            {
                decimal remainAmount = pm.TotalRemainAmount;

                if (remainAmount > 0)
                {
                    if (isVendor == true)
                    {
                        ret = "1";
                    }
                    else
                    {
                        ret = "2";
                }
            }
        }
            return ret;

            //ret: 1=ออกใบเสร็จรับฝากซึ่งไม่ได้เป็นการรับเงินแบบเจ้าหนี้
            //ret: 2=ชำระเงินด้วยเช็คหรือใบนำฝากและเป็นการรับเงินแบบเจ้าหนี้
            //ret: 3=ไม่มีการออกใบเสร็จรับฝาก
        }


        /// <summary>
        /// ตรวจสอบหากมีการชำระด้วย Chqueue Deposit  DCR 67-020
        /// </summary>
        /// <returns></returns>
        private bool HaveChqOrDepositNotenough()
        {
            //PtId	PtName
            //2	เช็ค
            //3	ใบนำฝาก
            decimal _balPaidAmount = 0; 

            // Find payment methods that is Cheque or BankTransfer
            List<PaymentMethod> pms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
                {
                    return pm.PtId == CodeNames.PaymentType.Cheque.Id || pm.PtId == CodeNames.PaymentType.Deposit.Id;
                }
             );

            bool ret = false;

            if (pms.Count > 0 )
            {
                // ตรวจสอบยอดเงินคงเหลือน้อยกว่า 0.13 หรือไม่ ?
                // Convert ยอดเงินคงเหลือ.
                _balPaidAmount = Convert.ToDecimal(leftAmountTextBox.Text);
                if ( _balPaidAmount > 0 && _balPaidAmount <= (decimal)0.12)
                    ret = true;
               
            }

            return ret;
        } 



        private PaymentMethod HaveQRPayment()
        {
            PaymentMethod ret = null;
            foreach (PaymentMethod pm in _paymentMethods)
            {
                if (pm.PtId == CodeNames.PaymentType.QRPayment.Id)
                    ret = pm;
            }

            return ret; 
        }

        ///// <summary>
        ///// Haves the deposit receipt?
        ///// ตรวจสอบว่า วิธีการชำระเงินที่เลือก มีเช็คหรือใบนำฝากที่จำนวนเงินเกินกว่าหนี้ที่ค้างชำระหรือไม่
        ///// </summary>
        ///// <returns></returns>
        //private bool HaveDepositReceipt()
        //{
        //    // Find payment methods that is Cheque or BankTransfer
        //    List<PaymentMethod> pms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
        //                {
        //                    return pm.PtId == CodeNames.PaymentType.Cheque.Id || pm.PtId == CodeNames.PaymentType.Deposit.Id;
        //                }
        //            );


        //    foreach (PaymentMethod pm in pms)
        //    {
        //        decimal remainAmount = pm.TotalRemainAmount;

        //        if (remainAmount > 0)
        //        {
        //            return true;
        //        }
        //    }
        //    return false;
        //}

        /// <summary>
        /// ตรวจสอบว่า วิธีการชำระเงินที่เลือก มีเช็คหรือใบนำฝากที่จำนวนเงินเกินกว่าหนี้ที่ค้างชำระหรือไม่
        /// ถ้ามีให้ สร้างรายการสำหรับเงินรับฝาก และออกใบเสร็จรับฝาก
        /// </summary>
        private void CheckDepositReceipt()
        {
            // Find payment methods that is Cheque or BankTransfer
            List<PaymentMethod> pms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
                        {
                            return pm.PtId == CodeNames.PaymentType.Cheque.Id || pm.PtId == CodeNames.PaymentType.Deposit.Id ;
                        }
                    );

            Invoice iv = null;

            foreach (PaymentMethod pm in pms)
            {
                decimal remainAmount = pm.TotalRemainAmount;

                if (remainAmount > 0)
                {
                    if (iv == null)
                    {
                        iv = new Invoice();

                        Bill b = new Bill();

                        // Use the same ca from invoice paid by this payment method
                        Invoice ivMaster = _payingInvoices.Find(delegate(Invoice inv)
                                                {
                                                    return inv.RowNum == 1;
                                                }
                                            );
                        Bill bMaster = ivMaster.Bills[0];

                        b.CustomerId = bMaster.CustomerId;
                        b.Name = bMaster.Name;
                        b.Address = bMaster.Address;
                        b.BranchId = bMaster.BranchId;
                        b.ContractTypeId = bMaster.ContractTypeId;
                        b.DebtId = CodeNames.DebtType.DepositReceipt.Id;
                        b.DebtType = CodeNames.DebtType.DepositReceipt.Name;
                        b.Description = null;
                        b.AmountExVat = remainAmount;
                        b.FullAmount = remainAmount;
                        b.TaxCode = CodeNames.TaxCode.NoTaxCharge.TaxCode;
                        b.TaxRate = StringConvert.ToDecimal(CodeNames.TaxCode.NoTaxCharge.TaxRate);
                        b.GAmount = b.AmountExVat;
                        b.FullGAmount = b.AmountExVat;
                        b.DataState = BillDataStage.NewItem;

                        //Tax 13 หลัก
                        b.CaTaxId = bMaster.CaTaxId;
                        b.CaTaxBranch = bMaster.CaTaxBranch;

                        iv.InvoiceNo = null;
                        iv.BranchId = b.BranchId==null?ivMaster.BranchId:b.BranchId;
                        iv.TechBranchName = ivMaster.TechBranchName;
                        iv.CommBranchId = ivMaster.CommBranchId;
                        iv.CommBranchName = ivMaster.CommBranchName;
                        iv.ControllerId = ivMaster.ControllerId;
                        iv.ControllerName = ivMaster.ControllerName;
                        iv.MruId = ivMaster.MruId;
                        iv.CaId = b.CustomerId;
                        iv.Name = b.Name;
                        iv.Address = b.Address;
                        iv.GAmount = b.GAmount;
                        iv.PaidVatAmount = 0;
                        iv.PaidGAmount = 0;
                        iv.ToPayGAmount = iv.ToBePaidGAmount;
                        iv.ToPayVatAmount = iv.ToBePaidVatAmount;
                        iv.CaDoc = null;
                        iv.DataState = InvoiceDataStage.NewItem;
                        Random rand = new Random();
                        iv.UiRefId = rand.Next();
                        iv.Bills = new List<Bill>();
                        iv.Bills.Add(b);

                        //Tax 13 หลัก
                        iv.CaTaxId = ivMaster.CaTaxId;
                        iv.CaTaxBranch = ivMaster.CaTaxBranch;

                        InvoicePaymentMethod.Create(iv, pm, remainAmount);

                        _payingInvoices.Add(iv);
                    }
                    else
                    {
                        Bill b = iv.Bills[0];
                        b.AmountExVat = b.AmountExVat + remainAmount;
                        b.GAmount = b.AmountExVat;
                        
                        iv.GAmount = b.GAmount;
                        iv.ToPayGAmount = iv.ToBePaidGAmount;
                        iv.ToPayVatAmount = iv.ToBePaidVatAmount;

                        InvoicePaymentMethod.Create(iv, pm, remainAmount);
                    }
                }
            }         
        }

         ////<summary>
         ////ตรวจสอบว่า วิธีการชำระเงินที่เลือก มีเช็คหรือใบนำฝากที่จำนวนเงินเกินกว่าหนี้ที่ค้างชำระหรือไม่
         ////ถ้ามีให้ สร้างรายการสำหรับเงินรับฝาก และออกใบเสร็จรับฝาก
         ////</summary>
        //private void CheckDepositReceipt()
        //{
        //    // Find payment methods that is Cheque or BankTransfer
        //    List<PaymentMethod> pms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
        //                {
        //                    return pm.PtId == CodeNames.PaymentType.Cheque.Id || pm.PtId == CodeNames.PaymentType.Deposit.Id;
        //                }
        //            );

        //    Invoice iv = null;

        //    foreach (PaymentMethod pm in pms)
        //    {
        //        decimal remainAmount = pm.TotalRemainAmount;

        //        if (remainAmount > 0)
        //        {
        //            if (iv == null)
        //            {
        //                iv = new Invoice();

        //                Bill b = new Bill();

        //                // Use the same ca from invoice paid by this payment method
        //                Invoice ivMaster = _payingInvoices.Find(delegate(Invoice inv)
        //                                        {
        //                                            return inv.RowNum == 1;
        //                                        }
        //                                    );
        //                Bill bMaster = ivMaster.Bills[0];

        //                b.CustomerId = bMaster.CustomerId;
        //                b.Name = bMaster.Name;
        //                b.Address = bMaster.Address;
        //                b.BranchId = bMaster.BranchId;
        //                b.ContractTypeId = bMaster.ContractTypeId;
        //                b.DebtId = CodeNames.DebtType.DepositReceipt.Id;
        //                b.DebtType = CodeNames.DebtType.DepositReceipt.Name;
        //                b.Description = null;
        //                b.AmountExVat = remainAmount;
        //                b.FullAmount = remainAmount;
        //                b.TaxCode = CodeNames.TaxCode.NoTaxCharge.TaxCode;
        //                b.TaxRate = StringConvert.ToDecimal(CodeNames.TaxCode.NoTaxCharge.TaxRate);
        //                b.GAmount = b.AmountExVat;
        //                b.FullGAmount = b.AmountExVat;
        //                b.DataState = BillDataStage.NewItem;

        //                iv.InvoiceNo = null;
        //                iv.BranchId = b.BranchId==null?ivMaster.BranchId:b.BranchId;
        //                iv.TechBranchName = ivMaster.TechBranchName;
        //                iv.CommBranchId = ivMaster.CommBranchId;
        //                iv.CommBranchName = ivMaster.CommBranchName;
        //                iv.ControllerId = ivMaster.ControllerId;
        //                iv.ControllerName = ivMaster.ControllerName;
        //                iv.MruId = ivMaster.MruId;
        //                iv.CaId = b.CustomerId;
        //                iv.Name = b.Name;
        //                iv.Address = b.Address;
        //                iv.GAmount = b.GAmount;
        //                iv.PaidVatAmount = 0;
        //                iv.PaidGAmount = 0;
        //                iv.ToPayGAmount = iv.ToBePaidGAmount;
        //                iv.ToPayVatAmount = iv.ToBePaidVatAmount;
        //                iv.CaDoc = null;
        //                iv.DataState = InvoiceDataStage.NewItem;
        //                Random rand = new Random();
        //                iv.UiRefId = rand.Next();
        //                iv.Bills = new List<Bill>();
        //                iv.Bills.Add(b);

        //                InvoicePaymentMethod.Create(iv, pm, remainAmount);

        //                _payingInvoices.Add(iv);
        //            }
        //            else
        //            {
        //                Bill b = iv.Bills[0];
        //                b.AmountExVat = b.AmountExVat + remainAmount;
        //                b.GAmount = b.AmountExVat;

        //                iv.GAmount = b.GAmount;
        //                iv.ToPayGAmount = iv.ToBePaidGAmount;
        //                iv.ToPayVatAmount = iv.ToBePaidVatAmount;

        //                InvoicePaymentMethod.Create(iv, pm, remainAmount);
        //            }
        //        }
        //    }         
        //}        


        private bool CheckOffline()
        {
            if (!_presenter.CheckOffline())
            {
                Session.IsNetworkConnectionAvailable = false;

                foreach (Invoice inv in _payingInvoices)
                {
                    if (inv.Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id
                            || inv.Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyAdvancePayment.Id)
                            || inv.Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id)
                            || inv.Bills[0].DebtId.Substring(0, 5) == "M0080")
                    {
                        return false;
                    }
                    inv.DataState = InvoiceDataStage.Offline;
                }
            }
            return true;
        }


        private bool CheckDuplicateReceipt(List<PrintingReceipt> printingReceipts)
        {
            if (printingReceipts == null) { return true; }

            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string todayPath = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            List<CAC15Report> report = new List<CAC15Report>();

            if (File.Exists(todayPath))
            {
                //Read existing transactions from text file
                FileStream fs = new FileStream(todayPath, FileMode.Open);
                IFormatter formatter = new BinaryFormatter();
                report = (List<CAC15Report>)formatter.Deserialize(fs);
                fs.Close();
            }

            if (report.Count > 0)
            {
                foreach (PrintingReceipt pr in printingReceipts)
                {
                    if (report.Exists(delegate(CAC15Report r)
                                          {
                                              return r.RealReceiptId == pr.ReceiptId
                                                     && r.ValidateFlag == "1"
                                                     && ((r.PaymentActive == null) ? "1" : r.PaymentActive) == "1"
                                                     && ((r.RepayActive == null) ? "1" : r.RepayActive) == "1";
                                          }
                        ))
                    {
                        return false;
                    }
                }
            }

            return true;
        }


        private bool CheckDuplicateExtReceipt(string receiptId)
        {
            if (_presenter.CheckDuplicateExtReceipt(receiptId, Session.Branch.Id))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void AssignVatAmountForInstallment()
        {
            List<PrintingReceipt> printingReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"];
            List<PrintingReceipt> groupDividualReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"];

            if (printingReceipts != null)
            {
                for (int i = 0; i <= _payingInvoices.Count - 1; i++)
                {
                    if (_payingInvoices[i].Bills[0].DebtId.Substring(0, 5) == "M0080")
                    {
                        for (int j = 0; j <= printingReceipts.Count - 1; j++)
                        {
                            if (_payingInvoices[i].InvoiceNo == printingReceipts[j].PrintingInvoices[0].InvoiceNo)
                            {
                                _payingInvoices[i].ToPayQty = printingReceipts[j].PrintingInvoices[0].ToPayQty;
                                _payingInvoices[i].ToPayVatAmount = printingReceipts[j].PrintingInvoices[0].ToPayVatAmount;
                            }
                        }
                    }
                }
            }


            if (groupDividualReceipts != null)
            {
                for (int i = 0; i <= _payingInvoices.Count - 1; i++)
                {
                    if (_payingInvoices[i].Bills[0].DebtId.Substring(0, 5) == "M0080")
                    {
                        for (int j = 0; j <= groupDividualReceipts.Count - 1; j++)
                        {
                            if (_payingInvoices[i].InvoiceNo == groupDividualReceipts[j].PrintingInvoices[0].InvoiceNo)
                            {
                                _payingInvoices[i].ToPayQty = groupDividualReceipts[j].PrintingInvoices[0].ToPayQty;
                                _payingInvoices[i].ToPayVatAmount = groupDividualReceipts[j].PrintingInvoices[0].ToPayVatAmount;
                            }
                        }
                    }
                }
            }
        }


        private void SummarizeCash()
        {
            decimal cashAmount = 0;
            decimal feeAmount = 0;
            foreach (PaymentMethod pm in _paymentMethods)
            {                
                if (pm.PtId == CodeNames.PaymentType.Cash.Id)
                {
                    cashAmount += pm.ToPayAmount.Value;
                    feeAmount += pm.FeeAmount.Value;
                }
            }
            if (cashAmount > 0)
            {
                _paymentMethods.RemoveAll(delegate(PaymentMethod pm)
                        {
                            return pm.PtId == CodeNames.PaymentType.Cash.Id;
                        }
                );

                // Create new Cash Payment Method
                PaymentMethod pmCash = CreatePayment(CodeNames.PaymentType.Cash.Id, CodeNames.PaymentType.Cash.Name, cashAmount, feeAmount);
                pmCash.ToPayInvoices = new List<InvoicePaymentMethod>();

                _paymentMethods.Add(pmCash);

                // Insert relation from invoice to new Cash Payment Method
                foreach (Invoice iv in _payingInvoices)
                {
                    cashAmount = 0;
                    foreach (InvoicePaymentMethod pm in iv.PaymentMethods)
                    {
                        if (pm.PtId == CodeNames.PaymentType.Cash.Id)
                        {
                            cashAmount += pm.Amount;
                        }
                    }

                    // Remove old relation
                    if (cashAmount > 0)
                    {
                        iv.PaymentMethods.RemoveAll(delegate(InvoicePaymentMethod ivpm)
                            { return ivpm.PtId == CodeNames.PaymentType.Cash.Id; }
                        );

                        InvoicePaymentMethod.Create(iv, pmCash, cashAmount);
                    }
                }

                CalculateChange();
                pmCash.ChangeAmount = _change;

                // Refresh if have summarize cash.
                paymentDataGridView.DataSource = new BindingList<PaymentMethod>(_paymentMethods);
            }
        }

        private void cancelAllButton_Click(object sender, EventArgs e)
        {
            this.SaveTextFileCancelPaymentForSmartScreen();
            this.ParentForm.Close();
        }

        private void paymentDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                PaymentMethod pm = (PaymentMethod)paymentDataGridView.Rows[e.RowIndex].DataBoundItem;

                if (pm.PtId != CodeNames.PaymentType.QRPayment.Id && !addEditButton.Visible) 
                {
                    addEditButton.Visible = true;
                    cancelButton.Visible = true;
                }

                if (e.ColumnIndex != 3)
                {
                    paymentDataGridView.Rows[e.RowIndex].Selected = true;                    

                    if (pm.PtId == CodeNames.PaymentType.Cash.Id)
                    {
                        paymentTypeTabControl.SelectedIndex = 0;
                        cashAmountTextBox.Text = pm.ToPayAmount.Value.ToString();
                        cashFeeText.Text = pm.FeeAmount == 0 ? String.Empty : pm.FeeAmount.ToString();
                        addEditButton.Text = "บันทึก";
                        cashAmountTextBox.SelectAll();
                        cashAmountTextBox.Focus();
                    }
                    else if (pm.PtId == CodeNames.PaymentType.Cheque.Id)
                    {
                        if (paymentTypeTabControl.TabPages.Count == 3){}
                        
                        paymentTypeTabControl.SelectedIndex = 1;
                        chequeActualAmountTextBox.Text = pm.ToPayAmount.Value.ToString();
                        chequeFeeText.Text = pm.FeeAmount == 0 ? String.Empty : pm.FeeAmount.ToString();
                        SetBankDataSource(chequeBankComboBox, pm.Bank, false);
                        chequeBankComboBox.SelectedIndex = 0;
                        chequeNoTextBox.Text = pm.ChqNo;
                        chequeBankAccNoTextBox.Text = pm.ChqAccNo;
                        chequeDateDateTimePicker.Value = pm.ChqDt.Value;
                        addEditButton.Text = "บันทึก";
                        chequeActualAmountTextBox.SelectAll();
                        chequeActualAmountTextBox.Focus();
                    }
                    else if (pm.PtId == CodeNames.PaymentType.Deposit.Id)
                    {
                        _screenType = (ScreenType)_presenter.WorkItem.State["ScreenType"];
                        if (_screenType == ScreenType.BillBook
                            && _payingInvoices.Count > 0
                            && _payingInvoices[0].Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id))
                        {
                            paymentTypeTabControl.SelectedIndex = 1;
                        }
                        else
                        {
                            paymentTypeTabControl.SelectedIndex = 2;
                        }
                        payInFeeText.Text = pm.FeeAmount == 0 ? String.Empty : pm.FeeAmount.ToString();
                        depositActualAmountTextBox.Text = pm.ToPayAmount.Value.ToString();
                        SetBankDataSource(depositBankComboBox, pm.Bank, true);
                        depositBankAccNoComboBox.SelectedValue = pm.DepositAccNo;
                        depositDateDateTimePicker.Value = pm.DepositDt.Value;
                        addEditButton.Text = "บันทึก";
                        depositActualAmountTextBox.SelectAll();
                        depositActualAmountTextBox.Focus();
                    }
                    else if (pm.PtId == CodeNames.PaymentType.QRPayment.Id)
                    {
                        if (string.IsNullOrEmpty(pm.ChqAccNo))  // 2023-02-17 กรณีที่ยังไม่ request api สามารถแก้ไข จำนวนเงินได้
                        {
                            paymentTypeTabControl.SelectedIndex = 3;
                            qrCodeAmountTextBoxDecimal.Text = pm.ToPayAmount.Value.ToString();
                            addEditButton.Visible = false;
                            cancelButton.Visible = false;
                        }
                    }
                }
                else
                {
                    if (_screenType != ScreenType.BillBook || pm.PtId != "2"
                        || _payingInvoices.Count > 0
                        || _payingInvoices[0].Bills[0].DebtId != CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id))
                    {
                        if (MessageBox.Show("ต้องการลบรายการดังกล่าวหรือไม่", "ข้อความเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Question).ToString() == "Yes")
                        {
                            _paymentMethods.Remove(pm);
                            paymentDataGridView.DataSource = new BindingList<PaymentMethod>(_paymentMethods);

                            ClearControls();
                            CalculateTotalAmount();
                            AssignPaymentMethodToInvoices(false);
                            paymentTypeTabControl.SelectedIndex = 0;
                        }
                    }
                }
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            ClearControls();
        }

        private void CalculateChange()
        {
            decimal change = _presenter.CalculateChangeAmount(_totalAmount, _paymentMethods);
            decimal xchange = (change * 100) % 25;

            if (xchange > 0)
            {
                if (xchange > 12)
                {
                    _change = change + (decimal)0.25 - xchange / 100;
                }
                else
                {
                    _change = change - xchange / 100;
                }

                _adjChange = change - _change;
                changeAmountTextBox.Text = _change.ToString("#,##0.00");
            }
            else if (xchange < 0)
            {
                if (-xchange > 12)
                {
                    _change = change - (decimal)0.25 - xchange / 100;
                }
                else
                {
                    _change = 0;
                }
                _adjChange = change - _change;
                changeAmountTextBox.Text = "0.00";
            }
            else
            {
                _change = change;
                _adjChange = 0;
                if (change > 0)
                {
                    changeAmountTextBox.Text = _change.ToString("#,##0.00");
                }
                else
                {
                    changeAmountTextBox.Text = "0.00";
                }
            }

            _payingInvoices.ForEach(new Action<Invoice>(delegate(Invoice iv)
                    {
                        iv.ToPayAdjAmount = 0;
                    }
                )
            );

            if (_change >= 0)
            {
                _payingInvoices[_payingInvoices.Count - 1].ToPayAdjAmount = _adjChange;

                // ใบล่าสุดจะเป็น group หรือไม่ 
                // lo : last object.
                //var lo = _payingInvoices[_payingInvoices.Count - 1];

                //if (lo.Bills[0].DebtId.StartsWith("M008") && lo.ToPayAdjAmount != 0)
                //{
                //    var objectByLast = (from t0 in _payingInvoices
                //                        where t0.CaId == lo.CaId
                //                            && t0.Bills[0].TaxCode == lo.Bills[0].TaxCode && t0.Bills[0].DueDate == lo.Bills[0].DueDate
                //                            && t0.InstallmentPeriod == lo.InstallmentPeriod && t0.InstallmentTotalPeriod == lo.InstallmentTotalPeriod
                //                        select t0).ToList();

                //    if (objectByLast != null && objectByLast.Count > 1)
                //    {
                //        // Remove last ออกก่อน 
                //        _payingInvoices.Remove(lo);

                //        // Remove object ที่พบออกก่อน. 
                //        var objectOnGroup = (from t0 in _payingInvoices
                //                             where t0.CaId == lo.CaId
                //                                 && t0.Bills[0].TaxCode == lo.Bills[0].TaxCode && t0.Bills[0].DueDate == lo.Bills[0].DueDate
                //                                 && t0.InstallmentPeriod == lo.InstallmentPeriod && t0.InstallmentTotalPeriod == lo.InstallmentTotalPeriod
                //                             select t0).ToList();

                //        foreach (var itemOnGroup in objectOnGroup)
                //            _payingInvoices.Remove(itemOnGroup);


                //        foreach (var itemOnGroup in objectOnGroup)
                //            _payingInvoices.Add(itemOnGroup);

                //            //_payingInvoices.Insert(_payingInvoices.Count - 1, itemOnGroup);


                //        _payingInvoices.Add(lo);
                //        //_payingInvoices.Insert(_payingInvoices.Count - 1, lo);
                //    }


                //}

            }
        }


        private void AssignPaymentMethodToInvoices(bool isOk)
        {
            foreach (Invoice iv in _payingInvoices)
            {
                if (null == iv.PaymentMethods)
                {
                    iv.PaymentMethods = new List<InvoicePaymentMethod>();
                }
                else
                {
                    iv.PaymentMethods.Clear();
                }
            }

            LoadPaymentSequence();
            AssiginPaymentMethod("2", isOk);
            AssiginPaymentMethod("3", isOk);
            AssiginPaymentMethod("5", isOk);
            AssiginPaymentMethod("1", isOk);
            CalculateChange();
        }

        private void AssiginPaymentMethod(string ptId, bool isOk)
        {
            List<PaymentMethod> chqPms = _paymentMethods.FindAll(delegate(PaymentMethod pm)
            {
                return pm.PtId == ptId;
            }
                    );


            foreach (PaymentMethod pm in chqPms)
            {
                if (null == pm.ToPayInvoices)
                {
                    pm.ToPayInvoices = new List<InvoicePaymentMethod>();
                }
                else
                {
                    pm.ToPayInvoices.Clear();
                }

                if (ptId == "1" && _adjChange != 0 && isOk == true)
                {
                    _payingInvoices.ForEach(new Action<Invoice>(delegate(Invoice iv)
                    {
                        iv.ToPayAdjAmount = 0;
                    }
                        )
                    );


                    if (_payingInvoices[_payingInvoices.Count - 1].TotalRemainToPayAmount > 0 &&
                            ((_payingInvoices[_payingInvoices.Count - 1].TotalRemainToPayAmount * 100) % 25) == 0)
                    {
                        bool isAdjust = false;

                        //Check whether there is any adjust amount to be adjusted in the invoice item
                        for (int i = _payingInvoices.Count - 1; i >= 0; i--)
                        {
                            Invoice invoice = _payingInvoices[i];

                            if (invoice.TotalRemainToPayAmount > 0 && ((invoice.TotalRemainToPayAmount * 100) % 25) != 0)
                            {
                                isAdjust = true;
                                break;
                            }
                        }


                        //Calculate adjust amount from the last invoice
                        if (isAdjust == true)
                        {
                            for (int i = _payingInvoices.Count - 1; i >= 0; i--)
                            {
                                Invoice invoice = _payingInvoices[i];

                                if (invoice.TotalRemainToPayAmount > 0 && ((invoice.TotalRemainToPayAmount * 100) % 25) != 0)
                                {
                                    _payingInvoices.Remove(invoice);
                                    _payingInvoices.Insert(_payingInvoices.Count, invoice);
                                    break;
                                }
                            }
                        }
                    }


                    if (_change >= 0)
                    {
                        _payingInvoices[_payingInvoices.Count - 1].ToPayAdjAmount = _adjChange;
                    }
                }


                foreach (Invoice iv in _payingInvoices)
                {
                    decimal ttrma = pm.TotalRemainAmount; // ตังค์ที่เหลือจาก Payment Method
                    if (ttrma > 0)
                    {
                        decimal ttrmtpa = iv.TotalRemainToPayAmount; // ตังค์ที่ต้องจ่ายอีก
                        if (ttrmtpa > 0)
                        {
                            if (ttrma >= ttrmtpa) // ตังค์เหลือมากกว่า
                            {
                                InvoicePaymentMethod.Create(iv, pm, ttrmtpa);
                            }
                            else // ตังค์เหลือน้อยกว่า
                            {
                                InvoicePaymentMethod.Create(iv, pm, ttrma);
                            }
                        }
                    }
                }
            }
        }


        private void enter_KeyPress(object sender, KeyPressEventArgs e)
        {
            
            if (e.KeyChar == (char)13)
            {
                SendKeys.Send("{TAB}");
            }

            if (sender == cashAmountTextBox
                || sender == cashFeeText
                || sender == chequeActualAmountTextBox
                || sender == chequeFeeText
                || sender == depositActualAmountTextBox
                || sender == payInFeeText
                || sender == qrCodeAmountTextBoxDecimal
                )
            {
                (sender as TextBoxDecimal).OnKeyPressValidateDecimal(e);
            }

        }

        private void paymentTypeTabControl_Enter(object sender, EventArgs e)
        {
            switch (paymentTypeTabControl.SelectedIndex)
            {
                case 0:
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                    break;
                default:
                    break;
            }
        }

        private void paymentDataGridView_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                PaymentMethod pm = (PaymentMethod)paymentDataGridView.Rows[e.RowIndex].DataBoundItem;
                _screenType = (ScreenType)_presenter.WorkItem.State["ScreenType"];
                if (pm.PtId == "2" && _screenType == ScreenType.BillBook
                    && _payingInvoices.Count > 0
                    && _payingInvoices[0].Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id))
                {
                    paymentDataGridView.Rows[e.RowIndex].Cells["deleteButton"].Value = Properties.Resources.Transparent;
                }
            }
        }

        #endregion

        #region +++ Custom Function +++

        private bool ValidateForm()
        {
            switch (paymentTypeTabControl.SelectedTab.Text.Trim())
            {
                case "เงินสด":
                    if (cashAmountTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินสดที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        cashAmountTextBox.Focus();
                        return false;
                    }
                    else if (cashFeeCheckBox.Checked && (cashFeeText.Text.Trim() == String.Empty))
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินค่าธรรมเนียม", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        cashFeeText.Focus();
                        return false;
                    }
                    else
                    {
                        decimal cash = Convert.ToDecimal(cashAmountTextBox.Text);
                        if (cash <= 0)
                        {
                            MessageBox.Show("กรุณากรอกจำนวนเงินสดให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            cashAmountTextBox.SelectAll();
                            cashAmountTextBox.Focus();
                            return false;
                        }
                        else if (((cash * 100) % 25) != 0)
                        {
                            MessageBox.Show("ท่านสามารถกรอกจำนวนเงินสดที่เป็น 'เศษสตางค์' ได้เป็น 25, 50 หรือ 75 สตางค์เท่านั้น", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            cashAmountTextBox.SelectAll();
                            cashAmountTextBox.Focus();
                            return false;
                        }                            
                        else
                        {
                            decimal change = 0;
                            if (addEditButton.Text == "บันทึก" && ((PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem).PtId == CodeNames.PaymentType.Cash.Id)
                            {
                                PaymentMethod cashPm = (PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem;
                                decimal? toPayAmount = cashPm.ToPayAmount;
                                cashPm.ToPayAmount = Convert.ToDecimal(cashAmountTextBox.Text);
                                change = _presenter.CalculateChangeAmount(_totalAmount, _paymentMethods);
                                cashPm.ToPayAmount = toPayAmount;
                            }
                            else
                            {
                                PaymentMethod cashPm = GetCashPayment();
                                _paymentMethods.Add(cashPm);
                                change = _presenter.CalculateChangeAmount(_totalAmount, _paymentMethods);
                                _paymentMethods.Remove(cashPm);
                            }

                            if (change >= 1000)
                            {
                                MessageBox.Show("จำนวนเงินทอนต้องน้อยกว่า 1000 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                cashAmountTextBox.SelectAll();
                                cashAmountTextBox.Focus();

                                return false;
                            }
                        }                             
                    }
                    return true;
                case "เช็ค":
                    if (chequeActualAmountTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (chequeBankComboBox.SelectedIndex<0)
                    {
                        MessageBox.Show("กรุณาเลือกธนาคารที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (chequeNoTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกเลขที่เช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (chequeBankAccNoTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกเลขที่บัญชีเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (chequeDateDateTimePicker.Value > Session.BpmDateTime.Now)
                    {
                        MessageBox.Show("วันที่เช็คต้องไม่มากกว่าวันที่ปัจจุบัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (Convert.ToDecimal(chequeActualAmountTextBox.Text.Trim()) <= 0)
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในเช็คให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (chequeFeeCheckBox.Checked && (chequeFeeText.Text.Trim() == String.Empty))
                    {
                        MessageBox.Show("กรุณากรอกจำนวนค่าธรรมเนียม", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    return true;
                case "ใบนำฝาก":
                    if (depositActualAmountTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในใบนำฝาก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (depositBankComboBox.SelectedIndex == 0)
                    {
                        MessageBox.Show("กรุณาเลือกธนาคารที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (depositBankAccNoComboBox.SelectedIndex == 0)
                    {
                        MessageBox.Show("กรุณาเลือกเลขที่บัญชี่", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (depositDateDateTimePicker.Value > Session.BpmDateTime.Now)
                    {
                        MessageBox.Show("วันที่นำฝากต้องไม่มากกว่าวันที่ปัจจุบัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (Convert.ToDecimal(depositActualAmountTextBox.Text.Trim()) <= 0)
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในใบนำฝากให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (payInFeeCheckBox.Checked && (payInFeeText.Text.Trim() == String.Empty ))
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินค่าธรรมเนียม", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    return true;
                case "QR Payment":
                    if (qrCodeAmountTextBoxDecimal.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงิน QR Payment ที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        qrCodeAmountTextBoxDecimal.SelectAll();
                        qrCodeAmountTextBoxDecimal.Focus();
                        return false;
                    }
                    if (Convert.ToDecimal(this.qrCodeAmountTextBoxDecimal.Text) <= 0)
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        qrCodeAmountTextBoxDecimal.SelectAll();
                        qrCodeAmountTextBoxDecimal.Focus();
                        return false;
                    }

                    return true; 
                
                default:
                    return true;
            }
        }

        private bool validateAgency(string paymenttype)
        {
            /*
            bool isCheque = false;
            bool isDeposit = false;

            for (int i = 0; i < _paymentMethods.Count; i++)
            {
                if (_paymentMethods[i].Method == "เช็ค")
                {
                    isCheque = true;
                }

                if (_paymentMethods[i].Method == "ใบนำฝาก")
                {
                    isDeposit = true;
                }
            }

            if (paymenttype == "1")
            {
                int chequeCount = 0;
                for (int i = 0; i < _paymentMethods.Count; i++)
                {
                    if (_paymentMethods[i].Method == "เช็ค")
                    {
                        chequeCount += 1;
                    }

                    if (chequeCount == 5)
                    {
                        MessageBox.Show("ระบบไม่สามารถรับเช็คได้เกิน 5 ใบต่อการชำระเงิน 1 ครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                }

                if (isDeposit == true)
                {
                    MessageBox.Show("ระบบไม่สามารถรับชำระเงินด้วยเช็คและใบนำฝากเงินพร้อมกันได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }
            }
            else if (paymenttype == "2")
            {
                if (isCheque == true)
                {
                    MessageBox.Show("ระบบไม่สามารถรับชำระเงินด้วยเช็คและใบนำฝากเงินพร้อมกันได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }
            }
            */

            return true;
        }

        private bool validateCashPayment(string status)
        {
            if (status == "เพิ่ม")
            {
                return true;
            }
            else
            {
                PaymentMethod pm = (PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem;
                pm.ToPayAmount = StringConvert.ToDecimal(cashAmountTextBox.Text);
                pm.FeeAmount = cashFeeText.Text.Trim() == String.Empty ? 0 : StringConvert.ToDecimal(cashFeeText.Text.Trim());
                return false;
            }
        }

        private bool isQRPaymentOnly() {
            bool result = false;

            if (_paymentMethods.Count == 1 && _paymentMethods.First().PtId == CodeNames.PaymentType.QRPayment.Id)
                result = true;

            return result; 
        }

        private bool validateQRPayment(string status)
        {
            decimal _balPaidAmount = 0;
            decimal _qrAmount = 0;
            decimal _toBePaidAmount = 0;
            if (status == "เพิ่ม")
            {
                foreach (PaymentMethod pm in _paymentMethods)
                {
                    if (pm.PtId == CodeNames.PaymentType.QRPayment.Id)
                    {
                        MessageBox.Show("ไม่สามารถเพิ่มได้  มีรายการชำระด้วย QR Payment เรียบร้อยแล้ว",
                            "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                }


                // ตรวจสอบยอดเงิน QR Payment ต้องไม่เกินยอดคงเหลือของหนี้. 
                _balPaidAmount = Convert.ToDecimal(leftAmountTextBox.Text);
                _qrAmount = Convert.ToDecimal(qrCodeAmountTextBoxDecimal.Text);
                if (_qrAmount > _balPaidAmount)
                {
                    MessageBox.Show("ไม่สามารถเพิ่มได้  เนื่องจากยอดชำระมากกว่ายอดหนี้คงเหลือ",
                           "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }
                else
                {
                    // รับเงินยอด
                    return true;
                }
            }
            else
            {

                foreach (PaymentMethod p in _paymentMethods)
                {
                    if (p.PtId == CodeNames.PaymentType.QRPayment.Id)
                    {
                        _toBePaidAmount = p.ToPayAmount.Value; 
                    }
                }

                // ตรวจสอบยอดเงิน QR Payment ต้องไม่เกินยอดคงเหลือของหนี้. 
                _balPaidAmount = Convert.ToDecimal(leftAmountTextBox.Text);
                _qrAmount = Convert.ToDecimal(qrCodeAmountTextBoxDecimal.Text);
                if ((_qrAmount - _toBePaidAmount) > _balPaidAmount)
                {
                    MessageBox.Show("ไม่สามารถเพิ่มได้  เนื่องจากยอดชำระ มากกว่ายอดหนี้คงเหลือ",
                           "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }

                PaymentMethod pm = (PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem;
                pm.ToPayAmount = StringConvert.ToDecimal(this.qrCodeAmountTextBoxDecimal.Text);
                return false;
            }
        }

        private bool validateChequePayment(string status)
        {
            if (status == "เพิ่ม")
            {
                foreach (PaymentMethod pm in _paymentMethods)
                {
                    if (pm.PtId == CodeNames.PaymentType.Cheque.Id
                        && pm.ChqNo==chequeNoTextBox.Text.Trim())
                    {
                        MessageBox.Show("ไม่สามารถเพิ่มได้  มีเลขที่เช็คดังกล่าวอยู่ในรายการแล้ว",
                            "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                }
                return true;
            }
            else
            {
                PaymentMethod pm = (PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem;
                pm.ToPayAmount = StringConvert.ToDecimal(chequeActualAmountTextBox.Text);
                pm.FeeAmount = chequeFeeText.Text.Trim() == String.Empty ? 0 : StringConvert.ToDecimal(chequeFeeText.Text.Trim());
                pm.Bank = (Bank)chequeBankComboBox.SelectedItem;
                pm.ChqNo = chequeNoTextBox.Text;
                pm.ChqAccNo = chequeBankAccNoTextBox.Text;
                pm.ChqDt = chequeDateDateTimePicker.Value;
                return false;
            }
        }

        private bool validateDepositPayment(string status)
        {
            if (status == "เพิ่ม")
            {
                //foreach (PaymentMethod pm in _paymentMethods)
                //{
                //    if (pm.PtId == CodeNames.PaymentType.Deposit.Id
                //        && pm.DepositAccNo == ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountNo
                //        && pm.DepositDt == depositDateDateTimePicker.Value.Date
                //        && pm.ToPayAmount.Equals(StringConvert.ToDecimal(depositActualAmountTextBox.Text)))
                //    {
                //        MessageBox.Show("ไม่สามารถเพิ่มได้  มีเลขที่บัญชีดังกล่าวอยู่ในรายการแล้ว", 
                //            "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                //        return false;
                //    }
                //}

                return true;
            }
            else
            {
                PaymentMethod pm = (PaymentMethod)paymentDataGridView.CurrentRow.DataBoundItem;

                pm.ToPayAmount = StringConvert.ToDecimal(depositActualAmountTextBox.Text);
                pm.FeeAmount = (payInFeeText.Text.Trim() != string.Empty) ? StringConvert.ToDecimal(payInFeeText.Text.Trim()) : 0;
                pm.Bank = (CodeTable.Instant.ListBanksByBankKey(((Deposit)depositBankComboBox.SelectedItem).BankKey))[0];
                //TODO: Uncomment for optimized report
                pm.Bank.ClearingAccNo = ((Deposit)depositBankAccNoComboBox.SelectedItem).ClearingAccNo;
                pm.DepositAccNo = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountNo;
                pm.DepositAccType = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountType;
                pm.DepositAccNoDesc = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountNoDesc;
                pm.DepositDt = depositDateDateTimePicker.Value;     

                return false;
            }
        }

        private PaymentMethod GetCashPayment()
        {
            PaymentMethod pm = CreatePayment(
                CodeNames.PaymentType.Cash.Id,
                CodeNames.PaymentType.Cash.Name,
                Convert.ToDecimal(cashAmountTextBox.Text),
                Convert.ToDecimal(cashFeeText.Text == String.Empty ? "0" : cashFeeText.Text)
            );

            return pm;
        }

        private PaymentMethod GetQRPayment()
        {
            PaymentMethod pm = CreatePayment(
                CodeNames.PaymentType.QRPayment.Id,
                CodeNames.PaymentType.QRPayment.Name,
                Convert.ToDecimal(qrCodeAmountTextBoxDecimal.Text),
                0 // free = 0 for QR Payment
            );

            return pm;
        }

        private PaymentMethod GetChequePayment()
        {
            PaymentMethod pm = CreatePayment(
                CodeNames.PaymentType.Cheque.Id,
                CodeNames.PaymentType.Cheque.Name,         
                Convert.ToDecimal(chequeActualAmountTextBox.Text),
                Convert.ToDecimal(chequeFeeText.Text == String.Empty ? "0" : chequeFeeText.Text)
            );
            
            pm.Bank = (Bank)chequeBankComboBox.SelectedItem;
            pm.ChqNo = chequeNoTextBox.Text;
            pm.ChqAccNo = chequeBankAccNoTextBox.Text;
            pm.ChqDt = chequeDateDateTimePicker.Value.Date; //By Nick
          
            pm.DraftFlag = draftCheckBox.Checked? "1":"0";
            pm.CashierChequeFlag = cashierChequeCheckBox.Checked? "1":"0";

            return pm;
        }

        private PaymentMethod GetDepositPayment()
        {
            PaymentMethod pm = CreatePayment(
                CodeNames.PaymentType.Deposit.Id,
                CodeNames.PaymentType.Deposit.Name,
                Convert.ToDecimal(depositActualAmountTextBox.Text),
                Convert.ToDecimal(payInFeeText.Text == String.Empty ? "0" : payInFeeText.Text)
            );

            List<Bank> b = new List<Bank>(CodeTable.Instant.ListBanksByBankKey(((Deposit)depositBankComboBox.SelectedItem).BankKey));

            pm.Bank = b[0];
            //TODO: Uncomment for optimized report
            pm.Bank.ClearingAccNo = ((Deposit)depositBankAccNoComboBox.SelectedItem).ClearingAccNo;
            pm.DepositAccNo = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountNo;
            pm.DepositAccType = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountType;
            pm.DepositAccNoDesc = ((Deposit)depositBankAccNoComboBox.SelectedItem).AccountNoDesc;
            pm.DepositDt = depositDateDateTimePicker.Value.Date; //By Nick
            
            return pm;
        }

        private PaymentMethod CreatePayment(string methodId, string methodName, decimal? toPayAmount, decimal? feeAmount)
        {
            PaymentMethod pm = new PaymentMethod();
            Random random = new Random();
            pm.UiRefId = random.Next();
            pm.PtId = methodId;
            pm.PtName = methodName;
            pm.ToPayAmount = toPayAmount;
            pm.FeeAmount = feeAmount;

            if (methodId == CodeNames.PaymentType.QRPayment.Id) 
            {
                pm.Bank = new Bank(string.Empty,Session.Branch.Id + Session.User.Id + "|" + Session.BpmDateTime.Now.ToString("yyyyMMddHHmmss"));
            }

            return pm;
        }

        private void ClearControls()
        {
            if (!addEditButton.Visible)                   // DCR : QR Payment  กรณีเลือกประเภทการชำระเงินในตาราง ถ้าเป็น QR payment ให้ซ่อน
            {
                addEditButton.Visible = true;
                cancelButton.Visible = true;
            }

            addEditButton.Text = "เพิ่ม";
            switch (paymentTypeTabControl.SelectedTab.Text.Trim())
            {
                case "เงินสด":
                    cashAmountTextBox.Text = string.Empty;
                    cashAmountTextBox.Focus();
                    break;
                case "เช็ค":
                    chequeActualAmountTextBox.Text = string.Empty;
                    chequeBankComboBox.DataSource = null;
                    chequeNoTextBox.Text = string.Empty;
                    chequeBankAccNoTextBox.Text = string.Empty;
                    chequeDateDateTimePicker.Value = DateTime.Today;
                    chequeActualAmountTextBox.Focus();
                    break;
                case "ใบนำฝาก":
                    depositActualAmountTextBox.Text = string.Empty;
                    depositBankComboBox.DataSource = null;
                    depositBankAccNoComboBox.DataSource = null;
                    depositDateDateTimePicker.Value = DateTime.Today;
                    depositActualAmountTextBox.Focus();
                    LoadBank();
                    LoadAccountNo();
                    break;
                case "QR Payment":
                    qrCodeAmountTextBoxDecimal.Text = leftAmountTextBox.Text;
                    break;
                default:
                    break;
            }
        }

        private void CalculateTotalAmount()
        {
            decimal paidAmount = 0;
            
            for (int i = 0; i < _paymentMethods.Count; i++)
            {
                paidAmount += (_paymentMethods[i].ToPayAmountWithFee != null) ? _paymentMethods[i].ToPayAmountWithFee.Value : 0;
            }

            if (Convert.ToDecimal(totalPaymentTextBox.Text) - paidAmount < 0)
            {
                leftAmountTextBox.Text = "0.00";
            }
            else
            {
                leftAmountTextBox.Text = string.Format("{0:#,##0.00}", Convert.ToDecimal(totalPaymentTextBox.Text) - paidAmount);
            }

            paidAmountTextBox.Text = string.Format("{0:#,##0.00}", paidAmount);        

            if (Convert.ToDecimal(leftAmountTextBox.Text)==0)
            {
                okButton.Focus();
            }
            else
            {
                paymentTypeTabControl.Focus();
            }

        }

        private void SaveTextFileForReport()
        {
            try
            {
                string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
                string todayPath = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

                if (!Directory.Exists(transactionPath))
                {
                    Directory.CreateDirectory(transactionPath);
                }

                List<CAC15Report> report = new List<CAC15Report>();

                if (File.Exists(todayPath))
                {
                    //Read existing transactions from text file
                    FileStream fs = new FileStream(todayPath, FileMode.Open);
                    IFormatter formatter = new BinaryFormatter();
                    report = (List<CAC15Report>)formatter.Deserialize(fs);
                    fs.Close();
                }


                List<PrintingReceipt> printingReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"];
                List<PrintingReceipt> groupDividualReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"];
                List<CAC15Report> transactions = new List<CAC15Report>();

                //Get all transactions of this payment
                transactions = GetTransactions(printingReceipts, groupDividualReceipts);
                foreach (CAC15Report r in transactions)
                {
                    report.Add(r);
                }


                //Save to text file
                IFormatter serializer = new BinaryFormatter();
                using (Stream writer = new FileStream(todayPath, FileMode.Create))
                {
                    serializer.Serialize(writer, report);
                    writer.Close();
                }

                isSaveTextFile = true;
            }
            catch
            {
                isSaveTextFile = false;
                throw;
            }
        }

        private void SaveIDSetting(IDSettingHelper hp)
        {
            hp.Save(hp);
        }

        private List<CAC15Report> GetTransactions(List<PrintingReceipt> printingReceipts, List<PrintingReceipt> groupDividualReceipts)
        {
            try
            {
                List<PrintingReceipt> receipts = new List<PrintingReceipt>();
                if (printingReceipts != null)
                {
                    receipts = new List<PrintingReceipt>(printingReceipts);
                }

                List<CAC15Report> transactions = new List<CAC15Report>();
                ExternalReceipt extReceipt = (ExternalReceipt)_presenter.WorkItem.State["ExtReceipt"];

                if (groupDividualReceipts != null && groupDividualReceipts.Count > 0)
                {
                    receipts = new List<PrintingReceipt>(groupDividualReceipts);
                }


                if (receipts[0].PrintingInvoices.Count > 1 && receipts[0].PrintingInvoices[0].Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id))
                {
                    foreach (PrintingReceipt receipt in receipts)
                    {
                        foreach (PrintingInvoice inv in receipt.PrintingInvoices)
                        {
                            CAC15Report r = new CAC15Report();

                            r.CaId = receipt.CustomerId;
                            r.CaName = receipt.CustomerName;
                            r.DebtName = inv.DebtType;
                            r.ReceiptId = (extReceipt != null && extReceipt.ReceiptId != null) ? extReceipt.ReceiptId : receipt.ReceiptId;
                            r.RealReceiptId = receipt.ReceiptId;
                            r.Amount = inv.ToPayGAmount;
                            r.AdjAmount = inv.ToPayAdjAmount;
                            r.GAmount = inv.ToPayGAmount + inv.ToPayAdjAmount;
                            r.PaidCashAmount = GetPaymentAmount(inv, CodeNames.PaymentType.Cash.Id);
                            r.PaidChqAmount = GetPaymentAmount(inv, CodeNames.PaymentType.Cheque.Id);
                            r.PaidQRAmount = GetPaymentAmount(inv, CodeNames.PaymentType.QRPayment.Id);
                            r.PaidDepositAmount = GetPaymentAmount(inv, CodeNames.PaymentType.Deposit.Id);
                            r.PaymentDt = receipt.PaymentDate;
                            r.ExtReceiptDt = (extReceipt != null && extReceipt.ReceiptDate != null) ? extReceipt.ReceiptDate : null;
                            r.CashierId = receipt.CashierId;
                            r.CashierName = receipt.CashierName;
                            r.BranchPosID = receipt.TerminalCode;
                            r.PaymentActive = "0";
                            r.ValidateFlag = "0";
                            r.Active = "0";

                            //Offline by User ,Begin
                            if (Session.IsNetworkConnectionAvailable == false)
                            {
                                if (Session.Work.Id == null)
                                    r.OfflineStatus = "นอกกะ";
                                else
                                    r.OfflineStatus = "ในกะ";

                            }
                            //Offline by User ,End

                            transactions.Add(r);
                        }
                    }
                }
                else
                {
                    foreach (PrintingReceipt receipt in receipts)
                    {
                        CAC15Report r = new CAC15Report();

                        r.CaId = receipt.CustomerId;
                        r.CaName = receipt.CustomerName;
                        r.DebtName = receipt.PrintingInvoices[0].DebtType;
                        r.ReceiptId = (extReceipt != null && extReceipt.ReceiptId != null) ? extReceipt.ReceiptId : receipt.ReceiptId;

                        // Receipt isntallment. 
                        // 20210921 : Support 
                        r.RealReceiptId = receipt.ReceiptId; // ต้องได้ Receipt ที่พิมพ์ออกให้ลูกค้า
                        if (receipt.ReceiptId.Substring(0, 1) == "X" && receipt.GroupReceiptIdInstallment != null)
                        {
                            r.ReceiptId = receipt.GroupReceiptIdInstallment ;  // report.ReceiptId save to text จะต้อง save receipt id จริงเพื่อแสดงในรายงาน 2.17 
                            r.InstallmentReceiptId = receipt.ReceiptId; //  report.InstallmentReceiptId จะเก็บ receiptId ที่ขึ้นต้นด้วย 'X'
                        }

                        //r.RealReceiptId = receipt.ReceiptId;
                        r.Amount = receipt.PrintingInvoices[0].ToPayGAmount;
                        r.AdjAmount = receipt.PrintingInvoices[0].ToPayAdjAmount;
                        r.GAmount = receipt.PrintingInvoices[0].ToPayGAmount + receipt.PrintingInvoices[0].ToPayAdjAmount;
                        r.PaidCashAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cash.Id);
                        r.PaidChqAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cheque.Id);
                        r.PaidDepositAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Deposit.Id);
                        r.PaidQRAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.QRPayment.Id);
                        r.PaymentDt = receipt.PaymentDate;
                        r.ExtReceiptDt = (extReceipt != null && extReceipt.ReceiptDate != null) ? extReceipt.ReceiptDate : null;
                        r.CashierId = receipt.CashierId;
                        r.CashierName = receipt.CashierName;
                        r.BranchPosID = receipt.TerminalCode;
                        r.PaymentActive = "0";
                        r.ValidateFlag = "0";
                        r.Active = "0";

                        //Offline by User ,Begin
                        if (Session.IsNetworkConnectionAvailable == false)
                        {
                            if (Session.Work.Id == null)
                                r.OfflineStatus = "นอกกะ";
                            else
                                r.OfflineStatus = "ในกะ";

                        }
                        //Offline by User ,End

                        transactions.Add(r);
                    }
                }

                return transactions;
            }
            catch
            {
                isSaveTextFile = false;
                throw;
            }
        }

        private void RollBackLastRecord()
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string todayPath = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);
            bool isSave = false;

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            List<CAC15Report> report = new List<CAC15Report>();

            if (File.Exists(todayPath))
            {
                //Read existing transactions from text fie
                FileStream fs = new FileStream(todayPath, FileMode.Open);
                IFormatter formatter = new BinaryFormatter();
                report = (List<CAC15Report>)formatter.Deserialize(fs);
                fs.Close();
            }


            List<PrintingReceipt> printingReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"];
            List<PrintingReceipt> groupDividualReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"];
            List<CAC15Report> transactions = new List<CAC15Report>();

            //Remove all transactions of this payment
            transactions = GetTransactions(printingReceipts, groupDividualReceipts);
            foreach (CAC15Report r in transactions)
            {
                report.RemoveAll(delegate(CAC15Report c)
                    {
                        return c.RealReceiptId == r.RealReceiptId && c.PaymentDt == r.PaymentDt;
                    }
                );
            }


            if (report.Count > 0)
            {
                List<CAC15Report> lastReceipts = report.FindAll(delegate(CAC15Report r)
                    {
                        return r.PaymentDt == report[report.Count - 1].PaymentDt;
                    }
                );

                if (lastReceipts.Count > 0)
                {
                    foreach (CAC15Report r in report)
                    {
                        foreach (CAC15Report lr in lastReceipts)
                        {
                            if (lr.RealReceiptId == r.RealReceiptId && lr.PaymentDt == r.PaymentDt)
                            {
                                r.ValidateFlag = "0";
                                isSave = true;
                            }
                        }
                    }
                }
            }


            //Save to text file
            if (isSave == true)
            {
                IFormatter serializer = new BinaryFormatter();
                using (Stream writer = new FileStream(todayPath, FileMode.Create))
                {
                    serializer.Serialize(writer, report);
                    writer.Close();
                }
            }
        }

        private void RollBackTransactionFile()
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string todayPath = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            List<CAC15Report> report = new List<CAC15Report>();

            if (File.Exists(todayPath))
            {
                //Read existing transactions from text fie
                FileStream fs = new FileStream(todayPath, FileMode.Open);
                IFormatter formatter = new BinaryFormatter();
                report = (List<CAC15Report>)formatter.Deserialize(fs);
                fs.Close();
            }


            List<PrintingReceipt> printingReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"];
            List<PrintingReceipt> groupDividualReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"];
            List<CAC15Report> transactions = new List<CAC15Report>();

            //Remove all transactions of this payment
            transactions = GetTransactions(printingReceipts, groupDividualReceipts);
            foreach (CAC15Report r in transactions)
            {
                report.RemoveAll(delegate(CAC15Report c)
                    {
                        return c.RealReceiptId == r.RealReceiptId;
                    }
                );
            }


            //Save to text file
            IFormatter serializer = new BinaryFormatter();
            using (Stream writer = new FileStream(todayPath, FileMode.Create))
            {
                serializer.Serialize(writer, report);
                writer.Close();
            }
        }

        private void SetPaymentActive()
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string todayPath = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            List<CAC15Report> report = new List<CAC15Report>();

            if (File.Exists(todayPath))
            {
                //Read existing transactions from text file
                FileStream fs = new FileStream(todayPath, FileMode.Open);
                IFormatter formatter = new BinaryFormatter();
                report = (List<CAC15Report>)formatter.Deserialize(fs);
                fs.Close();
            }


            List<PrintingReceipt> printingReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["PrintingReceipts"];
            List<PrintingReceipt> groupDividualReceipts = (List<PrintingReceipt>)_presenter.WorkItem.State["GroupDividualPrintingReceipts"];
            List<CAC15Report> transactions = new List<CAC15Report>();

            //Remove all transactions of this payment
            transactions = GetTransactions(printingReceipts, groupDividualReceipts);
            foreach (CAC15Report r in transactions)
            {
                foreach (CAC15Report c in report)
                {
                    if (c.RealReceiptId == r.RealReceiptId && c.ValidateFlag == "0")
                    {
                        c.PaymentActive = "1";
                        c.ValidateFlag = "1";
                        c.Active = "1";
                    }
                }
            }


            //Save to text file
            IFormatter serializer = new BinaryFormatter();
            using (Stream writer = new FileStream(todayPath, FileMode.Create))
            {
                serializer.Serialize(writer, report);
                writer.Close();
            }
        }

        private decimal? GetPaymentAmount(PrintingInvoice inv, string ptId)
        {
            List<InvoicePaymentMethod> pmx = inv.PaymentMethods;
            List<InvoicePaymentMethod> chqPms = pmx.FindAll(delegate(InvoicePaymentMethod p)
                {
                    return p.PtId == ptId && p.InvoiceUiRefId == inv.UiRefId;
                }
            );

            decimal? amount = 0;
            foreach (InvoicePaymentMethod ipm in chqPms)
            {
                amount += ipm.Amount;
            }

            
            return amount;
        }
        #endregion

        private void draftCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (draftCheckBox.Checked)
            {
                cashierChequeCheckBox.Checked = false;
            }
        }

        private void cashierChequeCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (cashierChequeCheckBox.Checked)
            {
                draftCheckBox.Checked = false;
            }
        }

        private void chequeBankComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13 && chequeBankComboBox.SelectedIndex>-1)
            {
                SendKeys.Send("{TAB}");
            }
            else
            {
                FindChequeBank();
            }
        }

        private void receiptNoTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SendKeys.Send("{TAB}");
            }
        }

        private void receiptDateDateTimePicker_KeyPress(object sender, KeyPressEventArgs e)
        {
            okButton.Focus();
        }

        private void chqAllocationcontextMenuStrip_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            paymentDataGridView.Enabled = false;

            using(ChequeAllocationForm chqForm = new ChequeAllocationForm())
            {
                chqForm.SetInvoice(_payingInvoices);
                chqForm.SetPaymentMethod(_paymentMethods);

                if(chqForm.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    AssignPaymentMethodToInvoices(false);
                }
            }

            paymentDataGridView.Enabled = true;
        }

        private void chqBankSearchButton_Click(object sender, EventArgs e)
        {
            FindChequeBank();
        }

        private void FindChequeBank()
        {
            FindBank(chequeBankComboBox,false);
        }

        private void depBankButton_Click(object sender, EventArgs e)
        {
            FindDepositBank();
        }

        private void FindDepositBank()
        {
            FindBank(depositBankComboBox,true);
        }

        private void FindBank(ComboBox bankComboBox, bool isDeposit)
        {
            using (BankSearchForm bsForm = new BankSearchForm(isDeposit))
            {
                if (bsForm.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    SetBankDataSource(bankComboBox, bsForm.SelectedBank, isDeposit);
                }
            }
        }

        private void depositBankComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13 && depositBankComboBox.SelectedIndex > -1)
            {
                SendKeys.Send("{TAB}");
            }
            else
            {
                FindDepositBank();
            }
        }

        private void cashFeeCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (cashFeeCheckBox.Checked)
            {
                cashFeeText.Enabled = true;
            }
            else
            {
                cashFeeText.Clear();
                cashFeeText.Enabled = false;
            }
        }

        private void chequeFeeCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (chequeFeeCheckBox.Checked)
            {
                chequeFeeText.Enabled = true;
            }
            else
            {
                chequeFeeText.Clear();
                chequeFeeText.Enabled = false;
            }
        }

        private void payInFeeCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (payInFeeCheckBox.Checked)
            {
                payInFeeText.Enabled = true;
            }
            else
            {
                payInFeeText.Clear();
                payInFeeText.Enabled = false;
            }
        }

        private bool CheckAdjustAmountForPartialPayment()
        {
            if (_payingInvoices.Count > 0)
            {
                if (_payingInvoices[_payingInvoices.Count - 1].GAmount != _payingInvoices[_payingInvoices.Count - 1].ToPayGAmount
                    && _payingInvoices[_payingInvoices.Count - 1].TotalPaidAmount != _payingInvoices[_payingInvoices.Count - 1].ToPayGAmount
                    && _payingInvoices[_payingInvoices.Count - 1].ToPayAdjAmount != 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }

        private bool CheckPaidGAmount()
        {
            if (Session.IsNetworkConnectionAvailable)
            {
                _paidInvoiceNo = "";
                foreach (Invoice iv in _payingInvoices)
                {
                    if (_presenter.CheckPaidGAmount(iv.InvoiceNo))
                    {
                        _paidInvoiceNo += iv.InvoiceNo;
                    }
                }

                if (_paidInvoiceNo != "")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        //dependency store proc. - pc_get_InActiveBillBook
        private bool CheckInActiveBillBook()
        {
            bool ret = false;
            if (Session.IsNetworkConnectionAvailable)
            {
                //validate group invoice by using billbookId. It is a unique key for any check-in
                if (_payingInvoices.Count > 0 && _payingInvoices[0].Bills[0].DebtId != null && _payingInvoices[0].Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id)
                    ret = _presenter.CheckInActiveBillBook(_payingInvoices[0].Bills[0].BillBookId);
            }
            return ret;

            //    _paidInvoiceNo = "";
            //    foreach (Invoice iv in _payingInvoices)
            //    {
            //        if (iv.Bills[0].DebtId != null && iv.Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id)
            //        {
            //            if (_presenter.CheckInActiveBillBook(iv.InvoiceNo))
            //            {
            //                _paidInvoiceNo += iv.InvoiceNo;
            //            }
            //        }
            //    }
            //    if (_paidInvoiceNo != "")
            //    {
            //        return true;
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}
            //else
            //{
            //    return false;
        
        }


        private void checkNumericTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SendKeys.Send("{TAB}");
            }

            if (!char.IsNumber(e.KeyChar) && e.KeyChar != '\b')
            {
                e.Handled = true;
            }
        }


        #region +++ Cash Management +++

        private bool ValidateCloseWorkOfCashier()
        {
            try
            {
                if (Session.IsNetworkConnectionAvailable)
                {
                    WorkStatus workstatus = IsClosedWork();
                    if ((Session.IsNetworkConnectionAvailable ? ((workstatus.CloseWorkBy == null) ? true : false) : false))
                        return true;
                    else
                    {
                        string cashierTxt = string.Format("({0}) - {1}", workstatus.CloseWorkBy, workstatus.CashierName);
                        MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        _presenter.OnCashierOpenWork("tmp");
                        _presenter.OnClosePaymentView();
                        return false;
                    }
                }
                else
                {
                    return true;
                }
            }
            catch
            {
                //MessageBox.Show("เครือข่ายมีปัญหาไม่สามารถรับชำระเงินได้ (Offline)  \n\nกรุณาลองใหม่อีกครั้งเมื่อเครือข่ายกลับมาเป็นปรกติ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                MessageBox.Show("ระบบไม่สามารถติดต่อกับเครื่องแม่ข่ายได้  \n\nกรุณาลองใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                return false;
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private bool ValidateWorkStatus()
        {
            if (Session.Work.Id == null && Session.IsNetworkConnectionAvailable)
            {
                MessageBox.Show("โปรแกรมไม่สามารถตรวจสอบสถานะการเปิดกะได้ \n\nกรุณาทำการล็อกอินเข้าสู่ระบบใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            else
            {
                return true;
            }

        }

        //// รวมใบเสร็จแผนผ่อน 2021-10-07 Check ใบเสร็จรวม Enable Status from ta.AppSetting
        public string CheckSettingGroupReceiptEnableStatus()
        {
            return _presenter.CheckSettingGroupReceiptEnableStatus();
        }

        #endregion

        #region +++ DCR : QR Payment , add on feature for PEA Smart screent  +++  

        /// <summary>
        /// บันทึกข้อมูล  1. ประเภทการชำระ 2. Invoice ที่ชำระ
        /// เพื่อเป็นข้อมูลในกรณีที่มีข้อมูลจากธนาคาร แต่ไม่มีการชำระเงินใน BPM.
        /// </summary>
        private void SaveQRPaymentBillInfo()
        {
            // Check setting enable/disable feature. 
            string scrExport = CodeTable.Instant.GetAppSettingValue("SCR_EXPORT_PAYMENT");
            string scrPath = CodeTable.Instant.GetAppSettingValue("QRPayment_BILLINFO_PATH");

            try
            {
                // Case : Enable write text file 
                if (scrExport.Trim() == "1")
                {
                    string billInfoPath = BPMPath.ConfigPath + "\\" + scrPath;
                    string fileName = "PAYInfo" + Session.BpmDateTime.Now.ToString("yyyyMMdd_hhmmss", new CultureInfo("en-US"));
                    string pathFileName = billInfoPath + "\\" + fileName + ".txt";

                    if (!Directory.Exists(billInfoPath))
                        Directory.CreateDirectory(billInfoPath);

                    // Crate text file for smart screen display QR Code
                    using (StreamWriter writer = new StreamWriter(pathFileName))
                    {
                        decimal totExcludeAmout = 0;
                        decimal totQRAmount = 0;

                        //Payment method.
                        string strdata = string.Empty;

                        foreach (var pm in this._paymentMethods)
                        {
                            strdata = string.Format("PtId:{0}|Ref:{1}|ToPayAmount:{2}", pm.PtId, pm.BankName, pm.ToPayAmount);
                            writer.WriteLine(strdata);
                        }

                        // Pay Invoice.
                        foreach (var iv in this._payingInvoices)
                        {
                            strdata = string.Format("InvoiceNo:{0}|CaId:{1}|PaidAmount:{2}", (string.IsNullOrEmpty(iv.InvoiceNo) ? "-" : iv.InvoiceNo), iv.CaId, iv.ToBePaidGAmount);
                            writer.WriteLine(strdata);
                        }

                        // 0 : Payment amount , 1 : Paid non QR , 2 :  
                        string data = string.Format("{0}|{1}|{2}|{3}", this.totalPaymentTextBox.Text,
                                        totExcludeAmout.ToString("#,##0.00"), totQRAmount.ToString("#,##0.00"), this.changeAmountTextBox.Text);
                        writer.WriteLine(data);
                    }

                }
            }
            catch (Exception)
            {
                // Not throw error.
                //throw;
            }


        }

        private void SaveTextFilePaymentForSmartScreen()
        {

            // Check setting enable/disable feature. 
            string scrExport = CodeTable.Instant.GetAppSettingValue("SCR_EXPORT_PAYMENT");
            string scrPath = CodeTable.Instant.GetAppSettingValue("SCR_PATH");

            try
            {
                // Case : eable write text file 
                if (scrExport.Trim() == "1" )
                {
                    string qrPath = BPMPath.ConfigPath + "\\" + scrPath;
                    string fileName = "PAY"+ Session.BpmDateTime.Now.ToString("yyyyMMdd_hhmmss", new CultureInfo("en-US")) ;
                    string pathFileName = qrPath + "\\" + fileName + ".txt";

                    if (!Directory.Exists(qrPath))
                    {
                        Directory.CreateDirectory(qrPath);
                    }

                    // Crate text file for smart screen display QR Code
                    using (StreamWriter writer = new StreamWriter(pathFileName))
                    {
                        decimal totExcludeAmout = 0;
                        decimal totQRAmount = 0;
                        
                        // Total amount. 
                        foreach (var payMethod in _paymentMethods)
                        {
                            if (payMethod.PtId == CodeNames.PaymentType.QRPayment.Id)
                                totQRAmount += payMethod.ToPayAmount.Value;
                            else 
                                totExcludeAmout += payMethod.ToPayAmount.Value;
                        }

                        // 0 : Payment amount , 1 : Paid non QR , 2 :  
                        string data = string.Format("{0}|{1}|{2}|{3}", this.totalPaymentTextBox.Text,
                                        totExcludeAmout.ToString("#,##0.00"),totQRAmount.ToString("#,##0.00"), this.changeAmountTextBox.Text);
                        writer.WriteLine(data);

                        // Write CaId.
                        foreach (var payInvoince in this._payingInvoices)
                            writer.WriteLine(payInvoince.CaId);
                    }

                    // Create file payment .ok
                    pathFileName = qrPath + "\\" + fileName + ".ok";
                    using (File.Create(pathFileName)) { }
                }
            }
            catch (Exception)
            {
            }

        }

        public void SaveTextFileCancelPaymentForSmartScreen()
        {
            string pathFilename = string.Empty;
            //20230310 DCR QR Payment

            try
            {
                string scrPath = CodeTable.Instant.GetAppSettingValue("SCR_PATH");
                string qrPath = BPMPath.ConfigPath + "\\" + scrPath;

                pathFilename = qrPath + "\\PAYCANCEL";

                if (!Directory.Exists(qrPath))
                {
                    Directory.CreateDirectory(qrPath);
                }

                using (File.Create(pathFilename + ".txt")) { }
                using (File.Create(pathFilename + ".ok")) { }

            }
            catch
            {
            }

        }

        public void SavePaymentCompletedFormSmartScreen()
        {
            string pathFilename = string.Empty;
            //20230310 DCR QR Payment

            try
            {
                string scrPath = CodeTable.Instant.GetAppSettingValue("SCR_PATH");
                string qrPath = BPMPath.ConfigPath + "\\" + scrPath;

                pathFilename = qrPath + "\\PAYSUCCESS";

                if (!Directory.Exists(qrPath))
                {
                    Directory.CreateDirectory(qrPath);
                }

                using (File.Create(pathFilename + ".txt")) { }
                using (File.Create(pathFilename + ".ok")) { }

            }
            catch
            {
            }
        }


        TabPage tabPageQRPayment = null;
        public void EnableQRPayment(bool status)
        {
            int indexForRemove;

            try
            {
                if (paymentTypeTabControl.TabPages.Count == 4)
                    indexForRemove = 3;
                else
                    indexForRemove = 2;

                if (tabPageQRPayment == null)
                    this.tabPageQRPayment = paymentTypeTabControl.TabPages[indexForRemove];

                //QRCodetabPage.Visible = status; 
                if (status)
                {
                    // ไม่มี Tab QRPayment ระบบจะ Add tab QRPayment เข้ามา 
                    if (!this.paymentTypeTabControl.TabPages.Contains(this.tabPageQRPayment))
                        this.paymentTypeTabControl.TabPages.Add(this.tabPageQRPayment);
                }
                else
                {
                    // มี Tab QRPayment ระบบจึงจะ Remove tabpate ออก
                    if (this.paymentTypeTabControl.TabPages.Contains(this.tabPageQRPayment))
                        this.paymentTypeTabControl.TabPages.Remove(this.tabPageQRPayment);
                }
            }
            catch (Exception)
            {
            }
        }

        #endregion




    }
}

