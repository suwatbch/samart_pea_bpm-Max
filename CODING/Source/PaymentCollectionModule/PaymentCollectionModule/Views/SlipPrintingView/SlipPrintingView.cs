//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class SlipPrintingView : UserControl, ISlipPrintingView
    {
        public SlipPrintingView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public SlipPrintingViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            if (((ExternalReceipt)_presenter.WorkItem.State["ExtReceipt"]).ReceiptId != null)
            {
                this.ParentForm.Close();       
            }
        }

        private void progressBar1_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        #region ISlipPrintingView Members

        public void SetPrintingStatus(string status)
        {
            //lb_progress.Text = string.Format("กำลังพิมพ์ใบเสร็จรับเงิน {0}", status);
        }

        public void ShowReport(GroupInvoicingReportParam param)
        {
            _presenter.OnShowGroupInvoicingReport(param);
        }

        #endregion
    }
}

