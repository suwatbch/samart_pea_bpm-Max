//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using System.Threading;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Linq;

namespace PEA.BPM.PaymentCollectionModule
{
    public class SlipPrinting
    {
        private IBillingService _billingService;
        private IReportService _reportService;

        public SlipPrinting(IBillingService billingService, IReportService reportService)
        {
            _billingService = billingService;
            _reportService = reportService;
        }

        public SlipPrinting()
        {
        }

        public void Print(PrintingReceipt receipt, List<PaymentMethod> paymentMethods,
            List<string> allReceiptsNo)
        {
            //// DCR รวมใบเสร็จแผนผ่อน บังคับให้ออกที่ Electric Rececipt ฟอร์ม ถ้า GroupReceipt = "Y"

            string targetPrefix = receipt.Prefix;
            if(receipt.GroupReceiptOrNot == "Y")
            {
                if (   receipt.Prefix   == "A"
                    || receipt.Prefix   == "C"
                    || receipt.Prefix   == "E"
                    || receipt.Prefix   == "G"
                    || receipt.Prefix   == "H")
                {
                    targetPrefix = "A";
                }
            }          
            //switch (receipt.Prefix)   //ก่อนแก้บังคับให้ออก Electric Form
            switch (targetPrefix)       //หลังบังคับให้ออก Electric Form
            {
                // POS Slip
                case "A":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.Fp410Receipt.ElectricReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);
                    break;
                case "C":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.Fp410Receipt.NonTaxReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);
                    break;
                case "E":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.Fp410Receipt.TaxReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);
                    break;
                case "G":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.Fp410Receipt.AGAdvanceReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods, _billingService);
                    break;
                case "H":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.Fp410Receipt.AGSubmitReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods, _billingService);
                    break;

                // Pre-Printed Form
                case "B":
                case "D":
                case "F":
                    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.PreprintedReceipt.ElectricReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);

                    //if (receipt.PrintingInvoices[0].Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id
                    //    && receipt.PrintingInvoices[0].GroupInvoiceReceiptType == CodeNames.GroupInvoiceReceiptType.Summary)
                    //{
                    //    if (receipt.PaymentDate.Date == Session.BpmDateTime.Now.Date)
                    //    {
                    //        PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.PreprintedReceipt.ElectricReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);
                    //    }                            
                    //}
                    //else
                    //{
                    //    PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.PreprintedReceipt.ElectricReceipt.Instance().Print(receipt, allReceiptsNo, paymentMethods);
                    //}
                    break;

                default:
                    break;
            }

            string tmpDebtId                  = receipt.PrintingInvoices[0].Bills[0].DebtId;
            string tmpGroupInvoiceReceiptType = receipt.PrintingInvoices[0].GroupInvoiceReceiptType;

            if (receipt.PrintingInvoices[0].Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id
                && receipt.PrintingInvoices[0].GroupInvoiceReceiptType == CodeNames.GroupInvoiceReceiptType.Summary)
            {
                ThreadStart ts = new ThreadStart(() => PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.PreprintedReceipt.GroupInvoiceReport.Instance().Print(receipt.PrintingInvoices[0].Bills[0].GroupInvoiceId, receipt.PrintingInvoices[0].PaymentId, receipt.ReceiptId, _reportService));
                Thread t = new Thread(ts);
                t.SetApartmentState(ApartmentState.STA);
                t.Start();
                //PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView.PreprintedReceipt.GroupInvoiceReport.Instance().Print(receipt.PrintingInvoices[0].Bills[0].GroupInvoiceId, receipt.PrintingInvoices[0].PaymentId, receipt.ReceiptId, _reportService);
            }
        }

        public List<string> GetAllReceiptsNo(List<ReceiptStatus> rss)
        {
            //rss.Sort(delegate(ReceiptStatus r1, ReceiptStatus r2)
            //    {
            //        if (r1.TotalReceipt == r2.TotalReceipt)
            //        {
            //            return r1.Id.CompareTo(r2.Id);
            //        }
            //        else
            //        {
            //            return r2.TotalReceipt.CompareTo(r1.TotalReceipt);
            //        }                    
            //    }
            //);


            List<string> receiptNo = new List<string>();
             
            ////รวมใบเสร็จแผนผ่อน  #104
            rss = rss.OrderBy(r => r.Id).ToList();

            if (rss.Count > 1)
            {
                short totalReceipt = 0;
                string prefix = "";
                string start = "";
                string end = "";

                for (int i = 0; i <= rss.Count; i++)
                {
                    if (i < rss.Count)
                    {
                        if (prefix != rss[i].IdPrefix || totalReceipt != rss[i].TotalReceipt)
                        {
                            if (start != "")
                            {
                                if (end == "")
                                {
                                    receiptNo.Add(start);
                                }
                                else
                                {
                                    string c = CreateFromTo(start, end);
                                    if (c.Length > 0)
                                    {
                                        receiptNo.Add(c);
                                    }
                                }
                            }

                            start = rss[i].Id;
                            end = "";
                            prefix = rss[i].IdPrefix;
                            totalReceipt = rss[i].TotalReceipt;
                        }
                        else
                        {
                            end = rss[i].Id;
                        }
                    }
                    else
                    {
                        if (start != "")
                        {
                            if (end == "")
                            {
                                receiptNo.Add(start);
                            }
                            else
                            {
                                string c = CreateFromTo(start, end);
                                if (c.Length > 0)
                                {
                                    receiptNo.Add(c);
                                }
                            }
                        }
                    }
                }

                List<ReceiptStatus> cancelReceipts = rss.FindAll(delegate(ReceiptStatus rs)
                {
                    return rs.IsCancelled;
                }
                );

                if (cancelReceipts.Count > 0)
                {
                    receiptNo.Add("");
                    foreach (ReceiptStatus rs in cancelReceipts)
                    {
                        receiptNo.Add(rs.Id);
                    }
                }
            }

            return receiptNo;
        }

        public List<string> GetAllReceiptsNo(List<PrintingReceipt> receipts)
        {
            //// #104 เรียงลำดับ การแสดงใบเสร็จ  สำหรับการรับชำระครั้งแรก 2021-Nov-10 Uthen.P
            receipts = receipts.OrderBy(r => r.ReceiptId).ToList();

            string prefix = "";
            string start = "";
            string end = "";
            List<string> receiptNo = new List<string>();

            if (receipts.Count == 1)
            {
                return receiptNo;
            }

            for (int i = 0; i < receipts.Count; i++)
            {
                if (prefix != receipts[i].Prefix)
                {
                    if (start != "")
                    {
                        if (end == "")
                        {
                            receiptNo.Add(start);
                        }
                        else
                        {
                            string c = CreateFromTo(start, end);
                            if (c.Length > 0)
                            {
                                receiptNo.Add(c);
                            }
                        }
                    }
                    start = receipts[i].ReceiptId;
                    end = "";
                    prefix = receipts[i].Prefix;
                }
                else
                {
                    end = receipts[i].ReceiptId;
                }
            }
            if (start != "")
            {
                if (end == "")
                {
                    receiptNo.Add(start);
                }
                else
                {
                    string c = CreateFromTo(start, end);
                    if (c.Length > 0)
                    {
                        receiptNo.Add(c);
                    }
                }
            }
            return receiptNo;
        }

        private string CreateFromTo(string a, string b)
        {
            if (b.Length == 0)
            {
                return "";
            }
            else
            {
                return string.Format("{0} ถึง {1}", a, b.Substring(b.Length - 4, 4));
            }
        }


        private void AssiginPaymentMethod(List<Invoice> invoices, List<InvoicePaymentMethod> paymentMethods, List<PaymentMethod> pms, string ptId)
        {
            List<InvoicePaymentMethod> chqPms = paymentMethods.FindAll(delegate(InvoicePaymentMethod pm)
            {
                return pm.PtId == ptId;
            }
                    );


            foreach (InvoicePaymentMethod ipm in paymentMethods)
            {
                foreach (PaymentMethod p in pms)
                {
                    if (ipm.PaymentMethodUiRefId == p.UiRefId && p.PtId == ptId)
                    {
                        p.ToPayAmount = ipm.Amount + ((p.ChangeAmount != null) ? p.ChangeAmount : 0);
                    }
                }
            }

            foreach (InvoicePaymentMethod pm in chqPms)
            {
                foreach (PaymentMethod pmx in pms)
                {
                    if (null == pmx.ToPayInvoices)
                    {
                        pmx.ToPayInvoices = new List<InvoicePaymentMethod>();
                    }
                    else
                    {
                        pmx.ToPayInvoices.Clear();
                    }

                    foreach (Invoice iv in invoices)
                    {
                        if (iv.PaymentMethods == null)
                        {
                            iv.PaymentMethods = new List<InvoicePaymentMethod>();
                        }

                        decimal ttrma = pmx.TotalRemainAmount; // ตังค์ที่เหลือจาก Payment Method
                        if (ttrma > 0)
                        {
                            decimal ttrmtpa = iv.TotalRemainToPayAmount; // ตังค์ที่ต้องจ่ายอีก
                            if (ttrmtpa > 0)
                            {
                                if (ttrma >= ttrmtpa) // ตังค์เหลือมากกว่า
                                {
                                    InvoicePaymentMethod.Create(iv, pmx, ttrmtpa);
                                }
                                else // ตังค์เหลือน้อยกว่า
                                {
                                    InvoicePaymentMethod.Create(iv, pmx, ttrma);
                                }
                            }
                        }
                    }
                }
            }
        }

        public List<PrintingReceipt> CreateReceipt(List<PrintingInvoice> printingInvoices, List<PaymentMethod> pms, decimal totalAmount,
            decimal paidAmount, decimal changeAmount, DateTime paymentDate, bool isExtReceipt, IDSettingHelper hp)
        {
            // แยกใบเสร็จตาม ลูกค้า, ชนิดฟอร์ม (Slip ใบเสร็จรับเงิน, ใบเสร็จรับเงินทั่วไป),  ชนิดใบเสร็จ (ใบเสร็จ, ใบเสร็จ/ใบกำกับภาษี, ใบรับเงิน) และใบเสร็จที่ต้องพิมพ์แยก
            Dictionary<string, PrintingReceipt> receipts = new Dictionary<string, PrintingReceipt>();

            // ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝับ Feature group receipt installment (แผน๏ฟฝ๏ฟฝอน)
            Dictionary<string, string> reuseReceiptIdDict = new Dictionary<string, string>();
            string reuseReceiptId = string.Empty;
            string keyOfReceiptId = string.Empty;
            bool isGroupReceipt = false;
            bool _foundGroupReceipt = false;


            // รวมใบเสร็จแผนผ่อน 2021-09-22 
            // CA/Tax code/Payment date/Due Date/งวด
            //DefectLog#111
            var objGroupReceiptPlan = (from t0 in printingInvoices
                                       where t0.CaId.StartsWith("02") && t0.Bills[0].DebtId.StartsWith("M008") 
                                       && t0.Bills[0].TaxRate != null 
                                       && t0.InstallmentTotalPeriod > 1
                                       //group t0 by new { t0.CaId, t0.CaTaxId, t0.DueDate, t0.InstallmentPeriod, t0.InstallmentTotalPeriod } into g
                                       group t0 by new { t0.CaId, t0.Bills[0].TaxCode, t0.Bills[0].DueDate, t0.InstallmentPeriod, t0.InstallmentTotalPeriod } into g
                                       select new { g.Key.CaId, g.Key.TaxCode, g.Key.DueDate, g.Key.InstallmentPeriod, g.Key.InstallmentTotalPeriod, CountItem = g.Count() })
                                       .Where(g => g.CountItem > 1).ToList();

            if (Session.IsGroupReceiptEnable != "1")
            {
                objGroupReceiptPlan.Clear();
            }

            for (int k = 0; k < printingInvoices.Count; k++)
            {
                PrintingInvoice iv = printingInvoices[k];
                string debtType = iv.Bills[0].DebtId;

                // Group Invoice
                if (debtType == CodeNames.DebtType.AgencyGroupInvoicing.Id)
                {
                    // Print summary receipt
                    if (iv.GroupInvoiceReceiptType == CodeNames.GroupInvoiceReceiptType.Summary)
                    {
                        PrintingReceipt receipt = GetReceipt(totalAmount, paidAmount, changeAmount, paymentDate, iv, isExtReceipt, hp, false, "");
                        string key = string.Format("{0}{1}{2}{3}", iv.CaId, iv.PrintingConstaint.DefaultPaperSize, debtType, iv.GetHashCode());
                        receipts.Add(key, receipt);
                    }
                    else // Print each receipt individually (should be "1")
                    {
                        // Get all invoices under this group invoice
                        InvoiceItemSearchParam param = new InvoiceItemSearchParam(iv.Bills[0].BillBookId);
                        param.IsOtherBranch = (iv.NetworkMode == NetworkMode.OnlineToBpmServer);

                        List<Invoice> givs = _billingService.SearchInvoiceItemByGroupInvoiceNo(param);
                        foreach (Invoice giv in givs)
                        {
                            Random random = new Random();
                            giv.UiRefId = random.Next();
                            giv.Bills[0].DebtType = CodeNames.DebtType.AgencyGroupInvoicing.Name;

                            //AJ
                            if (giv.Bills[0].IsAjDebt())
                            {
                                List<DebtType> dt = CodeTable.Instant.ListDebtTypes().FindAll(delegate(DebtType d) { return d.DebtId == giv.Bills[0].DebtId; });
                                if (dt.Count > 0)
                                {
                                    giv.Bills[0].DebtType = dt[0].DebtName;
                                }
                            }

                            giv.PaymentId = iv.PaymentId;
                            giv.Bills[0].BillBookId = iv.BillBookId;
                            giv.GroupInvoiceReceiptType = iv.GroupInvoiceReceiptType;
                        }

                        PrintingConstraint pcst = new PrintingConstraint();
                        pcst.DefaultPaperSize = PrintingConstraint.PaperSize.PosSlip;

                        List<InvoicePaymentMethod> pmx = iv.PaymentMethods;

                        // Clear this invoice from Payment Methods
                        iv.PaymentMethods = new List<InvoicePaymentMethod>();

                        // Set Change Rounding
                        givs[givs.Count - 1].ToPayAdjAmount = iv.ToPayAdjAmount;

                        // Assign these Payment Methods to Sub Invoices
                        if (givs.Count == 1)
                        {
                            foreach (InvoicePaymentMethod pm in pmx)
                            {
                                InvoicePaymentMethod.Create(givs[0], pm.GetPaymentMethod(pms), pm.Amount);
                            }
                        }
                        else
                        {
                            List<PaymentMethod> pmm = new List<PaymentMethod>();

                            foreach (InvoicePaymentMethod ipm in pmx)
                            {
                                if (pms.Exists(delegate(PaymentMethod p)
                                {
                                    return p.UiRefId == ipm.PaymentMethodUiRefId;
                                }
                                    ))
                                {
                                    PaymentMethod pm = pms.Find(delegate(PaymentMethod pp)
                                    {
                                        return pp.UiRefId == ipm.PaymentMethodUiRefId;
                                    }
                                                       );
                                    pmm.Add(pm);
                                }
                            }


                            AssiginPaymentMethod(givs, pmx, pmm, CodeNames.PaymentType.Cheque.Id);
                            AssiginPaymentMethod(givs, pmx, pmm, CodeNames.PaymentType.Deposit.Id);
                            AssiginPaymentMethod(givs, pmx, pmm, CodeNames.PaymentType.Cash.Id);
                            // 20240829 Savake add payment type QR payment for report 2.17
                            AssiginPaymentMethod(givs, pmx, pmm, CodeNames.PaymentType.QRPayment.Id);
                        }


                        for (int j = 0; j < givs.Count; j++)
                        {
                            Invoice giv = givs[j];
                            giv.Bills[0].GroupInvoiceId = iv.Bills[0].GroupInvoiceId;

                            PrintingInvoice piv = new PrintingInvoice(giv, pcst);
                            PrintingReceipt receipt = GetReceipt(totalAmount, paidAmount, changeAmount, paymentDate, piv, isExtReceipt, hp, false, string.Empty);
                            string key = string.Format("{0}{1}{2}{3}", piv.CaId, piv.PrintingConstaint.DefaultPaperSize, debtType, piv.GetHashCode());
                            receipts.Add(key, receipt);
                        }
                    }
                }
                else if (debtType == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyReturnPayment.Id))
                {
                    string key = string.Format("{0}{1}{2}", iv.CaId, iv.PrintingConstaint.DefaultPaperSize, debtType);

                    if (!receipts.ContainsKey(key))
                    {
                        PrintingReceipt receipt = GetReceipt(totalAmount, paidAmount, changeAmount, paymentDate, iv, isExtReceipt, hp, false, string.Empty);
                        receipts.Add(key, receipt);
                    }
                    else
                    {
                        PrintingReceipt receipt = receipts[key];
                        receipt.PrintingInvoices.Add(iv);

                        if (iv.ToPayAdjAmount != null && iv.ToPayAdjAmount.Value != 0)
                        {
                            receipt.AdjChangeAmount = iv.ToPayAdjAmount.Value;
                        }
                    }
                }
                // Installment
                else if (debtType.Substring(0, 5) == "M0080")
                {
                    // Get original invoice
                    OriginalInvoiceSearchParam param = new OriginalInvoiceSearchParam(iv.CaDoc);
                    param.IsOtherBranch = (iv.NetworkMode == NetworkMode.OnlineToBpmServer);
                    Invoice ivo = _billingService.SearchOriginalInvoiceByInstallmentItemCaDoc(param);

                    ivo.Name = iv.Name;
                    ivo.Address = iv.Address;

                    //Tax13
                    ivo.CaTaxId = iv.CaTaxId;
                    ivo.CaTaxBranch = iv.CaTaxBranch;

                    ivo.ARPmId = iv.ARPmId;
                    ivo.ToPayGAmount = iv.ToPayGAmount;
                    ivo.ToPayAdjAmount = iv.ToPayAdjAmount;
                    ivo.PaymentId = iv.PaymentId;
                    ivo.UiRefId = iv.UiRefId;
                    ivo.OriginalInvoiceNo = ivo.InvoiceNo;
                    ivo.InvoiceNo = iv.InvoiceNo;
                    ivo.OriginalInvoiceDt = ivo.InvoiceDate;
                    ivo.InvoiceDate = iv.InvoiceDate;

                    if (iv.InstallmentTotalPeriod != null && iv.InstallmentTotalPeriod > 0)
                    {
                        ivo.InstallmentPeriod = iv.InstallmentPeriod;
                        ivo.InstallmentTotalPeriod = iv.InstallmentTotalPeriod;
                        ivo.Bills[0].FullBaseAmount = iv.Bills[0].FullBaseAmount;
                        ivo.Bills[0].FullFtAmount = iv.Bills[0].FullFtAmount;
                        ivo.Bills[0].FullQty = iv.Bills[0].FullQty;
                        ivo.Bills[0].FullAmount = iv.Bills[0].FullAmount;
                        ivo.Bills[0].FullVatAmount = iv.Bills[0].FullVatAmount;
                        ivo.Bills[0].FullGAmount = iv.Bills[0].FullGAmount;
                        ivo.Bills[0].GAmount = iv.Bills[0].GAmount;
                    }

                    Decimal? exVatAmount = ivo.AmountExVat;
                    Decimal? gAmount = ivo.GAmount;
                    Decimal? vAmount = ivo.VatAmount;
                    Decimal? paidGAmount = ivo.PaidGAmount;
                    Decimal? paidVatAmount = ivo.PaidVatAmount;
                    string taxCode = ivo.Bills[0].TaxCode;
                    Decimal? taxRate = ivo.Bills[0].TaxRate;
                    Decimal? qty = ivo.Qty;


                    decimal? toPayVatAmount;
                    decimal? toPayExVatAmount;

                    // Calculate Vat
                    if (null != iv.VatAmount && iv.VatAmount > 0 && ivo.Bills[0].DebtId != "M00100100")
                    {
                        if ((iv.TotalPaidAmount - iv.ToPayGAmount) == 0)
                        {
                            toPayVatAmount = iv.ToPayVatAmount;
                        }
                        else
                        {
                            toPayVatAmount = ((ivo.ToPayGAmount * vAmount) / gAmount);
                            toPayVatAmount = Decimal.Round(toPayVatAmount.Value, 2);
                            toPayExVatAmount = ivo.ToPayGAmount - toPayVatAmount;
                        }
                    }
                    else
                    {
                        if (null != vAmount && vAmount > 0 && ivo.Bills[0].DebtId != "M00100100")
                        {
                            foreach (string r in receipts.Keys)
                            {
                                if (receipts[r].PrintingInvoices[0].OriginalInvoiceNo == ivo.OriginalInvoiceNo)
                                {
                                    paidGAmount += receipts[r].PrintingInvoices[0].ToPayGAmount;
                                    paidVatAmount += receipts[r].PrintingInvoices[0].ToPayVatAmount;
                                }
                            }

                            if (((ivo.GAmount - paidGAmount) - ivo.ToPayGAmount) <= 0)
                            {
                                toPayVatAmount = ivo.VatAmount - paidVatAmount;
                                toPayVatAmount = Decimal.Round(toPayVatAmount.Value, 2);
                                toPayExVatAmount = ivo.ToPayGAmount - toPayVatAmount;
                            }
                            else
                            {
                                toPayVatAmount = ((ivo.ToPayGAmount * vAmount) / gAmount);
                                toPayVatAmount = Decimal.Round(toPayVatAmount.Value, 2);
                                toPayExVatAmount = ivo.ToPayGAmount - toPayVatAmount;
                            }
                        }
                        else
                        {
                            toPayVatAmount = 0;
                        }
                    }

                    ivo.ToPayVatAmount = toPayVatAmount;


                    // Calculate Qty
                    if (null != qty && qty != 0)
                    {
                        ivo.ToPayQty = ivo.ToPayExVatAmount / (exVatAmount / qty);
                        ivo.ToPayQty = Decimal.Round(ivo.ToPayQty.Value, 0);
                    }

                    // Savake 2021 check group reciept dtId like M0080
                    _foundGroupReceipt = false;
                    reuseReceiptId = string.Empty;
                    isGroupReceipt = false;

                    
                    var objInGroup = objGroupReceiptPlan.FirstOrDefault(c => c.CaId == iv.CaId &&
                                                                                                    c.TaxCode == iv.Bills[0].TaxCode &&
                                                                                                    c.DueDate == iv.Bills[0].DueDate &&
                                                                                                    c.InstallmentPeriod == iv.InstallmentPeriod &&
                                                                                                    c.InstallmentTotalPeriod == iv.InstallmentTotalPeriod);
                    isGroupReceipt = false;
                   
                    if (objInGroup != null)
                    {
                        _foundGroupReceipt = false;
                        reuseReceiptId = string.Empty;
                        isGroupReceipt = false;
                        keyOfReceiptId = string.Empty;

                        // ต้องทำการรวมใบเสร็จ. // ต้องค้นหา receipt ก่อนหน้าที่เคยถูกใช้งานไปแล้ว.
                        keyOfReceiptId += iv.CaId;
                        keyOfReceiptId += "|" + iv.Bills[0].TaxCode;
                        keyOfReceiptId += "|" + iv.Bills[0].DueDate.ToString();
                        keyOfReceiptId += "|" + iv.InstallmentPeriod;
                        keyOfReceiptId += "|" + iv.InstallmentTotalPeriod;

                        _foundGroupReceipt = reuseReceiptIdDict.TryGetValue(keyOfReceiptId, out reuseReceiptId);

                        isGroupReceipt = true;
                    }


                    ivo.PaymentMethods = iv.PaymentMethods;
                    //TODO: Let key user specifies all paper size from mt.DebtType table first.
                    //PrintingInvoice piv = new PrintingInvoice(ivo, GetPrintingConstraint(ivo));
                    PrintingInvoice piv = new PrintingInvoice(ivo, iv.PrintingConstaint);
                    PrintingReceipt receipt = GetReceipt(totalAmount, paidAmount, changeAmount, paymentDate, piv, isExtReceipt, hp, isGroupReceipt, reuseReceiptId);
                    string key = string.Format("{0}{1}{2}", piv.CaId, piv.PrintingConstaint.DefaultPaperSize, piv.GetHashCode());
                    receipts.Add(key, receipt);

                    if (objInGroup != null && reuseReceiptId == null) // Group receipt installment. 
                        reuseReceiptIdDict.Add(keyOfReceiptId, receipt.GroupReceiptIdInstallment); 

                }
                else
                {
                    PrintingReceipt receipt = GetReceipt(totalAmount, paidAmount, changeAmount, paymentDate, iv, isExtReceipt, hp, false, string.Empty);
                    string key = string.Format("{0}{1}{2}", iv.CaId, iv.PrintingConstaint.DefaultPaperSize, iv.GetHashCode());
                    receipts.Add(key, receipt);
                }
            }

            List<PrintingReceipt> rs = new List<PrintingReceipt>();
            foreach (string key in receipts.Keys)
            {
                rs.Add(receipts[key]);
            }
            //rs.Sort();

            // Group receipt installment. 
            //int countNormalReceipt = rs.Where(c => c.GroupReceiptIdInstallment == null).Count();
            //int countGroupReceiptInstallment = rs.Where(c => c.GroupReceiptIdInstallment != null).Select(s => s.GroupReceiptIdInstallment).Distinct().Count();
            //int groupTotal = countNormalReceipt + countGroupReceiptInstallment;

            // Set receipt printing sequence
            short totalReceipt = (short)rs.Count;
            for (short i = 1; i <= totalReceipt; i++)
            {
                rs[i - 1].PrintingSequence = i;
                rs[i - 1].TotalReceipt = totalReceipt;
            }


            //// DCR : รวมแผนผ่อน.  กลับไปใช้ business เดิม
            //// Set receipt printing sequence
            //short totalReceipt = (short)rs.Count;
            //short countGroupReceipt = 0;
            //Dictionary<string, short> dictGroupSeq = new Dictionary<string, short>();
            //bool searchGroupSeq = false;
            //short seqGroup = 0;
            //for (short i = 1; i <= totalReceipt; i++)
            //{
            //    // Check with receiptId Start with 'X'
            //    if (rs[i - 1].ReceiptId.Substring(0, 1) == "X")
            //    {

            //        searchGroupSeq = dictGroupSeq.TryGetValue(rs[i - 1].GroupReceiptIdInstallment, out seqGroup);
            //        if (searchGroupSeq)
            //        {
            //            // Have old seq.
            //            rs[i - 1].PrintingSequence = seqGroup;
            //        }
            //        else
            //        {
            //            // Gen nect seq. 
            //            countGroupReceipt += 1;
            //            rs[i - 1].PrintingSequence = countGroupReceipt;

            //            // Add to dictionary. 
            //            dictGroupSeq.Add(rs[i - 1].GroupReceiptIdInstallment, countGroupReceipt);
            //        }


            //    }
            //    else
            //    {
            //        countGroupReceipt += 1;
            //        rs[i - 1].PrintingSequence = countGroupReceipt;
            //    }
            //    rs[i - 1].TotalReceipt = (short)groupTotal;
            //}



            //// Not use.
            //// Set receipt printing sequence
            //int iGroupSeq = 0;
            //short totalReceipt = (short)rs.Count;
            //for (short i = 1; i <= totalReceipt; i++)
            //{
            //    //rs[i - 1].PrintingSequence = i;
            //    if (rs[i - 1].GroupReceiptIdInstallment != null)
            //    {
            //        var oldItemGroup = rs.FirstOrDefault(c => c.GroupReceiptIdInstallment == rs[i - 1].GroupReceiptIdInstallment && c.PrintingSequence > 0);
            //        if (oldItemGroup != null)
            //        {
            //            rs[i - 1].PrintingSequence = oldItemGroup.PrintingSequence;
            //        }
            //        else
            //        {
            //            iGroupSeq += 1;
            //            rs[i - 1].PrintingSequence = (short)iGroupSeq;
            //        }
            //    }
            //    else 
            //    {
            //        iGroupSeq += 1;
            //        rs[i - 1].PrintingSequence = (short)iGroupSeq;
            //    }


            //    rs[i - 1].TotalReceipt = (short)groupTotal ;
            //}


            return rs;
        }


        private PrintingReceipt GetReceipt(decimal totalAmount, decimal paidAmount, decimal changeAmount,
            DateTime paymentDate, PrintingInvoice iv, bool isExtReceipt, IDSettingHelper hp, bool isReceiptInstallment, string receiptIdInstallment)
        {
            // 2021-09-22 Add parameter for get isGroupReceiptInstallment , 
            //  ถ้าเป็นการผ่อนชำระ และมี receiptIdInstallment เข้ามาจะได้ ReceiptId หมายเลขเดิม
            Console.WriteLine("Print Type" + iv.PrintingConstaint.DefaultPaperSize);

            PrintingReceipt receipt;
            string receiptId;
            if (isReceiptInstallment &&  string.IsNullOrEmpty( receiptIdInstallment))
            {
                string _prefixInstallment = string.Empty;
                if (iv.PrintingConstaint.DefaultPaperSize == "S")
                    _prefixInstallment = "XA"; 
                else 
                    _prefixInstallment = "XB"; 

                receiptId = Running.GetReceiptId(
                _prefixInstallment,
                iv.Bills[0].TaxCode == null || iv.Bills[0].TaxCode[0] == 'O' || iv.Bills[0].TaxRate == null ? CodeNames.ReceiptType.NonTax : CodeNames.ReceiptType.Tax,
                iv.Bills[0].DebtId, isExtReceipt, hp);
            }
            else if (isReceiptInstallment && receiptIdInstallment != null && receiptIdInstallment.Length > 0)
            {
                // ใช้ GroupReceiptId Installment
                receiptId = receiptIdInstallment;
            }
            else
            {
                receiptId = Running.GetReceiptId(
                iv.PrintingConstaint.DefaultPaperSize,
                iv.Bills[0].TaxCode == null || iv.Bills[0].TaxCode[0] == 'O' || iv.Bills[0].TaxRate == null ? CodeNames.ReceiptType.NonTax : CodeNames.ReceiptType.Tax,
                iv.Bills[0].DebtId, isExtReceipt, hp);
            }

            //string receiptId = Running.GetReceiptId(
            //    iv.PrintingConstaint.DefaultPaperSize,
            //    iv.Bills[0].TaxCode == null || iv.Bills[0].TaxRate == null || (iv.Bills[0].DebtId != null && iv.Bills[0].DebtId == "M00100100") ? CodeNames.ReceiptType.NonTax : CodeNames.ReceiptType.Tax,
            //    iv.Bills[0].DebtId, isExtReceipt, hp);       
            receipt = new PrintingReceipt(
                receiptId, iv.CaId, iv.ReceiptPrintName, iv.CaTaxId, iv.CaTaxBranch, iv.Address, iv.Bills[0].ContractTypeId,
                totalAmount, paidAmount, changeAmount, iv.ToPayAdjAmount.Value, paymentDate,
                Session.User.Id, Session.User.Name);

            if (isReceiptInstallment)  // Group receipt installment. 
            { 
                receipt.GroupReceiptIdInstallment = receiptId;

                // Gen new of receipt for  group receipt istallment. 
                string subReceiptId = Running.GetReceiptId(
                               "X",
                                iv.Bills[0].TaxCode == null || iv.Bills[0].TaxCode[0] == 'O' || iv.Bills[0].TaxRate == null ? CodeNames.ReceiptType.NonTax : CodeNames.ReceiptType.Tax,
                                iv.Bills[0].DebtId, isExtReceipt, hp);
                receipt.ReceiptId = subReceiptId;
            }

            receipt.PrintingInvoices.Add(iv);

            receipt.BranchName = Session.Branch.Name;
            receipt.BranchAddress = Session.Branch.Address;
            receipt.BranchNumber = Session.Branch.Number;
            receipt.TerminalCode = Session.Terminal.Code;

            return receipt;
        }


        public List<PrintingInvoice> GetPrintingInvoiceList(List<Invoice> invoice)
        {
            List<Invoice> invoices = invoice;
            List<PrintingInvoice> printingInvoices = new List<PrintingInvoice>();

            foreach (Invoice iv in invoices)
            {
                printingInvoices.Add(new PrintingInvoice(iv, null));
            }

            return printingInvoices;
        }


        private PrintingConstraint GetPrintingConstraint(Invoice invoice)
        {
            string dtId = invoice.Bills[0].DebtId;

            List<DebtType> dts = CodeTable.Instant.ListDebtTypes();
            DebtType dtx = dts.Find(delegate(DebtType dt)
            {
                return dt.DebtId == dtId;
            }
            );

            if (null != dtx)
            {
                return new PrintingConstraint(dtx.DefultPaperSize);
            }
            else
            {
                return new PrintingConstraint("4");
            }
        }
    }
}

