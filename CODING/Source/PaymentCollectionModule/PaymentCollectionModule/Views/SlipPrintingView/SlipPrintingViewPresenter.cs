//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using System.Collections.Generic;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Threading;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.PaymentCollectionModule.Views.SlipPrintingView;
using System.IO;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.Linq;

namespace PEA.BPM.PaymentCollectionModule
{
    public class SlipPrintingViewPresenter : Presenter<ISlipPrintingView>
    {
		private IBillingService _billingService;
        private IReportService _reportService;

		[InjectionConstructor]
        public SlipPrintingViewPresenter([ServiceDependency] IBillingService billingService,
             [ServiceDependency] IReportService reportService)
		{
            _billingService = billingService;
            _reportService = reportService;
		}

        [EventSubscription(Constants.EventTopicNames.PrintingTypeSet, Thread = ThreadOption.UserInterface)]
        public void PrintingTypeSetHandler(object sender, EventArgs e)
        {
            ThreadPool.QueueUserWorkItem(new WaitCallback(PrintSlipCallback), null);
            //OnCancelTransaction();
            ShowView();    
        }


        [EventPublication(EventTopicNames.CancelTransaction, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CancelTransaction;
        public void OnCancelTransaction()
        {
            if (CancelTransaction != null)
                CancelTransaction(this, new EventArgs());
        }


        [EventPublication(EventTopicNames.ShowGroupInvoicingReport, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<GroupInvoicingReportParam>> ShowGroupInvoicingReport;
        internal void OnShowGroupInvoicingReport(GroupInvoicingReportParam param)
        {
            if (ShowGroupInvoicingReport != null)
                ShowGroupInvoicingReport(this, new EventArgs<GroupInvoicingReportParam>(param));
        }


        private void PrintSlipCallback(object state)
        {
            PrintSlip(); 
           
            try
            {
                ((UserControl)View).ParentForm.Close();
            }
            catch (Exception) // TODO: จะไม่ทำอะไรจริงๆ เหรอ ?
            {              
            }
        }


        private void PrintSlip()
        {
            List<PrintingReceipt> temp = null;

            try
            {
                List<PrintingInvoice> printingInvoices = (List<PrintingInvoice>)WorkItem.State["PrintingInvoices"];
                List<PaymentMethod> paymentMethods = (List<PaymentMethod>)WorkItem.State["PaymentMethods"];
                decimal paidAmount = (decimal)WorkItem.State["PaidAmount"];
                DateTime paymentDate = (DateTime)WorkItem.State["PaymentDate"];
                ExternalReceipt extReceipt = (ExternalReceipt)WorkItem.State["ExtReceipt"];

                decimal totalAmount = 0;
                foreach (PrintingInvoice inv in printingInvoices)
                {
                    totalAmount += inv.ToPayGAmount.Value;
                }


                decimal change = 0;
                foreach (PaymentMethod pm in paymentMethods)
                {
                    if (pm.PtId == CodeNames.PaymentType.Cash.Id
                        && null != pm.ChangeAmount)
                    {
                        change = pm.ChangeAmount.Value;
                        break;
                    }
                }

                SlipPrinting sp = new SlipPrinting(_billingService, _reportService);
                List<PrintingReceipt> printingReceipts = new List<PrintingReceipt>();
                printingReceipts = (List<PrintingReceipt>)WorkItem.State["PrintingReceipts"];

                //// DCR: รวมใบเสร็จแผนผ่อน ปรับลำดับการส่งข้อมูลปริ๊น หลัง Rollback 2021-OCT-18
                //int ReceiptQty  = 0;
                //ReceiptQty      = printingReceipts.Count;
                //for (int i = 0; i < ReceiptQty; i++)
                //{
                //    short tmpPrintingSeq                 = (short)(i+1);
                //    printingReceipts[i].TotalReceipt     = (short)ReceiptQty;
                //    printingReceipts[i].PrintingSequence = tmpPrintingSeq;
                //}
                printingReceipts = MappingNewPrintingSeq(printingReceipts);
                printingReceipts = (List<PrintingReceipt>)printingReceipts.OrderBy(p => p.PrintingSequence).ToList();

                if (extReceipt.ReceiptId == null)
                {
                    List<string> allReceiptsNo = sp.GetAllReceiptsNo(printingReceipts);
                    int noOfReceipts = printingReceipts.Count;
                    for (int i = 0; i < noOfReceipts; i++)
                    {                        
                        View.SetPrintingStatus(string.Format("{0}/{1}", i + 1, noOfReceipts));
                        sp.Print(printingReceipts[i], paymentMethods, allReceiptsNo);
                        /// เพิ่ม Deplay time สำหรับ ลำดับการวางไฟล์
                        Thread.Sleep(1000);
                    }
                }

            }
            catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
            {
                if (temp != null)
                {
                    FileStream f = new FileStream(BPMPath.ConfigPath + "\\errlog.txt", FileMode.OpenOrCreate, FileAccess.Write);
                    StreamWriter sw = new StreamWriter(f);
                    foreach (PrintingReceipt rc in temp)
                    {
                        foreach (PrintingInvoice pv in rc.PrintingInvoices)
                            sw.WriteLine(string.Format("PaymentId {0}", pv.PaymentId));
                    }

                    sw.Close();
                    f.Close();
                }

                MessageBox.Show(ex.ToString());
            }
        }


        //// รวมใบเสร็จแผนผ่อน ปรับการแสดงลำดับ Printing Sequence ด้วย Store Procedure
        private List<PrintingReceipt> MappingNewPrintingSeq(List<PrintingReceipt> printingReceipts)
        {
            foreach( var r in printingReceipts)
            {
                try
                {
                    if (r.GroupReceiptPrintingSeqTextWithPipe != null)
                    {
                        string printSeqText     = r.GroupReceiptPrintingSeqTextWithPipe;
                        string[] subs           = printSeqText.Split('|');
                        string tmpReceiptId     = subs[0].Trim().ToString();
                        short tmpPrintingSeq    = (short)Convert.ToInt32(subs[1].Trim().ToString());
                        short tmpTotalReceipt   = (short)Convert.ToInt32(subs[2].Trim().ToString());
                        r.TotalReceipt          = tmpTotalReceipt;
                        r.PrintingSequence      = tmpPrintingSeq;
                    }  
                }
                catch (Exception ex)
                {                    
                    
                }
                             
            }

            return printingReceipts;
        }

        private void SaveOffLineReceipt(OfflineReceipt offLineReceipts)
        {
            if (!Directory.Exists(BPMPath.ConfigPath + "\\OfflineData"))
            {
                Directory.CreateDirectory(BPMPath.ConfigPath + "\\OfflineData");
            }


            IFormatter serializer = new BinaryFormatter();
            using (Stream writer = new FileStream(
                string.Format(BPMPath.ConfigPath + "\\OfflineData\\R-{0}.txt", offLineReceipts.PaymentDate.ToString("yyyyMMdd-hhmmss")), FileMode.Create))
            {
                serializer.Serialize(writer, offLineReceipts);
                writer.Close();
            }
        }

        private void ShowView()
        {
            PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo info = new PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo();
            info.Modal = true;
            info.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
            info.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.None);
            info.MaximizeBox = false;
            info.MinimizeBox = false;          
            info.Title = "## พิมพ์ใบเสร็จรับเงิน...";
            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(View, info);            
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {            
            base.CloseView();            
        }
    }
}

