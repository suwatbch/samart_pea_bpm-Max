//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Collections.Generic;
using System.Windows.Forms;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;


namespace PEA.BPM.PaymentCollectionModule
{
    public class ReceiptGeneratetSearchViewPresenter : Presenter<IReceiptGeneratetSearchView>
    {

        private IBillingService _billingService;
       
        [InjectionConstructor]
        public ReceiptGeneratetSearchViewPresenter([ServiceDependency] IBillingService billingService)
		{
            this._billingService = billingService;
		}

        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        public void OnCloseView()
        {
            base.CloseView();
        }


        //#endregion

        #region Publication Event

        [EventPublication(EventTopicNames.SearchPaymentNonReceipt, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<PaymentNonReceiptInfo>> SearchPaymentNonReceipt;
        internal void OnSearchPayment(PaymentNonReceiptInfo param)
        {
            if (SearchPaymentNonReceipt != null)
                SearchPaymentNonReceipt(this, new EventArgs<PaymentNonReceiptInfo>(param));
        }

        #endregion

        #region Event Subscription

        [EventSubscription(EventTopicNames.OnlineStatus, Thread = ThreadOption.UserInterface)]
        public void OnlineStatusHandler(object sender, EventArgs<bool> e)
        {
            View.EnablePOSPanel(e.Data);
        }

        #endregion

    }
}

