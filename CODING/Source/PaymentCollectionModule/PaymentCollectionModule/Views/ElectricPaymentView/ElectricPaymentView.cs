//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using System.Collections.Generic;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Threading;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Drawing;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class ElectricPaymentView : UserControl, IElectricPaymentView
    {
        private bool _isOffLine = false;
        private string _techBranchName;
        private string _commBranchId;
        private string _commBranchName;
        private string _controllerId;
        private string _controllerName;
        private string _mruId;
        private System.Drawing.Color txtClearboxColor = System.Drawing.SystemColors.Window;

        public ElectricPaymentView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ElectricPaymentViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            dueDateTimePicker.Value = DateTime.Now.Date;

            //if (Session.IsNetworkConnectionAvailable && Session.Branch.Id != null && Session.User.Id != null)
                LoadComboBox();
        }

        private void LoadComboBox()
        {
            
            List<TaxCode> taxCodes = CodeTable.Instant.ListTaxCode().FindAll(
                delegate(TaxCode tc)
                    {
                        return tc.Name.IndexOf("ขาย") > -1;
                    }
                );
            //sorting vatRateComboBox impact selection vatRateComboBox by barcode1
            //taxCodes.Sort(delegate(TaxCode t1, TaxCode t2) { return t1.Name.CompareTo(t2.Name); });

            vatRateComboBox.DisplayMember = "Name";
            vatRateComboBox.ValueMember = "Code";
            vatRateComboBox.DataSource = taxCodes;

            string appSettings = CodeTable.Instant.GetAppSettingValue("DEFAULT_ELECT_TAX");
            if (appSettings != null)
            {
                vatRateComboBox.SelectedValue = appSettings;
            }
        }

        private void ElectricPaymentView_Enter(object sender, EventArgs e)
        {
            barcode1MaskedTextBox.Text = string.Empty;
            barcode2MaskedTextBox.Text = string.Empty;
            customerIdMaskedTextBox.Text = string.Empty;
            caTaxIdMaskedTextBox.Text = string.Empty;
            caTaxBranchMaskedTextBox.Text = string.Empty;
            onlineStatusLabel.Visible = false;
            nameMaskedTextBox.Text = string.Empty;
            addressMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Text = string.Empty;
            ivIdMaskedTextBox.Text = string.Empty;
            periodMaskedTextBox.Text = string.Empty;
            qtyMaskedTextBox.Text = string.Empty;
            totalExcludeVatLabel.Text = "0";
            taxLabel.Text = "(0)";
            amountMaskedTextBox.Text = string.Empty;
        }

        #region +++ Command Handler ++++
        private void barcode1MaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            
            if (e.KeyChar == (char)13)
            {
                if (barcode1MaskedTextBox.Text.Trim() == "")
                {
                    barcode1MaskedTextBox.Text = "";
                    barcode1MaskedTextBox.Focus();
                    barcode1MaskedTextBox.SelectAll();
                    barcode1MaskedTextBox.BackColor = Color.Red;
                    return;
                }
                //บาร์โค๊ดใหม่จะมีการ Enter 4 รอบ เช็คเงื่อนไขนี้เพื่อไม่ให้ประมวลผล หลังจากกด Enter จนกว่าจะ Scan ครบหลัก
                //Begin of New Barcode 
                else if (barcode1MaskedTextBox.Text.Trim().Length == 15   //1st line of new barcode
                      || barcode1MaskedTextBox.Text.Trim().Length == 27   //2nd line of new barcode
                      || barcode1MaskedTextBox.Text.Trim().Length == 33   //3rd line of new barcode
                      || barcode1MaskedTextBox.Text.Trim().Length >= 35   //4th line of new barcode
                    )
                {
                    //nothing  
                }
                //End of New Barcode 
                else if (barcode1MaskedTextBox.Text.Trim().Length != 32)
                {
                    barcode1MaskedTextBox.Text = "";
                    barcode1MaskedTextBox.Focus();
                    barcode1MaskedTextBox.SelectAll();
                    barcode1MaskedTextBox.BackColor = Color.Red;
                    return;
                }


                try
                {
                    //Begin of New Barcode
                    if (barcode1MaskedTextBox.Text.Trim().Length >= 35)
                    {
                        string barcode = barcode1MaskedTextBox.Text.Trim();
                        string customerId = barcode.Substring(15, 12);
                        string dueDate = barcode.Substring(27, 6);
                        string amount = string.Format("{0}.{1}", barcode.Substring(33, barcode.Length - 35), barcode.Substring(barcode.Length - 2, 2));

                        customerIdMaskedTextBox.Text = customerId;
                        

                        DateTime dueDt = new DateTime(
                            Convert.ToInt32("25" + dueDate.Substring(0, 2)) - 543,
                            Convert.ToInt32(dueDate.Substring(2, 2)),
                            Convert.ToInt32(dueDate.Substring(4, 2))
                        );

                        dueDateTimePicker.Value = dueDt;

                        amountMaskedTextBox.Text = Convert.ToDecimal(amount).ToString("#,##0.00");

                        SearchCustomerDetail();

                        barcode2MaskedTextBox.Focus();
                        barcode2MaskedTextBox.SelectAll();
                        barcode1MaskedTextBox.BackColor = Color.White;

                    }
                    //End of New Barcode
                    else if(barcode1MaskedTextBox.Text.Trim().Length == 32)
                    {

                        string barcode = barcode1MaskedTextBox.Text;
                        string branchId = GetBranch(barcode.Substring(0, 8));
                        string customerId = barcode.Substring(8, 12);
                        string period = "25" + barcode.Substring(20, 2) + barcode.Substring(22, 2);
                        string taxRate = barcode.Substring(24, 2);
                        string dueDate = barcode.Substring(26, 6);

                        customerIdMaskedTextBox.Text = customerId;
                        periodMaskedTextBox.Text = StringConvert.FormatPeriod(period);
                        branchIdMaskedTextBox.Text = branchId;

                        Decimal? rate = Convert.ToDecimal(taxRate);
                        for (int i = 0; i < vatRateComboBox.Items.Count; i++)
                        {
                            if (((TaxCode)vatRateComboBox.Items[i]).Rate == rate)
                            {
                                vatRateComboBox.SelectedIndex = i;
                                break;
                            }
                        }

                        DateTime dueDt = new DateTime(
                            Convert.ToInt32("25" + dueDate.Substring(0, 2)) - 543,
                            Convert.ToInt32(dueDate.Substring(2, 2)),
                            Convert.ToInt32(dueDate.Substring(4, 2))
                        );

                        dueDateTimePicker.Value = dueDt;

                        SearchCustomerDetail();

                        barcode2MaskedTextBox.Focus();
                        barcode2MaskedTextBox.SelectAll();
                        barcode1MaskedTextBox.BackColor = Color.White;
                    }
                }
                catch
                {
                    barcode1MaskedTextBox.Focus();
                    barcode1MaskedTextBox.SelectAll();
                    barcode1MaskedTextBox.BackColor = Color.Red;
                }
            }
        }

        private void barcode2MaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                if (barcode2MaskedTextBox.Text.Trim() == "")
                {
                    barcode2MaskedTextBox.Text = "";
                    barcode2MaskedTextBox.Focus();
                    barcode2MaskedTextBox.SelectAll();
                    barcode2MaskedTextBox.BackColor = Color.Red;
                    return;
                }
                //บาร์โค๊ดใหม่จะมีการ Enter 4 รอบ เช็คเงื่อนไขนี้เพื่อไม่ให้ประมวลผล หลังจากกด Enter จนกว่าจะ Scan ครบหลัก
                //Begin of New Barcode   //Bar1
                else if (barcode2MaskedTextBox.Text.Trim().Length == 15   //1st line of new barcode
                      || barcode2MaskedTextBox.Text.Trim().Length == 27   //2nd line of new barcode
                      || barcode2MaskedTextBox.Text.Trim().Length == 33   //3rd line of new barcode
                      //|| barcode1MaskedTextBox.Text.Trim().Length >= 35   //4th line of new barcode

                    )
                {
                    //nothing  
                }
                //End of New Barcode  //Bar1
                //begin of New Barcode  //Bar2
                else if (barcode2MaskedTextBox.Text.Trim().Length == 34)
                {
                    //nothing
                }
                //end of New Barcode   //Bar2
                else if (barcode2MaskedTextBox.Text.Trim().Length != 30)
                {
                    //MessageBox.Show("กรุณาใส่บาร์โค้ด 2 ให้ครบ 30 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    MessageBox.Show("กรุณาใส่บาร์โค้ด 2 ให้ครบ 34 หลัก หรือ 30 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); //Barcode 62 digit
                    barcode2MaskedTextBox.Text = "";
                    barcode2MaskedTextBox.Focus();
                    barcode2MaskedTextBox.SelectAll();
                    //barcode2MaskedTextBox.BackColor = Color.Red;
                    return;
                }
                //else if (!CheckDigit(barcode1MaskedTextBox.Text.Trim() + barcode2MaskedTextBox.Text.Trim()))
                //{
                //    barcode2MaskedTextBox.Text = "";
                //    barcode2MaskedTextBox.Focus();
                //    barcode2MaskedTextBox.SelectAll();
                //    barcode2MaskedTextBox.BackColor = Color.Red;
                //    return;
                //}



                //Begin of New Barcode 
                if (barcode2MaskedTextBox.Text.Trim().Length == 34)
                {
                    //Check Digit
                    if (!CheckDigit_New(barcode1MaskedTextBox.Text.Trim() + barcode2MaskedTextBox.Text.Trim()))
                    {
                        barcode2MaskedTextBox.Text = "";
                        barcode2MaskedTextBox.Focus();
                        barcode2MaskedTextBox.SelectAll();
                        barcode2MaskedTextBox.BackColor = Color.Red;
                        return;
                    }

                    string barcode = barcode2MaskedTextBox.Text.Trim();
                    string branchId = GetBranch(barcode.Substring(0, 8));
                    string period = "25" + barcode.Substring(8, 2) + barcode.Substring(10, 2);
                    string taxRate = barcode.Substring(12, 2);
                    string ivId = barcode.Substring(14, 12);
                    string qty = barcode.Substring(26, 6);

                    periodMaskedTextBox.Text = StringConvert.FormatPeriod(period);
                    branchIdMaskedTextBox.Text = branchId;
                    ivIdMaskedTextBox.Text = ivId;
                    qtyMaskedTextBox.Text = Convert.ToInt32(qty).ToString();

                    Decimal? rate = Convert.ToDecimal(taxRate);
                    for (int i = 0; i < vatRateComboBox.Items.Count; i++)
                    {
                        if (((TaxCode)vatRateComboBox.Items[i]).Rate == rate)
                        {
                            vatRateComboBox.SelectedIndex = i;
                            break;
                        }
                    }

                    if (nameMaskedTextBox.ReadOnly)
                    {
                        okButton.Focus();
                    }
                    else
                    {
                        nameMaskedTextBox.Focus();
                    }

                    barcode2MaskedTextBox.BackColor = Color.White;
                }
                //End of New Barcode 
                else if (barcode2MaskedTextBox.Text.Trim().Length == 30)
                {
                    //Check Digit
                    if (!CheckDigit(barcode1MaskedTextBox.Text.Trim() + barcode2MaskedTextBox.Text.Trim()))
                    {
                        barcode2MaskedTextBox.Text = "";
                        barcode2MaskedTextBox.Focus();
                        barcode2MaskedTextBox.SelectAll();
                        barcode2MaskedTextBox.BackColor = Color.Red;
                        return;
                    }
                    
                    string barcode = barcode2MaskedTextBox.Text;
                    string ivId = barcode.Substring(0, 12);
                    string qty = barcode.Substring(12, 6);
                    string amount = string.Format("{0}.{1}", barcode.Substring(18, 8), barcode.Substring(26, 2));

                    ivIdMaskedTextBox.Text = ivId;
                    qtyMaskedTextBox.Text = Convert.ToInt32(qty).ToString();
                    amountMaskedTextBox.Text = Convert.ToDecimal(amount).ToString("#,##0.00");

                    if (nameMaskedTextBox.ReadOnly)
                    {
                        okButton.Focus();
                    }
                    else
                    {
                        nameMaskedTextBox.Focus();
                    }

                    barcode2MaskedTextBox.BackColor = Color.White;
                }

            }
        }

        private string GetBranch(string branchId)
        {
            string convertChar = branchId.Substring(0, 3);
            switch (convertChar)
            {
                case "001":
                    return string.Format("{0}{1}", "A", branchId.Substring(3, 5));
                case "002":
                    return string.Format("{0}{1}", "B", branchId.Substring(3, 5));
                case "003":
                    return string.Format("{0}{1}", "C", branchId.Substring(3, 5));
                case "004":
                    return string.Format("{0}{1}", "D", branchId.Substring(3, 5));
                case "005":
                    return string.Format("{0}{1}", "E", branchId.Substring(3, 5));
                case "006":
                    return string.Format("{0}{1}", "F", branchId.Substring(3, 5));
                case "007":
                    return string.Format("{0}{1}", "G", branchId.Substring(3, 5));
                case "008":
                    return string.Format("{0}{1}", "H", branchId.Substring(3, 5));
                case "009":
                    return string.Format("{0}{1}", "I", branchId.Substring(3, 5));
                case "010":
                    return string.Format("{0}{1}", "J", branchId.Substring(3, 5));
                case "011":
                    return string.Format("{0}{1}", "K", branchId.Substring(3, 5));
                case "012":
                    return string.Format("{0}{1}", "L", branchId.Substring(3, 5));
                case "013":
                    return string.Format("{0}{1}", "M", branchId.Substring(3, 5));
                case "014":
                    return string.Format("{0}{1}", "N", branchId.Substring(3, 5));
                case "015":
                    return string.Format("{0}{1}", "O", branchId.Substring(3, 5));
                case "016":
                    return string.Format("{0}{1}", "P", branchId.Substring(3, 5));
                case "017":
                    return string.Format("{0}{1}", "Q", branchId.Substring(3, 5));
                case "018":
                    return string.Format("{0}{1}", "R", branchId.Substring(3, 5));
                case "019":
                    return string.Format("{0}{1}", "S", branchId.Substring(3, 5));
                case "020":
                    return string.Format("{0}{1}", "T", branchId.Substring(3, 5));
                case "021":
                    return string.Format("{0}{1}", "U", branchId.Substring(3, 5));
                case "022":
                    return string.Format("{0}{1}", "V", branchId.Substring(3, 5));
                case "023":
                    return string.Format("{0}{1}", "W", branchId.Substring(3, 5));
                case "024":
                    return string.Format("{0}{1}", "X", branchId.Substring(3, 5));
                case "025":
                    return string.Format("{0}{1}", "Y", branchId.Substring(3, 5));
                case "026":
                    return string.Format("{0}{1}", "Z", branchId.Substring(3, 5));
                default:
                    return branchId;
            }
        }

        private bool CheckDigit(string Barcode)
        {
            int? totalValue = 0;
            int? modValue = 0;
            int? iniValue = 0;
            int? lastValue = 0;
            string result = "";
            int[] arrayConstantList = { 0, 0, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8};

            try
            {
                for (int i = 2; i < Barcode.Length - 2; i++)
                {
                    if (i == 2)
                    {
                        iniValue = StringConvert.ToInt32(Barcode.Substring(1, 2));
                    }
                    else if (i > 2)
                    {
                        iniValue = StringConvert.ToInt32(Barcode.Substring(i, 1));
                    }

                    modValue = iniValue * arrayConstantList[i];

                    if (modValue.Value.ToString().Length == 1)
                    {
                        totalValue += modValue.Value;
                    }
                    else
                    {
                        totalValue += (StringConvert.ToInt32(modValue.Value.ToString().Substring(0, 1)) + StringConvert.ToInt32(modValue.Value.ToString().Substring(1, 1)));
                    }
                }

                lastValue = (totalValue * 11) % 100;

                result = (lastValue < 10) ? "0" + lastValue.Value.ToString() : lastValue.Value.ToString();

                if (result.Substring(0, 1) == Barcode.Substring((Barcode.Length - 2), 1)
                        && result.Substring(1, 1) == Barcode.Substring((Barcode.Length - 1), 1))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        //Standard Barcode of Bank Thailand
        private bool CheckDigit_New(string Barcode)
        {
            int? totalValue = 0;
            int? modValue = 0;
            int? iniValue = 0;
            int? lastValue = 0;
            string result = "";
            int[] arrayConstantList = { 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                      };

            try
            {
                for (int i = 0; i < Barcode.Length - 2; i++)
                {

                    iniValue = StringConvert.ToInt32(Barcode.Substring(i, 1));

                    modValue = iniValue * arrayConstantList[i];

                    if (modValue.Value.ToString().Length == 1)
                    {
                        totalValue += modValue.Value;
                    }
                    else
                    {
                        totalValue += (StringConvert.ToInt32(modValue.Value.ToString().Substring(0, 1)) + StringConvert.ToInt32(modValue.Value.ToString().Substring(1, 1)));
                    }
                }

                lastValue = (totalValue * 11) % 100;

                result = (lastValue < 10) ? "0" + lastValue.Value.ToString() : lastValue.Value.ToString();

                if (result.Substring(0, 1) == Barcode.Substring((Barcode.Length - 2), 1)
                        && result.Substring(1, 1) == Barcode.Substring((Barcode.Length - 1), 1))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            SearchCustomerDetail();
        }

        private void amountMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            CalculateTax();
        }

        private void vatRateComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            CalculateTax();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            if (!ValidateForm()) { return; }

            List<Invoice> invoices = new List<Invoice>();
            Invoice inv = new Invoice();

            Bill b = new Bill();
            b.CustomerId = customerIdMaskedTextBox.Text.Trim();
            b.Name = StringConvert.ToString(nameMaskedTextBox.Text);
            b.Address = StringConvert.ToString(addressMaskedTextBox.Text);
            b.AccountClass = StringConvert.ToString(accountClassMaskedTextBox.Text);
            b.DebtId = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.Electric.DummyId);
            b.DebtType = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.Electric.DummyName);
            b.InvoiceNo = StringConvert.ToString(ivIdMaskedTextBox.Text);
            b.Period = StringConvert.UnFormatPeriod(periodMaskedTextBox.Text.Trim());
            b.Qty = StringConvert.ToDecimal(qtyMaskedTextBox.Text);
            b.FullQty = b.Qty;
            b.DueDate = dueDateTimePicker.Value;
            b.UnitTypeId = null;
            b.UnitTypeName = null;
            TaxCode taxCode = (TaxCode)vatRateComboBox.SelectedItem;
            b.TaxCode = taxCode.Code;
            b.TaxRate = taxCode.Rate;
            b.VatAmount = StringConvert.ToDecimal(taxLabel.Text.Trim().Replace("(", "").Replace(")", ""));
            b.FullVatAmount = b.VatAmount;
            b.GAmount = StringConvert.ToDecimal(amountMaskedTextBox.Text.Trim());
            b.FullGAmount = b.GAmount;
            b.AmountExVat = b.GAmount - b.VatAmount;
            b.FullAmount = b.AmountExVat;
            b.BaseAmount = b.AmountExVat;
            b.FullBaseAmount = b.BaseAmount;
            b.ToPayQty = b.Qty;
            b.ToPayGAmount = b.GAmount;
            b.ToPayVatAmount = b.VatAmount;
            b.DisConnectDate = null;

            //Tax 13 
            b.CaTaxId = StringConvert.ToString(caTaxIdMaskedTextBox.Text);
            b.CaTaxBranch = StringConvert.ToString(caTaxBranchMaskedTextBox.Text);
            b.ControllerId = _controllerId;

            if (_isOffLine)
            {
                b.DataState = BillDataStage.Offline;
                inv.DataState = InvoiceDataStage.Offline;
            }
            else
            {
                b.DataState = BillDataStage.NewItem;
                inv.DataState = InvoiceDataStage.NewItem;
            }

            inv.InvoiceNo = b.InvoiceNo;
            inv.SpotBillInvoiceNo = b.InvoiceNo;
            inv.BranchId = branchIdMaskedTextBox.Text.ToUpper().Trim();
            inv.TechBranchName = _techBranchName;
            inv.CommBranchId = _commBranchId;
            inv.CommBranchName = _commBranchName;
            inv.CaId = b.CustomerId;
            inv.Name = b.Name;
            inv.Address = b.Address;
            inv.DueDate = b.DueDate;
            inv.ControllerId = _controllerId;
            inv.ControllerName = _controllerName;
            inv.MruId = _mruId;
            inv.AmountExVat = b.AmountExVat;
            inv.VatAmount = b.VatAmount;
            inv.GAmount = b.GAmount;
            inv.PaidVatAmount = 0;
            inv.PaidGAmount = 0;
            inv.PaidQty = 0;
            inv.Qty = b.Qty;
            inv.ToPayQty = b.Qty;
            inv.ToPayVatAmount = b.VatAmount;
            inv.ToPayGAmount = inv.ToBePaidGAmount;

            //Tax 13 
            inv.CaTaxId = b.CaTaxId;
            inv.CaTaxBranch = b.CaTaxBranch;

            // DCR 67-020 Rev.1 กำหนดค่าว่าเป็นการตั้งหนี้โดย User 
            inv.InvoiceFromLoal = true; 

            inv.Bills = new List<Bill>();
            inv.Bills.Add(b);
            invoices.Add(inv);

            if (Session.IsNetworkConnectionAvailable)
            {
                if (_presenter.CheckExistingInvoiceNo(inv.CaId, inv.Bills[0].Period))
                {
                    MessageBox.Show(
                        string.Format("รายการหนี้ค่าไฟฟ้าประจำเดือนที่ '{0}' ของหมายเลขผู้ใช้ไฟ '{1}' มีอยู่แล้วในระบบ  \n\nโปรดค้นหาข้อมูลหนี้ที่มีในระบบจากหมายเลขผู้ใช้ไฟหรืออ่านจากบาร์โค้ดแถว 1 ที่หน้าจอรับชำระเงิน - สำหรับผู้ใช้ไฟฟ้า/ลูกหนี้อื่นๆ", StringConvert.FormatPeriod(inv.Bills[0].Period), inv.CaId),
                        "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            _presenter.InvoicesAddedToList(invoices);
            this.ParentForm.Close();
        }


        private void ivIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13) { periodMaskedTextBox.Focus(); }
        }

        private void periodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13) { qtyMaskedTextBox.Focus(); }
        }

        private void qtyMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13) { vatRateComboBox.Focus(); }
        }

        private void taxRateMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13) { amountMaskedTextBox.Focus(); }
        }

        private void amountMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13) { okButton.Focus(); }
            amountMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        private void nameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                caTaxIdMaskedTextBox.Focus();
            }
        }

        private void addressMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                branchIdMaskedTextBox.Focus();
            }
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                ivIdMaskedTextBox.Focus();
            }
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                if (SearchCustomerDetail())
                {
                    ivIdMaskedTextBox.Focus();
                }
                else
                {
                    if (Session.IsNetworkConnectionAvailable)
                    {
                        customerIdMaskedTextBox.SelectAll();
                    }
                    else
                    {
                        nameMaskedTextBox.Focus();
                    }
                }
            }
        }

        public Button CancelButton
        {
            get { return cancelButton; }
        }
        #endregion

        #region +++ Custom Function +++
        private bool SearchCustomerDetail()
        {
            string id = customerIdMaskedTextBox.Text.Trim();

            if (id == string.Empty)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            else if (id.Length < 12)
            {
                id = id.PadLeft(12, '0');
                customerIdMaskedTextBox.Text = id;
            }

            //เพิ่มขั้นตอนการเช็ค digit ของบาร์โค๊ดแถวข้าง
            if (id.Length >= 13 && id.Length <= 14)
            {
                if (!CheckDigit_New(customerIdMaskedTextBox.Text.Trim()))
                {
                    MessageBox.Show("รูปแบบบาร์โค้ดไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    customerIdMaskedTextBox.SelectAll();
                    return false;
                }
                else
                {
                    customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.Trim().Substring(0, 12);
                    id = customerIdMaskedTextBox.Text.Trim();
                }
            }

            if (Session.IsNetworkConnectionAvailable)
            {
                
                try
                {
                    this.Cursor = Cursors.WaitCursor;
                    Customer customer = _presenter.GetCustomerDetail(id);
                    this.Cursor = Cursors.Default;

                    if (customer != null)
                    {
                        nameMaskedTextBox.Text = customer.Name;
                        caTaxIdMaskedTextBox.Text = customer.CaTaxId;
                        caTaxBranchMaskedTextBox.Text = customer.CaTaxBranch;
                        addressMaskedTextBox.Text = customer.Address;
                        branchIdMaskedTextBox.Text = customer.BranchId;
                        accountClassMaskedTextBox.Text = customer.AccountClassId;
                        _techBranchName = customer.TechBranchName;
                        _commBranchId = customer.CommBranchId;
                        _commBranchName = customer.CommBranchName;
                        _controllerId = customer.ControllerId;
                        _controllerName = customer.ControllerName;
                        _mruId = customer.MruId;
                        return true;
                    }
                    else
                    {
                        nameMaskedTextBox.Text = string.Empty;
                        caTaxIdMaskedTextBox.Text = string.Empty;
                        caTaxBranchMaskedTextBox.Text = string.Empty;
                        addressMaskedTextBox.Text = string.Empty;
                        branchIdMaskedTextBox.Text = string.Empty;
                        accountClassMaskedTextBox.Text = string.Empty;
                        _techBranchName = string.Empty;
                        _commBranchId = string.Empty;
                        _commBranchName = string.Empty;
                        _controllerId = string.Empty;
                        _controllerName = string.Empty;
                        _mruId = string.Empty;
                        MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return false;
                    }
                }
                catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
                {
                    this.Cursor = Cursors.Default;
                    Logger.WriteError(Logger.Module.POS, "ค้นหาข้อมูลรายละเอียดผู้ใช้ไฟจาก CaId", ex.ToString());

                    EnableOfflineMode();
                    return false;
                }
            }
            else
            {
                EnableOfflineMode();
                GetCaOffline(id);
                return false;
            }
        }

        private void EnableOfflineMode()
        {
            onlineStatusLabel.Text = "ระบบทำงานใน Mode Offline กรุณากรอกข้อมูล ชื่อ-ที่อยู่ และการไฟฟ้า";
            onlineStatusLabel.Visible = true;

            nameMaskedTextBox.ReadOnly = false;
            caTaxIdMaskedTextBox.ReadOnly = false;
            caTaxBranchMaskedTextBox.ReadOnly = false;
            caTaxIdMaskedTextBox.BackColor = txtClearboxColor;
            caTaxBranchMaskedTextBox.BackColor = txtClearboxColor;
            addressMaskedTextBox.ReadOnly = false;
            branchIdMaskedTextBox.ReadOnly = false;
            _isOffLine = true;
        }

        //Offline by User ,Begin
        private void GetCaOffline(string caid)
        {
            try
            {
                List<ContractAccountOffline> cao = CaOffline.Instant.ListContractAccountOffline(caid);

                if (cao.Count > 0)
                {
                    nameMaskedTextBox.Text = cao[0].CaName;
                    caTaxIdMaskedTextBox.Text = cao[0].CaTaxId;
                    caTaxBranchMaskedTextBox.Text = cao[0].CaTaxBranch;
                    addressMaskedTextBox.Text = cao[0].CaAddress;
                    branchIdMaskedTextBox.Text = cao[0].TechBranchId;
                }
                else
                {
                    MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch
            {
                MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);    
            }

        }
        //Offline by User ,End

        private void CalculateTax()
        {
            if (amountMaskedTextBox.Text.Trim().Length > 0)
            {
                try
                {
                    decimal? taxRate = ((TaxCode)vatRateComboBox.SelectedItem).Rate;
                    decimal amount = Convert.ToDecimal(amountMaskedTextBox.Text);

                    if (null == taxRate)
                    {
                        totalExcludeVatLabel.Text = amount.ToString("#,##0.00");
                        taxLabel.Text = "(-)";
                    }
                    else
                    {
                        decimal baseAmount = amount / (1 + (taxRate.Value / 100));
                        decimal taxAmount = amount - baseAmount;

                        totalExcludeVatLabel.Text = baseAmount.ToString("#,##0.00");
                        taxLabel.Text = string.Format("({0})", taxAmount.ToString("#,##0.00"));
                    }
                }
                catch (Exception) // TODO: จะไม่ทำอะไรจริงๆ เหรอ ?
                {
                }
            }
        }

        private bool ValidateForm()
        {
            if (Session.IsNetworkConnectionAvailable)
            {
                try
                {
                    Customer customer = _presenter.GetCustomerDetail(customerIdMaskedTextBox.Text);

                    if (customer == null)
                    {
                        MessageBox.Show("ไม่พบข้อมูลของหมายเลขผู้ใช้ไฟดังกล่าว", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    return false;
                }
            }

            if (customerIdMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                customerIdMaskedTextBox.Focus();
                return false;
            }
            else if (nameMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่ชื่อ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                nameMaskedTextBox.Focus();
                return false;
            }
            //else if (caTaxIdMaskedTextBox.Text.Trim() == "" && caTaxIdMaskedTextBox.ReadOnly == false)
            //{
            //    MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษี 13 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //    caTaxIdMaskedTextBox.Focus();
            //    return false;
            //}
            else if (caTaxIdMaskedTextBox.Text.Trim() != "" && caTaxIdMaskedTextBox.Text.Trim().Length < 13 && caTaxIdMaskedTextBox.ReadOnly == false)
            {
                MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษีให้ครบ 13 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxIdMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxBranchMaskedTextBox.Text.Trim() != "" && caTaxBranchMaskedTextBox.Text.Trim().Length < 4)
            {
                MessageBox.Show("กรุณาใส่สาขา 4 หรือ 5 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxBranchMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxIdMaskedTextBox.Text.Trim() == "" && caTaxBranchMaskedTextBox.Text.Trim() != "")
            {
                MessageBox.Show("กรุณาใส่เลขประจำตัวผู้เสียภาษี 13 หลัก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxIdMaskedTextBox.Focus();
                return false;
            }
            else if (caTaxBranchMaskedTextBox.Text.Trim() == "" && caTaxIdMaskedTextBox.Text.Trim() != "")
            {
                MessageBox.Show("กรุณาใส่สาขา", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                caTaxBranchMaskedTextBox.Focus();
                return false;
            }
            else if (addressMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่ที่อยู่", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                addressMaskedTextBox.Focus();
                return false;
            }
            else if (ivIdMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่เลขที่ใบแจ้งค่าไฟฟ้า", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                ivIdMaskedTextBox.Focus();
                return false;
            }
            else if (periodMaskedTextBox.Text.Trim().Replace("/", "") == "")
            {
                MessageBox.Show("กรุณาใส่บิลประจำเดือน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                periodMaskedTextBox.Focus();
                return false;
            }
            else if (periodMaskedTextBox.Text.Trim().Length == 7 && (Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(0, 2)) < 1 && Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(0, 2)) > 12) && (Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(3, 4)) < 2500 && Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(3, 4)) > 2600))
            {
                MessageBox.Show("กรุณาใส่บิลประจำเดือนให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                periodMaskedTextBox.Focus();
                return false;
            }
            else if (qtyMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่หน่วยที่ใช้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                qtyMaskedTextBox.Focus();
                return false;
            }
            else if (amountMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณาใส่จำนวนเงินรวมทั้งสิ้น", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                amountMaskedTextBox.Focus();
                return false;
            }
            else if (StringConvert.ToDecimal(amountMaskedTextBox.Text.Trim()) <= StringConvert.ToDecimal("0.12"))
            {
                //201802211138 Kanokwan.L Defect#53 ดักเงื่อนไขต้องชำระมากกว่า 0.12
                MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                amountMaskedTextBox.Focus();
                return false;
            }
            else if (Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(0, 2)) > StringConvert.ToInt32("12"))
            {
                MessageBox.Show("ระบุบิลเดือนไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                periodMaskedTextBox.Focus();
                return false;
            }
            else if (Convert.ToInt32(periodMaskedTextBox.Text.Trim().Substring(3, 4)) < StringConvert.ToInt32("2500"))
            {
                MessageBox.Show("ระบุปีของบิลเดือนไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                periodMaskedTextBox.Focus();
                return false;
            }
            return true;
        }
        #endregion

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }

        private void barcode1MaskedTextBox_Enter(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToEnglish();
        }

        private void barcode1MaskedTextBox_Leave(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToDefault();
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void caTaxIdMaskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }

        private void nameMaskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }

        private void caTaxIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8) e.Handled = true;

            if (e.KeyChar == (char)13)
            {
                caTaxBranchMaskedTextBox.Focus();
            }
            caTaxIdMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        private void caTaxBranchMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8) e.Handled = true;

            if (e.KeyChar == (char)13)
            {
                addressMaskedTextBox.Focus();
            }
            caTaxBranchMaskedTextBox.OnKeyPressValidateDecimal(e);
        }

        private void addressMaskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }

        private void onlineStatusLabel_Click(object sender, EventArgs e)
        {

        }

        private void customerIdMaskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }



    }
}

