//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;

namespace PEA.BPM.PaymentCollectionModule
{
    public class ElectricPaymentViewPresenter : Presenter<IElectricPaymentView>
    {
        private IBillingService _billingService;

        [InjectionConstructor]
        public ElectricPaymentViewPresenter([ServiceDependency] IBillingService billingService)
		{
            _billingService = billingService;
		}

        //[EventSubscription(Constants.EventTopicNames.ElectricPaymentItemAdd, Thread = ThreadOption.UserInterface)]
        //public void ElectricPaymentItemAddHandler(object sender, EventArgs e)
        //{
        //    ShowView();
        //}

        //private void ShowView()
        //{
        //    PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo info = new PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo();
        //    info.Modal = true;
        //    info.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
        //    info.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.FixedToolWindow);
        //    info.Keys.Add(WindowWorkspaceSetting.CancelButton, View.CancelButton); 
        //    info.MaximizeBox = false;
        //    info.MinimizeBox = false;
        //    info.Title = " รับชำระเงินค่าไฟฟ้าในกรณีที่ไม่มีการสร้างหนี้ในระบบหรือเครือข่ายมีปัญหา";
        //    WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(View, info);
        //}

        [EventSubscription(EventTopicNames.ActionSuccess, Thread = ThreadOption.UserInterface)]
        public void ActionSuccessHandler(object sender, EventArgs e)
        {
            if (WorkItem.Workspaces[WorkspaceNames.ModalWindows].ActiveSmartPart == View)
            {
                ((UserControl)View).ParentForm.Close();
            }
        }

        internal Customer GetCustomerDetail(string customerId)
        {
            HistoryViewParam param = new HistoryViewParam(customerId, true);
            return _billingService.GetCustomerDetailOnPaymentHistory(param);
        }

        internal bool CheckExistingInvoiceNo(string caId, string period)
        {
            return _billingService.CheckExistingInvoiceNo(caId, period);
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventPublication(EventTopicNames.InvoiceItemAdd, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<Invoice>>> InvoicesAddedToPayingList;
        public void InvoicesAddedToList(List<Invoice> invoices)
        {
            if (InvoicesAddedToPayingList != null)
                InvoicesAddedToPayingList(this, new EventArgs<List<Invoice>>(invoices));
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }
    }
}

