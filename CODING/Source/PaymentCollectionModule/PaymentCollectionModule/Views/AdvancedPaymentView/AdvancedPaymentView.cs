//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.PaymentCollectionModule.Views.AdvancedPaymentView;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class AdvancedPaymentView : UserControl, IAdvancedPaymentView
    {
        private BillBook _billBook;

        public AdvancedPaymentView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public AdvancedPaymentViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #region +++ Command Handler +++
        private void searchButton_Click(object sender, EventArgs e)
        {
            using (BillBookSearchForm bbForm = new BillBookSearchForm(_presenter.BillingService))
            {
                if (bbForm.ShowDialog() == DialogResult.OK)
                {
                    bookIdMaskedTextBox.Text = bbForm.SelectedBillBook.ShortBillBookId;
                    SearchBillBook();
                }
            }            
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                if (!ValidateForm()) { return; }
                SearchBillBook();
            }
            else
            {
                ClearTxt();
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();;
        }

        private void AdvancedPaymentView_Enter(object sender, EventArgs e)
        {
            bookIdMaskedTextBox.Text = "";
            ClearTxt();
        }

        private void ClearTxt()
        {
            nameMaskedTextBox.Text = "";
            addressMaskedTextBox.Text = "";
            debtTypeMaskedTextBox.Text = "";
            periodMaskedTextBox.Text = "";
            createDateMaskedTextBox.Text = "";
            bookTotalAmountMaskedTextBox.Text = "";
            advancePaymentMaskedTextBox.Text = "";
            receiveCountMaskedTextBox.Text = "";
            dueDateMaskedTextBox.Text = "";
            paidAmountMaskedTextBox.Text = "";
            leftAmountMaskedTextBox.Text = "";
            toPayAmountMaskedTextBox.Text = "";
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            if (!IsValidInput()) { return; }
            if (toPayAmountMaskedTextBox.Text.Trim() == "")
            {
                MessageBox.Show("กรุณากรอกจำนวนเงินที่ต้องการชำระ", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if (Math.Round((decimal)StringConvert.ToDecimal(toPayAmountMaskedTextBox.Text.Trim()), 2) <= StringConvert.ToDecimal("0.12"))
            { 
                //201802211138 Kanokwan.L Defect#53 ดักเงื่อนไขต้องชำระมากกว่า 0.12
                MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            List<Bill> workItemBills = new List<Bill>();
            Bill b = new Bill();
            b.CustomerId = _billBook.AgentId;
            b.ContractTypeId = _billBook.ContractTypeId;
            b.Name = _billBook.AgentName;
            b.Address = _billBook.AgentAddress;
            b.BranchId = _billBook.AgentBranchId;
            b.TechBranchName = _billBook.TechBranchName;
            b.CommBranchId = _billBook.CommBranchId;
            b.CommBranchName = _billBook.CommBranchName;
            b.DebtId = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyAdvancePayment.Id);
            b.DebtType = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyAdvancePayment.Name);
            b.Period = _billBook.Period;
            b.ControllerId = _billBook.ControllerId;
            b.BillBookId = Session.Branch.Id + bookIdMaskedTextBox.Text;
            b.BookCreateDt = StringConvert.ToDateTime(createDateMaskedTextBox.Text);
            b.BookTotalVatAmount = StringConvert.ToDecimal(bookTotalVatAmountMaskedTextBox.Text);
            b.BookTotalGAmount = StringConvert.ToDecimal(bookTotalAmountMaskedTextBox.Text);
            decimal? advPayment = StringConvert.ToDecimal(toPayAmountMaskedTextBox.Text);
            b.AmountExVat = advPayment;
            b.FullAmount = advPayment;
            b.UnitTypeId = CodeNames.UnitType.Book.Id;
            b.UnitTypeName = CodeNames.UnitType.Book.Name;
            b.TaxCode = CodeNames.TaxCode.NoTaxCharge.TaxCode;
            b.TaxRate = StringConvert.ToInt32(CodeNames.TaxCode.NoTaxCharge.TaxRate);
            if (b.TaxRate != null)
            {
                b.VatAmount = b.AmountExVat * b.TaxRate / 100;
                b.FullVatAmount = b.VatAmount;
                b.GAmount = b.AmountExVat + b.VatAmount;
                b.FullVatAmount = b.GAmount;
            }
            else
            {
                b.VatAmount = null;
                b.FullVatAmount = null;
                b.GAmount = advPayment;
                b.FullGAmount = advPayment;
            }
            
            b.DataState = BillDataStage.NewItem;
            b.DisConnectDate = null;


            workItemBills.Add(b);

            _presenter.BillsAddedToList(workItemBills);
        }

        private bool IsValidInput()
        {
            if (ValidateForm())
            {
                decimal? v = StringConvert.ToDecimal(toPayAmountMaskedTextBox.Text);
                decimal? vAll = StringConvert.ToDecimal(bookTotalAmountMaskedTextBox.Text);
                decimal? vPaid = StringConvert.ToDecimal(paidAmountMaskedTextBox.Text);

                if (v == null || v.Value <= 0)
                {
                    MessageBox.Show("กรุณาใส่จำนวนเงินที่ต้องการชำระให้ถูกต้อง", "ข้อความเตือน",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    toPayAmountMaskedTextBox.Focus();
                    toPayAmountMaskedTextBox.SelectAll();

                    return false;
                }
                else if (v != null && vAll != null && vPaid != null)
                {
                    decimal? vSum = vAll - vPaid;
                    if (v > vSum)
                    {
                        MessageBox.Show("กรุณาใส่จำนวนเงินที่ต้องการชำระไม่เกิน " + vSum.ToString(), "ข้อความเตือน",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        toPayAmountMaskedTextBox.Focus();
                        toPayAmountMaskedTextBox.SelectAll();

                        return false;  
                    }
                }
                return true;
            }

            return false;
        }

        private void toPayAmountMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                okButton.Focus();
            }
        }

        private void nameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                addressMaskedTextBox.Focus();
            }
        }

        private void addressMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                debtTypeMaskedTextBox.Focus();
            }
        }

        private void debtTypeMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                periodMaskedTextBox.Focus();
            }
        }

        private void periodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                advancePaymentMaskedTextBox.Focus();
            }
        }

        private void advancePaymentMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                dueDateMaskedTextBox.Focus();
            }
        }

        private void dueDateMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                paidAmountMaskedTextBox.Focus();
            }
        }

        private void paidAmountMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                leftAmountMaskedTextBox.Focus();
            }
        }

        private void leftAmountMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                toPayAmountMaskedTextBox.Focus();
            }
        }

        public Button CancelButton
        {
            get { return cancelButton; }
        }

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }
        #endregion

        #region +++ Custom Function +++
        private void SearchBillBook()
        {
            _billBook = _presenter.GetBillBookDetail(Session.Branch.Id + bookIdMaskedTextBox.Text.Trim());

            if (_billBook!=null)
            {
                nameMaskedTextBox.Text = _billBook.AgentName;
                addressMaskedTextBox.Text = _billBook.AgentAddress;
                debtTypeMaskedTextBox.Text = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.AgencyAdvancePayment.Name);
                periodMaskedTextBox.Text = _billBook.PeriodString;
                bookTotalVatAmountMaskedTextBox.Text = string.Format("{0:#,##0.00}", _billBook.BookTotalVatAmount);
                bookTotalAmountMaskedTextBox.Text = string.Format("{0:#,##0.00}", _billBook.BookTotalGAmount);
                receiveCountMaskedTextBox.Text = string.Format("{0}", _billBook.PaidCountNumber + 1);
                advancePaymentMaskedTextBox.Text = string.Format("{0:#,##0.00}", _billBook.AdvancePayment);
                createDateMaskedTextBox.Text = string.Format("{0:dd/MM/yyyy}", _billBook.BookCreateDt);
                dueDateMaskedTextBox.Text = string.Format("{0:dd/MM/yyyy}", _billBook.DueDate);
                paidAmountMaskedTextBox.Text = string.Format("{0:#,##0.00}", _billBook.PaidGAmount);
                if (_billBook.AdvancePayment < _billBook.PaidGAmount)
                {
                    leftAmountMaskedTextBox.Text = "0"; 
                }
                else
                {
                    leftAmountMaskedTextBox.Text = string.Format("{0:#,##0.00}", (_billBook.AdvancePayment - _billBook.PaidGAmount));
                    toPayAmountMaskedTextBox.Text = leftAmountMaskedTextBox.Text.Trim();
                }

                toPayAmountMaskedTextBox.Focus();
                toPayAmountMaskedTextBox.SelectAll();
            }
            else
            {
                nameMaskedTextBox.Text = "";
                addressMaskedTextBox.Text = "";
                debtTypeMaskedTextBox.Text = "";
                periodMaskedTextBox.Text = "";
                createDateMaskedTextBox.Text = "";
                bookTotalAmountMaskedTextBox.Text = "";
                advancePaymentMaskedTextBox.Text = "";
                receiveCountMaskedTextBox.Text = "";
                dueDateMaskedTextBox.Text = "";
                paidAmountMaskedTextBox.Text = "";
                leftAmountMaskedTextBox.Text = "";
                toPayAmountMaskedTextBox.Text = "";
                _billBook = null;
                MessageBox.Show("ไม่พบข้อมูลของเลขที่สมุดจ่ายบิลดังกล่าว", "ข้อความเตือน", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);

                bookIdMaskedTextBox.SelectAll();
                bookIdMaskedTextBox.Focus();
            }
        }

        private bool ValidateForm()
        {
            if (bookIdMaskedTextBox.Text.Trim()==string.Empty)
            {
                MessageBox.Show("กรุณาใส่เลขที่สมุดจ่ายบิล", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            else if (bookIdMaskedTextBox.Text.Trim().Length != 9)
            {
                MessageBox.Show("กรุณาใส่เลขที่สมุดจ่ายบิล 9 หลัก", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }

            return true;
        }
        #endregion



    }
}

