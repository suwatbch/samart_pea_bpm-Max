//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class ReceiptSearchView : UserControl, IReceiptSearchView
    {
        public ReceiptSearchView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReceiptSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        public void EnablePOSPanel(bool enable)
        {
            if (!enable)
            {
                searchPanel.Enabled = false;
            }
            else
            {
                searchPanel.Enabled = true;
                receiptIDMaskedTextBox.Focus();
            }
        }

        protected override void OnLoad(EventArgs e)
        {

            _presenter.OnViewReady();


            if (Session.IsNetworkConnectionAvailable)
            {
                searchPanel.Enabled = true;
                receiptIDMaskedTextBox.Focus();
            }
            else
            {
                searchPanel.Enabled = false;
            }

            _presenter.OnViewReady();

        }

        private void receiptSearchButton_Click(object sender, EventArgs e)
        {
            SearchByReceipt();
        }

        private void searchByReceipt_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByReceipt();
            }
        }

        private void customerSearchButton_Click(object sender, EventArgs e)
        {
            SearchByCustomer();
        }

        private void searchByCustomer_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByCustomer();
            }
        }

        #region +++ Custom Function +++
        public void InitSearchForm()
        {
            ClearSearchByReceipt();
            ClearSearchByCustomer();
            receiptIDMaskedTextBox.Focus();
        }

        private void ClearSearchByReceipt()
        {
            receiptIDMaskedTextBox.Text = String.Empty;
            receiptNameMaskedTextBox.Text = String.Empty;
        }

        private void ClearSearchByCustomer()
        {
            customerIdMaskedTextBox.Text = String.Empty;
            customerNameMaskedTextBox.Text = String.Empty;
        }

        private void SearchByReceipt()
        {
            ReceiptSearchParam param = new ReceiptSearchParam();
            param.ReceiptId = StringConvert.ToString(receiptIDMaskedTextBox.Text.Trim());
            param.CashierName = StringConvert.ToString(receiptNameMaskedTextBox.Text.Trim());
            param.BranchId = Session.Branch.Id;
            if (_presenter.WorkItem.State["IsCancelPage"].ToString() == "True")
            {
                param.IsCancel = true;
            }
            else
            {
                param.IsCancel = false;
            }
            

            if (param.ReceiptId == null && param.CashierName == null)
            {
                MessageBox.Show("โปรดระบุเงื่อนไข 'เลขที่ใบเสร็จ/ใบกำกับภาษี' หรือ 'ผู้รับเงิน' ที่ต้องการค้นหา",
                    "ค้นหาข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                _presenter.OnReceiptSearch(param);
            }
        }

        private void SearchByCustomer()
        {
            ReceiptSearchParam param = new ReceiptSearchParam();
            param.CustomerId = StringConvert.ToString(customerIdMaskedTextBox.Text.Trim());
            param.CustomerName = StringConvert.ToString(customerNameMaskedTextBox.Text.Trim());
            param.BranchId = Session.Branch.Id;
            if (_presenter.WorkItem.State["IsCancelPage"].ToString() == "True")
            {
                param.IsCancel = true;
            }
            else
            {
                param.IsCancel = false;
            }

            if (param.CustomerId == null && param.CustomerName == null)
            {
                MessageBox.Show("โปรดระบุเงื่อนไข 'เลขประจำตัว' หรือ 'ชื่อ-นามสกุล' ที่ต้องการค้นหา",
                    "ค้นหาข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                if (param.CustomerId != null)
                {
                    param.CustomerId = param.CustomerId.PadLeft(12, '0');
                }
                _presenter.OnReceiptSearch(param);
            }
        }

        private void ClearPaymentDetail()
        {
            receiptIDMaskedTextBox.Text = string.Empty;
            receiptNameMaskedTextBox.Text = string.Empty;

            receiptIDMaskedTextBox.Focus();
        }

        private void ClearCashierDetail()
        {
            customerIdMaskedTextBox.Text = string.Empty;
            customerNameMaskedTextBox.Text = string.Empty;

            customerIdMaskedTextBox.Focus();
        }

        #endregion

        private void receiptClearButton_Click(object sender, EventArgs e)
        {
            ClearPaymentDetail();
        }

        private void CustClearButton_Click(object sender, EventArgs e)
        {
            ClearCashierDetail();
        }

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }

    }
}

