//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using PEA.BPM.Infrastructure;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using System.Data;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;
using System.Text.RegularExpressions;
using PEA.BPM.PaymentCollectionModule.Views.ToBePaidInvoiceView;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using System.Runtime.Serialization;
using System.IO;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.Runtime.Serialization.Formatters.Binary;
using System.Linq;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class ToBePaidInvoiceView : UserControl, IToBePaidInvoiceView
    {

        string _disconnectStrLine = "";
        string _reconnectStrLine = "";
        private ValidatePaymentActive vpa = new ValidatePaymentActive();
        ToolStripMenuItem editAddressSelectedCa;

        bool _isFilterInvoice;
        bool _isFilterPeriod;

        public ToBePaidInvoiceView()
        {
            InitializeComponent();
            transactionDataGridView.AutoGenerateColumns = false;

            //DCR : 20240306 คำนวณภาษี และ การรกรองข้อมูลหน้าจอค้นหาหนี้ เพิ่มเงื่อนไขต้องไม่มีการกรองข้อมูล
            // ToolStrip แก้ไข ชำระโดย สำหรับ CaID ที่เลือกทุกรายการ
            string baEditTAX = CodeTable.Instant.GetAppSettingValue("PC_Edit_TAX_Address");
            string currentBA = Session.Branch.Id.Substring(0, 1);

            if (baEditTAX.Contains(currentBA))
            {
                editAddressSelectedCa = new ToolStripMenuItem("แก้ไขชื่อ-ที่อยู่ตามรายการหมายเลขผู้ใช้ไฟที่เลือก");
                editAddressSelectedCa.Name = "editToolBySelectedCaIdStripMenuItem";
                editAddressSelectedCa.Image = PEA.BPM.PaymentCollectionModule.Properties.Resources.Edit;
                searchContextMenuStrip.Items.Insert(2, editAddressSelectedCa);
            }

            if ((ValidatePermission() && !Session.IsNetworkConnectionAvailable) || (Session.IsNetworkConnectionAvailable && ValidatePermission() && Session.Work.Id != null) && filterInvoiceNoTextBox.Text.Length == 0)
                okButton.Enabled = true;
            else
                okButton.Enabled = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ToBePaidInvoiceViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        public void EnableSaveButton(bool enable)
        {
            //2 cases 1. offline and have permission
            //        2. online and openwork


            if ((ValidatePermission() && !Session.IsNetworkConnectionAvailable) || (Session.IsNetworkConnectionAvailable && ValidatePermission() && Session.Work.Id != null) && filterInvoiceNoTextBox.Text.Length == 0)
                okButton.Enabled = true;
            else
            {
                if (filterInvoiceNoTextBox.Text.Length > 0)
                    okButton.Enabled = false;
                else
                    okButton.Enabled = enable;
            }
        }

        public bool AddInvoices(List<Invoice> invoices)
        {
            if (invoices.Count > 0)
            {
                // DCR : 20240306 คำนวณภาษี และ การรกรองข้อมูลหน้าจอค้นหาหนี้
                // Reset filter เมื่อมีรายการหนี้เพิ่มเติม
                filterInvoiceNoTextBox.Text = string.Empty;

                List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];

                if (!ModuleHelper.CheckDuplicateInvoiceItem(toBePaidInvoices, invoices))
                {
                    MessageBox.Show("รายการดังกล่าวมีอยู่ในรายการที่ต้องการชำระแล้ว", "การค้นหาหนี้",
                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

                // DCR 67-020 
                // ต้องการ Remove รายที่ซ้ำออก แล้วนำรายการที่ค้นหามาใหม่ เข้าไปแทนที่
                RemoveDuplicateInvoiceItem(toBePaidInvoices, invoices);

                //20180117 Updated By Kanokwan.l : แก้ไขการรับเงินจาก Onetouch, VSPP ไม่ให้สามารถรับเงินกรณี BranchID ไม่มีอยู่จริง
                if (!ValidateOneTouchData(invoices))
                {
                    return false;
                }

                Random random = new Random();
                int intRandom;

                foreach (Invoice inv in invoices)
                {
                    ToBePaidInvoice tbbinv = new ToBePaidInvoice(inv);
                    tbbinv.ToBePaidBill = new List<ToBePaidBill>();
                    intRandom = random.Next();
                    tbbinv.UiRefId = intRandom;
                    tbbinv.IsChecked = true;

                    // DCR 67-020 Rev.1 การเลือกราย และการแสดงผลจำนวนรายการที่เลือก
                    if (inv != null && inv.PmId == CodeNames.PaymentMethod.EPayment.Id)
                    {
                        tbbinv.IsChecked = false;
                    }

                    if (inv.Bills != null)
                    {
                        foreach (Bill b in inv.Bills)
                        {
                            ToBePaidBill tbb = new ToBePaidBill(b);
                            tbb.UiRefId = intRandom;
                            tbbinv.ToBePaidBill.Add(tbb);

                            // DCR 67-020 Rev.1 การเลือกราย และการแสดงผลจำนวนรายการที่เลือก
                            if (b.GroupInvoiceId != null && b.DebtId.Substring(0, 1) != "P")
                            {
                                tbbinv.IsChecked = false;
                            }
                            else if (b.SubGroupInvoiceNo != null && b.IsElectricDebt())
                            {
                                tbbinv.IsChecked = false;
                            }
                            // End select item.
                        }
                    }

                    toBePaidInvoices.Add(tbbinv);
                }

                _presenter.WorkItem.State["ToBePaidInvoices"] = toBePaidInvoices;

                //okButton.Focus();  // ต้องนำออกไป เนื่องจากมีผลการการสแกน Barcode ต่อเนื่อง

                RedrawScreen();

                if (transactionDataGridView.Rows.Count > 0)
                {
                    transactionDataGridView.CurrentCell = transactionDataGridView[0, transactionDataGridView.Rows.Count - 1];
                }
            }

            return true;
        }

        public bool AddInvoicesByMultiSearch(List<Invoice> invoices)
        {
            if (invoices.Count > 0)
            {
                // DCR : 20240306 คำนวณภาษี และ การรกรองข้อมูลหน้าจอค้นหาหนี้
                // Reset filter เมื่อมีรายการหนี้เพิ่มเติม
                filterInvoiceNoTextBox.Text = string.Empty;

                List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
                // DCR 67-020 
                // ต้องการ Remove รายที่ซ้ำออก แล้วนำรายการที่ค้นหามาใหม่ เข้าไปแทนที่
                RemoveDuplicateInvoiceItem(toBePaidInvoices, invoices);

                // DCR 67-020
                // *** Note ปิด code ในส่วนนี้ เนื่องจากรายการหนี้เดิมจะถูกนำออกแล้วนำรายการใหม่ที่ค้นหาด้วย CaId เพิ่มเข้ามา 
                // เพื่อเป็นการปรับปรุงข้อมูล 
                //if (!ModuleHelper.CheckDuplicateInvoiceItem(toBePaidInvoices, invoices))
                //{
                //    MessageBox.Show("รายการดังกล่าวมีอยู่ในรายการที่ต้องการชำระแล้ว", "ข้อผิดพลาด",
                //        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                //    return false;
                //}

                //ตรวจสอบข้อมูล OneTouch
                //if (!ValidateOneTouchData(invoices))
                //{
                //    MessageBox.Show("ข้อมูลไม่สมบูรณ์", "ข้อผิดพลาด",
                //        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                //    return false;
                //}


                //20180117 Updated By Kanokwan.l : แก้ไขการรับเงินจาก Onetouch, VSPP ไม่ให้สามารถรับเงินกรณี BranchID ไม่มีอยู่จริง
                if (!ValidateOneTouchData(invoices))
                {
                    return false;
                }

                Random random = new Random();
                int intRandom;

                foreach (Invoice inv in invoices)
                {
                    ToBePaidInvoice tbbinv = new ToBePaidInvoice(inv);
                    tbbinv.ToBePaidBill = new List<ToBePaidBill>();
                    intRandom = random.Next();
                    tbbinv.UiRefId = intRandom;
                    tbbinv.IsChecked = true;

                    // DCR 67-020 Rev.1 การเลือกราย และการแสดงผลจำนวนรายการที่เลือก
                    if (inv != null && inv.PmId == CodeNames.PaymentMethod.EPayment.Id)
                    {
                        tbbinv.IsChecked = false;
                    }

                    if (inv.Bills != null)
                    {
                        foreach (Bill b in inv.Bills)
                        {
                            ToBePaidBill tbb = new ToBePaidBill(b);
                            tbb.UiRefId = intRandom;
                            tbbinv.ToBePaidBill.Add(tbb);

                            // DCR 67-020 Rev.1 การเลือกราย และการแสดงผลจำนวนรายการที่เลือก
                            if (b.GroupInvoiceId != null && b.DebtId.Substring(0, 1) != "P")
                            {
                                tbbinv.IsChecked = false;
                            }
                            else if (b.SubGroupInvoiceNo != null && b.IsElectricDebt())
                            {
                                tbbinv.IsChecked = false;
                            }
                            //*** End DCR 67-020 Rev.1 การเลือกราย
                        }
                    }

                    toBePaidInvoices.Add(tbbinv);
                }

                _presenter.WorkItem.State["ToBePaidInvoices"] = toBePaidInvoices;

                //okButton.Focus(); // ต้องนำออกไป เนื่องจากมีผลการการสแกน Barcode ต่อเนื่อง

                RedrawScreen();

                if (transactionDataGridView.Rows.Count > 0)
                {
                    transactionDataGridView.CurrentCell = transactionDataGridView[0, transactionDataGridView.Rows.Count - 1];
                }
            }

            return true;
        }

        private void RedrawScreen()
        {
            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            
            // DCR 67-020 เมื่อรายการหนี้ลดลง  DataGridView disable ส่งผลให้การ Refresh ข้อมูล
            transactionDataGridView.Enabled = false; 

            transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(toBePaidInvoices);
            transactionDataGridView.Enabled = true;

            ReCalculateSummations();
        }

        private void ReCalculateSummations()
        {
            int nbAll = 0;
            decimal amAll = 0;
            int nbSelect = 0;
            decimal amSelect = 0;
            int nbToPay = 0;
            decimal amToPay = 0;
            int nbLeft = 0;
            decimal amLeft = 0;

            for (int i = 0; i < transactionDataGridView.Rows.Count; i++)
            {
                //if ((bool)transactionDataGridView.Rows[i].Cells[0].Value == true)
                //{
                //    nbSelect = nbSelect + 1;
                //    amSelect = amSelect + (decimal)transactionDataGridView.Rows[i].Cells[9].Value;
                //    nbToPay = nbToPay + 1;
                //    amToPay = amToPay + (decimal)transactionDataGridView.Rows[i].Cells[12].Value;
                //}

                //if ((bool)transactionDataGridView.Rows[i].Cells[0].Value == true 
                //        && ((decimal)transactionDataGridView.Rows[i].Cells[9].Value - (decimal)transactionDataGridView.Rows[i].Cells[12].Value) > 0)
                //{
                //    transactionDataGridView.Rows[i].Cells[13].Value = (decimal)transactionDataGridView.Rows[i].Cells[9].Value - (decimal)transactionDataGridView.Rows[i].Cells[12].Value;
                //    nbLeft = nbLeft + 1;
                //    amLeft = amLeft + (decimal)transactionDataGridView.Rows[i].Cells[13].Value;                    
                //}

                //nbAll = nbAll + 1;
                //amAll = amAll + (decimal)transactionDataGridView.Rows[i].Cells[9].Value;

                ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[i].DataBoundItem; // DCR 67-020 Rev.1 ปรับปรุงการนับรายการที่เลือก ใช้เงื่อนไขจาก object เพิ่มเข้ามาด้วย
                if ((bool)transactionDataGridView.Rows[i].Cells[0].Value == true && currentInvoice.IsChecked == true)
                {
                    nbSelect = nbSelect + 1;
                    amSelect = amSelect + (decimal)transactionDataGridView.Rows[i].Cells["toPayAmountDgColumn"].Value;
                    nbToPay = nbToPay + 1;
                    amToPay = amToPay + (decimal)transactionDataGridView.Rows[i].Cells["PaidAmount"].Value;
                }

                if ((bool)transactionDataGridView.Rows[i].Cells[0].Value == true
                        && ((decimal)transactionDataGridView.Rows[i].Cells["toPayAmountDgColumn"].Value - (decimal)transactionDataGridView.Rows[i].Cells["PaidAmount"].Value) > 0)
                {
                    transactionDataGridView.Rows[i].Cells["LeftAmount"].Value = (decimal)transactionDataGridView.Rows[i].Cells["toPayAmountDgColumn"].Value - (decimal)transactionDataGridView.Rows[i].Cells["PaidAmount"].Value;
                    nbLeft = nbLeft + 1;
                    amLeft = amLeft + (decimal)transactionDataGridView.Rows[i].Cells["LeftAmount"].Value;
                }

                nbAll = nbAll + 1;
                amAll = amAll + (decimal)transactionDataGridView.Rows[i].Cells["toPayAmountDgColumn"].Value;
            }

            totalTransactionTextBox.Text = transactionDataGridView.Rows.Count.ToString();
            totalAmountTransactionTextBox.Text = amAll.ToString("#,##0.00");
            selectTransactionTextBox.Text = nbSelect.ToString();
            selectAmountTransactionTextBox.Text = amSelect.ToString("#,##0.00");
            paidTransactionTextBox.Text = nbToPay.ToString();
            paidAmountTransactionTextBox.Text = amToPay.ToString("#,##0.00");
            leftAmountTransactionTextBox.Text = amLeft.ToString("#,##0.00");
            totalAmountTextBox.Text = amToPay.ToString("#,##0.00");

            // DCR 67-020 แสดงจำนวน CAID
            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            totalCaIdTextBox.Text = toBePaidInvoices.Select(e => e.CaId).Distinct().Count().ToString("#,##0");

            grandTotalLabel.Text = "รับชำระ";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;
        }

        public decimal ChangeAmount
        {
            set
            {
                decimal change = value;
                ClearData();

                grandTotalLabel.Text = "เงินทอน";
                grandTotalLabel.ForeColor = Color.Red;
                totalAmountTextBox.Text = string.Format("{0:#,##0.00}", change < 0 ? 0 : change);
                totalAmountTextBox.ForeColor = Color.Red;
            }
        }

        private void transactionDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            

            if (transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value == null)
            {
                DateTime dueDate;
                DateTime currentDate;

                currentDate = Convert.ToDateTime(Session.BpmDateTime.Now.Date, new CultureInfo("th-TH", true));
                if (transactionDataGridView.Rows[e.RowIndex].Cells["dueDateDgColumn"].Value.ToString() == "")
                {
                    dueDate = currentDate;
                }
                else
                {
                    dueDate = Convert.ToDateTime(transactionDataGridView.Rows[e.RowIndex].Cells["dueDateDgColumn"].Value, new CultureInfo("th-TH", true));
                }

                if (currentDate > dueDate)
                {
                    transactionDataGridView.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.Red;
                }
                else
                {
                    transactionDataGridView.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.Black;
                }
                
                transactionDataGridView.Rows[e.RowIndex].ContextMenuStrip = searchContextMenuStrip;
                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Transparent;

                ToBePaidInvoice inv = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;

                string msg = "";
                int iCount = 0;

                if (inv != null && inv.PmId == CodeNames.PaymentMethod.EPayment.Id)
                {
                    transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].Value = false;
                    transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].ReadOnly = true;
                    transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.EPayment;
                    msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForEPayment);
                    iCount += 1;
                }

                //List<DebtType> debtType = CodeTable.Instant.ListDebtTypes().FindAll(delegate(DebtType dt)
                //{
                //    return dt.PrintDescription != null && dt.PrintDescription.IndexOf("ค่าสินค้า") > -1;
                //}
                //);
                int iCountToolTipBookPayment = 0;
                int iCountToolTipBookPaymentNo = 0;

                foreach (Bill b in inv.Bills)
                {
                    if (b.PaymentMethodId != null)
                    {
                        if (b.PaymentOrderFlag == "X")
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Bank;
                            if (b.PaymentOrderDt != null)
                            {
                                msg = string.Format("{0}, {1}  (วันที่ {2})", msg, CommandNames.ToolTipForDeductBankAccount, b.PaymentOrderDt.Value.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                            }
                            else
                            {
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForDeductBankAccount);
                            }
                            iCount += 1;
                        }
                        //if (b.PaymentMethodId == CodeNames.PaymentMethod.GroupInvoicing.Id && b.IsElectricDebt()) // Can More than ElectricDept
                        if (b.PaymentMethodId == CodeNames.PaymentMethod.GroupInvoicing.Id ) // Capayer pmid = 'C' คือต้องรับชำระผ่าน Cashier เท่านั้น, Ca ลูก pmid ='G' คือต้องตัดผ่าน Group เท่านั้น
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Group;
                            if (  iCountToolTipBookPayment ==0)
                            {
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForGroupPayment);
                                iCountToolTipBookPayment += 1;
                            }
                            iCount += 1;
                        }
                        //if (b.GroupInvoiceId != null && b.IsElectricDebt())// Can More than ElectricDept
                        //if (b.GroupInvoiceId != null && b.PaymentMethodId == CodeNames.PaymentMethod.GroupInvoicing.Id) // Capayer pmid = 'C' คือต้องรับชำระผ่าน Cashier เท่านั้น, Ca ลูก pmid ='G' คือต้องตัดผ่าน Group เท่านั้น
                        if (b.GroupInvoiceId != null && b.DebtId.Substring(0, 1) != "P") // tanayoot.L แสดงข้อมูล มธ ที่ยังไม่ตัดชำระ
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Group;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].Value = false;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].ReadOnly = true;
                            if (iCountToolTipBookPaymentNo == 0)
                            {
                                msg = string.Format("{0}, ต้องชำระผ่านการชำระแบบกลุ่ม เลขที่ {1}", msg, b.GroupInvoiceId);
                                iCountToolTipBookPaymentNo += 1;
                            }
                            if (b.PaymentMethodId != CodeNames.PaymentMethod.GroupInvoicing.Id)
                            {
                                iCount += 1;
                            }
                        }
                        else if (b.SubGroupInvoiceNo != null && b.IsElectricDebt()) 
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.SubGroup;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].Value = false;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].ReadOnly = true;
                            msg = string.Format("{0}, ค่าจัดการพลังงาน เลขที่ {1}", msg, b.SubGroupInvoiceNo);
                            if (b.PaymentMethodId != CodeNames.PaymentMethod.GroupInvoicing.Id)
                            {
                                iCount += 1;
                            }
                        }


                        if (b.PaymentMethodId == CodeNames.PaymentMethod.EPayment.Id)
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Edit;
                            msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForEPayment);
                            iCount += 1;
                        }

                        
                    }

                    if (b.DisconnectDocNo != null & b.IsElectricDebt())
                    {
                        List<DisconnectionDoc> DisconnectionStatuses = _presenter.SearchDisconnectionStatusByDiscNo(b.ItemId.Substring(0, 12));
                        if (DisconnectionStatuses.Count > 0)
                        {
                            if (DisconnectionStatuses[0].DiscStatusId == CodeNames.DisconnectionStatus.ProposeDisconnect.Id
                                && DisconnectionStatuses[0].MeterRemConfirm == null)
                            {
                                //สถานะอยู่ระหว่างการทำเอกสารการขอตัดไฟ
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForProposeDisconnect);
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Propose;
                            }
                            else if ((DisconnectionStatuses[0].DiscStatusId == CodeNames.DisconnectionStatus.OrderGenerated.Id
                                     || DisconnectionStatuses[0].DiscStatusId == CodeNames.DisconnectionStatus.Approved.Id)
                                     && DisconnectionStatuses[0].MeterRemConfirm == null)
                            {
                                //สถานะการงดจ่ายไฟเริ่มต้น
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForOrderGeneratedDisconnect);
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Generate;
                            }
                            else if (DisconnectionStatuses[0].PostpConfirm != null || DisconnectionStatuses[0].FuseRemConfirm != null || DisconnectionStatuses[0].MeterRemConfirm != null)
                            {
                                //สถานะออกไปดำเนินการแล้ว
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForElectricCutOff);
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Remove;
                            }
                            else
                            {
                                msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForElectricCutOff);
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Remove;
                            }
                            iCount += 1;
                        }
                    }
                    if ((b.IsElectricDebt() || b.IsInstallmentDebt())
                        && b.SecurityDeposit != null
                        && b.GAmount != null
                        && b.SecurityDeposit < b.GAmount)
                    {
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Baht;
                        msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForExpenseOverSecurity);
                        iCount += 1;
                    }
                    if (b.ModifiedFlag == "1")
                    {
                        DataGridViewCheckBoxCell chkBoxCell = (DataGridViewCheckBoxCell)transactionDataGridView.Rows[e.RowIndex].Cells[0];
                        chkBoxCell.Value = false;
                        ReCalculateSummations();
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Edit;
                        msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForEditBill);
                        iCount += 1;
                    }
                    if (CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.DebitNoteDebt.Id).Contains(b.DebtId))
                    {
                        DataGridViewCheckBoxCell chkBoxCell = (DataGridViewCheckBoxCell)transactionDataGridView.Rows[e.RowIndex].Cells[0];
                        chkBoxCell.Value = false;
                        chkBoxCell.ReadOnly = true;
                        ReCalculateSummations();
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.DebitNote;
                        msg = string.Format("{0}, {1}", msg, CommandNames.ToolTipForDebitNote);
                        iCount += 1;
                    }
                    if (b.DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id
                        || b.DebtId == CodeNames.DebtType.Interest.Id
                        || b.DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ReConnectMeter.Id))
                    {                       
                        //transactionDataGridView.Rows[e.RowIndex].Cells[12].ReadOnly = true;
                        transactionDataGridView.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = true;
                    }
                    if (transactionDataGridView.Rows[e.RowIndex].Cells["invoiceno"].Value.ToString() != "") {
                        if (transactionDataGridView.Rows[e.RowIndex].Cells["invoiceno"].Value.ToString().Substring(0, 2).ToUpper() == "VS")
                        {
                            //201801171130 Kanokwan.l แก้ไขกรณี Databound ครั้งแรกไม่มี Invoiceno ทำให้ SubString ไม่ได้ แล้วระบบจะ Error
                            transactionDataGridView.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = true;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].Value = true;
                            transactionDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].ReadOnly = true;
                        }
                    }
                 
                    //if (b.DebtId == CodeNames.DebtType.Interest.Id || b.DebtId == CodeNames.DebtType.Interest.GroupInvoice.Id)
                    //{
                    //    transactionDataGridView.Rows[e.RowIndex].Cells[0].ReadOnly = true;
                    //}
                    //if (debtType.FindAll(delegate(DebtType dt) { return b.DebtId == dt.DebtId; }).Count > 0)
                    //{
                    //    transactionDataGridView.Rows[e.RowIndex].Cells[12].ReadOnly = true;
                    //}

                    if (b.DiscStatusId == CodeNames.DisconnectElecStatus.FuseRemoved.Id)
                    {
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Electric;
                        msg = string.Format("{0}, {1}", msg, CodeNames.DisconnectElecStatus.FuseRemoved.Name);
                        iCount += 1;
                    }
                    else if (b.DiscStatusId == CodeNames.DisconnectElecStatus.MeterRemoved.Id)
                    {
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Remove;
                        msg = string.Format("{0}, {1}", msg, CodeNames.DisconnectElecStatus.MeterRemoved.Name);
                        iCount += 1;
                    }


                    if (msg.Length > 0)
                    {
                        transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].ToolTipText = string.Format("# {0}", msg.Substring(1));
                        if (iCount > 1)
                        {
                            if (b.DiscStatusId == CodeNames.DisconnectElecStatus.FuseRemoved.Id)
                            {
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.MultiRemindForDiscElec;
                            }
                            else if (b.DiscStatusId == CodeNames.DisconnectElecStatus.MeterRemoved.Id)
                            {
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.MultiRemindForRemoveMeter;
                            }
                            else
                            {
                                transactionDataGridView.Rows[e.RowIndex].Cells["statusColumn"].Value = Properties.Resources.Exclamation;
                            }
                        }
                    }
                    //DF#102 20180918 Kanokwan.L แจ้งเตือนการรับเงินต่างสาขา 
                    //DF#167 20181016 Kanokwan.L ไม่สามารถตั้งหนี้ข้อมูล Vendor ได้
                    if ((inv.BranchId != "" && inv.BranchId != null) && (Session.Terminal.Code != "" && Session.Terminal.Code != null))
                    {
                        if ((inv.BranchId.Substring(0, 1).ToString()) != (Session.Terminal.Code.Substring(0, 1).ToString()))
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells[2].Style.BackColor = Color.BlueViolet;
                            transactionDataGridView.Rows[e.RowIndex].Cells[2].Style.ForeColor = Color.White;
                            transactionDataGridView.Rows[e.RowIndex].Cells[2].ToolTipText = "รับชำระข้ามเขต";
                        }
                    }
                }
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            //ClearData();

            // DCR 67-020 มีรายการหนี้ กดปุ่มยกเลิกให้ทำการยืนยันก่อน.
            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            if (toBePaidInvoices.Count > 0)
            {
                if (MessageBox.Show("ต้องการยกเลิกรายการที่ค้นหาหรือไม่ ?", "ยืนยันการยกเลิก", MessageBoxButtons.YesNo, MessageBoxIcon.Warning,MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                {
                    ClearData();
                }
            }
            else
            {
                ClearData();
            }
        }

        public void ClearData()
        {
            _presenter.WorkItem.State["ToBePaidInvoices"] = new List<ToBePaidInvoice>();
            _presenter.WorkItem.State["PrintingReceipts"] = null;
            _presenter.WorkItem.State["GroupDividualPrintingReceipts"] = null;
            transactionDataGridView.DataSource = new List<ToBePaidInvoice>();
            totalAmountTransactionTextBox.Text = "0";
            totalTransactionTextBox.Text = "0";
            selectTransactionTextBox.Text = "0";
            selectAmountTransactionTextBox.Text = "0";
            paidAmountTransactionTextBox.Text = "0";
            paidTransactionTextBox.Text = "0";
            leftAmountTransactionTextBox.Text = "0";
            totalAmountTextBox.Text = "";
            grandTotalLabel.Text = "รับชำระ";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;
            CheckBoxAll.Checked = true;
            totalCaIdTextBox.Text = "0"; // DCR 67-020
            _presenter.OnFocusOnSearchById();
        }

        public void ClearData_from_Queue()
        {
            transactionDataGridView.DataSource = new List<ToBePaidInvoice>();
            totalAmountTransactionTextBox.Text = "0";
            totalTransactionTextBox.Text = "0";
            selectTransactionTextBox.Text = "0";
            selectAmountTransactionTextBox.Text = "0";
            paidAmountTransactionTextBox.Text = "0";
            paidTransactionTextBox.Text = "0";
            leftAmountTransactionTextBox.Text = "0";
            totalAmountTextBox.Text = "";
            grandTotalLabel.Text = "รับชำระ";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;

        }

        private void transactionDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;

                if (e.ColumnIndex == 0)
                {
                    string IsModifiedFlag = "";
                    foreach (Bill b in currentInvoice.Bills)
                    {
                        if (b.ModifiedFlag == "1")
                        {
                            IsModifiedFlag = "1";
                            break;
                        }
                    }

                    if (IsModifiedFlag == "1" && (bool)transactionDataGridView.Rows[e.RowIndex].Cells[0].Value == false)
                    {
                        if (MessageBox.Show("บิลอยู่ระหว่างการแก้ไข  ต้องการที่จะทำการเลือกหรือไม่", "แจ้งเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells[0].Value = true;
                            ReCalculateSummations();
                        }
                        else
                        {
                            transactionDataGridView.Rows[e.RowIndex].Cells[0].Value = false;
                        }
                        transactionDataGridView.EndEdit();
                    }
                }
            }
        }

        private void transactionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                transactionDataGridView.EndEdit();

                if (e.ColumnIndex == 0)
                {
                    ReCalculateSummations();
                }


                else if (e.ColumnIndex == 1)
                {
                    ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                    if (currentInvoice.Bills[0].DisconnectDocNo != null)
                    {
                        using (DisconnectionStatus disconnectionForm = new DisconnectionStatus())
                        {
                            List<DisconnectionDoc> DisconnectionStatuses = _presenter.SearchDisconnectionStatusByDiscNo(currentInvoice.Bills[0].ItemId.Substring(0, 12));
                            if (DisconnectionStatuses.Count > 0)
                            {
                                disconnectionForm.SetDisconnectStatus(DisconnectionStatuses);
                                disconnectionForm.ShowDialog();
                            }
                        }
                    }
                }


                else if (e.ColumnIndex == 9)
                {
                    ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                    _presenter.OnViewInvoiceDetailClick(currentInvoice.Bills);
                }

            }
        }

        private void transactionDataGridView_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex > -1 && e.ColumnIndex != 0 && e.ColumnIndex != 1 && e.ColumnIndex != 12)
            if (e.RowIndex > -1 && e.ColumnIndex != 0 && e.ColumnIndex != 1 && e.ColumnIndex != 14)
            {
                ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                HistoryViewParam param = new HistoryViewParam(currentInvoice.CaId, currentInvoice.NetworkMode == NetworkMode.OnlineToBpmServer);
                _presenter.OnViewHistoryClick(param);
            }
        }

        private bool CanModifyHeader(ToBePaidInvoice invoice)
        {
            return true;
        }

        #region +++ Custom Function +++

        private bool IsNumeric(string strTextEntry)
        {
            Regex objNotWholePattern = new Regex("[^0-9]");
            return !objNotWholePattern.IsMatch(strTextEntry);
        }

        private bool CheckReConnectMeter()
        {
            List<ToBePaidInvoice> workItemInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            _disconnectStrLine = "";
            _reconnectStrLine = "";

            if (workItemInvoices.Count > 0)
            {

                string reconnectDtId = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ReConnectMeter.Id);
                foreach (Invoice inv in workItemInvoices)
                {
                    foreach (Bill bill in inv.Bills)
                    {
                        if (bill.DisconnectDocNo != null)
                        {
                            if (bill.DebtId != reconnectDtId)
                                _disconnectStrLine += bill.CustomerId + ":" + bill.DisconnectDocNo + ",";

                            if (bill.DebtId == reconnectDtId)
                                _reconnectStrLine += bill.CustomerId + ":" + bill.DisconnectDocNo + ",";
                        }
                    }
                }


                if (_disconnectStrLine.Length > 0)
                    _disconnectStrLine = _disconnectStrLine.Substring(0, _disconnectStrLine.Length - 1); //remove "," in last char

                if (_reconnectStrLine.Length > 0)
                    _reconnectStrLine = _reconnectStrLine.Substring(0, _reconnectStrLine.Length - 1); //remove "," in last char

                if (_disconnectStrLine.Length > 0 && _reconnectStrLine.Length > 0)
                {
                    string[] arrStr = _reconnectStrLine.Split(',');
                    foreach (string st in arrStr)
                    {
                        _disconnectStrLine = _disconnectStrLine.Replace(st + ",", "");
                        _disconnectStrLine = _disconnectStrLine.Replace(st, "");
                    }
                }

            }


            if (_disconnectStrLine != "")
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        #endregion

        private List<Invoice> GetSelectedItems(List<ToBePaidInvoice> paidInvoices)
        {
            List<Invoice> selectedItems = new List<Invoice>();

            foreach (ToBePaidInvoice inv in paidInvoices)
            {
                if (inv.IsChecked)
                {
                    selectedItems.Add(inv.ToInvoice());
                }
            }

            return selectedItems;
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            if (!ValidateCloseWorkOfCashier())
                return;

            if (Session.IsNetworkConnectionAvailable)
            {
                vpa.ValidatePaymentActiveFromOffline();
                vpa.ValidatePaymentActiveFromOnline(_presenter._billingService);
                vpa.CheckReceiptRunning(true);
            }
            else
            {
                vpa.ValidatePaymentActiveFromOffline();
                vpa.CheckReceiptRunning(false);
            }

            PayItems();

            _presenter.OnFocusOnSearchById();
        }

        public void PayItems()
        {
            List<ToBePaidInvoice> paidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];

            if (paidInvoices.Count > 0)
            {
                List<Invoice> selectedItems = GetSelectedItems(paidInvoices);
                if (selectedItems.Count > 0)
                {
                    if (CheckPaymentRule(paidInvoices))
                    {
                        if (!CheckReConnectMeter())
                        {
                            if (CheckDirectDebit(paidInvoices))
                            {
                                //selectedItems = CheckAdjustAmountTransaction(selectedItems);
                                selectedItems = AssignedRowNumber(selectedItems);

                                _presenter.InvoicePaymentMethodClicked(selectedItems);
                            }
                        }
                        else
                        {
                            DialogResult retDialog = MessageBox.Show("พบรายการค่าไฟที่ถูกเสนองดจ่ายไฟแล้ว แต่ยังไม่ได้ชำระค่าต่อกลับ\n\nท่านต้องการชำระค่าต่อกลับหรือไม่?", "คำเตือน",
                                MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (retDialog == DialogResult.Yes)
                            {
                                CallReMeterItemAdd();
                            }
                            else if (retDialog == DialogResult.No)
                            {
                                if (CheckDirectDebit(paidInvoices))
                                {
                                    //selectedItems = CheckAdjustAmountTransaction(selectedItems);
                                    selectedItems = AssignedRowNumber(selectedItems);

                                    _presenter.InvoicePaymentMethodClicked(selectedItems);
                                }
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("กรุณาเลือกรายการที่ต้องการชำระหนี้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                MessageBox.Show("ไม่มีรายการหนี้ที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        //TODO: INSTALLMENT CASE
        //public void PayItems()
        //{
        //    List<ToBePaidInvoice> paidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];

        //    if (paidInvoices.Count > 0)
        //    {
        //        List<Invoice> selectedItems = GetSelectedItems(paidInvoices);
        //        if (selectedItems.Count > 0)
        //        {
        //            if (CheckInstallment(paidInvoices))
        //            {
        //                if (CheckPaymentRule(paidInvoices))
        //                {
        //                    if (!CheckReConnectMeter())
        //                    {
        //                        if (CheckDirectDebit(paidInvoices))
        //                        {
        //                            //selectedItems = CheckAdjustAmountTransaction(selectedItems);
        //                            selectedItems = GetSelectedItems(paidInvoices);
        //                            selectedItems = AssignedRowNumber(selectedItems);

        //                            _presenter.InvoicePaymentMethodClicked(selectedItems);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        DialogResult retDialog = MessageBox.Show("พบรายการค่าไฟที่ถูกเสนองดจ่ายไฟแล้ว แต่ยังไม่ได้ชำระค่าต่อกลับ\n\nท่านต้องการชำระค่าต่อกลับหรือไม่?", "คำเตือน",
        //                            MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        //                        if (retDialog == DialogResult.Yes)
        //                        {
        //                            CallReMeterItemAdd();
        //                        }
        //                        else if (retDialog == DialogResult.No)
        //                        {
        //                            if (CheckDirectDebit(paidInvoices))
        //                            {
        //                                //selectedItems = CheckAdjustAmountTransaction(selectedItems);
        //                                selectedItems = AssignedRowNumber(selectedItems);

        //                                _presenter.InvoicePaymentMethodClicked(selectedItems);
        //                            }
        //                        }
        //                    }
        //                }
        //            }                    
        //        }
        //        else
        //        {
        //            MessageBox.Show("กรุณาเลือกรายการที่ต้องการชำระหนี้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        //        }
        //    }
        //    else
        //    {
        //        MessageBox.Show("ไม่มีรายการหนี้ที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        //    }
        //}

        private List<Invoice> CheckAdjustAmountTransaction(List<Invoice> toBePaidInvoices)
        {
            if (((toBePaidInvoices[toBePaidInvoices.Count - 1].ToPayGAmount * 100) % 25) != 0)
            {
                return toBePaidInvoices;
            }
            else if (((toBePaidInvoices[toBePaidInvoices.Count - 1].ToPayGAmount * 100) % 25) != 0 && toBePaidInvoices.Count == 2)
            {
                return toBePaidInvoices;
            }
            else
            {
                for (int i = 0; i < toBePaidInvoices.Count - 1; i++)
                {
                    Invoice invoice = toBePaidInvoices[i];

                    if (((invoice.ToPayGAmount * 100) % 25) != 0)
                    {
                        int idx = toBePaidInvoices.IndexOf(invoice);

                        if (idx < toBePaidInvoices.Count - 1)
                        {
                            toBePaidInvoices.Remove(invoice);
                            toBePaidInvoices.Insert(idx + 1, invoice);
                        }
                    }
                }

                return toBePaidInvoices;
            }

        }

        private List<Invoice> AssignedRowNumber(List<Invoice> toBePaidInvoices)
        {
            for (int i = 0; i <= toBePaidInvoices.Count - 1; i++)
            {
                if (i == 0)
                {
                    toBePaidInvoices[i].RowNum = 1;
                }
                else
                {
                    toBePaidInvoices[i].RowNum = toBePaidInvoices[i - 1].RowNum + 1;
                }
            }

            return toBePaidInvoices;
        }

        private void CallReMeterItemAdd()
        {
            _presenter.OnReMeterItemAdd(_disconnectStrLine + "|" + _reconnectStrLine);
        }

        private bool CheckDirectDebit(List<ToBePaidInvoice> paidInvoices)
        {
            bool hasDirectDebitItems = false;

            foreach (ToBePaidInvoice invoice in paidInvoices)
            {
                if (invoice.IsChecked && invoice.Bills[0].PaymentOrderFlag == "X")
                {
                    hasDirectDebitItems = true;
                }
            }

            if (hasDirectDebitItems)
            {
                if (MessageBox.Show("พบ 'รายการตัดผ่านบัญชีธนาคาร' ในรายการที่เลือก\nกดปุ่ม OK หากต้องการรับชำระรายการดังกล่าวด้วย", "ข้อความเตือน", MessageBoxButtons.OKCancel,
                    MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                {
                    return true;
                }
                else
                {
                    for (int i = 0; i <= transactionDataGridView.Rows.Count - 1; i++)
                    {
                        if (((ToBePaidInvoice)transactionDataGridView.Rows[i].DataBoundItem).Bills[0].PaymentOrderFlag == "X")
                        {
                            transactionDataGridView.Rows[i].Cells[0].Value = false;
                        }
                    }
                    return false;
                }
            }

            return true;
        }

        //TODO: INSTALLMENT CASE
        //private bool CheckInstallment(List<ToBePaidInvoice> paidInvoices)
        //{
        //    bool hasFoundCase = false;
        //    string foundDebt = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ExceptioalInstallmentDebt.Id);


        //    if (paidInvoices.FindAll(delegate(ToBePaidInvoice p) { return p.OriginalDtId != null && foundDebt.Contains(p.OriginalDtId); }).Count > 0)
        //    {
        //        foreach (ToBePaidInvoice invoice in paidInvoices)
        //        {
        //            if (invoice.IsChecked && foundDebt.Contains(invoice.OriginalDtId) == true
        //                && (invoice.TotalPaidAmount - invoice.ToPayGAmount) != 0
        //                && invoice.DueDate < Session.BpmDateTime.Now.Date
        //                && invoice.OriginalCaDoc == null)
        //            {
        //                invoice.IsInvalidInstment = true;
        //                hasFoundCase = true;
        //            }
        //            else if (invoice.IsChecked == false && foundDebt.Contains(invoice.OriginalDtId) == true && invoice.Bills[0].DebtId == CodeNames.DebtType.Interest.Id)
        //            {
        //                List<ToBePaidInvoice> inv = paidInvoices.FindAll(delegate(ToBePaidInvoice pi) { return pi.IsChecked && pi.OriginalInvoiceNo == invoice.OriginalInvoiceNo; });
        //                if (inv.Count > 0)
        //                {
        //                    inv.Sort(new ObjectComparer<ToBePaidInvoice>("DueDate ASC, InvoiceNo ASC", true));
        //                    inv[0].IsInvalidInstment = true;
        //                }
        //                invoice.IsInvalidInstment = true;
        //                hasFoundCase = true;
        //            }
        //        }

        //        if (hasFoundCase)
        //        {
        //            if (MessageBox.Show("โปรดตรวจสอบการคำนวณดอกเบี้ยค่าปรับชำระล่าช้านอกระบบ \nเนื่องจากมีการรับชำระเงินผิดเงื่อนไข  ต้องการไปหน้าระบุวิธีการชำระเงินหรือไม่", "ข้อความเตือน", MessageBoxButtons.YesNo,
        //                MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
        //            {
        //                return true;
        //            }
        //            else
        //            {
        //                return false;
        //            }
        //        }
        //    }

        //    return true;
        //}

        private bool CheckPaymentRule(List<ToBePaidInvoice> paidInvoices)
        {
            string unlockInvoiceNo = "";
            string unlockInterestInvoiceNo = "";

            foreach (ToBePaidInvoice invoice in paidInvoices)
            {
                if (!invoice.IsChecked) // ตรวจสอบการไม่จ่าย
                {
                    // ถ้าจ่ายเงินต้น ต้องจ่ายดอกเบี้ยด้วย
                    if (invoice.DebtType == CodeNames.DebtType.Interest.Name
                        || invoice.DebtType == CodeNames.DebtType.Interest.GroupInvoice.Name)
                    {
                        string parentIvNo = invoice.OriginalInvoiceNo;

                        foreach (ToBePaidInvoice iv in paidInvoices)
                        {
                            if (iv != invoice && iv.IsChecked == true)
                            {
                                //if ((iv.InvoiceNo == parentIvNo || iv.Bills[0].GroupInvoiceId == parentIvNo) && iv.InvoiceNo.Length != 22) 
                                //201806110931 Kanokwan.L DF#56 ต้องการให้ชำระหนี้แม่ โดยที่ไม่ชำระดอกเบี้ย แสดง Dialog เตือนในกรณีแผนผ่อน 
                                if ((iv.InvoiceNo == parentIvNo || iv.Bills[0].GroupInvoiceId == parentIvNo) )
                                {
                                    unlockInterestInvoiceNo += string.Format(", {0}(I)", iv.InvoiceNo);
                                }
                            }
                        }
                    }
                    else if (invoice.Bills[0].DebtId == CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ReConnectMeter.Id) && invoice.InvoiceNo == null)
                    {
                        unlockInvoiceNo += string.Format(", {0}(R)", invoice.OriginalInvoiceNo);
                    }
                    else // ตรวจสอบลำดับ Duedate
                    {
                        if (invoice.DueDate != null)
                        {
                            foreach (ToBePaidInvoice iv in paidInvoices)
                            {
                                // Only check with checked item
                                if (iv.IsChecked)
                                {
                                    // Pay item order by duedate
                                    if (iv.CaId == invoice.CaId && iv.DueDate != null && invoice.DueDate < iv.DueDate && iv.CaDoc != null)
                                    {
                                        if (unlockInvoiceNo.Contains(string.Format(", {0}(D)", invoice.InvoiceNo)) == false)
                                        {
                                            unlockInvoiceNo += string.Format(", {0}(D)", invoice.InvoiceNo);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (unlockInterestInvoiceNo != string.Empty)
            {
                unlockInvoiceNo = unlockInterestInvoiceNo + unlockInvoiceNo;
                return Authorization.IsAuthorized(SecurityNames.UnlockInterestPayment,
                    string.Format("ปลดล็อคการชำระเงิน {0}", unlockInvoiceNo.Substring(2)), true, "ปลดล็อคยกเว้นการชำระเงิน");
            }
            else if (unlockInvoiceNo != string.Empty)
            {
                return Authorization.IsAuthorized(SecurityNames.UnlockPayment,
                    string.Format("ปลดล็อคการชำระเงิน {0}", unlockInvoiceNo.Substring(2)), true, "ปลดล็อคยกเว้นการชำระเงิน");
            }

            return true;
        }


        private void transactionDataGridView_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {


            //if (e.ColumnIndex == 14)
            if (e.ColumnIndex == 12)
            {
                if (String.IsNullOrEmpty(e.FormattedValue.ToString().Trim()))
                {
                    MessageBox.Show("กรุณากรอกจำนวนเงินที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                }
                else if (!IsNumeric(e.FormattedValue.ToString().Replace(",", "").Replace(".", "").Trim()))
                {
                    MessageBox.Show("กรุณากรอกตัวเลขที่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                }
                //else if (StringConvert.ToDecimal(e.FormattedValue.ToString().Trim()) > (decimal)transactionDataGridView.Rows[e.RowIndex].Cells[9].Value)
                else if (StringConvert.ToDecimal(e.FormattedValue.ToString().Trim()) > (decimal)transactionDataGridView.Rows[e.RowIndex].Cells["toPayAmountDgColumn"].Value)
                {
                    //MessageBox.Show("จำนวนเงินที่ชำระต้องไม่มากกว่า " + transactionDataGridView.Rows[e.RowIndex].Cells[9].FormattedValue.ToString(), "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    MessageBox.Show("จำนวนเงินที่ชำระต้องไม่มากกว่า " + transactionDataGridView.Rows[e.RowIndex].Cells["toPayAmountDgColumn"].FormattedValue.ToString(), "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                }
                else if (StringConvert.ToDecimal(e.FormattedValue.ToString().Trim()) == 0)
                {
                    MessageBox.Show("จำนวนเงินที่ชำระต้องมากกว่าศูนย์", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                }
                else if (Math.Round((decimal)StringConvert.ToDecimal(e.FormattedValue.ToString().Trim()), 2) <= StringConvert.ToDecimal("0.12") ) 
              
                {
                    //201802211138 Kanokwan.L Defect#53 ดักเงื่อนไขต้องชำระมากกว่า 0.12
                    //201806141726 Kanokwan.L Defect#112 กรณีดอกเบี้ยน้อยกว่า 0.12 ระบบแสดงข้อความทั้งๆ ที่ไม่ได้แก้ไขเลขใดๆ 
                    if (Math.Round((decimal)StringConvert.ToDecimal(e.FormattedValue.ToString().Trim()), 2) != Math.Round((decimal)transactionDataGridView.Rows[e.RowIndex].Cells[9].Value,2))
                    {
                        MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        e.Cancel = true;
                    }
                    
                }
            }
        }

        private void transactionDataGridView_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.ColumnIndex == 14)
            if (e.ColumnIndex == 12)
            {
                ToBePaidInvoice iv = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                iv.ToPayGAmount = Decimal.Round(iv.ToPayGAmount.Value, 2);
                if (iv.ToPayVatAmount != null)
                {
                    iv.ToPayVatAmount = Decimal.Round(iv.ToPayVatAmount.Value, 2);
                }

                //transactionDataGridView.Rows[e.RowIndex].Cells[13].Value = iv.ToBePaidGAmount.Value - iv.ToPayGAmount.Value;
                transactionDataGridView.Rows[e.RowIndex].Cells["LeftAmount"].Value = iv.ToBePaidGAmount.Value - iv.ToPayGAmount.Value;


                if (null != iv.VatAmount && iv.VatAmount > 0)
                {
                    decimal? toPayAmount = ((iv.ToPayGAmount * iv.VatAmount) / iv.GAmount);
                    iv.ToPayVatAmount = Decimal.Round(toPayAmount.Value, 2);
                }

                if (null != iv.Qty && iv.Qty.Value > 0)
                {
                    iv.ToPayQty = iv.ToPayGAmount / (iv.GAmount / iv.Qty);
                    iv.ToPayQty = Decimal.Round(iv.ToPayQty.Value, 0);
                }

                iv.Bills[0].ToPayGAmount = iv.ToPayGAmount;
                iv.Bills[0].ToPayVatAmount = (iv.ToPayVatAmount == null) ? 0 : iv.ToPayVatAmount;
                iv.Bills[0].ToPayQty = iv.ToPayQty;

                ReCalculateSummations();
            }

            //if (e.ColumnIndex == 12)
            //{
            //    ToBePaidInvoice iv = (ToBePaidInvoice)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
            //    iv.ToPayGAmount = Decimal.Round(iv.ToPayGAmount.Value, 2);
            //    if (iv.ToPayVatAmount != null)
            //    {
            //        iv.ToPayVatAmount = Decimal.Round(iv.ToPayVatAmount.Value, 2);
            //    }

            //    transactionDataGridView.Rows[e.RowIndex].Cells[13].Value = iv.ToBePaidGAmount.Value - iv.ToPayGAmount.Value;

            //    if (null != iv.Bills[0].TaxRate)
            //    {
            //        decimal? toPayAmount = ((iv.ToPayGAmount * 100) / (100 + iv.Bills[0].TaxRate));
            //        toPayAmount = Decimal.Round(toPayAmount.Value, 2);
            //        iv.ToPayVatAmount = iv.ToPayGAmount - toPayAmount;
            //    }

            //    if (null != iv.Qty && iv.Qty.Value>0)
            //    {
            //        iv.ToPayQty = iv.ToPayGAmount / (iv.GAmount / iv.Qty);
            //        iv.ToPayQty = Decimal.Round(iv.ToPayQty.Value, 0);
            //    }

            //    iv.Bills[0].ToPayGAmount = iv.ToPayGAmount;
            //    iv.Bills[0].ToPayVatAmount = (iv.ToPayVatAmount == null) ? 0 : iv.ToPayVatAmount;
            //    iv.Bills[0].ToPayQty = iv.ToPayQty;

            //    ReCalculateSummations();
            //}
        }

        private void transactionDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (transactionDataGridView.Rows.Count > 0 && e.RowIndex > -1)
            {
                if (e.ColumnIndex == 1 && transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim() != "")
                {
                    _presenter.StatusUpdateHandler(transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim());
                }
            }
        }

        private void transactionDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (transactionDataGridView.Rows.Count > 0 && e.RowIndex > -1)
            {
                if (e.ColumnIndex == 1 && transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim() != "")
                {
                    _presenter.StatusUpdateHandler("Ready");
                }
            }
        }

        private void searchContextMenuStrip_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            ToBePaidInvoice invoice = (ToBePaidInvoice)transactionDataGridView.CurrentRow.DataBoundItem;

            switch (e.ClickedItem.Name)
            {
                case "editToolBySelectedCaIdStripMenuItem":
                    List<string> caIdList = toBePaidInvoices.Where(f => f.IsChecked == true).Select(c => c.CaId).Distinct().ToList();

                    //  มาจากการแก้ไขปกติ. 
                    if (CanModifyHeader(invoice))
                    {
                        string name = invoice.Name;
                        string address = invoice.Address == null ? string.Empty : invoice.Address;
                        string cataxid = invoice.CaTaxId == null ? string.Empty : invoice.CaTaxId;
                        string cataxbranch = invoice.CaTaxBranch == null ? string.Empty : invoice.CaTaxBranch;
                        string payByName = invoice.PayByName == null ? string.Empty : invoice.PayByName;  // DCR 67-020 edit paybyname

                        bool nameIsModify = false;
                        bool addressIsModify = false;
                        bool caTaxidIsModify = false;
                        bool caTaxBranchIsModify = false;
                        bool payByNameisModify = false;

                        _presenter.OnHeaderModify(invoice);

                        if (invoice.Name != name || invoice.Address != address
                            || invoice.CaTaxId != cataxid || invoice.CaTaxBranch != cataxbranch)
                        {
                            // Validate data has modify. 
                            if (invoice.Name != name)
                                nameIsModify = true;

                            if ((invoice.Address == null ? string.Empty : invoice.Address) != address)
                                addressIsModify = true;

                            if ((invoice.CaTaxId == null ? string.Empty : invoice.CaTaxId) != cataxid)
                                caTaxidIsModify = true;

                            if ((invoice.CaTaxBranch == null ? string.Empty : invoice.CaTaxBranch) != cataxbranch)
                                caTaxBranchIsModify = true;

                            // DCR 67-020 edit paybyname
                            if ((invoice.PayByName == null ? string.Empty : invoice.PayByName) != payByName)
                                payByNameisModify = true;

                            foreach (ToBePaidInvoice iv in toBePaidInvoices)
                            {
                                var match = caIdList.FirstOrDefault(c => c.Contains(iv.CaId));
                                if (match != null)
                                {
                                    //iv.Name = invoice.Name;
                                    //iv.Address = invoice.Address;

                                    //iv.CaTaxId = invoice.CaTaxId;
                                    //iv.CaTaxBranch = invoice.CaTaxBranch;

                                    if (nameIsModify)
                                        iv.Name = invoice.Name;

                                    if (addressIsModify)
                                        iv.Address = invoice.Address;

                                    if (caTaxidIsModify)
                                        iv.CaTaxId = invoice.CaTaxId;

                                    if (caTaxBranchIsModify)
                                        iv.CaTaxBranch = invoice.CaTaxBranch;

                                    if (payByNameisModify)  // DCR 67-020
                                        iv.PayByName = invoice.PayByName;

                                }
                            }
                            transactionDataGridView.Refresh();
                        }
                    }
                    else
                    {
                        MessageBox.Show(
                            string.Format("ท่านไม่ได้รับอนุญาตให้แก้ไข ชื่อ-ที่อยู่ ของรายการหนี้'", invoice.DebtType),
                            "แจ้งเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    break;

                case "searchToolStripMenuItem":
                    CustomerSearchParam param = new CustomerSearchParam();
                    param.BpCaId = invoice.CaId;
                    _presenter.BillSearchedByDetail(param);
                    break;
                case "editToolStripMenuItem":
                    if (CanModifyHeader(invoice))
                    {
                        string name = invoice.Name;
                        string address = invoice.Address;
                        string cataxid = invoice.CaTaxId;
                        string cataxbranch = invoice.CaTaxBranch;
                        string payByName = invoice.PayByName;  // DCR 67-020 edit paybyname

                        _presenter.OnHeaderModify(invoice);

                        if (invoice.Name != name || invoice.Address != address
                            || invoice.CaTaxId != cataxid || invoice.CaTaxBranch != cataxbranch || invoice.PayByName != payByName)
                        {
                            foreach (ToBePaidInvoice iv in toBePaidInvoices)
                            {
                                if (invoice.CaId == iv.CaId)
                                {
                                    iv.Name = invoice.Name;
                                    iv.PayByName = invoice.PayByName; // DCR 67-020 edit paybyname.
                                    iv.Address = invoice.Address;

                                    iv.CaTaxId = invoice.CaTaxId;
                                    iv.CaTaxBranch = invoice.CaTaxBranch;
                                }
                            }
                            transactionDataGridView.Refresh();
                        }
                    }
                    else
                    {
                        MessageBox.Show(
                            string.Format("ท่านไม่ได้รับอนุญาตให้แก้ไข ชื่อ-ที่อยู่ ของรายการหนี้'", invoice.DebtType),
                            "แจ้งเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    break;
                case "upToolStripMenuItem":
                    int idx1 = toBePaidInvoices.IndexOf(invoice);
                    if (idx1 > 0)
                    {
                        transactionDataGridView.Enabled = false;
                        toBePaidInvoices.Remove(invoice);
                        toBePaidInvoices.Insert(idx1 - 1, invoice);
                        transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(toBePaidInvoices);
                        transactionDataGridView.Enabled = true;
                    }
                    break;
                case "downToolStripMenuItem":
                    int idx2 = toBePaidInvoices.IndexOf(invoice);
                    if (idx2 < toBePaidInvoices.Count - 1)
                    {
                        transactionDataGridView.Enabled = false;
                        toBePaidInvoices.Remove(invoice);
                        toBePaidInvoices.Insert(idx2 + 1, invoice);
                        transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(toBePaidInvoices);
                        transactionDataGridView.Enabled = true;
                    }
                    break;
                default:
                    break;
            }
        }

        private void searchContextMenuStrip_Opening(object sender, CancelEventArgs e)
        {
            ToBePaidInvoice invoice = (ToBePaidInvoice)transactionDataGridView.CurrentRow.DataBoundItem;
            if (invoice.BpId != null || invoice.BpId != string.Empty)
            {
                searchToolStripMenuItem.Text = string.Format("ค้นหาข้อมูลลูกหนี้ภายใต้คู่ค้าทางธุรกิจ '{0}'", invoice.BpId); ;
            }
        }

        //20180117 Updated By Kanokwan.l : แก้ไขการรับเงินจาก Onetouch, VSPP ไม่ให้สามารถรับเงินกรณี BranchID ไม่มีอยู่จริง
        private bool ValidateOneTouchData(List<Invoice> invoices)
        {
            foreach (Invoice inv in invoices)
            {
                if (inv.NotificationNo != null)
                {
                    try
                    {
                        if (
                            inv.CaId == null ||
                            inv.Name == null ||
                            inv.Address == null ||
                            inv.BranchId == null ||
                            inv.InvoiceNo == null ||
                            inv.Bills[0].DebtId == null ||
                            inv.DebtType == null ||
                            inv.Bills[0].TaxCode == null ||
                            inv.Bills[0].TaxRate == null ||
                            inv.Qty == null ||
                            inv.AmountExVat == null ||
                            inv.VatAmount == null ||
                            inv.GAmount == null
                        )
                        {
                            MessageBox.Show("ข้อมูลไม่สมบูรณ์", "ข้อผิดพลาด",
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return false;
                        }
                        else if (CodeTable.Instant.GetBranchName(inv.BranchId) == null)
                        {
                            MessageBox.Show("ข้อมูลไม่สมบูรณ์เนื่องจากไม่พบ Branch " + inv.BranchId + " ในระบบ", "ข้อผิดพลาด",
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return false;
                        }
                    }
                    catch (Exception)
                    {
                        MessageBox.Show("ข้อมูลไม่สมบูรณ์", "ข้อผิดพลาด",
                               MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    //if (
                    //    inv.CaId == null ||
                    //    inv.Name == null ||
                    //    inv.Address == null ||
                    //    inv.BranchId == null ||
                    //    inv.InvoiceNo == null ||
                    //    inv.Bills[0].DebtId == null ||
                    //    inv.DebtType == null ||
                    //    inv.Bills[0].TaxCode == null ||
                    //    inv.Bills[0].TaxRate == null ||
                    //    inv.Qty == null ||
                    //    inv.AmountExVat == null ||
                    //    inv.VatAmount == null ||
                    //    inv.GAmount == null 
                    //)
                    //{
                    //    MessageBox.Show("ข้อมูลไม่สมบูรณ์", "ข้อผิดพลาด",
                    //        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //    return false;
                    //}
                    //else if (CodeTable.Instant.GetBranchName(inv.BranchId)==null) 
                    //{
                    //    MessageBox.Show("ข้อมูลไม่สมบูรณ์เนื่องจากไม่พบ Branch "+ inv.BranchId +" ในระบบ", "ข้อผิดพลาด",
                    //        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //    return false;
                    //}
                }
            }
            return true;
        }

        #region +++ Cash Management +++

        public bool ValidatePermission()
        {
            if (Authorization.IsAuthorized(SecurityNames.PaymentCollection, false))
                return true;
            else
                return false;
        }

        private bool ValidateCloseWorkOfCashier()
        {
            if (Session.IsNetworkConnectionAvailable)
            {
                WorkStatus workstatus = IsClosedWork();
                if ((Session.IsNetworkConnectionAvailable ? ((workstatus.CloseWorkBy == null) ? true : false) : false))
                    return true;
                else
                {
                    string cashierTxt = string.Format("({0}) - {1}", workstatus.CloseWorkBy, workstatus.CashierName);
                    MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnClosePaymentView();
                    //_presenter.OnCloseView();
                    return false;
                }
            }
            else
            {
                return true;
            }

        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        #endregion

        private void CheckBoxAll_CellClick(object sender, EventArgs e)
        {
            for (int i = 0; i < transactionDataGridView.RowCount; i++)
            {
                if (transactionDataGridView.Rows[i].Cells["checkedDgColumn"].ReadOnly == false)
                {
                    transactionDataGridView.Rows[i].Cells[0].Value = CheckBoxAll.Checked;

                    // Validate select item . 
                    ToBePaidInvoice currentInvoice = (ToBePaidInvoice)transactionDataGridView.Rows[i].DataBoundItem;
                    if (currentInvoice != null && currentInvoice.PmId == CodeNames.PaymentMethod.EPayment.Id)
                    {
                        currentInvoice.IsChecked = false;
                    }

                    foreach (var b in currentInvoice.Bills)
                    {
                        if (b.GroupInvoiceId != null && b.DebtId.Substring(0, 1) != "P")
                        {
                            currentInvoice.IsChecked = false;
                        }
                        else if (b.SubGroupInvoiceNo != null && b.IsElectricDebt())
                        {
                            currentInvoice.IsChecked = false;
                        }
                    }
                    // *** End validate select item

                }
            }
            // refresh Amount
            ReCalculateSummations();
        }

        private void filterInvoiceNoTextBox_TextChanged(object sender, EventArgs e)
        {
            string _previousInvoiceNo = string.Empty;
            // DCR : 20240306 คำนวณภาษี และ การรกรองข้อมูลหน้าจอค้นหาหนี้

            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            transactionDataGridView.Enabled = false;

            if (filterInvoiceNoTextBox.Text.Length > 0)
            {
                var filterInvoices = new List<ToBePaidInvoice>();
                foreach (var item in toBePaidInvoices)
                {
                    if (item.InvoiceNo != null)
                    {
                        //Invoice หรือ แผนผ่อน. 
                        if (item.InvoiceNo.Contains(filterInvoiceNoTextBox.Text) || (item.OriginalInvoiceNo != null && item.OriginalInvoiceNo.Contains(filterInvoiceNoTextBox.Text)))
                        {
                            filterInvoices.Add(item);
                            // Set priviouse Invoice 
                            _previousInvoiceNo = item.InvoiceNo;
                        }
                        else 
                        { 
                            // Result 
                            _previousInvoiceNo = string.Empty;
                        }
                    }
                    else if (item.InvoiceNo == null && item.OriginalInvoiceNo != null)
                    {
                        // ค่าปรับ ต่างๆ ไม่มี Invoice. 
                        if (item.OriginalInvoiceNo.Contains(filterInvoiceNoTextBox.Text) || (_previousInvoiceNo != string.Empty && item.OriginalInvoiceNo == _previousInvoiceNo))
                            filterInvoices.Add(item);

                    }

                }
                transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(filterInvoices);
            }
            else
            {
                transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(toBePaidInvoices);
            }

            if ((ValidatePermission() && !Session.IsNetworkConnectionAvailable) || (Session.IsNetworkConnectionAvailable && ValidatePermission() && Session.Work.Id != null) && filterInvoiceNoTextBox.Text.Length == 0)
                okButton.Enabled = true;
            else
                okButton.Enabled = false;

            transactionDataGridView.Enabled = true;
            ReCalculateSummations();

        }

        private void filterPeriodTextBox_TextChanged(object sender, EventArgs e)
        {
            string _previousInvoiceNo = string.Empty;
            string _previousOrgInvoiceNo = string.Empty;
            // DCR : 20240306 คำนวณภาษี และ การรกรองข้อมูลหน้าจอค้นหาหนี้

            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            transactionDataGridView.Enabled = false;

            if (filterPeriodTextBox.Text.Length > 0)
            {
                var filterInvoices = new List<ToBePaidInvoice>();
                foreach (var item in toBePaidInvoices)
                {
                    if (item.InvoiceNo != null)
                    {
                        //Invoice หรือ แผนผ่อน. 
                        if (item.PeriodString != null && item.PeriodString.Contains(filterPeriodTextBox.Text))
                        {
                            filterInvoices.Add(item);
                            // Set priviouse Invoice 
                            _previousInvoiceNo = item.InvoiceNo;
                            _previousOrgInvoiceNo = item.OriginalInvoiceNo;
                        }
                        else
                        {
                            // Result 
                            _previousInvoiceNo = string.Empty;
                        }
                    }
                    else if (item.InvoiceNo == null && item.OriginalInvoiceNo != null)
                    {
                        // ค่าปรับ ต่างๆ ไม่มี Invoice. 
                        if (_previousInvoiceNo != string.Empty && (item.OriginalInvoiceNo == _previousInvoiceNo || item.OriginalInvoiceNo == _previousOrgInvoiceNo))
                            filterInvoices.Add(item);

                    }

                }
                transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(filterInvoices);
            }
            else
            {
                transactionDataGridView.DataSource = new BindingList<ToBePaidInvoice>(toBePaidInvoices);
            }

            if ((ValidatePermission() && !Session.IsNetworkConnectionAvailable) || (Session.IsNetworkConnectionAvailable && ValidatePermission() && Session.Work.Id != null) && this.filterPeriodTextBox.Text.Length == 0)
                okButton.Enabled = true;
            else
                okButton.Enabled = false;

            transactionDataGridView.Enabled = true;
            ReCalculateSummations();
        }

        private void filterInvoiceNoTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                this.filterInvoiceNoTextBox.Text = string.Empty;

            // text period len > 0 --> Clear. 
            if (filterInvoiceNoTextBox.Text.Length > 0)
            {
                _isFilterInvoice = true;
                _isFilterPeriod = false;

                filterPeriodTextBox.Text = string.Empty;
            }
        }

        private void filterPeriodTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                this.filterPeriodTextBox.Text = string.Empty;

            if (this.filterPeriodTextBox.Text.Length > 0)
            {
                _isFilterPeriod = true;
                _isFilterInvoice = true;

                filterInvoiceNoTextBox.Text = string.Empty;
            }
        }

        /// <summary>
        /// DCR 67-020 Remove duplication item.
        /// หนี้ตั้งเองไม่ต้อง Remove
        /// </summary>
        /// <param name="toBePaidInvoices"></param>
        /// <param name="invoices"></param>
        private void RemoveDuplicateInvoiceItem(List<ToBePaidInvoice> toBePaidInvoices, List<Invoice> invoices) {
            
            // DCR 67-020 Rev.1 ถ้าเป้นการรายหนี้ที่ตั้งเองจาก user ไม่ต้องทำการ Clear รายการที่แสดงอยู่ใน Datagrid (toBePaidInvoices)
            if (invoices.Count == 1 && invoices.FirstOrDefault().InvoiceFromLoal == true)
                return;

            // Remove before update invoice item
            RemoveDuplicateByInvoiceNormal(toBePaidInvoices, invoices);

            // Remove before update โดยการตัดชำระ Group Invoice
            RemoveDuplicateByGroupInvoice(toBePaidInvoices, invoices);

            // Remove before update โดยการเอกสารใบคำร้อง
            RemoveDuplicateByNoficationDoc(toBePaidInvoices, invoices);

        }
        
        /// <summary>
        /// จัดการ Remove item ที่เกี่ยวหนี้ปกติของ Ca นั้นๆ 
        /// </summary>
        /// <param name="toBePaidInvoices"></param>
        /// <param name="invoices"></param>
        private void RemoveDuplicateByInvoiceNormal(List<ToBePaidInvoice> toBePaidInvoices, List<Invoice> invoices)
        {
            List<string> invoiceList = new List<string>();
            List<string> caIdList = new List<string>();

            int countOnDel = 0;

            // เก็บ CaId ที่ต้องการ clear. 
            caIdList = invoices.Where( c =>  c.Bills.First().DebtId != "P00020001"      // ไม่รวมหนี้ตั้งชำระ Group Invoince.
                                            && string.IsNullOrEmpty(c.NotificationNo)   // ไม่ใช่ Notification
                                            && !string.IsNullOrEmpty(c.InvoiceNo)       // ต้องเป็นหนี้ตัวแม่ 
                                            ).Select(e => e.CaId).Distinct().ToList();

            #region Backup Code version 2.0.7
            //foreach (var caid in caIdList)
            //{
            //    var invoiceByCaid = toBePaidInvoices.Where(e => e.CaId == caid).Select(s => s.InvoiceNo).ToList();
            //    if (invoiceByCaid != null && invoiceByCaid.Count > 0)
            //        invoiceList.AddRange(invoiceByCaid);
            //}


            ////// Collect duplication invoice store to var.
            ////foreach (var invoince in invoices)
            ////{
            ////    var chkCount = toBePaidInvoices.Where(e => e.InvoiceNo == invoince.InvoiceNo).Count();
            ////    if (chkCount > 0)
            ////        invoiceList.Add(invoince.InvoiceNo); // Add duplication invoice store to var. 
            ////}

            //// Loop string invoice list. 
            //foreach (string invoiceNo in invoiceList.Distinct())
            //{
            //    // Remove from toBePaidInvoices
            //    var obj = toBePaidInvoices.Where(e => e.InvoiceNo == invoiceNo).ToList();
            //    if (obj != null && obj.Count > 0)
            //    {
            //        for (int i = 0; i < obj.Count; i++)
            //        {
            //            var objRemove = toBePaidInvoices.Where(e => e.InvoiceNo == invoiceNo).FirstOrDefault();
            //            if (objRemove != null)
            //                toBePaidInvoices.Remove(objRemove);

            //        }
            //    }
            //}
            #endregion
            
            foreach (var caIdToRemove in caIdList)
	        {
                // Key : CaId || ใช้ รายการที่หนี้ตาม CaId Exclude Group invoice และ หนี้ตั้งเอง 
                var invoiceByCaIdToRemove = (from d in toBePaidInvoices
                                             where d.CaId == caIdToRemove
                                            && d.InvoiceFromLoal != true  // ไม่รวมหนี้ตั้งเอง 
                                            && d.Bills.First().DebtId != "P00020001"  // ไม่รวมหนี้ตั้งชำระ Group Invoince.
                                            && string.IsNullOrEmpty(d.NotificationNo) // ไม่ใช่ Notification
                                            //&& !string.IsNullOrEmpty(d.InvoiceNo)     // ต้องเป็นหนี้ตัวแม่ 
                                            select new
                                            {
                                                CaId = d.CaId,
                                                InvoiceNo = d.InvoiceNo,
                                                OriginalInvoiceNo = d.OriginalInvoiceNo,
                                                DebtId = d.Bills.First().DebtId,
                                                ItemId = d.Bills.First().ItemId,
                                            }).ToList();
                

                // Process remove 
                foreach (var itemToRemove in invoiceByCaIdToRemove)
                {
                    // Query หนี้แม่.
                    var objToDel = (from d in toBePaidInvoices
                                   where d.CaId == itemToRemove.CaId
                                   && d.InvoiceNo == itemToRemove.InvoiceNo
                                   && d.OriginalInvoiceNo == itemToRemove.OriginalInvoiceNo
                                   && d.InvoiceFromLoal != true  // ไม่รวมหนี้ตั้งเอง 
                                   && d.Bills.First().DebtId != "P00020001"  // ไม่รวมหนี้ตั้งชำระ Group Invoince.
                                   && d.Bills.First().ItemId == itemToRemove.ItemId
                                   && string.IsNullOrEmpty(d.NotificationNo) // ไม่ใช่ Notification
                                select d)
                                .ToList() ;

                    if (objToDel != null && objToDel.Count == 1) // พบข้อมูล 1 รายการ
                    {
                        // remove child invoince 
                        RemoveChildInvoice(toBePaidInvoices, objToDel.First());

                        // remove parent invoince
                        toBePaidInvoices.Remove(objToDel.First());
                    }
                    else // พบข้อมูลมากกว่า 1 รายการ 
                    {  
                        // Remove by itemId.
                        countOnDel = objToDel.Count;
                        for (int i = 0; i < countOnDel; i++)
                        {
                             var objToDelByStep = (from d in toBePaidInvoices   // Query by 1 item [first item]
                                   where d.CaId == itemToRemove.CaId
                                   && d.InvoiceNo == itemToRemove.InvoiceNo
                                   && d.OriginalInvoiceNo == itemToRemove.OriginalInvoiceNo
                                   && d.InvoiceFromLoal != true                 // ไม่รวมหนี้ตั้งเอง 
                                   && d.Bills.First().DebtId != "P00020001"     // ไม่รวมหนี้ตั้งชำระ Group Invoince.
                                   && d.Bills.First().ItemId == itemToRemove.ItemId
                                   && string.IsNullOrEmpty(d.NotificationNo)
                                select d)
                                .FirstOrDefault() ;

                             if (objToDelByStep != null) {
                                 RemoveChildInvoice(toBePaidInvoices, objToDelByStep);  // Remove child item.
                                 toBePaidInvoices.Remove(objToDelByStep);               
                             }
                        }
                    }
                }

	        }
        }

        /// <summary>
        /// Manage remove item before update search result data by group invoice
        /// </summary>
        /// <param name="toBePaidInvoices"></param>
        /// <param name="invoices"></param>
        private void RemoveDuplicateByGroupInvoice(List<ToBePaidInvoice> toBePaidInvoices, List<Invoice> invoices) {

            List<string> invoiceList = new List<string>();
            List<string> caIdList = new List<string>();

            int countOnDel = 0;

            // จะทำการ ปรับปรุงเฉพาะรายการที่เป็นการตัดชำระ มท. ที่ค้นหาได้
            var invoiceGrvIvToDel = from d in invoices 
                                    where d.Bills.First().DebtId == "P00020001"
                                    select new {
                                        CaId = d.CaId,
                                        InvoiceNo = d.InvoiceNo,
                                        OriginalInvoiceNo = d.OriginalInvoiceNo,
                                        DebtId = d.Bills.First().DebtId,
                                        ItemId = d.Bills.First().ItemId,
                                        GroupInvoiceId = d.Bills.First().GroupInvoiceId
                                    };

            foreach (var itemToRemove in invoiceGrvIvToDel)
            {
                // get item to remove 
                var objGivToRemove = toBePaidInvoices.Where( e => e.CaId == itemToRemove.CaId 
                                                                && e.InvoiceNo == itemToRemove.InvoiceNo
                                                                && e.Bills.FirstOrDefault().DebtId == "P00020001"
                                                                && e.Bills.FirstOrDefault().GroupInvoiceId == itemToRemove.GroupInvoiceId
                                                                ).ToList();

                if (objGivToRemove != null )
                {
                    if (objGivToRemove.Count == 1) // พบ มท. รายการเดียว
                    {
                        // Remove child invoice
                        RemoveChildInvoice(toBePaidInvoices, objGivToRemove.First());

                        // Remove parent invoince
                        toBePaidInvoices.Remove(objGivToRemove.First());
                    }
                    else  // พบ มท. มากกว่า 1 รายการ
                    {
                        countOnDel = objGivToRemove.Count;

                        for (int i = 0; i < countOnDel; i++) // loop ลดทีละรายการ
                        {
                            var objGivToRemoveByStep = toBePaidInvoices.Where(e => e.CaId == itemToRemove.CaId
                                                               && e.InvoiceNo == itemToRemove.InvoiceNo
                                                               && e.Bills.FirstOrDefault().DebtId == "P00020001"
                                                               && e.Bills.FirstOrDefault().GroupInvoiceId == itemToRemove.GroupInvoiceId
                                                               ).FirstOrDefault();
                            
                            if (objGivToRemoveByStep != null)
                                toBePaidInvoices.Remove(objGivToRemoveByStep);
                        }
                    } 
                    
                }
                
            }
        }

        /// <summary>
        /// จัดการ Remove item ก่อนทำการ Update โดยใช้เลขที่ใบคำร้อง
        /// </summary>
        /// <param name="toBePaidInvoices"></param>
        /// <param name="invoices"></param>
        private void RemoveDuplicateByNoficationDoc(List<ToBePaidInvoice> toBePaidInvoices, List<Invoice> invoices) 
        {
            List<string> invoiceList = new List<string>();
            List<string> caIdList = new List<string>();

            int countOnDel = 0;

            // จะทำการ ปรับปรุงเฉพาะรายการที่เป็นการตัดชำระ มท. ที่ค้นหาได้
            var invoiceNotiToDel = from d in invoices
                                    where d.Bills.First().DebtId != "P00020001"
                                    && string.IsNullOrEmpty( d.NotificationNo) == false
                                    select new
                                    {
                                        CaId = d.CaId,
                                        InvoiceNo = d.InvoiceNo,
                                        OriginalInvoiceNo = d.OriginalInvoiceNo,
                                        DebtId = d.Bills.First().DebtId,
                                        ItemId = d.Bills.First().ItemId,
                                        GroupInvoiceId = d.Bills.First().GroupInvoiceId,
                                        NotificationNo = d.NotificationNo
                                    };

            foreach (var itemNotiToRemove in invoiceNotiToDel )
            {
                var objNotiToRemoves = toBePaidInvoices.Where(e => 
                                                    e.InvoiceNo == itemNotiToRemove.InvoiceNo
                                                    && e.Bills.FirstOrDefault().DebtId == itemNotiToRemove.DebtId
                                                    && e.Bills.FirstOrDefault().NotificationNo == itemNotiToRemove.NotificationNo
                                                    && e.CaId == itemNotiToRemove.CaId
                                                    ).ToList();
                if (objNotiToRemoves != null)
                {
                    if (objNotiToRemoves.Count == 1) // พบข้อมูล 1 รายการ
                    {
                        toBePaidInvoices.Remove(objNotiToRemoves.FirstOrDefault());
                    }
                    else // พบข้อมูลหลายรายการ.
                    {
                        countOnDel = objNotiToRemoves.Count;
                        var objNotiToRemoveByStep = toBePaidInvoices.Where(e => e.InvoiceNo == itemNotiToRemove.InvoiceNo
                                                   && e.Bills.FirstOrDefault().DebtId == itemNotiToRemove.DebtId
                                                   && e.NotificationNo == itemNotiToRemove.NotificationNo
                                                   && e.CaId == itemNotiToRemove.CaId
                                                   ).FirstOrDefault();

                        if (objNotiToRemoveByStep != null)
                            toBePaidInvoices.Remove(objNotiToRemoveByStep);

                    }
                }
                                                    
            }
        }

        private void RemoveChildInvoice(List<ToBePaidInvoice> toBePaidInvoices, Invoice parentInvoice) {
            string originalInvNo = string.Empty;

            if (parentInvoice.Bills.FirstOrDefault().DebtId == "P00020001")
            {
                originalInvNo = parentInvoice.Bills.FirstOrDefault().GroupInvoiceId;
            }
            else 
            {
                originalInvNo = parentInvoice.InvoiceNo;
            }


            // Get child item of invoice By Display Invoice. 
            var childInvoices = (from e in toBePaidInvoices
                                 where e.OriginalInvoiceNo == originalInvNo        // ใช้ DisplayInvoiceNo ของ parent.
                                 && e.CaId == parentInvoice.CaId
                                 select new { 
                                    DebtId = e.Bills.First().DebtId,
                                    OriginalInvoiceNo = e.OriginalInvoiceNo
                                 }
                                ).ToList();

            if (childInvoices != null)  // Case group invoice use parentInvoice.DisplayInvoiceNo
            {
                foreach (var childInv in childInvoices)
                {
                    var objToRemove = toBePaidInvoices.Where(e => e.InvoiceNo == null 
                        && !e.InvoiceFromLoal == true
                        && e.Bills.First().DebtId == childInv.DebtId 
                        && e.CaId == parentInvoice.CaId
                        && e.OriginalInvoiceNo == childInv.OriginalInvoiceNo
                        ).ToList();

                    if (objToRemove != null)
                    {
                        if (objToRemove.Count == 1) // พบข้อมูล 1 รายการ 
                        {
                            toBePaidInvoices.Remove(objToRemove.First());
                        }
                    }
                }
                
            }

        }

        public void OnSearchResultByCaIdNoInvoice(string caId)
        {
            // DCR 67-020 
            // Search by Caid on invoice --> Remove display invoice item 

            List<string> invoiceList = new List<string>();
            List<ToBePaidInvoice> toBePaidInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];

            if (toBePaidInvoices.Count > 0)
            {
                // Get invoice no by CaId.
                var invoiceByCaid = toBePaidInvoices.Where(e => e.CaId == caId).Select(s => s.InvoiceNo).ToList();
                if (invoiceByCaid != null && invoiceByCaid.Count > 0)
                    invoiceList.AddRange(invoiceByCaid);

                // Remove invoince item. 
                // Loop string invoice list. 
                foreach (string invoiceNo in invoiceList.Distinct())
                {
                    // Remove from toBePaidInvoices
                    var obj = toBePaidInvoices.Where(e => e.InvoiceNo == invoiceNo).ToList();
                    if (obj != null && obj.Count > 0)
                    {
                        for (int i = 0; i < obj.Count; i++)
                        {
                            var objRemove = toBePaidInvoices.Where(e => e.InvoiceNo == invoiceNo).FirstOrDefault();
                            if (objRemove != null)
                                toBePaidInvoices.Remove(objRemove);

                        }
                    }
                }

                _presenter.WorkItem.State["ToBePaidInvoices"] = toBePaidInvoices;
                RedrawScreen();
            }
        }
      
    }
}

