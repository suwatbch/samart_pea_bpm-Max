//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Globalization;

namespace PEA.BPM.PaymentCollectionModule
{
    [Serializable]
    public class Running
    {
        private DateTime _date;
        private int _lastNumber;

        public DateTime Date
        {
            get { return _date; }
            set { _date = value; }
        }

        public int LastNumber
        {
            get { return _lastNumber; }
            set { _lastNumber = value; }
        }

        public Running(DateTime date, int lastNumber)
        {
            this._date = date;
            this._lastNumber = lastNumber;
        }

        public string NextRunningNumber()
        {
            _lastNumber = _lastNumber + 1;
            return string.Format("{0}{1}", _date.ToString("yyMMdd", new CultureInfo("th-TH")), _lastNumber.ToString("0000"));
            //return string.Format("{0}{1}", Session.BpmDateTime.Now.Date.ToString("yyMMdd", new CultureInfo("th-TH")), _lastNumber.ToString("0000"));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="paperSize"></param>
        /// <param name="receiptType">1:ใบเสร็จรับเงิน   2:ใบเสร็จรับเงิน/ใบกำกับภาษี</param>
        /// <param name="debtType"></param>
        /// <param name="isGroupInvoice"></param>
        /// <returns></returns>
        public static string GetReceiptId(string paperSize, string receiptType, 
            string debtType, bool isExtReceipt, IDSettingHelper hp)
        {
            //string prefix = isExtReceipt ? "Z" : ReceiptNoPrefix.Get(paperSize, receiptType, debtType);
            //return GetReceiptId(prefix, hp);    

            string prefix;
            if (paperSize == "X")
                prefix = "X";
            else if (paperSize == "XA")
                prefix = "A";
            else if (paperSize == "XB")
                prefix = "B";
            else
                prefix = isExtReceipt ? "Z" : ReceiptNoPrefix.Get(paperSize, receiptType, debtType);

            return GetReceiptId(prefix, hp);   
        }

        public static string GetReceiptId(string prefix, IDSettingHelper hp)
        {
            string runningNo = "";
            string name = string.Format("R-{0}", prefix);

            //[XX]
            //IDSettingHelper hp = IDSettingHelper.Instance();
            //LocalSettingHelper hp = LocalSettingHelper.Instance();

            //object o = hp.Read(name, hp);
            //if (o == null)
            //{
            //    Running r = new Running(Session.BpmDateTime.Now.Date, 0);
            //    runningNo = r.NextRunningNumber();
            //    hp.Add(name, r);
            //}
            //else
            //{
            //    Running r = (Running)o;
            //    if (!r.Date.Equals(Session.BpmDateTime.Now.Date))
            //    {
            //        r.Date = Session.BpmDateTime.Now.Date;
            //        r.LastNumber = 0;
            //    }
            //    runningNo = r.NextRunningNumber();
            //    hp.Update(name, r);
            //}

            //return string.Format("{0}{1}{2}", prefix, Session.Terminal.Id, runningNo);


            //TODO: uncomment for offline in old date
            try
            {
                object o = hp.Read(name, hp);
                Running rng = (Running)o;
                if (o == null)
                {
                    Running r = new Running(Session.BpmDateTime.Now.Date, 0);
                    runningNo = r.NextRunningNumber();
                    hp.Add(name, r);

                    return string.Format("{0}{1}{2}", prefix, Session.Terminal.Id, runningNo);
                }
                else if (Session.BpmDateTime.Now.Date < rng.Date)
                {
                    throw new Exception("กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่");
                }
                else
                {
                    Running r = (Running)o;
                    if (!r.Date.Equals(Session.BpmDateTime.Now.Date))
                    {
                        r.Date = Session.BpmDateTime.Now.Date;
                        r.LastNumber = 0;
                    }
                    runningNo = r.NextRunningNumber();
                    hp.Update(name, r);

                    return string.Format("{0}{1}{2}", prefix, Session.Terminal.Id, runningNo);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }    
        }
    }
}

