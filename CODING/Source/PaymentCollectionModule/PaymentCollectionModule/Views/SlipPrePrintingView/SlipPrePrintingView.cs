//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using System.ComponentModel;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class SlipPrePrintingView : UserControl, ISlipPrePrintingView
    {
        private List<PrintingBill> _printingBills;

        public SlipPrePrintingView()
        {
            InitializeComponent();

            transactionDataGridView.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public SlipPrePrintingViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        public List<PrintingBill> PrintingBills
        {
            get
            {
                return _printingBills;
            }
            set
            {
                _printingBills = value;
                LoadDataToGrid();
            }
        }

        private void LoadDataToGrid()
        {
            transactionDataGridView.Enabled = false;
            transactionDataGridView.DataSource = new BindingList<PrintingBill>(_printingBills);
            transactionDataGridView.Enabled = true;
        }

        private void okButton_Click(object sender, EventArgs e)
        {            
            //_presenter.OnPrintingTypeSet();

            this.ParentForm.Close();
        }

        private void transactionDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {        
            /*
            DataGridViewComboBoxCell cb = (DataGridViewComboBoxCell)transactionDataGridView.Rows[e.RowIndex].Cells["printTypeDgColumn"];

            if (cb.DataSource==null)
            {
                PrintingBill bill = (PrintingBill)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                cb.DataSource = bill.PrintingConstaint.OptionPaperSizes;
                cb.ValueMember = "RT";
                cb.DisplayMember = "ReceiptTypeName";
            }
             */
        }

        private void transactionDataGridView_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            //
        }

        private void transactionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (transactionDataGridView.Columns[e.ColumnIndex].Name == "nameDgColumn")
            {
                PrintingBill bill = (PrintingBill)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                //if (CanModifyHeader(bill.DebtId))
                //{
                //    //_presenter.OnHeaderModify(bill);
                //}
            }
        }
    }
}

