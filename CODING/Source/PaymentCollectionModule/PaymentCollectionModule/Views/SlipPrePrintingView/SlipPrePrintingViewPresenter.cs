//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.PaymentCollectionModule
{
    public class SlipPrePrintingViewPresenter : Presenter<ISlipPrePrintingView>
    {
        private IBillingService _billingService;
        private IReportService _reportService;

		[InjectionConstructor]
        public SlipPrePrintingViewPresenter([ServiceDependency] IBillingService billingService,
             [ServiceDependency] IReportService reportService)
		{
            _billingService = billingService;
            _reportService = reportService;
		}

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventSubscription(EventTopicNames.PaymentMethodSave, Thread = ThreadOption.UserInterface)]
        public void PaymentMethodSaveHandler(object sender, EventArgs<string> e)
        {

            List<PrintingInvoice> printingInvoices = GetPrintingInvoiceList();


            switch (e.Data)
            {
                case PrintingConstraint.PaperSize.Default:
                    break;
                case PrintingConstraint.PaperSize.PrePrinted:
                case PrintingConstraint.PaperSize.PosSlip:
                    foreach (PrintingInvoice invoice in printingInvoices)
                    {
                        string paperSize = invoice.PrintingConstaint.OptionPaperSizes.Find(delegate(string ps)
                            {
                                return ps == e.Data;
                            }
                        );

                        if (null != paperSize)
                        {
                            invoice.PrintingConstaint.DefaultPaperSize = e.Data;
                        }
                    }
                    break;
                default:
                    break;
            }


            List<PrintingInvoice> groupDividualPrintingInvoices = new List<PrintingInvoice>();
            for (int i = 0; i < printingInvoices.Count; i++)
            {
                groupDividualPrintingInvoices.Add(new PrintingInvoice(printingInvoices[i], printingInvoices[i].PrintingConstaint));
            }


            WorkItem.State["PrintingInvoices"] = printingInvoices;
            WorkItem.State["GroupDividualPrintingInvoices"] = groupDividualPrintingInvoices;


            if (printingInvoices.Exists(delegate(PrintingInvoice pi)
                {
                    return pi.Bills[0].DebtId == CodeNames.DebtType.AgencyGroupInvoicing.Id
                            && pi.GroupInvoiceReceiptType == CodeNames.GroupInvoiceReceiptType.Dividual;
                }
            ))
            {
                CreateGroupIndividualPrintingReceipts();
            }
            else
            {
                CreatePrintingReceipts();
            }
            
        }

        public List<PrintingInvoice> GetPrintingInvoiceList()
        {
            List<Invoice> invoices = (List<Invoice>)WorkItem.State["PaidInvoices"];
            List<PrintingInvoice> printingInvoices = new List<PrintingInvoice>();
            
            foreach (Invoice iv in invoices)
            {
                printingInvoices.Add(new PrintingInvoice(iv, GetPrintingConstraint(iv)));
            }

            return printingInvoices;
        }


        private PrintingConstraint GetPrintingConstraint(Invoice invoice)
        {
            string dtId = invoice.Bills[0].DebtId;
            
            List<DebtType> dts = CodeTable.Instant.ListDebtTypes();
            DebtType dtx = dts.Find(delegate(DebtType dt)
                {
                    return dt.DebtId==dtId;
                }
            );

            if (null != dtx)
            {
                return new PrintingConstraint(dtx.DefultPaperSize);
            }
            else
            {
                return new PrintingConstraint("4");
            }
        }

        private void CreatePrintingReceipts()
        {
            try
            {
                List<PrintingInvoice> printingInvoices  = (List<PrintingInvoice>)WorkItem.State["PrintingInvoices"];
                List<PaymentMethod> paymentMethods      = (List<PaymentMethod>)WorkItem.State["PaymentMethods"];
                decimal paidAmount                      = (decimal)WorkItem.State["PaidAmount"];
                DateTime paymentDate                    = (DateTime)WorkItem.State["PaymentDate"];
                ExternalReceipt extReceipt              = (ExternalReceipt)WorkItem.State["ExtReceipt"];
                IDSettingHelper hp                      = IDSettingHelper.Instance();

                WorkItem.State["IDSettingHelper"] = hp;
                
                decimal totalAmount = 0;
                foreach (PrintingInvoice inv in printingInvoices)
                {
                    totalAmount += inv.ToPayGAmount.Value;
                }


                decimal change = 0;
                foreach (PaymentMethod pm in paymentMethods)
                {
                    if (pm.PtId == CodeNames.PaymentType.Cash.Id
                        && null != pm.ChangeAmount)
                    {
                        change = pm.ChangeAmount.Value;
                        break;
                    }
                }


                SlipPrinting sp = new SlipPrinting(_billingService, _reportService);
                List<PrintingReceipt> printingReceipts = new List<PrintingReceipt>();
                printingReceipts = sp.CreateReceipt(printingInvoices, paymentMethods, totalAmount,
                                            paidAmount, change, paymentDate, extReceipt.ReceiptId != null, hp);

                
                WorkItem.State["PrintingReceipts"] = printingReceipts;

            }
            catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
            {
                //TODO: uncomment for offline in old date
                if (ex.Message == "กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่")
                {
                    WorkItem.State["PosMachineGotOldDate"] = "กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่";
                    throw ex;
                }
                else
                {
                    MessageBox.Show(ex.ToString());
                    throw;
                }
            }
        }

        private void CreateGroupIndividualPrintingReceipts()
        {
            try
            {
                List<PrintingInvoice> printingInvoices = (List<PrintingInvoice>)WorkItem.State["GroupDividualPrintingInvoices"];
                List<PaymentMethod> paymentMethods = (List<PaymentMethod>)WorkItem.State["GroupDividualPaymentMethods"];                         
                decimal paidAmount = (decimal)WorkItem.State["PaidAmount"];
                DateTime paymentDate = (DateTime)WorkItem.State["PaymentDate"];
                ExternalReceipt extReceipt = (ExternalReceipt)WorkItem.State["ExtReceipt"];
                IDSettingHelper hp = IDSettingHelper.Instance();

                WorkItem.State["IDSettingHelper"] = hp;

                decimal totalAmount = 0;
                foreach (PrintingInvoice inv in printingInvoices)
                {
                    totalAmount += inv.ToPayGAmount.Value;
                }


                decimal change = 0;
                foreach (PaymentMethod pm in paymentMethods)
                {
                    if (pm.PtId == CodeNames.PaymentType.Cash.Id
                        && null != pm.ChangeAmount)
                    {
                        change = pm.ChangeAmount.Value;
                        break;
                    }
                }


                SlipPrinting sp = new SlipPrinting(_billingService, _reportService);
                List<PrintingReceipt> printingReceipts = new List<PrintingReceipt>();
                printingReceipts = sp.CreateReceipt(printingInvoices, paymentMethods, totalAmount,
                                            paidAmount, change, paymentDate, extReceipt.ReceiptId != null, hp);


                WorkItem.State["GroupDividualPrintingReceipts"] = printingReceipts;

            }
            catch (Exception ex) // TODO: ไว้ย้อนกลับมาทำ
            {
                //TODO: uncomment for offline in old date
                if (ex.Message == "กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่")
                {
                    WorkItem.State["PosMachineGotOldDate"] = "กรุณาตรวจสอบวันที่ของเครื่องที่รับเงินว่าเป็นวันที่ ณ ปัจจุบันหรือไม่";
                    throw ex;
                }
                else
                {
                    MessageBox.Show(ex.ToString());
                    throw;
                }
            }
        }

        private void ShowView()
        {
            PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo info = new PEA.BPM.Infrastructure.Library.UI.WindowSmartPartInfo();
            info.Modal = true;
            info.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
            info.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.None);
            info.MaximizeBox = false;
            info.MinimizeBox = false;
            info.Icon = Properties.Resources.SearchFormIcon;
            info.Title = "ผลการค้นหาข้อมูลหนี้ที่ต้องการยกเลิก";
            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(View, info);
        }


        [EventPublication(EventTopicNames.SlipHeaderUpdate, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<PrintingBill>> SlipHeaderUpdate;
        internal void OnHeaderModify(PrintingBill bill)
        {
            if (SlipHeaderUpdate != null)
                SlipHeaderUpdate(this, new EventArgs<PrintingBill>(bill));
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }
    }
}

