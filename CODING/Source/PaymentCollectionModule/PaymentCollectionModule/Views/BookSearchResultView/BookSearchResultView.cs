//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class BookSearchResultView : UserControl, IBookSearchResultView
    {
        private List<BookSearchDetail> _bills;

        public BookSearchResultView()
        {
            InitializeComponent();

            customerDataGridView.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BookSearchResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        private void BookSearchResultView_Enter(object sender, EventArgs e)
        {
            chkAllCheckBox.Checked = false;
        }

        #region IBookSearchResultView Members

        public List<BookSearchDetail> Bills
        {
            set
            {
                this._bills = value;
                LoadBillsToGrid();
            }
        }

        public Button OkButton
        {
            get { return addButton; }
        }

        public Button CancelButton
        {
            get { return cancelButton; }
        }

        #endregion

        #region +++ Command Handler +++
        private void addButton_Click(object sender, EventArgs e)
        {
            AddSelectedItems();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void customerDataGridView_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            customerDataGridView.Rows[e.RowIndex].Cells["checkedDgColumn"].Value = true;
            AddSelectedItems();
        }

        private void customerDataGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                customerDataGridView.EndEdit();
                AddSelectedItems();
            }
        }
        #endregion

        #region +++ Custom Function +++
        private void LoadBillsToGrid()
        {
            customerDataGridView.Enabled = false;
            customerDataGridView.DataSource = _bills.ToArray();
            customerDataGridView.Enabled = true;
        }

        private void AddSelectedItems()
        {
            List<Bill> bills = new List<Bill>();
            string customerId = "";
            bool repeatCustomerId = false;
            int numOfCheckedRow = 0;

            for (int i = 0; i < customerDataGridView.Rows.Count; i++)
            {
                object isChecked = customerDataGridView.Rows[i].Cells["checkedDgColumn"].Value;
                if (null != isChecked && true == (bool)isChecked)
                {
                    ++numOfCheckedRow;
                    //repeatCustomerId = false;
                    string customerIdTemp = ((BookSearchDetail)customerDataGridView.Rows[i].DataBoundItem).CustomerId.Trim().ToLower();
                    if (numOfCheckedRow == 1)
                        customerId = customerIdTemp;
                    if (numOfCheckedRow > 1)
                        if (customerId != customerIdTemp)
                        {
                            repeatCustomerId = true;
                            break;
                        }
                        
                    string bookId = ((BookSearchDetail)customerDataGridView.Rows[i].DataBoundItem).BillBookId;
                    bills.AddRange(_presenter.GetBookDetail(bookId, "T"));
                }
            }

            if (repeatCustomerId)
            {
                MessageBox.Show("สมุดจ่ายบิลที่เลือกต้องชำระด้วยตัวแทนเดียวกัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                repeatCustomerId = false;
            }
            else if (bills.Count > 0)
            {
                _presenter.BillsAddedToList(bills);
            }
            else
            {
                MessageBox.Show("กรุณาเลือกรายการที่ต้องการชำระหนี้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }
        #endregion

        private void chkAllCheckBox_Click(object sender, EventArgs e)
        {
            if (chkAllCheckBox.Checked == true)
            {
                for (int i = 0; i < customerDataGridView.Rows.Count; i++)
                {
                    BookSearchDetail bill = (BookSearchDetail)customerDataGridView.Rows[i].DataBoundItem;

                    if (bill.ToPayAmount.Value > 0)
                    {
                        customerDataGridView.Rows[i].Cells["checkedDgColumn"].Value = true;
                        customerDataGridView.Rows[i].Cells["checkedDgColumn"].Selected = true;
                    }
                }
            }
            else
            {
                for (int i = 0; i < customerDataGridView.Rows.Count; i++)
                {
                    customerDataGridView.Rows[i].Cells["checkedDgColumn"].Value = false;
                    customerDataGridView.Rows[i].Cells["checkedDgColumn"].Selected = false;
                }
            }
        }

        private void customerDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                customerDataGridView.EndEdit();

                switch (customerDataGridView.Columns[e.ColumnIndex].Name)
                {
                    case "checkedDgColumn":
                        for (int i = 0; i < customerDataGridView.Rows.Count; i++)
                        {
                            if (customerDataGridView.Rows[i].Cells["checkedDgColumn"].Value == null || (bool)customerDataGridView.Rows[i].Cells["checkedDgColumn"].Value == false)
                            {
                                chkAllCheckBox.Checked = false;
                                return;
                            }
                        }
                        chkAllCheckBox.Checked = true;
                        break;
                    default:
                        break;
                }
            }
        }

    }
}

