//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using PEA.BPM.Infrastructure;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class ToBePaidBillBookView : UserControl, IToBePaidBillBookView
    {
        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ToBePaidBillBookViewPresenter Presenter
        {
            set
            {             
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        public void EnableSaveButton(bool enable)
        {
            okButton.Enabled = enable;
        }

        public ToBePaidBillBookView()
        {
            InitializeComponent();
            transactionDataGridView.AutoGenerateColumns = false;

            if (Session.Work.Id == null)
                okButton.Enabled = false;
            else
                okButton.Enabled = true;
        }

        #region IToBePaidView Members

        public bool AddBills(List<Bill> bills)
        {

            if (bills.Count > 0)
            {
                //List<ToBePaidBill> toBePaidBills = new List<ToBePaidBill>();
                List<ToBePaidBill> toBePaidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];

                if (toBePaidBills.Count > 0)
                    if (toBePaidBills[0].DebtId != bills[0].DebtId)
                    {
                        MessageBox.Show("ไม่สามารถเลือก รายการชำระเงินล่วงหน้า 30% และส่วนทีเหลือ(70%) พร้อมกันได้", "ข้อผิดพลาด",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;  
                    }
                    else if (!ModuleHelper.CheckDuplicateBillItemForBillBook(toBePaidBills, bills))
                    {
                        MessageBox.Show("รายการดังกล่าวมีอยู่ในรายการที่ต้องการชำระแล้ว", "ข้อผิดพลาด",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;
                    }
                    else if (!ModuleHelper.CheckSameCustomerForBillBook(toBePaidBills, bills))
                    {
                        MessageBox.Show("ไม่สามารถเลือกรายการที่ตัวแทนต่างกันได้", "ข้อผิดพลาด",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return false;  
                    }

                Random random = new Random();

                foreach (Bill b in bills)
                {                    
                    ToBePaidBill tbb = new ToBePaidBill(b);                    
                    tbb.UiRefId = random.Next();
                    tbb.IsChecked = true;
                    toBePaidBills.Add(tbb);
                }
                _presenter.WorkItem.State["ToBePaidBills"] = toBePaidBills;

                RedrawScreen();
                okButton.Focus();
            }

            return true;
        }

        private void RedrawScreen()
        {
            List<ToBePaidBill> toBePaidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];
            transactionDataGridView.DataSource = new BindingList<ToBePaidBill>(toBePaidBills);
            ReCalculateSummations();
        }

        private void ReCalculateSummations()
        {
            List<ToBePaidBill> toBePaidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];           

            int nbToPay = 0;
            decimal amToPay = 0;
            int nbAll = 0;
            decimal amAll = 0;

            for (int i = 0; i < toBePaidBills.Count; i++)
            {
                if (toBePaidBills[i].IsChecked  && toBePaidBills[i].ModifiedFlag != "1")
                {
                    nbToPay = nbToPay + 1;
                    amToPay = amToPay + toBePaidBills[i].GAmount.Value; //TODO: -toBePaidBills[i].PaidAmount.Value;
                }
                nbAll = nbAll + 1;
                amAll = amAll + toBePaidBills[i].GAmount.Value; //TODO: -toBePaidBills[i].PaidAmount.Value;                               
            }

            paidTransactionTextBox.Text = nbToPay.ToString();
            paidAmountTransactionTextBox.Text = amToPay.ToString("#,##0.00");
            totalTransactionTextBox.Text = toBePaidBills.Count.ToString();
            totalAmountTransactionTextBox.Text = amAll.ToString("#,##0.00");
            totalAmountTextBox.Text = amToPay.ToString("#,##0.00");
        
            grandTotalLabel.Text = "รับชำระ";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;
        }   

        public decimal ChangeAmount
        {
            set
            { 
                decimal change = value;
                ClearData();

                grandTotalLabel.Text = "เงินทอน";
                grandTotalLabel.ForeColor = Color.Red;
                totalAmountTextBox.Text = string.Format("{0:#,##0.00}", change < 0 ? 0 : change);
                totalAmountTextBox.ForeColor = Color.Red;
            }
        }

        #endregion

        #region +++ Command Handler +++

        private List<Bill> GetSelectedItems(List<ToBePaidBill> paidBills)
        {
            List<Bill> selectedItems = new List<Bill>();

            foreach (ToBePaidBill b in paidBills)
            {
                if (b.IsChecked)
                {
                    selectedItems.Add(b.ToBill());
                }
            }

            return selectedItems;
        }


        private void okButton_Click(object sender, EventArgs e)
        {

            if (!ValidateCloseWorkOfCashier()) 
                return;

            List<ToBePaidBill> paidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];

            if (paidBills.Count > 0)
            {
                List<Bill> selectedItems = GetSelectedItems(paidBills);
                List<Invoice> selectedInvoices = new List<Invoice>();
                if (selectedItems.Count>0)
                {

                    Random random = new Random();
                    int intRandom;

                    foreach (Bill b in selectedItems)
                    {
                        Invoice inv = new Invoice();

                        intRandom = random.Next();
                        inv.UiRefId = intRandom;
                        inv.InvoiceNo = b.InvoiceNo;
                        inv.BranchId = b.BranchId;
                        inv.TechBranchName = b.TechBranchName;
                        inv.CommBranchId = b.CommBranchId;
                        inv.CommBranchName = b.CommBranchName;
                        inv.CaId = b.CustomerId;
                        inv.Name = b.Name;
                        inv.Address = b.Address;
                        inv.DueDate = b.DueDate;

                        inv.VatAmount = b.VatAmount;
                        inv.GAmount = b.GAmount;
                        inv.PaidVatAmount = 0;
                        inv.PaidGAmount = 0;
                        inv.ToPayGAmount = inv.ToBePaidGAmount;

                        if (b.DataState == BillDataStage.NewItem)
                        {
                            inv.DataState = InvoiceDataStage.NewItem;
                        }
                        else
                        {
                            inv.DataState = InvoiceDataStage.Invoice;
                        }

                        inv.Bills = new List<Bill>();
                        inv.Bills.Add(b);
                        selectedInvoices.Add(inv);
                    }

                    selectedInvoices = AssignedRowNumber(selectedInvoices);

                    _presenter.InvoicePaymentMethodClicked(selectedInvoices);
                }
                else
                {
                    MessageBox.Show("กรุณาเลือกรายการที่ต้องการชำระหนี้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                MessageBox.Show("ไม่มีรายการหนี้ที่ต้องการชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            ClearData();
        }

        public void ClearData()
        {
            _presenter.WorkItem.State["ToBePaidBills"] = new List<ToBePaidBill>();
            _presenter.WorkItem.State["ToBePaidInvoices"] = new List<ToBePaidInvoice>();
            _presenter.WorkItem.State["PrintingReceipts"] = null;
            _presenter.WorkItem.State["GroupDividualPrintingReceipts"] = null;
            transactionDataGridView.DataSource = new List<ToBePaidBill>();
            totalAmountTransactionTextBox.Text = "0";
            totalTransactionTextBox.Text = "0";
            paidTransactionTextBox.Text = "0";
            paidAmountTransactionTextBox.Text = "0";
            totalAmountTextBox.Text = "";
            grandTotalLabel.Text = "รับชำระ";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;
        }

        private List<Invoice> AssignedRowNumber(List<Invoice> toBePaidInvoices)
        {
            for (int i = 0; i <= toBePaidInvoices.Count - 1; i++)
            {
                if (i == 0)
                {
                    toBePaidInvoices[i].RowNum = 1;
                }
                else
                {
                    toBePaidInvoices[i].RowNum = toBePaidInvoices[i - 1].RowNum + 1;
                }
            }

            return toBePaidInvoices;
        }

        private void transactionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                transactionDataGridView.EndEdit();

                ToBePaidBill b = (ToBePaidBill)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;

                if (e.ColumnIndex == 0)
                {                    
                    if (!b.IsChecked)
                    {
                        if (IsValidPaymentRules(b))
                        {
                            ReCalculateSummations();
                        }
                        else
                        {
                            b.IsChecked = true;
                        }
                    }
                    else
                    {
                        ReCalculateSummations();
                    }
                }
                else if (e.ColumnIndex == 1)
                {
                    HistoryViewParam param = new HistoryViewParam(b.CustomerId, false);
                    _presenter.OnViewHistoryClick(param);
                }
            }
        }

        private bool IsValidPaymentRules(ToBePaidBill b)
        {
            // Pay interest first
            if(b.DebtId==CodeNames.DebtType.Interest.Id)
            {
                return Authorization.IsAuthorized(SecurityNames.UnlockPayment, 
                    string.Format("ปลดล็อคลำดับการจ่ายเงิน {0}| ประเภทหนี้ {1}| รายละเอียด {2}", b.ItemId, b.DebtType, b.Description), false);
            }
            else
            {
                if(b.DueDate!=null)
                {
                    List<ToBePaidBill> toBePaidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];

                    foreach(ToBePaidBill ob in toBePaidBills)
                    {
                        // Only check with checked item
                        if(ob.IsChecked)
                        {
                            // Pay item order by duedate
                            if(ob.DebtId==b.DebtId && ob.DueDate!=null && b.DueDate<ob.DueDate)
                            {
                                return Authorization.IsAuthorized(SecurityNames.UnlockPayment, 
                                    string.Format("Unlock payment item:{0}", b.ItemId), false);
                            }
                        }
                    }
                }
            }

            return true;
        }

        private void transactionDataGridView_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex>-1 && e.ColumnIndex != 0)
            {
                ToBePaidBill b = (ToBePaidBill)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;
                HistoryViewParam param = new HistoryViewParam(b.CustomerId, false);
                _presenter.OnViewHistoryClick(param);
            }
        }

        private void searchContextMenuStrip_Click(object sender, EventArgs e)
        {
            List<ToBePaidBill> toBePaidBills = (List<ToBePaidBill>)_presenter.WorkItem.State["ToBePaidBills"];
            ToBePaidBill b = (ToBePaidBill)transactionDataGridView.CurrentRow.DataBoundItem;

            switch(((ToolStripMenuItem)sender).Name)
            {
                case "upToolStripMenuItem":
                    int idx1 = toBePaidBills.IndexOf(b);
                    if(idx1>0)
                    {
                        transactionDataGridView.Enabled = false;
                        toBePaidBills.Remove(b);
                        toBePaidBills.Insert(idx1-1, b);
                        transactionDataGridView.DataSource = new BindingList<ToBePaidBill>(toBePaidBills);
                        transactionDataGridView.Enabled = true;
                    }
                    break;
                case "downToolStripMenuItem":
                    int idx2 = toBePaidBills.IndexOf(b);
                    if (idx2 < toBePaidBills.Count-1)
                    {
                        transactionDataGridView.Enabled = false;
                        toBePaidBills.Remove(b);
                        toBePaidBills.Insert(idx2 + 1, b);
                        transactionDataGridView.DataSource = new BindingList<ToBePaidBill>(toBePaidBills);
                        transactionDataGridView.Enabled = true;
                    }
                    break;
                default:
                    break;
            }

        }

        private void partialAmountTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                okButton.Focus();
            }
        }

        private void transactionDataGridView_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                if (transactionDataGridView.CurrentRow.Index == transactionDataGridView.Rows.Count - 1)
                {
                    okButton.Focus();
                }
            }
        }

        private void transactionDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (transactionDataGridView.Rows.Count > 0 && e.RowIndex > -1)
            {
                if (e.ColumnIndex == 1 && transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim() != "")
                {
                    _presenter.StatusUpdateHandler(transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim());
                }
            }
        }

        private void transactionDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (transactionDataGridView.Rows.Count > 0 && e.RowIndex > -1)
            {
                if (e.ColumnIndex == 1 && transactionDataGridView.Rows[e.RowIndex].Cells[1].ToolTipText.Trim() != "")
                {
                    _presenter.StatusUpdateHandler("Ready");
                }
            }
        }

        #endregion

        #region +++ Custom Function +++


        private bool checkNumeric(string strAmount)
        {
            for (int i=0; i < strAmount.Length; i++)
            {
                switch ((string) strAmount[i].ToString())
                {
                    case "0":                        
                        return true;
                    case "1":
                        return true;
                    case "2":
                        return true;
                    case "3":
                        return true;
                    case "4":
                        return true;
                    case "5":
                        return true;
                    case "6":
                        return true;
                    case "7":
                        return true;
                    case "8":
                        return true;
                    case "9":
                        return true;
                    case ".":
                        return true;
                    default:
                        return false;
                }
            }
            return false;
        }

        #endregion


        #region +++ Cash Management +++

        private bool ValidateCloseWorkOfCashier()
        {
            if ((Session.IsNetworkConnectionAvailable == true ? ((((WorkStatus)IsClosedWork()).CloseWorkBy == null) ? true : false) : false))
                return true;
            else
            {
                string cashierTxt = string.Format("({0}) - {1}", ((WorkStatus)IsClosedWork()).CloseWorkBy, ((WorkStatus)IsClosedWork()).CashierName);
                MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                _presenter.OnCashierOpenWork("tmp");
                _presenter.OnClosePaymentView();
                //_presenter.OnCloseView();
                return false;
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        #endregion
    }
}

