//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Infrastructure.Library.UI;
using System.Windows.Forms;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;

namespace PEA.BPM.PaymentCollectionModule
{
    public class BillDetailViewPresenter : Presenter<IBillDetailView>
    {
		private IBillingService _billingService;

		[InjectionConstructor]
        public BillDetailViewPresenter([ServiceDependency] IBillingService billingService)
		{
            _billingService = billingService;
		}

        [EventSubscription(EventTopicNames.ViewBillDetailClick, Thread = ThreadOption.UserInterface)]
        public void ViewBillDetailClickHandler(object sender, EventArgs<BillDetailSearchParam> e)
        {
            CustomerSearchParam param = new CustomerSearchParam();
            param.CaId = e.Data.CaId;
            param.IsOtherBranch = e.Data.IsOtherBranch;
            View.Invoices = _billingService.SearchInvoiceByCustomerId(param);

            ShowView();
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        public void ShowView()
        {
            WindowSmartPartInfo info = new WindowSmartPartInfo();
            info.Modal = true;            
            info.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
            info.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.FixedToolWindow);
            info.Keys.Add(WindowWorkspaceSetting.AcceptButton, View.CloseButton);
            info.Keys.Add(WindowWorkspaceSetting.CancelButton, View.CloseButton); 
            info.MaximizeBox = false;
            info.MinimizeBox = false;
            info.Title = " รายละเอียดหนี้ค้างชำระ";
            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(View, info);
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

