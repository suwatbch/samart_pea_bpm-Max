//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using System.Windows.Forms;
using System.Linq;
using System.Threading;


namespace PEA.BPM.PaymentCollectionModule
{
    public class ToBeReprintedViewPresenter : Presenter<IToBeReprintedView>
    {
        private IBillingService _billingService;
        private IPaidBillService _paidBillService;
        private IReportService _reportService;

        public ToBeReprintedViewPresenter([ServiceDependency] IBillingService billingService,
            [ServiceDependency] IPaidBillService paidBillService,
            [ServiceDependency] IReportService reportService)
        {
            _billingService = billingService;
            _paidBillService = paidBillService;
            _reportService = reportService;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventSubscription(EventTopicNames.ReceiptItemAdd, Thread = ThreadOption.UserInterface)]
        public void ReceiptItemAddHandler(object sender, EventArgs<List<Receipt>> e)
        {
            if (View.AddReceipts(e.Data))
            {
                OnActionSuccess();
            }
        }

        [EventPublication(EventTopicNames.ActionSuccess, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ActionSuccess;
        internal void OnActionSuccess()
        {
            try
            {
                if (ActionSuccess != null)
                    ActionSuccess(this, new EventArgs());
            }
            catch { }
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        internal void Print(List<string> receiptIds)
        {
            try
            {
                List<PrintingInfo> receipts = _paidBillService.GetReceiptsForPrint(null, receiptIds);

                //// DCR: รวมใบเสร็จแผนผ่อน พิมพ์ซ่อมใบเสร็จ เรียงตาม PrintSequencText จาก SP pc_sel_GroupReceiptPrintingSeq 2021-OCT-21 Uthen.P

                foreach (var r in receipts)
                {
                    try
                    {
                        if (r.PrintingReceipt.GroupReceiptPrintingSeqTextWithPipe != null)
                        {
                            string printSeqText     = r.PrintingReceipt.GroupReceiptPrintingSeqTextWithPipe;
                            string[] subs           = printSeqText.Split('|');
                            string tmpReceiptId     = subs[0].Trim().ToString();
                            short tmpPrintingSeq    = (short)Convert.ToInt32(subs[1].Trim().ToString());
                            short tmpTotalReceipt   = (short)Convert.ToInt32(subs[2].Trim().ToString());

                            r.PrintingReceipt.TotalReceipt      = tmpTotalReceipt;
                            r.PrintingReceipt.PrintingSequence  = tmpPrintingSeq;
                        }
                    }
                    catch (Exception ex)
                    {

                    }                    
                }

                receipts = receipts.OrderBy(r => r.PrintingReceipt.PrintingSequence).AsEnumerable().ToList();
                //receipts = receipts.OrderByDescending(r => r.PrintingReceipt.PrintingSequence ).AsEnumerable().ToList();
                //สิ้นสุดโค้ดแก้ไขเพิ่มเติม

                //// DCR: รวมใบเสร็จแผนผ่อน ปรับลำดับการส่งข้อมูล พิมพ์ซ่อมใบเสร็จ เรียงตาม PrintSequence 2021-OCT-18 Uthen.P
                //int ReceiptQty  = 0;
                //ReceiptQty      = receiptIds.Count;
                //receipts        = receipts.OrderBy( r => r.PrintingReceipt.PrintingSequence).AsEnumerable().ToList();
                //if (ReceiptQty > 1)
                //{
                //    for (int i = 0; i < ReceiptQty; i++)
                //    {
                //        short tmpPrintingSeq = (short)(i + 1);
                //        receipts[i].PrintingReceipt.TotalReceipt    = (short)ReceiptQty;
                //        receipts[i].PrintingReceipt.PrintingSequence = tmpPrintingSeq;
                //    }                                 
                //}               
                //สิ้นสุดโค้ดแก้ไขเพิ่มเติม

                if (receipts.Count > 0)
                {
                    SlipPrinting sp = new SlipPrinting(_billingService, _reportService);
                    foreach (PrintingInfo r in receipts)
                    {
                        
                        sp.Print(r.PrintingReceipt, r.PaymentMethods, sp.GetAllReceiptsNo(r.ReceiptStatus));

                        _paidBillService.IncreaseNoOfReprint(r.PrintingReceipt.ReceiptId);                        
                    }

                    View.ClearData();

                    MessageBox.Show("พิมพ์ซ่อมใบเสร็จรับเงินเสร็จเรียบร้อยแล้ว", "ข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [EventSubscription(EventTopicNames.EnablePOSSaveButton, Thread = ThreadOption.UserInterface)]
        public void EnablePOSSaveButtonHandler(object sender, EventArgs<bool> e)
        {
            View.EnableSaveButton(e.Data);
        }
    }

    public class InnerReceiptPrintingSeq
    {
        public string   Receiptid       { get; set; }
        public short    PrintingSeq     { get; set; }
        public short    PrintingTotal   { get; set; }
    }
}

