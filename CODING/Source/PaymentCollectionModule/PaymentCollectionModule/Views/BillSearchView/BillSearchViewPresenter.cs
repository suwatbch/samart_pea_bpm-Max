//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using System.Collections.Generic;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.PaymentCollectionModule
{
    public class BillSearchViewPresenter : Presenter<IBillSearchView>
    {
        private IBillingService _billingService;

		[InjectionConstructor]
        public BillSearchViewPresenter([ServiceDependency] IBillingService billingService)
		{
            _billingService = billingService;
		}

        [EventPublication(EventTopicNames.PayItem, PublicationScope.WorkItem)]
        public event EventHandler PayItem;
        internal void OnPayItem()
        {
            if (PayItem != null)
                PayItem(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.InvoiceSearchedByCustomerId, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<CustomerSearchParam>> SearchedInvoiceByCustomerId;
        internal void InvoiceSearchedById(CustomerSearchParam param)
        {
            if (SearchedInvoiceByCustomerId != null)
                SearchedInvoiceByCustomerId(this, new EventArgs<CustomerSearchParam>(param));
        }


        [EventPublication(EventTopicNames.InvoiceSearchedByGroupInvoiceNo, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<GroupInvoiceSearchParam>> SearchedByGroupInvoiceNo;
        internal void InvoiceSearchedByGroupInvoiceNo(GroupInvoiceSearchParam param)
        {
            if (SearchedByGroupInvoiceNo != null)
                SearchedByGroupInvoiceNo(this, new EventArgs<GroupInvoiceSearchParam>(param));
        }


        [EventPublication(EventTopicNames.BillSearchedByCustomerDetail, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<CustomerSearchParam>> SearchedByCustomerDetail;
        internal void InvoiceSearchedByDetail(CustomerSearchParam param)
        {
            if (SearchedByCustomerDetail != null)
                SearchedByCustomerDetail(this, new EventArgs<CustomerSearchParam>(param));
        }

        [EventPublication(EventTopicNames.InvoiceSearchedFromSAP, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<SAPSearchParam>> SearchedFromSAP;        
        internal void InvoiceSearchedFromSAP(SAPSearchParam sapSearchParam)
        {
            if (SearchedFromSAP != null)
                SearchedFromSAP(this, new EventArgs<SAPSearchParam>(sapSearchParam));
        }

        [EventPublication(EventTopicNames.ElectricPaymentItemAdd, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ElectricPaymentItemAdd;
        internal void OnElectricPaymentItemAdd()
        {
            if (ElectricPaymentItemAdd != null)
                ElectricPaymentItemAdd(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.ReMeterItemAdd, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<string>> ReMeterItemAdd;
        internal void OnReMeterItemAdd(string disconnectStrLine_reconnectStrLine)
        {
            if (ReMeterItemAdd != null)
                ReMeterItemAdd(this, new EventArgs<string>(disconnectStrLine_reconnectStrLine));
        }

        [EventPublication(EventTopicNames.NewPaymentItemAdd, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<bool>> ItemAdded;
        internal void PaymentLineAdded(bool isElectricOtherBranch)
        {
            if (ItemAdded != null)
                ItemAdded(this, new EventArgs<bool>(isElectricOtherBranch));
        }

        [EventSubscription(EventTopicNames.OnlineStatus, Thread = ThreadOption.UserInterface)]
        public void OnlineStatusHandler(object sender, EventArgs<bool> e)
        {
            View.EnablePOSPanel(e.Data);
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        [EventSubscription(EventTopicNames.FocusOnSearchById, Thread = ThreadOption.UserInterface)]
        public void FocusOnSearchByIdHandler(object sender, EventArgs e)
        {
            View.FocusOnSearchById();
        }

        [EventPublication(EventTopicNames.InvoiceItemAdd, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<Invoice>>> InvoicesAddedToPayingList;
        public void InvoicesAddedToList(List<Invoice> invoices)
        {
            if (InvoicesAddedToPayingList != null)
                InvoicesAddedToPayingList(this, new EventArgs<List<Invoice>>(invoices));
        }

        [EventPublication(EventTopicNames.InvoiceSearchedFromOneTouch, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<OneTouchSearchParam>> SearchedFromOneTouch;
        internal void InvoiceSearchedFromOneTouch(OneTouchSearchParam param)
        {
            if (SearchedFromOneTouch != null)
                SearchedFromOneTouch(this, new EventArgs<OneTouchSearchParam>(param));
        }
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// DCR 67-020 Search invoice by multi customer Id 
        /// </summary>
        [EventPublication(EventTopicNames.InvoiceSearchedByMultiCustomerId, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<SearchByMultiDocParam>> SearchByMultiCustomerId;
        internal void InvoiceSearchedByMultiCustomerId(SearchByMultiDocParam param)
        {
            if (SearchByMultiCustomerId != null)
            {
                SearchByMultiCustomerId(this, new EventArgs<SearchByMultiDocParam>(param));
            }
        }


        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

