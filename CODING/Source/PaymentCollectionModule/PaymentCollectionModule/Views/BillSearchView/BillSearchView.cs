//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Collections.Generic;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;
using PEA.BPM.PaymentCollectionModule.Views.BillSearchView;
using System.IO;
using System.IO.Ports;
using PEA.BPM.Architecture;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface.Services;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class BillSearchView : UserControl, IBillSearchView 
    {
        //private IBillingService _billingService;
        private WorkItem _workItem;
        private IToBePaidInvoiceView _toBePaidInvoiceView;

        public BillSearchView(WorkItem workItem)
        {
             InitializeComponent();

            //Queue Management
             _workItem = workItem;
             _toBePaidInvoiceView = new ToBePaidInvoiceView();
             Start_Queue_Timer();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            customerIdMaskedTextBox.Focus();
            customerIdMaskedTextBox.SelectAll();
            LoadBranch();

            string saprfc = CodeTable.Instant.GetAppSettingValue("SAP_RFC");
            if (saprfc == "1")
            { 
                sapButton.Visible = true;
            }
            else
            {
                sapButton.Visible = false;
            }


            if (!Session.IsNetworkConnectionAvailable)
            {
                searchPanel.Enabled = false;
                //reMeterButton.Enabled = false;
                addOneTouchDebtButton.Enabled = false;

                // DCR 67-020 
                searchByNotificationButton.Enabled = false;
            }
            else
            {
                searchPanel.Enabled = true;
                //reMeterButton.Enabled = true;
                addOneTouchDebtButton.Enabled = true;

                // DCR 67-020 
                searchByNotificationButton.Enabled = true;
                
            }

            ScannerHelper.SetInputTextBox(this.customerIdMaskedTextBox);
        }

        public void EnablePOSPanel(bool enable)
        {
            if (!enable)
            {
                searchPanel.Enabled = false;
                //reMeterButton.Enabled = false;
                addOneTouchDebtButton.Enabled = false;

                // DCR 67-020 
                searchByNotificationButton.Enabled = false; 
            }
            else
            {
                searchPanel.Enabled = true;
                //reMeterButton.Enabled = true;
                addOneTouchDebtButton.Enabled = true;

                // DCR 67-020 
                searchByNotificationButton.Enabled = true; 
            }
        }


        #region Event Handler
        private void searchByIdButton_Click(object sender, EventArgs e)
        {
            SearchById();
        }

        private void searchByDetailButton_Click(object sender, EventArgs e)
        {
            SearchByDetail();
        }

        private void searchByGroupInvoiceNoButton_Click(object sender, EventArgs e)
        {
            SearchByGroupInvoiceNo();
        }

        private void clearSearchByIdButton_Click(object sender, EventArgs e)
        {
            ClearSearchById();
        }

        private void clearSearchByDetailButton_Click(object sender, EventArgs e)
        {
            ClearSearchByDetail();
        }

        private void clearGroupInvoiceNoButton_Click(object sender, EventArgs e)
        {
            ClearSearchByGroupInvoiceNo();
        }

        private void addElectricDebtButton_Click(object sender, EventArgs e)
        {
            _presenter.OnElectricPaymentItemAdd();
        }

        private void addOtherDebtButton_Click(object sender, EventArgs e)
        {
            _presenter.PaymentLineAdded(false);
        }

        private void addOtherBranchElectricDebtButton_Click(object sender, EventArgs e)
        {
            _presenter.PaymentLineAdded(true);
        }

        private void reMeterButton_Click(object sender, EventArgs e)
        {
            List<ToBePaidInvoice> workItemInvoices = (List<ToBePaidInvoice>)_presenter.WorkItem.State["ToBePaidInvoices"];
            string disconnectStrLine = "";
            string reconnectStrLine = "";
            List<string> excludeDocNo = new List<string>();

            if (workItemInvoices.Count > 0)
            {

                string reconnectDtId = CodeTable.Instant.GetAppSettingValue(CodeNames.DebtType.ReConnectMeter.Id);
                foreach (Invoice inv in workItemInvoices)
                {
                    foreach (Bill bill in inv.Bills)
                    {
                        if (bill.DisconnectDocNo != null)
                        {
                            if (bill.DebtId != reconnectDtId)
                                disconnectStrLine += bill.CustomerId + ":" + bill.DisconnectDocNo + ",";

                            if (bill.DebtId == reconnectDtId)
                                reconnectStrLine += bill.CustomerId + ":" + bill.DisconnectDocNo + ",";
                        }
                    }
                }


                if (disconnectStrLine.Length > 0)
                    disconnectStrLine = disconnectStrLine.Substring(0, disconnectStrLine.Length - 1); //remove "," in last char

                if (reconnectStrLine.Length > 0)
                    reconnectStrLine = reconnectStrLine.Substring(0, reconnectStrLine.Length - 1); //remove "," in last char

                if (disconnectStrLine.Length > 0 && reconnectStrLine.Length > 0)
                {
                    string[] arrStr = reconnectStrLine.Split(',');
                    foreach (string st in arrStr)
                    {
                        disconnectStrLine = disconnectStrLine.Replace(st + ",", "");
                        disconnectStrLine = disconnectStrLine.Replace(st, "");
                    }
                }

            }
            _presenter.OnReMeterItemAdd(disconnectStrLine + "|" + reconnectStrLine);
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                //if (customerIdMaskedTextBox.Text.Trim().Substring(0, 1) == "|") // DF2#45
                if (customerIdMaskedTextBox.Text.Trim() != string.Empty && customerIdMaskedTextBox.Text.Trim().Substring(0, 1) == "|")
                {
                    if (customerIdMaskedTextBox.Text.Trim().Length >= 36)
                    {
                        SearchById();
                    }
                }
                else
                {
                    SearchById();
                }
            }
        }

        private void nameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByDetail();
            }
        }

        private void groupInvoiceNoMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByGroupInvoiceNo();
            }
        }

        private void sapButton_Click(object sender, EventArgs e)
        {
            using (SAPSearchForm sp = new SAPSearchForm())
            {
                if (sp.ShowDialog(this) == DialogResult.OK)
                {
                    if (sp.SearchParam.CaId == null)
                    {
                        MessageBox.Show("กรุณาใส่หมายเลขบัญชีแสดงสัญญา", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    else
                    {
                        _presenter.InvoiceSearchedFromSAP(sp.SearchParam);
                    }
                }
            }
        }

        private void customerIdMaskedTextBox_Enter(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToEnglish();
        }

        private void customerIdMaskedTextBox_Leave(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToDefault();
        }
        #endregion

        #region Custom Function
        private void LoadBranch()
        {
            branchIdMaskedTextBox.Text = Session.Branch.Id;
        }

        private void SearchById()
        {
            string customerId = customerIdMaskedTextBox.Text.Trim();

            //customerId = customerId.Replace("|", ""); //Barcode 62 digit

            if (customerId == string.Empty)
            {
                //_presenter.OnPayItem();
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ, บาร์โค้ด, หรือรหัสลูกหนี้", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                customerIdMaskedTextBox.Focus();
                return;
            }
            else if (customerId.Length == 32)
            {
                string branchId = ModuleHelper.GetBranch(customerId.Substring(0, 8));
                customerId = customerId.Substring(8, 12);
                customerIdMaskedTextBox.Text = customerId;
                LocalSettingHelper hp = LocalSettingHelper.Instance();
                if (hp.ReadString(LocalSettingHelper.BranchId) != branchId)
                {
                    otherBranchByIdCheckBox.Checked = true;
                }                
            }
            else if ((customerId.Length == 33) )
            {
                customerId = customerId.Substring(0, 12);
                customerIdMaskedTextBox.Text = customerId;
            }
            else if ((customerId.Length == 34) )
            {
                customerId = customerId.Substring(1, 12);
                customerIdMaskedTextBox.Text = customerId;
            }
            //Begin of New Barcode
            else if (customerId.Length >= 36) 
            {
                customerId = customerId.Substring(16, 12); 
                customerIdMaskedTextBox.Text = customerId;
            }
            //End of New Barcode

            if (customerId.Length < 12)
            {
                customerId = customerId.PadLeft(12, '0');
                customerIdMaskedTextBox.Text = customerId;
            }

            ////บาร์โค๊ดใหม่จะมีการ Enter 4 รอบ เช็คเงื่อนไขนี้เพื่อไม่ให้ประมวลผล หลังจากกด Enter จนกว่าจะ Scan ครบหลัก
            //if (
            //        (customerId.Length == 16   //1st line of new barcode
            //          || customerId.Length == 28   //2nd line of new barcode
            //          || customerId.Length == 34   //3rd line of new barcode
            //          || customerId.Length >= 36   //4th line of new barcode
            //        )
            //          &&
            //        (customerId.Substring(0,1)== "|")
            //    )
            //{ 
            //    //Nothing
            //}
            if (customerId.Length != 12 && customerId.Length != 14 && customerId.Length != 16)
            {
                MessageBox.Show("กรุณาใส่หมายเลขผู้ใช้ไฟ/บาร์โค้ด/รหัสลูกหนี้ให้ครบ 12 หรือ 14 หลัก (16 หลักสำหรับหมายเลขผู้ใช้ไฟฟ้าเดิม)", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                customerIdMaskedTextBox.SelectAll();
                return;
            }

            if ((customerId.Length == 12 || customerId.Length == 16) )
            {
                CustomerSearchParam param = new CustomerSearchParam();
                param.CaId = StringConvert.ToString(customerId);
                param.IsOtherBranch = otherBranchByIdCheckBox.Checked;
                param.IsSearByBP = true;
                _presenter.InvoiceSearchedById(param);
                customerIdMaskedTextBox.Clear();
                otherBranchByIdCheckBox.Checked = false;
            }

            //Check digit สำหรับบาร์โค๊ดแถวข้าง 14 หลัก
            if ((customerId.Length == 14))
            {
                if (!CheckDigit(customerId))
                {
                    MessageBox.Show("รูปแบบบาร์โค้ดไม่ถูกต้อง", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    customerIdMaskedTextBox.Text = "";
                    customerIdMaskedTextBox.Focus();
                    customerIdMaskedTextBox.SelectAll();
                    //customerIdMaskedTextBox.BackColor = Color.Red;
                    return;
                }
                else
                {
                    CustomerSearchParam param = new CustomerSearchParam();
                    param.CaId = StringConvert.ToString(customerId);
                    param.IsOtherBranch = otherBranchByIdCheckBox.Checked;
                    param.IsSearByBP = true;
                    _presenter.InvoiceSearchedById(param);
                    customerIdMaskedTextBox.Clear();
                    otherBranchByIdCheckBox.Checked = false;
                }
            }
        }

        private void SearchByDetail()
        {
            if (nameMaskedTextBox.Text.Trim() == "" 
                && addressMaskedTextBox.Text.Trim() == ""
                && idMaskedTextBox.Text.Trim()== "")
            {
                MessageBox.Show("กรุณาใส่ชื่อ-นามสกุล, ที่อยู่, หรือเลขประจำตัวประชาชน/ทะเบียนนิติบุคคล/เลขประจำตัวผู้เสียภาษี", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            CustomerSearchParam param = new CustomerSearchParam();
            param.Name = StringConvert.ToString(nameMaskedTextBox.Text);
            param.Address = StringConvert.ToString(addressMaskedTextBox.Text);
            param.RegId = StringConvert.ToString(idMaskedTextBox.Text);
            param.Branch = branchIdMaskedTextBox.Text;
            param.IsOtherBranch = !Session.Branch.Id.Equals(param.Branch);
            _presenter.InvoiceSearchedByDetail(param);
        }

        private void SearchByGroupInvoiceNo()
        {
            GroupInvoiceSearchParam param = new GroupInvoiceSearchParam();
            param.InvoiceNo = StringConvert.ToString(groupInvoiceNoMaskedTextBox.Text);
            param.BranchId = Session.Branch.Id;

            if (param.InvoiceNo == null)
            {
                MessageBox.Show("กรุณาใส่เลขที่ มท.", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            _presenter.InvoiceSearchedByGroupInvoiceNo(param);
        }

        public void ClearSearchById()
        {
            customerIdMaskedTextBox.Text = string.Empty;
            otherBranchByIdCheckBox.Checked = false;

            customerIdMaskedTextBox.Focus();
        }

        public void ClearSearchByDetail()
        {
            nameMaskedTextBox.Text = string.Empty;
            addressMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Text = Session.Branch.Id;
            idMaskedTextBox.Text = string.Empty;

            nameMaskedTextBox.Focus();
        }

        public void ClearSearchByGroupInvoiceNo()
        {
            groupInvoiceNoMaskedTextBox.Text = string.Empty;

            groupInvoiceNoMaskedTextBox.Focus();
        }

        public void FocusOnSearchById()
        {
            ClearSearchByDetail();
            customerIdMaskedTextBox.Focus();
        }
        #endregion

        #region check digit
        //Standard Barcode of Bank Thailand
        private bool CheckDigit(string Barcode)
        {
            int? totalValue = 0;
            int? modValue = 0;
            int? iniValue = 0;
            int? lastValue = 0;
            string result = "";
            int[] arrayConstantList = { 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                        5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8,
                                      };

            try
            {
                for (int i = 0; i < Barcode.Length - 2; i++)
                {

                    iniValue = StringConvert.ToInt32(Barcode.Substring(i, 1));

                    modValue = iniValue * arrayConstantList[i];

                    if (modValue.Value.ToString().Length == 1)
                    {
                        totalValue += modValue.Value;
                    }
                    else
                    {
                        totalValue += (StringConvert.ToInt32(modValue.Value.ToString().Substring(0, 1)) + StringConvert.ToInt32(modValue.Value.ToString().Substring(1, 1)));
                    }
                }

                lastValue = (totalValue * 11) % 100;

                result = (lastValue < 10) ? "0" + lastValue.Value.ToString() : lastValue.Value.ToString();

                if (result.Substring(0, 1) == Barcode.Substring((Barcode.Length - 2), 1)
                        && result.Substring(1, 1) == Barcode.Substring((Barcode.Length - 1), 1))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        #endregion 

        #region Queue Management
        public void Start_Queue_Timer()
        {
            

            string queuePath = BPMPath.ConfigPath + "\\QueueData";

            if (!Directory.Exists(queuePath))
            {
                Directory.CreateDirectory(queuePath);
            }

            LocalSettingHelper hp = LocalSettingHelper.Instance();
            if (hp.Read(LocalSettingNames.QueueEnable) != null)
            {
                if (hp.Read(LocalSettingNames.QueueEnable).ToString() == "1")
                {
                    _queueTimer.Start();
                }
                else
                {
                    _queueTimer.Stop();
                }
            }
        }

        public void Stop_Queue_Timer()
        {

            _queueTimer.Stop();

        }

        private void _queueTimer_Tick(object sender, EventArgs e)
        {
            CheckQueueFile();
        }

        private void CheckQueueFile()
        {

            if (_workItem.Workspaces[WorkspaceNames.CenterWorkspace].SmartParts.Count > 0
                && _workItem.Workspaces[WorkspaceNames.HorizontalLayout.LeftWorkspace].SmartParts.Count > 0
                )//ตรวจสอบ CenterWorkspace
            {
                if (_workItem.Workspaces[WorkspaceNames.CenterWorkspace].ActiveSmartPart.ToString() == "PEA.BPM.Infrastructure.Layout.HorizontalLayout"
                    && _workItem.Workspaces[WorkspaceNames.HorizontalLayout.LeftWorkspace].ActiveSmartPart.ToString() == "PEA.BPM.PaymentCollectionModule.BillSearchView"
                    )//ตรวจสอบว่าอยู่ที่หน้าจอชำระเงิน
                {
                    Stop_Queue_Timer();

                    if (_workItem.Workspaces[WorkspaceNames.ModalWindows].SmartParts.Count.ToString() == "0"
                        && Session.IsNetworkConnectionAvailable
                        )//ตรวจสอบว่าไม่มี Dialog และยังออนไฟล์อยู่
                    {
                        //MessageBox.Show("Check Queue");
                        SearchById_from_Queue(); //ค้นหาไฟล์ และ ค้นหาข้อมูลหนี้
                    }

                    Start_Queue_Timer(); //ให้ Queue Timer ยังทำงานอยู่
                }
            }
            else
            {
                Stop_Queue_Timer();
            }

        }
        
        public void SearchById_from_Queue()
        {

            string queuePath = BPMPath.ConfigPath + "\\QueueData\\";

            string fileCa = string.Format(@queuePath + "CAList" + ".txt");
            string fileOk = string.Format(@queuePath + "CAList" + ".ok");

            //-----read file name list--------------------

            if (File.Exists(fileOk) && File.Exists(fileCa))
            {
                Clear_PaidInvoice();
                
                string[] fileCaList = File.ReadAllLines(fileCa);
                foreach (string readLine in fileCaList)
                {

                    if (readLine.Trim() != "")
                    {
                        CustomerSearchParam param = new CustomerSearchParam();
                        param.CaId = StringConvert.ToString(readLine.Trim());
                        param.IsOtherBranch = false;
                        param.IsSearByBP = true;

                        if (param.CaId.Length < 12)
                            param.CaId = param.CaId.PadLeft(12, '0');

                        _presenter.InvoiceSearchedById(param);
                    }
                }
                File.Delete(fileCa);
                File.Delete(fileOk);
            }
        }

        public void Clear_PaidInvoice()
        {
            _presenter.WorkItem.State["ToBePaidInvoices"] = new List<ToBePaidInvoice>();
            _presenter.WorkItem.State["PrintingReceipts"] = null;
            _presenter.WorkItem.State["GroupDividualPrintingReceipts"] = null;
            _toBePaidInvoiceView.ClearData_from_Queue();
        }
        #endregion

        #region One Touch
        private void addOneTouchDebtButton_Click(object sender, EventArgs e)
        {
            using (OneTouchSearchForm sp = new OneTouchSearchForm())
            {
                if (sp.ShowDialog(this) == DialogResult.OK)
                {
                    if (sp.SearchParam.NotificationNo == null)
                    {
                        MessageBox.Show("กรุณาใส่หมายเลขใบคำร้อง", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    else
                    {
                        _presenter.InvoiceSearchedFromOneTouch(sp.SearchParam);
                    }
                }
            }
        }
        #endregion

        #region DCR 67-020 Search by Caid ซ้ำ

        private void searchByMultiCaIdButton_Click(object sender, EventArgs e)
        {
            // DCR 67-020 Search multi CustomerId 
            SearchByMultiDocParam searchTypeParam = new SearchByMultiDocParam();
            searchTypeParam.SearchTypeParam = "1";
            _presenter.InvoiceSearchedByMultiCustomerId(searchTypeParam);
        }

        private void searchByMultiGroupInvoinceButton_Click(object sender, EventArgs e)
        {
            // DCR 67-020 Search multi by group invoice number
            SearchByMultiDocParam searchTypeParam = new SearchByMultiDocParam();
            searchTypeParam.SearchTypeParam = "2";
            _presenter.InvoiceSearchedByMultiCustomerId(searchTypeParam);
        }

        private void searchByNotificationButton_Click(object sender, EventArgs e)
        {
            // DCR 67-020 Search multi by group invoice number
            SearchByMultiDocParam searchTypeParam = new SearchByMultiDocParam();
            searchTypeParam.SearchTypeParam = "3";
            _presenter.InvoiceSearchedByMultiCustomerId(searchTypeParam);
        }

        #endregion




  
    }
}

