//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.Drawing;
using PEA.BPM.PaymentCollectionModule.Views.PaymentHistoryView;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class PaymentHistoryView : UserControl, IPaymentHistoryView
    {
        private Customer _customerDetail;
        private List<PaidInvoice> _paidInvoices;        

        public PaymentHistoryView()
        {
            InitializeComponent();
            dataGridView.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PaymentHistoryViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #region +++ IPaymentHistoryView Members +++

        public Button CloseButton
        {
            get { return closeButton; }
        }

        public Customer CustomerDetail
        {
            set
            {
                this._customerDetail = value;
                LoadCustomerDetail();
            }
        }

        public List<PaidInvoice> PaidInvoices
        {
            set
            {
                this._paidInvoices = value;
                if (_paidInvoices.Count > 0)
                {
                    LoadInvoicesToGrid();
                    CheckCancelTransaction();
                }
                else 
                {
                    dataGridView.DataSource = new List<PaidInvoice>();
                }
            }
        }

        #endregion

        #region +++ Page Load +++

        private void LoadCustomerDetail()
        {
            if (_customerDetail!=null)
            {
                customerIdMaskedTextBox.Text = _customerDetail.CustomerId.TrimStart('0');
                customerNameMaskedTextBox.Text = _customerDetail.Name;
                addressMaskedTextBox.Text = _customerDetail.Address;
                securityDepositMaskedTextBox.Text = string.Format("{0:##,##0.00}", _customerDetail.SecurityDeposit);
                meterSizeMaskedTextBox.Text = _customerDetail.MeterSizeName;                    
            }
        }

        private void LoadInvoicesToGrid()
        {
            dataGridView.Enabled = false;
            dataGridView.DataSource = _paidInvoices;
            dataGridView.Enabled = true;
        }

        private void CheckCancelTransaction()
        {
            for (int i = 0; i < dataGridView.Rows.Count; i++)
            {
                if (dataGridView.Rows[i].Cells[3].Value != null)
                {
                    dataGridView.Rows[i].Cells[8].Value += (dataGridView.Rows[i].Cells[8].Value != null) ? " (สาเหตุยกเลิกการชำระหนี้ : " + dataGridView.Rows[i].Cells[3].Value.ToString().Trim() + ")" : "(สาเหตุยกเลิกการชำระหนี้ : " + dataGridView.Rows[i].Cells[3].Value.ToString().Trim() + ")";
                }
            }
        }

        #endregion

        #region +++ Datagrid Functions +++

        private void dataGridView_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
        }

        private void dataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).InvoiceNo.Length == 22)
                {
                    dataGridView.Rows[e.RowIndex].Cells["InvoiceNo"].Value = "";
                }
                //if (((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).InvoiceNo.Length == 22)
                //{
                //    if (((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).InvoiceNo != null)
                //    {
                //        int suffix = ((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).InvoiceNo.IndexOf("---");
                //        if (suffix > -1)
                //        {
                //            dataGridView.Rows[e.RowIndex].Cells["InvoiceNo"].Value = ((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).InvoiceNo.Substring(0, suffix);
                //        }
                //        else
                //        {
                //            dataGridView.Rows[e.RowIndex].Cells["InvoiceNo"].Value = "";
                //        }
                //    }
                //}

                if (((PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem).CancelDate != null)
                {
                    dataGridView.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.Red;
                }
            }
        }

        #endregion

        private void closeButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void dataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (dataGridView.Columns[e.ColumnIndex].Name == "debtTypeDgColumn")
                {
                    PaidInvoice pi = (PaidInvoice)dataGridView.Rows[e.RowIndex].DataBoundItem;

                    using (DebtDetailForm ddf = new DebtDetailForm())
                    {
                        ddf.Debts = pi.DebtTypes;
                        ddf.ShowDialog();
                    }


                }        
            }    
        }

    }
}

