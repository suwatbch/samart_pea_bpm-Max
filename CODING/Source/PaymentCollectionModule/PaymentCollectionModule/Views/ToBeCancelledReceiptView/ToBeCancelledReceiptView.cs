//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.ComponentModel;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.PaymentCollectionModule.Views.ToBeCancelledReceiptView;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Views.ToBePaidInvoiceView;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class ToBeCancelledReceiptView : UserControl, IToBeCancelledReceiptView
    {
        bool _handleIt = true;
        private ValidatePaymentActive vpa = new ValidatePaymentActive();

        public ToBeCancelledReceiptView()
        {
            InitializeComponent();
            transactionDataGridView.AutoGenerateColumns = false;

            //if (Authorization.IsAuthorized(SecurityNames.POSObserver, false))
            if (Session.Work.Id == null)
                okButton.Enabled = false;
            else
                okButton.Enabled = true;
        }

        PEA.BPM.CashManagementModule.Interface.BusinessEntities.TrayMoneyInfo _moneyInTray;

        public PEA.BPM.CashManagementModule.Interface.BusinessEntities.TrayMoneyInfo moneyInTray
        {
            set
            {
                _moneyInTray = value;
                //FillTrayMoneyGv();
            }
            get { return _moneyInTray; }
        }

        public void EnableSaveButton(bool enable)
        {
            okButton.Enabled = enable;
        }

        public bool AddReceipts(List<Receipt> receipts)
        {
            if (receipts.Count > 0)
            {
                List<Receipt> receiptsByPayment = _presenter.GetReceipts(receipts[0].PaymentId);
                List<ToBeCancelledReceipt> toBeCancelledReceipts = new List<ToBeCancelledReceipt>();

                foreach (Receipt r in receiptsByPayment)
                {
                    ToBeCancelledReceipt tbr = new ToBeCancelledReceipt(r);

                    foreach (Receipt ar in receipts)
                    {
                        if (r.ReceiptId == ar.ReceiptId)
                        {
                            tbr.IsChecked = true;
                            break;
                        }
                    }

                    toBeCancelledReceipts.Add(tbr);
                }

                // Find checked receipts
                List<ToBeCancelledReceipt> checkedReceipts = toBeCancelledReceipts.FindAll(delegate(ToBeCancelledReceipt rc)
                    {
                        return rc.IsChecked;
                    }
                );

                // Find related receipts that have to be checked
                List<ToBeCancelledReceipt> additionalCheckReceipt = FindRelatedReceipt(checkedReceipts, false);

                if (additionalCheckReceipt.Count > 0)
                {
                    MessageBox.Show(
                        "ใบเสร็จที่เลือกมีรายการใบเสร็จอื่นที่เกี่ยวเนื่องกัน และจะต้องถูกยกเลิกพร้อมกัน",
                        "ยกเลิกใบเสร็จ",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);

                    foreach (ToBeCancelledReceipt r in additionalCheckReceipt)
                    {
                        r.IsChecked = true;
                    }
                }

                _presenter.WorkItem.State["ToBeCancelledReceipts"] = toBeCancelledReceipts;

                RedrawScreen();
                okButton.Focus();
            }

            return true;
        }

        private List<ToBeCancelledReceipt> FindRelatedReceipt(List<ToBeCancelledReceipt> selectedReceipts, bool findChecked)
        {
            List<ToBeCancelledReceipt> relatedReceipt = new List<ToBeCancelledReceipt>();

            foreach (ToBeCancelledReceipt tbr in selectedReceipts)
            {
                foreach (Receipt r in tbr.OriginalReceipt.RelatedReceipts)
                {
                    ToBeCancelledReceipt t = (ToBeCancelledReceipt)r.ToBeCancelledReceipt;
                    if (findChecked == t.IsChecked)
                    {
                        t.IsChecked = !findChecked;

                        // find receipts related to this receipt again
                        List<ToBeCancelledReceipt> sR = new List<ToBeCancelledReceipt>(); sR.Add(t);
                        List<ToBeCancelledReceipt> addRelatedReceipt = FindRelatedReceipt(sR, findChecked);
                        foreach (ToBeCancelledReceipt arr in addRelatedReceipt)
                        {
                            if (!relatedReceipt.Contains(arr))
                            {
                                relatedReceipt.Add(arr);
                            }
                        }

                        if (!relatedReceipt.Contains(t))
                        {
                            relatedReceipt.Add(t);
                        }
                    }
                }
            }

            return relatedReceipt;
        }

        private void RedrawScreen()
        {
            List<ToBeCancelledReceipt> toBeCancelledReceipts = (List<ToBeCancelledReceipt>)_presenter.WorkItem.State["ToBeCancelledReceipts"];
            transactionDataGridView.DataSource = new BindingList<ToBeCancelledReceipt>(toBeCancelledReceipts);
            ReCalculateSummations();
        }

        private void ReCalculateSummations()
        {
            List<ToBeCancelledReceipt> toBeCancelledReceipts = (List<ToBeCancelledReceipt>)_presenter.WorkItem.State["ToBeCancelledReceipts"];

            _handleIt = false;
            bool chkAll = true;
            foreach (ToBeCancelledReceipt r in toBeCancelledReceipts)
            {
                if (!r.IsChecked)
                {
                    chkAll = false;
                    break;
                }
            }            
            allCheckBox.Checked = chkAll && toBeCancelledReceipts.Count>0;
            _handleIt = true;

            int nbAll = 0;
            decimal amAll = 0;
            int nbSelect = 0;
            decimal amSelect = 0;

            for (int i = 0; i < transactionDataGridView.Rows.Count; i++)
            {
                ToBeCancelledReceipt r = (ToBeCancelledReceipt)transactionDataGridView.Rows[i].DataBoundItem;
                if (r.IsChecked)
                {
                    nbSelect = nbSelect + 1;
                    amSelect = amSelect + r.GAmount.Value;
                }

                nbAll = nbAll + 1;
                amAll = amAll + r.GAmount.Value;
            }

            totalTransactionTextBox.Text = nbAll.ToString("#,##0");
            totalAmountTransactionTextBox.Text = amAll.ToString("#,##0.00");
            selectTransactionTextBox.Text = nbSelect.ToString("#,##0");
            selectAmountTransactionTextBox.Text = amSelect.ToString("#,##0.00");

            //grandTotalLabel.Text = "รับชำระ";
            //grandTotalLabel.ForeColor = Color.MediumBlue;
            //totalAmountTextBox.ForeColor = Color.MediumBlue;
        }


        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ToBeCancelledReceiptViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.WorkItem.State["IsCancelPage"] = "True";
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            ClearData();
        }

        public void ClearData()
        {
            _presenter.WorkItem.State["ToBeCancelledReceipts"] = new List<ToBeCancelledReceipt>();
            RedrawScreen();
        }

        private void transactionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (e.ColumnIndex == 0)
                {
                    transactionDataGridView.EndEdit();
                    ToBeCancelledReceipt currentReceipt = (ToBeCancelledReceipt)transactionDataGridView.Rows[e.RowIndex].DataBoundItem;

                    bool isCheck = currentReceipt.IsChecked;

                    // Find checked receipts
                    List<ToBeCancelledReceipt> selectedReceipts = new List<ToBeCancelledReceipt>(); selectedReceipts.Add(currentReceipt);


                    // Find related receipts that have to be checked
                    List<ToBeCancelledReceipt> additionalCheckReceipt = FindRelatedReceipt(selectedReceipts, !currentReceipt.IsChecked);

                    if (additionalCheckReceipt.Count > 0)
                    {
                        MessageBox.Show(
                            "ใบเสร็จที่เลือกมีรายการใบเสร็จอื่นที่เกี่ยวเนื่องกัน การ เลือก/ไม่เลือก จะถูกทำให้ตรงกัน",
                            "ยกเลิกใบเสร็จ",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);

                        foreach (ToBeCancelledReceipt r in additionalCheckReceipt)
                        {
                            r.IsChecked = isCheck;
                        }

                        RedrawScreen();
                    }
                    else
                    {
                        ReCalculateSummations();
                    }
                }
                else if (e.ColumnIndex == 9)
                {
                    //_presenter.OnViewInvoiceDetailClick(currentReceipt.Bills);
                }
            }
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCloseWorkOfCashier())
                    return;

                if (Session.IsNetworkConnectionAvailable)
                {
                    vpa.ValidatePaymentActiveFromOffline();
                    vpa.ValidatePaymentActiveFromOnline(_presenter._billingService);
                    vpa.CheckReceiptRunning(true);
                }
                else
                {
                    vpa.ValidatePaymentActiveFromOffline();
                    vpa.CheckReceiptRunning(false);
                    MessageBox.Show("ระบบไม่สามารถเชื่อมต่อไปยังเครื่องแม่ข่ายได้\nกรุณาลองใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                List<ToBeCancelledReceipt> toBeCancelledReceipt = (List<ToBeCancelledReceipt>)_presenter.WorkItem.State["ToBeCancelledReceipts"];
                List<ToBeCancelledReceipt> selectedReceipts = toBeCancelledReceipt.FindAll(delegate(ToBeCancelledReceipt r)
                    {
                        return r.IsChecked;
                    }
                );

                if (selectedReceipts.Count == 0)
                {
                    MessageBox.Show("กรุณาเลือกรายการใบเสร็จที่ต้องการยกเลิก", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }


                moneyInTray = _presenter.GetMoneyInTray(Session.Work.Id);
                string msgError;
                if (!CanCancelReceipt(moneyInTray, selectedReceipts, out msgError))
                {
                    MessageBox.Show(msgError, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

               

                if (DialogResult.OK == MessageBox.Show("คำเตือน: หากทำการยกเลิกใบเสร็จแล้ว จะไม่สามารถย้อนกลับรายการได้\n\nโปรดกดปุ่ม 'OK' เพื่อยืนยันการยกเลิก",
                    "ข้อความยืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                {
                   
                        CancelReceipt(selectedReceipts, toBeCancelledReceipt);

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ระบบไม่สามารถยกเลิกการรับเงินได้   กรุณาลองใหม่อีกครั้ง", "ยกเลิกการชำระเงิน", MessageBoxButtons.OK, MessageBoxIcon.Error);
                ClearData();
            }
        }



        private bool CanCancelReceipt(TrayMoneyInfo moneyInfo, List<ToBeCancelledReceipt> selectedReceipts, out string msg)
        {
            decimal? cashOfReceipts = 0;
            List<PaymentTypeInfo> chequeOfReceipt = new List<PaymentTypeInfo>();
            bool ret = true;
            msg = string.Empty;

            string errMsg_cantCancel =      "ไม่สามารถยกเลิกได้  เนื่องจาก";
            string errMsg_notEnoughCash =   "   -เงินสดในลิ้นชักไม่พอ";
            string errMsg_notEnougeCheque = "   -เช็คโอนออกรอตอบรับ หรือ ถูกนำฝากธนาคารแล้ว\n";
            errMsg_notEnougeCheque +=       "*หากยังคงต้องการยกเลิกเช็ค ควรนำเช็คกลับคืนมา เช่น ยกเลิกการโอน,\n";
            errMsg_notEnougeCheque +=       " ยกเลิกการนำฝากธนาคาร หรือ ให้ cashier อื่นโอนเช็คกลับมา เป็นต้น";

            //==Get Cash AND distinct Cheque in Receipts
            for (int i = 0; i < selectedReceipts.Count; i++)
            {
                List<PaymentTypeInfo> pmInfos = selectedReceipts[i].OriginalReceipt.PmInfo;
                for (int j = 0; j < pmInfos.Count; j++)
                {
                    //Get Cash
                    if (pmInfos[j].PtId == "1")
                    {
                        cashOfReceipts += pmInfos[j].Amount;
                    }

                    //Get Distinct Cheque
                    if (pmInfos[j].PtId == "2")
                    {
                        if (!chequeOfReceipt.Exists(delegate(PaymentTypeInfo pmInfo)
                                { 
                                    return (pmInfo.ChqNo.Trim()+"@"+pmInfo.BankKey.Trim() ==  pmInfos[j].ChqNo.Trim()+"@"+pmInfos[j].BankKey.Trim());
                                }
                                )
                        )
                        {
                            chequeOfReceipt.Add(pmInfos[j]);
                        }
                    }
                }
            }

            //==Check Cash เงินในเก๊ะ-เงินที่โอนไป
            if ((cashOfReceipts > 0) && (moneyInfo.CashAmount - moneyInfo.CashPendingAmount < cashOfReceipts))
            {
                msg = "\n" + errMsg_notEnoughCash;
                ret = false;
            }

            //==Check Cheque
            if (chequeOfReceipt.Count > 0)
            {
                //Convert moneyInfo.ChequeList to <List>PaymentTypeInfo Object For easy converting
                List<PaymentTypeInfo> ChequeListInTray = new List<PaymentTypeInfo>();
                for (int i = 0; i < moneyInfo.ChequeList.Count; i++)
                {
                    //cheque is not pending for transfer.
                    if (moneyInfo.ChequeList[i].TransStatus != "0")
                    {
                        PaymentTypeInfo pm = new PaymentTypeInfo(null, "2", moneyInfo.ChequeList[i].BankKey,
                            moneyInfo.ChequeList[i].ChqNo, moneyInfo.ChequeList[i].ChqAccNo, DateTime.MinValue, moneyInfo.ChequeList[i].Amount);
                        ChequeListInTray.Add(pm);
                    }
                }

                for (int i = 0; i < chequeOfReceipt.Count; i++)
                {
                    if (!ExistCheque(ChequeListInTray, chequeOfReceipt[i]))
                    {
                        msg += "\n" + errMsg_notEnougeCheque;
                        ret = false;
                        break;
                    }

                }
            }
            if (ret == false)
                msg = errMsg_cantCancel + msg;                  

            return ret;
        }

        private bool IsSameCheque(PaymentTypeInfo pmSource, PaymentTypeInfo pmDestination)
        {
            return (pmSource.ChqNo.Trim() + "@" + pmSource.BankKey.Trim() == pmDestination.ChqNo.Trim() + "@" + pmDestination.BankKey.Trim());
        }
        private bool ExistCheque(List<PaymentTypeInfo> pmSources, PaymentTypeInfo pmDestination)
        {
            for (int i = 0; i < pmSources.Count; i++)
            {
                if (IsSameCheque(pmSources[i], pmDestination))
                {
                    return true;
                }
            }
            return false;
        }

        private void CancelReceipt(List<ToBeCancelledReceipt> selectedReceipts, List<ToBeCancelledReceipt> toBeCancelledReceipt)
        {
            string remark;

            if (Authorization.IsAuthorized(SecurityNames.ReceiptCancellationNow,
                    "ยกเลิกใบเสร็จ", false, "กรุณากรอกเหตุผลในการยกเลิกใบเสร็จ", out remark))
            {
                // DCR QRPayment 
                // เก็บข้อมูล Payment Type 5. 
                List<string> paymentIdPMQR = new List<string>();
                foreach (var selectedReceipt in selectedReceipts)
                {
                    foreach (var itemPmInfo in selectedReceipt.OriginalReceipt.PmInfo)
                    {
                        if (itemPmInfo.PtId == "5")
                            paymentIdPMQR.Add(selectedReceipt.OriginalReceipt.PaymentId);
                    }
                }

                 bool resultCancelQR = false;
                if (paymentIdPMQR.Count > 0)
                {
                    // DCR QR Payment 
                   resultCancelQR = QRPaymentRefund(paymentIdPMQR);
                    
                }else
                {
                    resultCancelQR = true; 
                }

                if (!resultCancelQR)
                {
                    //MessageBox.Show("ระบบไม่สามารถยกเลิกการรับเงินประเภท QR Payment", "ยกเลิกการชำระเงิน", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return; 
                }



                List<String> cancelledReceiptIds = GetCancelledReceiptIds(selectedReceipts);

                // ถ้าไม่ได้ cancel receipts ทั้งหมด ต้องยกเลิกเพิ่มอีก 1 ใบเพื่อพิมพ์ใบสรุปใหม่
                string reprintReceiptId = (cancelledReceiptIds.Count < toBeCancelledReceipt.Count) ? GetReprintReceiptId(toBeCancelledReceipt) : null;

                if (null == reprintReceiptId || 
                    (MessageBox.Show(
                    string.Format("ระบบต้องทำการพิมพ์ซ่อมใบเสร็จรับเงินใบสุดท้ายใหม่\nโปรดเรียกคืนใบเสร็จรับเงินเลขที่ '{0}' จากผู้ชำระเงินด้วย", reprintReceiptId), "แจ้งเตือน", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1)== DialogResult.OK))
                {
                    try
                    {

                        // TODO: Find get new receiptid
                        string newReceiptId = string.Empty;
                        IDSettingHelper hp = IDSettingHelper.Instance();
                        if (null != reprintReceiptId)
                        {
                            string prefix = reprintReceiptId.Substring(0, 1);                            
                            newReceiptId = Running.GetReceiptId(prefix, hp);
                        }

                        if (null != reprintReceiptId)
                        {
                            hp.Save(hp);
                        }

                        List<PaidMethod> returnPayment = _presenter.OnCancelReceipts(cancelledReceiptIds, remark, reprintReceiptId, newReceiptId);

                        ClearData();

                        using (CancelSummaryForm ccsForm = new CancelSummaryForm())
                        {
                            ccsForm.SetReturnPayment(returnPayment);
                            ccsForm.ShowDialog();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ระบบไม่สามารถยกเลิกการรับเงินได้   กรุณาลองใหม่อีกครั้ง", "ยกเลิกการชำระเงิน", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        ClearData();
                    }
                }
            }
        }

        private List<String> GetCancelledReceiptIds(List<ToBeCancelledReceipt> toBeCancelledReceipt)
        {
            List<String> receiptIds = new List<string>();            

            foreach (ToBeCancelledReceipt r in toBeCancelledReceipt)
            {
                receiptIds.Add(r.ReceiptId + '|' + r.DisplayReceiptId);
            }

            return receiptIds;
        }

        private string GetReprintReceiptId(List<ToBeCancelledReceipt> toBeCancelledReceipt)
        {
            string reprintReceipt = null;

            for (int i = toBeCancelledReceipt.Count - 1; i >= 0; i--)
            {
                if (!toBeCancelledReceipt[i].IsChecked)
                {
                    reprintReceipt = toBeCancelledReceipt[i].ReceiptId;
                    break;
                }
            }

            return reprintReceipt;
        }

        private void allCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (_handleIt)
            {
                bool isChecked = allCheckBox.Checked;

                List<ToBeCancelledReceipt> toBeCancelledReceipts = (List<ToBeCancelledReceipt>)_presenter.WorkItem.State["ToBeCancelledReceipts"];
                foreach (ToBeCancelledReceipt r in toBeCancelledReceipts)
                {
                    r.IsChecked = isChecked;
                }

                RedrawScreen();
            }
        }


        #region +++ Cash Management +++

        private bool ValidateCloseWorkOfCashier()
        {
            try
            {
                WorkStatus workstatus = IsClosedWork();
                if ((Session.IsNetworkConnectionAvailable ? ((workstatus.CloseWorkBy == null) ? true : false) : false))
                    return true;
                else
                {
                    string cashierTxt = string.Format("({0}) - {1}", workstatus.CloseWorkBy, workstatus.CashierName);
                    MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnClosePaymentView();
                    return false;
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show("เครือข่ายมีปัญหาไม่สามารถยกเลิกการรับเงินได้ (Offline)  \n\nกรุณาลองใหม่อีกครั้งเมื่อเครือข่ายกลับมาเป็นปรกติ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                //แก้ไขข้อความ เกิดความผิดพลาดของเครือข่าย 19-08-2558 
                MessageBox.Show("ระบบไม่สามารถติดต่อกับเครื่องแม่ข่ายได้  \n\nกรุณาลองใหม่อีกครั้ง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        #endregion

        private bool QRPaymentRefund(List<string> pmQR){
            bool result = false;

            try
            {
                result = _presenter.GetQRpaymentForRefund(pmQR);
               
            }
            catch (Exception)
            {
            }

            return result; 
        
        }
    }
}