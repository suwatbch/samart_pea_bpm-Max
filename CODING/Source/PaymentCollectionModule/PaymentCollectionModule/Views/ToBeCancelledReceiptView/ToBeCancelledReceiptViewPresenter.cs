//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.CommonUtilities;
using System.Windows.Forms;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using PEA.BPM.CashManagementModule.Interface.Services;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.IO;
using System.Runtime.Serialization;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using System.Runtime.Serialization.Formatters.Binary;
using System.Globalization;
using System.Linq;

namespace PEA.BPM.PaymentCollectionModule
{
    public class ToBeCancelledReceiptViewPresenter : Presenter<IToBeCancelledReceiptView>
    {
        public IBillingService _billingService;
        private IPaidBillService _paidBillService;
        private IReportService _reportService;
        bool isSaveTextFile = false;
        bool isSaveDatabase = false;

        public ToBeCancelledReceiptViewPresenter([ServiceDependency] IBillingService billingService,
            [ServiceDependency] IPaidBillService paidBillService,
            [ServiceDependency] IReportService reportService)
        {
            _billingService = billingService;
            _paidBillService = paidBillService;
            _reportService = reportService;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventSubscription(PEA.BPM.PaymentCollectionModule.Interface.Constants.EventTopicNames.ReceiptItemAdd, Thread = ThreadOption.UserInterface)]
        public void ReceiptItemAddHandler(object sender, EventArgs<List<Receipt>> e)
        {
            try
            {
                if (View.AddReceipts(e.Data))
                {
                    OnActionSuccess();
                }
            }
            catch (Exception ex)
            {
                Logger.WriteError(Logger.Module.POS, "เพิ่มรายการใบเสร็จเพื่อยกเลิก", ex.ToString());
                MessageBox.Show("พบข้อผิดพลาดในการเพิ่มใบเสร็จเพื่อการยกเลิก\nโปรดติดต่อผู้ดูแลระบบ", "ข้อผิดพลาด",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [EventPublication(PEA.BPM.PaymentCollectionModule.Interface.Constants.EventTopicNames.ActionSuccess, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ActionSuccess;
        internal void OnActionSuccess()
        {
            try
            {
                if (ActionSuccess != null)
                    ActionSuccess(this, new EventArgs());
            }
            catch { }
        }

        [EventSubscription(PEA.BPM.PaymentCollectionModule.Interface.Constants.EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }

        internal List<Receipt> GetReceipts(string paymentId)
        {
            ReceiptSearchParam param = new ReceiptSearchParam();
            param.PaymentId = paymentId;
            param.BranchId = Session.Branch.Id;
            param.IsCancel = true;

            return _paidBillService.SearchReceipt(param);
        }

        internal List<PaidMethod> OnCancelReceipts(List<string> receiptIds, string reason, string reprintReceiptId, string newReceiptId)
        {
            CancelledInfo cancelledInfo = new CancelledInfo();

            try
            {
                List<string> receipt1 = new List<string>();
                List<string> receipt2 = new List<string>();

                foreach (string r in receiptIds)
                {
                    receipt1.Add(r.Split('|')[0].ToString());
                }

                if (reprintReceiptId != null)
                {
                    receipt1.Add(reprintReceiptId);
                    receiptIds.Add(reprintReceiptId + '|' + reprintReceiptId);
                }

                WorkItem.State["ToBeCancelledReceipts"] = new List<PrintingInfo>();
                WorkItem.State["ToBeCancelledReceipts"] = _paidBillService.GetReceiptsForPrint(null, receipt1);


                List<PrintingInfo> receipts = (List<PrintingInfo>)WorkItem.State["ToBeCancelledReceipts"];
                if (receipts.Count > 0)
                {
                    receipt2 = GetCancelReceipt(receipts);
                }


                bool isGroupInvoice = false;
                string newGroupInvoiceReceiptId = string.Empty;

                var obj = (from t0 in receipts where t0.PrintingReceipt.ReceiptId == reprintReceiptId select t0).FirstOrDefault();
                if (obj != null && obj.PrintingReceipt.GroupXReceiptId != null && obj.PrintingReceipt.GroupXReceiptId.StartsWith("X"))
                {
                    isGroupInvoice = true;

                    // Gen new receipt next X. 
                    IDSettingHelper hp = IDSettingHelper.Instance();
                    string prefix = obj.PrintingReceipt.GroupXReceiptId.Substring(0, 1);
                    newGroupInvoiceReceiptId = Running.GetReceiptId(prefix, hp);
                    hp.Save(hp);

                }

                //Update text file for report 2.17
                SaveTextFileForReport(receiptIds, reprintReceiptId, newReceiptId, newGroupInvoiceReceiptId);


                try
                {
                    // DCR : รวมใบเสร็จแผนผ่อน
                    if (isGroupInvoice)
                        newReceiptId += "|" + newGroupInvoiceReceiptId;

                    cancelledInfo = _paidBillService.CancelReceipt(null, receipt2, reason, reprintReceiptId, newReceiptId, Session.Terminal.Id,
                                                                    Session.Terminal.Code, Session.Branch.Id, Session.Branch.Name,
                                                                    Session.User.Id, Session.User.Name, Session.Work.Id);


                    try
                    {

                        List<string> cancelreceiptIds = new List<string>(); ;

                        foreach (string r in receipt2)
                        {
                            if (r != reprintReceiptId)
                            {
                                cancelreceiptIds.Add(r);
                            }
                        }

                        List<OneTouchLogInfo> OneTouchLogInfo = _paidBillService.SearchOneTouchPayment(cancelreceiptIds);

                        foreach (OneTouchLogInfo r in OneTouchLogInfo)
                        {
                            OneTouchLogInfo OneTouchLog     = new OneTouchLogInfo();
                            OneTouchLog.NotificationNo      = r.NotificationNo;
                            OneTouchLog.InvoiceNo           = r.InvoiceNo;
                            OneTouchLog.DebtId              = r.DebtId; //เพิ่ม DebTyptId
                            OneTouchLog.ReceiptId           = r.ReceiptId;
                            OneTouchLog.GAmount             = r.GAmount;
                            OneTouchLog.VatAmount           = r.VatAmount;
                            OneTouchLog.ModifiedBy          = (Session.User.Id);
                            OneTouchLog.Action              = "3"; //Cancel

                            //Call Web Service OneTouch
                            bool flag = _billingService.FlagOneTouchPayment(OneTouchLog);

                            if (flag == false)
                            {
                                OneTouchLog.SyncFlag = "1";
                            }
                            else
                            {
                                OneTouchLog.SyncFlag = "0";  //ส่งได้
                            }

                            //Insert Log OneTouch
                            try
                            {
                                _billingService.SaveOneTouchLog(OneTouchLog);
                            }
                            catch
                            {
                                //
                            }
                        }
                    }
                    catch
                    {
                        //Nothing
                    }


                    isSaveDatabase = true;
                }
                catch
                {
                    isSaveDatabase = false;
                    throw;
                }


                //Set CancelActive = "1" for report 2.17
                // DCR : 2021 รวมใบเสร็จแผนผ่อน เพิ่ม parameter เพื่อรองรับการ Reprint ที่เป็น group แผนผ่อน. 
                //SetCancelActive(receiptIds, cancelledInfo);   // Original. 
                SetCancelActive(receiptIds, cancelledInfo, newGroupInvoiceReceiptId);



                // Move old group install to new group install. 
                //SaveTextFileForReport(receiptIds, reprintReceiptId, newReceiptId, newGroupInvoiceReceiptId);
                if (!string.IsNullOrEmpty( newGroupInvoiceReceiptId))
                {
                    // ทำกาย้ายแผ่นผ่อนที่ทำกาาร Repay ไปไว้ที่ Group receipt ใบใหม่ 
                    MoveGroupReceiptToNewGroup(reprintReceiptId, newReceiptId);
                }


                if (cancelledInfo.PrintingInfo != null)
                {
                    

                    PrintingInfo pinfo = cancelledInfo.PrintingInfo;
                    SlipPrinting sp = new SlipPrinting(_billingService, _reportService);

                    //// DCR รวมใบเสร็จแผนผ่อน 2021-OCT-04
                    //// ต้องการเพิ่มข้อมูล GroupReceipt ถ้า ReceiptId เป็น ใบเสร็จรวม
                    List<string> tmpTargetReceipt = new List<string>();
                    tmpTargetReceipt.Add(pinfo.PrintingReceipt.ReceiptId);
                    List<PrintingInfo> tmpXGroupReceipt = _paidBillService.GetReceiptsForPrint(null, tmpTargetReceipt);

                    string tmpCaTaxId   = null;
                    string tmpCaBranch  = null;

                    foreach (var r in tmpXGroupReceipt)
                    {
                        tmpCaTaxId  = r.PrintingReceipt.CaTaxId;
                        tmpCaBranch = r.PrintingReceipt.CaTaxBranch;

                        string tmpXReceiptId = r.PrintingReceipt.ReceiptId;
                        if (r.PrintingReceipt.ReceiptId == pinfo.PrintingReceipt.ReceiptId)
                        {
                            if (r.PrintingReceipt.GroupReceiptOrNot == "Y" || !String.IsNullOrEmpty(r.PrintingReceipt.GroupXReceiptId))
                            {
                                pinfo.PrintingReceipt.GroupReceiptAmount            = r.PrintingReceipt.GroupReceiptAmount;
                                //pinfo.PrintingReceipt.GroupReceiptIdInstallment     = r.PrintingReceipt.GroupReceiptIdInstallment;  // Object นี้ของ พี่เหวก ขั้นตอนการพิมพ์ไม่ได้ ใช้
                                pinfo.PrintingReceipt.GroupReceiptInstallmentText   = r.PrintingReceipt.GroupReceiptInstallmentText;
                                pinfo.PrintingReceipt.GroupReceiptMeterIdText       = r.PrintingReceipt.GroupReceiptMeterIdText;
                                pinfo.PrintingReceipt.GroupReceiptOrNot             = "Y";
                                pinfo.PrintingReceipt.GroupReceiptPeriodText        = r.PrintingReceipt.GroupReceiptPeriodText;
                                pinfo.PrintingReceipt.GroupReceiptQty               = r.PrintingReceipt.GroupReceiptQty;
                                pinfo.PrintingReceipt.GroupReceiptRateTypeText      = r.PrintingReceipt.GroupReceiptRateTypeText;
                                pinfo.PrintingReceipt.GroupReceiptTotal             = r.PrintingReceipt.GroupReceiptTotal;
                                pinfo.PrintingReceipt.GroupReceiptVatTotal          = r.PrintingReceipt.GroupReceiptVatTotal;
                                pinfo.PrintingReceipt.GroupXReceiptId               = r.PrintingReceipt.GroupXReceiptId;
                            }
                        }
                    }

                    pinfo.PrintingReceipt.CaTaxId       = tmpCaTaxId;
                    pinfo.PrintingReceipt.CaTaxBranch   = tmpCaBranch;

                    sp.Print(pinfo.PrintingReceipt, pinfo.PaymentMethods, sp.GetAllReceiptsNo(pinfo.ReceiptStatus));
                }

                return cancelledInfo.PaidMethods;

            }
            catch
            {
                if (isSaveTextFile && isSaveDatabase)
                {
                    throw;
                }
                else if (isSaveTextFile && !isSaveDatabase)
                {
                    //Rollback data in text file
                    //RollBackTransactionFile(receiptIds);
                    throw;
                }
                else
                {
                    throw;
                }
            }
        }

        private List<string> GetCancelReceipt(List<PrintingInfo> receipts)
        {
            List<string> cancelledReceipts = new List<string>();

            foreach (PrintingInfo pi in receipts)
            {
                if (cancelledReceipts.Count > 0)
                {
                    if (!cancelledReceipts.Exists(delegate(string r)
                            {
                                return pi.PrintingReceipt.ReceiptId == r.Split('|')[0].ToString() || pi.PrintingReceipt.PrintingInvoices[0].BillBookId == r.Split('|')[1].ToString();
                            }
                        ))
                    {
                        cancelledReceipts.Add(pi.PrintingReceipt.ReceiptId + "|" + pi.PrintingReceipt.PrintingInvoices[0].BillBookId);
                    }
                }
                else
                {
                    cancelledReceipts.Add(pi.PrintingReceipt.ReceiptId + "|" + pi.PrintingReceipt.PrintingInvoices[0].BillBookId);
                }
            }

            if (cancelledReceipts.Count > 0)
            {
                for (int i = 0; i < cancelledReceipts.Count; i++)
                {
                    cancelledReceipts[i] = cancelledReceipts[i].Split('|')[0].ToString();
                }
            }

            return cancelledReceipts;

        }

        private void SaveTextFileForReport(List<string> cancelReceiptIds, string reprintReceiptId, string newReceiptId, string newGroupReceiptId)
        {
            try
            {
                string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
                string fileName = string.Format("{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), "*");

                if (!Directory.Exists(transactionPath))
                {
                    Directory.CreateDirectory(transactionPath);
                }

                string[] fileEntries = Directory.GetFiles(transactionPath, fileName);
                CAC15Report transactions = new CAC15Report();
                List<CAC15Report> report = new List<CAC15Report>();
                List<PrintingInfo> receipts = (List<PrintingInfo>)WorkItem.State["ToBeCancelledReceipts"];
                bool isSave = false;
                bool groupInstallmentNotLastRepay = false;
                // ใบเสร็จที่ยกเลิก ที่ไม่ใช้ใบสุดท้าย. และเป็นใบเสร็จรวมแผนผ่อนหรือไม่ ? 
                // Exclude reprint 
                var recExclueReprint = cancelReceiptIds.Where(c => c.Split('|')[0].ToString() != reprintReceiptId).ToList();
                if (recExclueReprint.Count > 0)
                {
                    // ตรวจสอบว่าใบเสร็จที่เหลือเป็น ใบเสร็จรวมแผนผ่อนหรือไม่ ? 
                    groupInstallmentNotLastRepay = true;
                }

                if (fileEntries.Length == 0)
                {
                    //In case the machine does not have any text file in the machine
                    fileName = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

                    //Insert new ReceiptId for reprint receipt
                    if (reprintReceiptId != null)
                    {
                        PrintingInfo reprintReceipt = receipts.Find(delegate(PrintingInfo ri)
                                        {
                                            return ri.PrintingReceipt.ReceiptId == reprintReceiptId;
                                        }
                                    );
                        reprintReceipt.PrintingReceipt.ReceiptId = newReceiptId;

                        transactions = GetTransactions(reprintReceipt.PrintingReceipt, newReceiptId, false);

                        // DCR : Group receipt แผนผ่อน. 
                        // เพื่อการบันทึก  receipt X สำหรับแผนผ่อน. 
                        if (newGroupReceiptId != null && newGroupReceiptId.Length > 0)
                        {
                            transactions.InstallmentReceiptId = newGroupReceiptId;
                            transactions.RealReceiptId = newGroupReceiptId;

                        }

                        reprintReceipt.PrintingReceipt.ReceiptId = reprintReceiptId;
                        transactions.CancelActive = null;
                        transactions.RepayActive = "1";
                        transactions.Active = "0";
                        report.Add(transactions);
                        isSave = true;


                        //Save to text file
                        if (isSave)
                        {
                            IFormatter serializer = new BinaryFormatter();
                            using (Stream writer = new FileStream(fileName, FileMode.Create))
                            {
                                serializer.Serialize(writer, report);
                                writer.Close();
                            }
                        }
                    }


                    //Add new record for cancel from different pos machine
                    foreach (string cancelReceipt in cancelReceiptIds)
                    {

                        if (!report.Exists(delegate(CAC15Report r)
                                {
                                    return r.RealReceiptId == cancelReceipt.Split('|')[0].ToString() && r.BranchPosID == Session.Terminal.Code.ToString();
                                }
                            ))
                        {

                            if (receipts.Count > 0)
                            {
                                PrintingInfo pi = receipts.Find(delegate(PrintingInfo ri)
                                            {
                                                return ri.PrintingReceipt.ReceiptId == cancelReceipt.Split('|')[0].ToString();
                                            }
                                        );


                                transactions = GetTransactions(pi.PrintingReceipt, cancelReceipt.Split('|')[1].ToString(), true);
                                transactions.Active = "0";
                                report.Add(transactions);
                                isSave = true;

                                receipts.Remove(pi);
                            }
                        }
                    }

                    //Save to text file
                    if (isSave)
                    {
                        IFormatter serializer = new BinaryFormatter();
                        using (Stream writer = new FileStream(fileName, FileMode.Create))
                        {
                            serializer.Serialize(writer, report);
                            writer.Close();
                        }
                    }
                }
                else
                {
                    List<string> foundReceipt = new List<string>();
                    List<string> missingReceipt = new List<string>();

                    //find existing receipt in the local machine
                    foreach (string cancelReceipt in cancelReceiptIds)
                    {
                        foreach (string todayPath in fileEntries)
                        {
                            if (File.Exists(todayPath))
                            {
                                //Read existing transactions from text file
                                FileStream fs = new FileStream(todayPath, FileMode.Open);
                                IFormatter formatter = new BinaryFormatter();
                                report = (List<CAC15Report>)formatter.Deserialize(fs);
                                fs.Close();
                            }

                            if (report.Exists(delegate(CAC15Report r)
                                    {
                                        return r.RealReceiptId == cancelReceipt.Split('|')[0].ToString();
                                    }
                                ))
                            {
                                foundReceipt.Add(cancelReceipt);

                                // กรณีที่เจอใบเสร็จ
                                // ต้องการ Confirm ว่าเป็นใบเสร็จรวมแผนผ่อนที่ถูกยกเลิก และไม่ใช่ใบที่ Reprint ใช่หรือไม่  ***Fix
                                if (cancelReceipt.Split('|')[0].ToString() != reprintReceiptId)
                                {
                                    // ลองค้นหาข้อมูล 
                                    var groupInstallmentNotPrint = (from t0 in report where t0.ReceiptId == cancelReceipt.Split('|')[0].ToString() && t0.RealReceiptId.StartsWith("X") select t0).ToList();
                                    if (groupInstallmentNotPrint.Count > 0)
	                                {
                                        // Add ข้อมูลใส่ founcReceipt.
                                        foreach (var item in groupInstallmentNotPrint)
                                        {
                                            var existFound = foundReceipt.FirstOrDefault(c => c == item.RealReceiptId);
                                            if (existFound == null)
                                                foundReceipt.Add(item.RealReceiptId);  

                                        }
	                                }
                                }

                            }
                            else
                            {
                                // DCR : รวมใบเสร็จแผนผ่อน ค้นหาใบเสร็จที่เป็น
                                var groupReceipt = report.Where(r => r.ReceiptId == cancelReceipt.Split('|')[0].ToString()).ToList();
                                if (groupReceipt.Count > 0)
                                {
                                    foundReceipt.Add(cancelReceipt);
                                    foreach (var item in groupReceipt)
                                    {
                                        foundReceipt.Add(item.RealReceiptId);
                                    }
                                }
                       
                            }
                        }


                    }

                    //find missing receipt in the local machine
                    foreach (string cancelReceipt in cancelReceiptIds)
                    {
                        if (!foundReceipt.Exists(delegate(string r)
                                {
                                    return r == cancelReceipt;
                                }))
                        {
                            missingReceipt.Add(cancelReceipt);
                        }
                    }


                    //Insert new ReceiptId for reprint receipt
                    if (reprintReceiptId != null)
                    {
                        fileName = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

                        if (File.Exists(fileName))
                        {
                            //Read existing transactions from text file
                            FileStream fs = new FileStream(fileName, FileMode.Open);
                            IFormatter formatter = new BinaryFormatter();
                            report = (List<CAC15Report>)formatter.Deserialize(fs);
                            fs.Close();
                        }

                        PrintingInfo reprintReceipt = receipts.Find(delegate(PrintingInfo ri)
                                        {
                                            return ri.PrintingReceipt.ReceiptId == reprintReceiptId;
                                        }
                                    );
                        transactions = GetTransactions(reprintReceipt.PrintingReceipt, newReceiptId, false);
                        transactions.RealReceiptId = newReceiptId;

                        // DCR AUG 2021 แผนผ่อน. บันทึกข้อมูล ReceiptId ในกรณีที่เป็นแผนผ่อน
                        if (newGroupReceiptId != null && newGroupReceiptId.Length > 0)
                        {
                            transactions.InstallmentReceiptId = newGroupReceiptId;
                            transactions.RealReceiptId = newGroupReceiptId;

                        }

                        transactions.CancelActive = null;
                        transactions.RepayActive = "0";
                        transactions.Active = "0";
                        report.Add(transactions);
                        isSave = true;


                        //Save to text file
                        if (isSave)
                        {
                            IFormatter serializer = new BinaryFormatter();
                            using (Stream writer = new FileStream(fileName, FileMode.Create))
                            {
                                serializer.Serialize(writer, report);
                                writer.Close();
                            }
                        }
                    }


                    if (foundReceipt.Count > 0)
                    {
                        foreach (string todayPath in fileEntries)
                        {
                            if (receipts.Count > 0)
                            {
                                if (File.Exists(todayPath))
                                {
                                    //Read existing transactions from text fie
                                    FileStream fs = new FileStream(todayPath, FileMode.Open);
                                    IFormatter formatter = new BinaryFormatter();
                                    report = (List<CAC15Report>)formatter.Deserialize(fs);
                                    fs.Close();
                                }


                                //Set Active = '0' for cancel receipt
                                foreach (CAC15Report r in report)
                                {
                                    foreach (string id in foundReceipt)
                                    {
                                        if (r.RealReceiptId == id.Split('|')[0].ToString())
                                        {
                                            r.CancelActive = "0";
                                            r.ValidateFlag = "0";
                                            isSave = true;

                                            PrintingInfo pi = receipts.Find(delegate(PrintingInfo ri)
                                                        {
                                                            return ri.PrintingReceipt.ReceiptId == id.Split('|')[0].ToString();
                                                        }
                                                    );

                                            receipts.Remove(pi);
                                        }
                                    }
                                }


                                //Save to text file
                                if (isSave)
                                {
                                    IFormatter serializer = new BinaryFormatter();
                                    using (Stream writer = new FileStream(todayPath, FileMode.Create))
                                    {
                                        serializer.Serialize(writer, report);
                                        writer.Close();
                                    }
                                }
                            }
                        }
                    }


                    if (missingReceipt.Count > 0)
                    {
                        fileName = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

                        if (File.Exists(fileName))
                        {
                            //Read existing transactions from text file
                            FileStream fs = new FileStream(fileName, FileMode.Open);
                            IFormatter formatter = new BinaryFormatter();
                            report = (List<CAC15Report>)formatter.Deserialize(fs);
                            fs.Close();
                        }

                        foreach (string id in missingReceipt)
                        {
                            if (receipts.Count > 0)
                            {
                                PrintingInfo pi = receipts.Find(delegate(PrintingInfo ri)
                                            {
                                                return ri.PrintingReceipt.ReceiptId == id.Split('|')[0].ToString();
                                            }
                                        );


                                transactions = GetTransactions(pi.PrintingReceipt, id.Split('|')[1].ToString(), true);
                                transactions.Active = "0";
                                report.Add(transactions);
                                isSave = true;
                                receipts.Remove(pi);
                            }
                        }


                        //Save to text file
                        if (isSave)
                        {
                            IFormatter serializer = new BinaryFormatter();
                            using (Stream writer = new FileStream(fileName, FileMode.Create))
                            {
                                serializer.Serialize(writer, report);
                                writer.Close();
                            }
                        }
                    }
                }

                isSaveTextFile = true;
            }
            catch
            {
                isSaveTextFile = false;
                throw;
            }
        }

        private CAC15Report GetTransactions(PrintingReceipt receipt, string receiptId, bool isMinus)
        {
            try
            {
                CAC15Report r = new CAC15Report();

                r.CaId = receipt.CustomerId;
                r.CaName = receipt.CustomerName;
                r.DebtName = receipt.PrintingInvoices[0].DebtType;
                r.RealReceiptId = receipt.ReceiptId;
                r.ReceiptId = receiptId;

                if (!isMinus)
                {
                    r.Amount = receipt.PrintingInvoices[0].ToPayGAmount;
                    r.AdjAmount = receipt.AdjChangeAmount;
                    r.GAmount = receipt.PrintingInvoices[0].ToPayGAmount + receipt.AdjChangeAmount;
                    r.PaidCashAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cash.Id);
                    r.PaidChqAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cheque.Id);
                    r.PaidDepositAmount = GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Deposit.Id);
                }
                else
                {
                    r.PaidCashAmount = -GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cash.Id);
                    r.PaidChqAmount = -GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cheque.Id);
                    r.PaidDepositAmount = -GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Deposit.Id);
                    r.Amount = -receipt.PrintingInvoices[0].ToPayGAmount;

                    decimal? adjAmount = (GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cash.Id))
                                          + (GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Cheque.Id))
                                          + (GetPaymentAmount(receipt.PrintingInvoices[0], CodeNames.PaymentType.Deposit.Id));
                    if (adjAmount != 0)
                    {
                        adjAmount = adjAmount - receipt.PrintingInvoices[0].ToPayGAmount;
                    }

                    r.AdjAmount = -adjAmount;
                    r.GAmount = -(receipt.PrintingInvoices[0].ToPayGAmount + adjAmount);
                }

                r.PaymentDt = receipt.PaymentDate;
                r.ExtReceiptDt = null;
                r.CashierId = receipt.CashierId;
                r.CashierName = receipt.CashierName;
                r.BranchPosID = receipt.TerminalCode;
                r.CancelActive = "0";
                r.ValidateFlag = "0";

                return r;
            }
            catch
            {
                isSaveTextFile = false;
                throw;
            }
        }


        /// <summary>
        /// DCR : รวมใบเสร็จแผนผ่อน  
        /// </summary>
        /// <param name="cancelReceiptIds"></param>
        /// <param name="cancelledInfo"></param>
        /// <param name="newGroupReceiptId"> รองรับการ</param>
        private void SetCancelActive(List<string> cancelReceiptIds, CancelledInfo cancelledInfo, string newGroupReceiptId)
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string fileName = string.Format("{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), "*");


            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            string[] fileEntries = Directory.GetFiles(transactionPath, fileName);
            CAC15Report transactions = new CAC15Report();
            List<CAC15Report> report = new List<CAC15Report>();
            bool isSave = false;


            foreach (string cancelReceipt in cancelReceiptIds)
            {
                foreach (string todayPath in fileEntries)
                {
                    if (File.Exists(todayPath))
                    {
                        //Read existing transactions from text file
                        FileStream fs = new FileStream(todayPath, FileMode.Open);
                        IFormatter formatter = new BinaryFormatter();
                        report = (List<CAC15Report>)formatter.Deserialize(fs);
                        fs.Close();
                    }


                    //Set CancelActive for cancel receipt
                    foreach (CAC15Report r in report)
                    {
                        if (  r.RealReceiptId == cancelReceipt.Split('|')[0].ToString()    && r.ValidateFlag == "0")
                        {
                            if (r.GAmount > 0)
                            {
                                r.Active = "0";
                            }
                            else
                            {
                                r.Active = "1";
                            }
                            r.CancelActive = "1";
                            r.ValidateFlag = "1";
                            isSave = true;
                        }
                    }


                    //Save to text file
                    if (isSave)
                    {
                        IFormatter serializer = new BinaryFormatter();
                        using (Stream writer = new FileStream(todayPath, FileMode.Create))
                        {
                            serializer.Serialize(writer, report);
                            writer.Close();
                        }
                    }
                }
            }



            //Set CancelActive for reprint receipt
            if (cancelledInfo.PrintingInfo != null)
            {
                PrintingInfo pinfo = cancelledInfo.PrintingInfo;

                fileName = string.Format(transactionPath + "\\{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), Session.Terminal.Code.ToString().Split('-')[1]);

                if (File.Exists(fileName))
                {
                    //Read existing transactions from text file
                    FileStream fs = new FileStream(fileName, FileMode.Open);
                    IFormatter formatter = new BinaryFormatter();
                    report = (List<CAC15Report>)formatter.Deserialize(fs);
                    fs.Close();
                }

                //Set CancelActive for cancel receipt
                foreach (CAC15Report r in report)
                {
                    if (   (r.RealReceiptId == pinfo.PrintingReceipt.ReceiptId    ||
                            r.RealReceiptId == newGroupReceiptId ) // Support case รวมใบเสร็จแผนผ่อน.
                        && r.ValidateFlag == "0")
                    {
                        transactions = GetTransactions(pinfo.PrintingReceipt, pinfo.PrintingReceipt.ReceiptId, false);

                        r.CaId = transactions.CaId;
                        r.CaName = transactions.CaName;
                        r.DebtName = transactions.DebtName;
                        r.RealReceiptId = transactions.RealReceiptId;
                        r.ReceiptId = transactions.ReceiptId;
                        r.Amount = transactions.Amount;
                        r.AdjAmount = transactions.AdjAmount;
                        r.GAmount = transactions.GAmount;
                        r.PaidCashAmount = transactions.PaidCashAmount;
                        r.PaidChqAmount = transactions.PaidChqAmount;
                        r.PaidDepositAmount = transactions.PaidDepositAmount;
                        r.PaymentDt = transactions.PaymentDt;
                        r.CashierId = transactions.CashierId;
                        r.CashierName = transactions.CashierName;
                        r.BranchPosID = transactions.BranchPosID;
                        r.Active = "1";
                        r.RepayActive = "1";
                        r.ValidateFlag = "1";
                        isSave = true;
                    }
                }


                //Save to text file
                if (isSave)
                {
                    IFormatter serializer = new BinaryFormatter();
                    using (Stream writer = new FileStream(fileName, FileMode.Create))
                    {
                        serializer.Serialize(writer, report);
                        writer.Close();
                    }
                }
            }
        }

        /// <summary>
        /// DCR : รวมใบเสร็จแผนผ่อน
        /// </summary>
        /// <param name="reprintReceipt"></param>
        /// <param name="newReceipt"></param>
        private void MoveGroupReceiptToNewGroup(string reprintReceipt, string newReceipt) 
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string fileName = string.Format("{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), "*");
            string _newReceipt;
            DateTime? _paymentDt = null;
            bool _foundNewReceipt = false; 

            _newReceipt = newReceipt.Split('|')[0].ToString();

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            string[] fileEntries = Directory.GetFiles(transactionPath, fileName);
            CAC15Report transactions = new CAC15Report();
            List<CAC15Report> report = new List<CAC15Report>();
            bool isSave = false;


            // Get Payment Date From New RecriptId. 
            foreach (string todayPath in fileEntries)
            {
                if (File.Exists(todayPath))
                {
                    //Read existing transactions from text file
                    FileStream fs = new FileStream(todayPath, FileMode.Open);
                    IFormatter formatter = new BinaryFormatter();
                    report = (List<CAC15Report>)formatter.Deserialize(fs);
                    fs.Close();
                }

                foreach (CAC15Report r in report)
                {
                    if (r.ReceiptId == _newReceipt)
                    {
                      // Get payment date. 
                        _paymentDt = r.PaymentDt;
                        break;
                    }
                }


                // เมื่อได้ PaymentDate จากใบเสร็จที่ทำการ Repay ให้ออกจาก Loop และนำค่าไป update ที่ Transaction ใน text file ต่อไป
                if (_foundNewReceipt)
                    break; 

            }


            // Update New ReceiptId and PaymentDt to Old receipt on group. 
            foreach (string todayPath in fileEntries)
            {
                if (File.Exists(todayPath))
                {
                    //Read existing transactions from text file
                    FileStream fs = new FileStream(todayPath, FileMode.Open);
                    IFormatter formatter = new BinaryFormatter();
                    report = (List<CAC15Report>)formatter.Deserialize(fs);
                    fs.Close();
                }


                //Move receipt from old Group receipt to new Receipt.
                foreach (CAC15Report r in report)
                {
                    if (r.ReceiptId == reprintReceipt)
                    {
                        r.ReceiptId = _newReceipt;
                        r.PaymentDt   = _paymentDt;
                         isSave = true;
                    }
                }


                //Save to text file
                if (isSave)
                {
                    IFormatter serializer = new BinaryFormatter();
                    using (Stream writer = new FileStream(todayPath, FileMode.Create))
                    {
                        serializer.Serialize(writer, report);
                        writer.Close();
                    }

                    isSave = false; 
                }
          }

            
        }

        private void RollBackTransactionFile(List<string> cancelReceiptIds)
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            string fileName = string.Format("{0}-{1}-{2}.txt", Session.Terminal.Code.ToString().Split('-')[0], Session.BpmDateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH")), "*");

            if (!Directory.Exists(transactionPath))
            {
                Directory.CreateDirectory(transactionPath);
            }

            string[] fileEntries = Directory.GetFiles(transactionPath, fileName);
            CAC15Report transactions = new CAC15Report();
            List<CAC15Report> report = new List<CAC15Report>();
            bool isSave = true;

            if (fileEntries.Length > 0)
            {
                //find existing receipt in the local machine
                foreach (string cancelReceipt in cancelReceiptIds)
                {
                    foreach (string todayPath in fileEntries)
                    {
                        if (File.Exists(todayPath))
                        {
                            //Read existing transactions from text fie
                            FileStream fs = new FileStream(todayPath, FileMode.Open);
                            IFormatter formatter = new BinaryFormatter();
                            report = (List<CAC15Report>)formatter.Deserialize(fs);
                            fs.Close();
                        }

                        //Set Active = '1' for rollback cancel receipt
                        foreach (CAC15Report r in report)
                        {
                            if (r.RealReceiptId == cancelReceipt.Split('|')[0].ToString() && r.Amount > 0)
                            {
                                r.Active = "1";
                            }
                        }

                        report.RemoveAll(delegate(CAC15Report c)
                                             {
                                                 return c.RealReceiptId == cancelReceipt.Split('|')[0].ToString() && c.Amount < 0;
                                             }
                            );


                        //Save to text file
                        if (isSave)
                        {
                            IFormatter serializer = new BinaryFormatter();
                            using (Stream writer = new FileStream(todayPath, FileMode.Create))
                            {
                                serializer.Serialize(writer, report);
                                writer.Close();
                            }
                        }
                    }
                }
            }
        }

        private decimal? GetPaymentAmount(PrintingInvoice inv, string ptId)
        {
            List<InvoicePaymentMethod> pmx = inv.PaymentMethods;
            List<InvoicePaymentMethod> chqPms = pmx.FindAll(delegate(InvoicePaymentMethod p)
                {
                    return p.PtId == ptId && p.InvoiceUiRefId == inv.UiRefId;
                }
            );

            decimal? amount = 0;
            foreach (InvoicePaymentMethod ipm in chqPms)
            {
                amount += ipm.Amount;
            }


            return amount;
        }

        internal TrayMoneyInfo GetMoneyInTray(string workId)
        {
            return _billingService.GetMoneyInTray(workId);
        }

        [EventSubscription(PEA.BPM.Infrastructure.Interface.Constants.EventTopicNames.EnablePOSSaveButton, Thread = ThreadOption.UserInterface)]
        public void EnablePOSSaveButtonHandler(object sender, EventArgs<bool> e)
        {
            View.EnableSaveButton(e.Data);
        }

        internal bool GetQRpaymentForRefund(List<string> paymentIds) {
            bool result = true;
            
            List<string> qrRefRefund = new List<string>();
            qrRefRefund = _paidBillService.SearchPaymentTypeQR(paymentIds);

            if (qrRefRefund.Count > 0)
            {
                try
                {
                    foreach (string item in qrRefRefund)
                    {
                        var refArr =  item.Split('|').ToArray();
                        if (refArr.Count() == 2 )
                        {
                            // Call Refund. 
                            QRPaymentInfo qrInfo = new QRPaymentInfo();
                            qrInfo.ref1 = refArr[0];
                            qrInfo.ref2 = refArr[1];

                            QRRefundResponse qrResponse;
                            qrResponse = _billingService.QRPaymentRefund(qrInfo);
                            if (qrResponse.Status == false || qrResponse.Message != "Success" || qrResponse.Data.RefundStatus == false) //&& qrResponse.Data.PayStatus == false
                            {
                                    MessageBox.Show(qrResponse.Message, "ยกเลิกการชำระเงิน", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    return false;
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    throw;
                }

            }
            else {
                result = true;
            } 


            return result; 
        }

        internal bool ICSCancelReceipt(List<string> _receiptCancelICS) {
            // DCR 68-001.
            // Call service call. 
            // service class call SG
            // SG call internal service pool. 
            try
            {
                _paidBillService.ICSCancelReceipt(_receiptCancelICS);
            }
            catch (Exception)
            {
            }
            
            return true; 
        }

        #region +++ Cash Management +++

        [EventPublication(PEA.BPM.PaymentCollectionModule.Interface.Constants.EventTopicNames.CashierOpenWork, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> CashierOpenWorkHandler;
        public void OnCashierOpenWork(string tmp)
        {
            if (CashierOpenWorkHandler != null)
                CashierOpenWorkHandler(this, new EventArgs<string>(tmp));
        }

        [EventPublication(PEA.BPM.PaymentCollectionModule.Interface.Constants.EventTopicNames.ClosePaymentView, PublicationScope.Global)]
        public event EventHandler<EventArgs> ClosePaymentView;
        public void OnClosePaymentView()
        {
            if (ClosePaymentView != null)
                ClosePaymentView(this, new EventArgs());
        }

        #endregion
    }
}

