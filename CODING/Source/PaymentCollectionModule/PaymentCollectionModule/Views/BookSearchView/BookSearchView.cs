//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class BookSearchView : UserControl, IBookSearchView
    {
        public BookSearchView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BookSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }


        public void EnablePOSPanel(bool enable)
        {
            if (!enable)
            {
                searchPanel.Enabled = false;
                panel2.Enabled = false;
            }
            else
            {
                searchPanel.Enabled = true;
                panel2.Enabled = true;
                bookIdMaskedTextBox.Focus();
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            if (Session.IsNetworkConnectionAvailable)
            {
                searchPanel.Enabled = true;
                panel2.Enabled = true;
                bookIdMaskedTextBox.Focus();
            }
            else
            {
                searchPanel.Enabled = false;
                panel2.Enabled = false;
            }

            _presenter.OnViewReady();
        }

        #region +++ Command Handler +++

        private void searchByIdButton_Click(object sender, EventArgs e)
        {
            SearchByAgency();
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByAgency();
            }
        }

        private void clearSearchByIdButton_Click(object sender, EventArgs e)
        {
            bookIdMaskedTextBox.Text = "";
            caIdMaskedTextBox.Text = "";
            nameMaskedTextBox.Text = "";
        }

        private void listAllBookLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            AgencySearchParam param = new AgencySearchParam();
            param.BranchId = Session.Branch.Id;
            _presenter.OnBillSearchedByAgent(param);
        }

        private void addAdvPaymentButton_Click(object sender, EventArgs e)
        {
            _presenter.OnAgAdvPaymentAdd();
        }

        #endregion

        #region +++ Custom Function +++

        private void SearchByAgency()
        {            
            string billBookId = StringConvert.ToString(bookIdMaskedTextBox.Text);
            string agentId = StringConvert.ToString(caIdMaskedTextBox.Text);
            string agentName = StringConvert.ToString(nameMaskedTextBox.Text);

            if (billBookId==null && agentId==null && agentName==null)
            {
                MessageBox.Show("กรุณาใส่เลขที่สมุดจ่ายบิล หรือ รหัสประจำตัว, ชื่อ-นามสกุล", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else if (billBookId!=null && billBookId.Length != 9)
            {
                MessageBox.Show("กรุณาใส่เลขที่สมุดจ่ายบิลให้ครบ 9 หลัก", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (billBookId != null)
            {
                _presenter.OnBillSearchedByBillBookId(Session.Branch.Id + billBookId);
            }
            else
            {
                if (agentId != null)
                    if (agentId.Length != 12)
                        agentId = agentId.PadLeft(12, '0');

                AgencySearchParam param = new AgencySearchParam();
                param.AgencyId = agentId;
                param.AgencyName = agentName;
                param.BranchId = Session.Branch.Id;
                _presenter.OnBillSearchedByAgent(param);
            }
        }

        #endregion

        private void customerIdMaskedTextBox_Enter(object sender, EventArgs e)
        {
            bookIdMaskedTextBox.SelectAll();
        }

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }

    }
}

