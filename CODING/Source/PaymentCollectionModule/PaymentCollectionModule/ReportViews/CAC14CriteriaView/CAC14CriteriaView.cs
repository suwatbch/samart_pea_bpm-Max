//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool.Control;
using System.Drawing;

namespace PEA.BPM.PaymentCollectionModule
{
    [SmartPart]
    public partial class CAC14CriteriaView : UserControl, ICAC14CriteriaView
    {
        public CAC14CriteriaView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CAC14CriteriaViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            billBookIdMaskedTextBox.Focus();
        }

        private void displayReportButton_Click(object sender, EventArgs e)
        {
            displayReport();
        }

        private void displayReport()
        {
            if (billBookIdMaskedTextBox.Text == "")
            {
                MessageBox.Show("กรุณาใส่เลขที่ มท.", "ข้อความเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            CAC14Param param = new CAC14Param();
            param.GroupInvoiceNo = billBookIdMaskedTextBox.Text.Trim();
            param.Report = ReportName.CAC14;

            _presenter.OnShowReport(param);
        }

        private void billBookIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                displayReport();
            }
        }

    }
}

