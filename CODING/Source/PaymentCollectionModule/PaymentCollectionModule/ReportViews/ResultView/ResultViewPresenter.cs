//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentCollectionModule.Interface.Constants;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.PaymentCollectionModule.Interface.Services;
using Microsoft.Reporting.WinForms;
using System.Collections.Generic;
using System.Globalization;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using System.Linq;
using System.Windows.Forms;
using PEA.BPM.Infrastructure.Interface.Services;
using PEA.BPM.Infrastructure.Library.UI;
using PEA.BPM.PaymentCollectionModule.ReportViews.ResultViewCenter;

namespace PEA.BPM.PaymentCollectionModule
{
    public class ResultViewPresenter : Presenter<IResultView>
    {
        private IReportService _reportService;
        private ILayoutService _layoutService;
        private WindowSmartPartInfo _modalProperty;
        private IReportContainerView _sView;

        [InjectionConstructor]
        public ResultViewPresenter([ServiceDependency] IReportService reportService, ILayoutService layoutService)
        {
            _layoutService = layoutService;
            _reportService = reportService;

            _modalProperty = new WindowSmartPartInfo();
            _modalProperty.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
            _modalProperty.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.FixedDialog);
            _modalProperty.MaximizeBox = false;
            _modalProperty.MinimizeBox = false;
            _modalProperty.Modal = true;
        }

        [EventSubscription(EventTopicNames.ShowReportClick, Thread = ThreadOption.UserInterface)]
        public void ShowReportClickHandler(object sender, EventArgs<ReportParam> e)
        {
            switch (e.Data.Report)
            {
                case ReportName.CAC01_1:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC01Report> reportCAC01Data = _reportService.GetReportCAC01(param);

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC01Report";
                        dataSource.Value = reportCAC01Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.: " + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัส พบช.คุมใบเสร็จ: " + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        //if (reportCAC01Data.Count > 0)
                        //{
                        //    View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC01_1Report.rdlc", dataSource, rParam);

                        //}
                        //else {
                        //    MessageBox.Show("ไม่ข้อมูล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        
                        //}

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC01_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC01_2:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC01Report> reportCAC01Data = _reportService.GetReportCAC01(param);

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC01Report";
                        dataSource.Value = reportCAC01Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.: " + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัส พบช.คุมใบเสร็จ: " + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC01_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC03_1:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC03Report> reportCAC03Data = _reportService.GetReportCAC03(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC03Report";
                        dataSource.Value = reportCAC03Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: รหัสธนาคาร";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC03_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC03_2:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC03Report> reportCAC03Data = _reportService.GetReportCAC03(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC03Report";
                        dataSource.Value = reportCAC03Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: เวลาเช็ค";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC03_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC03_3:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC03Report> reportCAC03Data = _reportService.GetReportCAC03(param);

                        for (int i = 0; i < reportCAC03Data.Count; i++)
                        {
                            if (i > 0 && reportCAC03Data[i].BankKey == reportCAC03Data[i - 1].BankKey
                                    && reportCAC03Data[i].ChqAccNo == reportCAC03Data[i - 1].ChqAccNo
                                    && reportCAC03Data[i].ChqNo == reportCAC03Data[i - 1].ChqNo
                                    && reportCAC03Data[i].ChqDt == reportCAC03Data[i - 1].ChqDt
                                    && reportCAC03Data[i].PaymentDt == reportCAC03Data[i - 1].PaymentDt)
                            {
                                reportCAC03Data[i].ClearingAccNo = null;
                                reportCAC03Data[i].ChqType = null;
                                reportCAC03Data[i].ChequeAmount = 0;
                                reportCAC03Data[i].ChangeAmount = 0;
                                reportCAC03Data[i].FeeAmount = 0;
                                reportCAC03Data[i].Quantity = 0;
                                reportCAC03Data[i].IsDuplicate = true;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC03Report";
                        dataSource.Value = reportCAC03Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: รหัสธนาคาร";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC03_3Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC03_4:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC03Report> reportCAC03Data = _reportService.GetReportCAC03(param);

                        for (int i = 0; i < reportCAC03Data.Count; i++)
                        {
                            if (i > 0 && reportCAC03Data[i].BankKey == reportCAC03Data[i - 1].BankKey
                                    && reportCAC03Data[i].ChqAccNo == reportCAC03Data[i - 1].ChqAccNo
                                    && reportCAC03Data[i].ChqNo == reportCAC03Data[i - 1].ChqNo
                                    && reportCAC03Data[i].ChqDt == reportCAC03Data[i - 1].ChqDt
                                    && reportCAC03Data[i].PaymentDt == reportCAC03Data[i - 1].PaymentDt)
                            {
                                reportCAC03Data[i].ClearingAccNo = null;
                                reportCAC03Data[i].ChqType = null;
                                reportCAC03Data[i].ChequeAmount = 0;
                                reportCAC03Data[i].ChangeAmount = 0;
                                reportCAC03Data[i].FeeAmount = 0;
                                reportCAC03Data[i].Quantity = 0;
                                reportCAC03Data[i].IsDuplicate = true;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC03Report";
                        dataSource.Value = reportCAC03Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: เวลาเช็ค";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC03_4Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC04_1:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC04Report> reportCAC04Data = _reportService.GetReportCAC04(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC04Report";
                        dataSource.Value = reportCAC04Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: รหัสธนาคาร";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC04_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC04_2:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC04Report> reportCAC04Data = _reportService.GetReportCAC04(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC04Report";
                        dataSource.Value = reportCAC04Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: เวลารับใบนำฝาก";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC04_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC04_3:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC04Report> reportCAC04Data = _reportService.GetReportCAC04(param);

                        for (int i = 0; i < reportCAC04Data.Count; i++)
                        {
                            if (i > 0 && reportCAC04Data[i].BankKey == reportCAC04Data[i - 1].BankKey
                                    && reportCAC04Data[i].TranfAccNo == reportCAC04Data[i - 1].TranfAccNo
                                    && reportCAC04Data[i].TranfDate == reportCAC04Data[i - 1].TranfDate
                                    && reportCAC04Data[i].PaymentDt == reportCAC04Data[i - 1].PaymentDt)
                            {
                                reportCAC04Data[i].Amount = 0;
                                reportCAC04Data[i].FeeAmount = 0;
                                reportCAC04Data[i].Quantity = 0;
                                reportCAC04Data[i].IsDuplicate = true;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC04Report";
                        dataSource.Value = reportCAC04Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: รหัสธนาคาร";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC04_3Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC04_4:

                    try
                    {
                        CAC01Param param = (CAC01Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC04Report> reportCAC04Data = _reportService.GetReportCAC04(param);

                        for (int i = 0; i < reportCAC04Data.Count; i++)
                        {
                            if (i > 0 && reportCAC04Data[i].BankKey == reportCAC04Data[i - 1].BankKey
                                    && reportCAC04Data[i].TranfAccNo == reportCAC04Data[i - 1].TranfAccNo
                                    && reportCAC04Data[i].TranfDate == reportCAC04Data[i - 1].TranfDate
                                    && reportCAC04Data[i].PaymentDt == reportCAC04Data[i - 1].PaymentDt)
                            {
                                reportCAC04Data[i].Amount = 0;
                                reportCAC04Data[i].FeeAmount = 0;
                                reportCAC04Data[i].Quantity = 0;
                                reportCAC04Data[i].IsDuplicate = true;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC04Report";
                        dataSource.Value = reportCAC04Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        if (param.FromTime != null && param.ToTime != null)
                        {
                            strSearchBy += " / เวลาที่รับชำระ:" + param.FromTime.Substring(0, 5) + "-" + param.ToTime.Substring(0, 5);
                        }
                        if (param.BankName != null)
                        {
                            strSearchBy += " / ธนาคาร:" + param.BankName;
                        }
                        strSearchBy += " / เรียงลำดับ: เวลารับใบนำฝาก";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC04_4Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC05_1:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC05Report> reportCAC05Data = _reportService.GetReportCAC05(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC05Report";
                        dataSource.Value = reportCAC05Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC05_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC05_2:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC05Report> reportCAC05Data = _reportService.GetReportCAC05(param);

                        for (int i = 0; i < reportCAC05Data.Count; i++)
                        {
                            reportCAC05Data[i].NumOfTrans = reportCAC05Data.FindAll(delegate(CAC05Report r)
                                                            { return r.PaymentId == reportCAC05Data[i].PaymentId; }).Count;

                            if (i < reportCAC05Data.Count - 1 && reportCAC05Data[i].PaymentId == reportCAC05Data[i + 1].PaymentId)
                            {
                                reportCAC05Data[i].FeeAmount = null;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC05Report";
                        dataSource.Value = reportCAC05Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }

                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC05_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC06_1:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC06Report> reportCAC06Data = _reportService.GetReportCAC06(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC06Report";
                        dataSource.Value = reportCAC06Data;

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC06_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC06_2:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        ReportParameter[] rParam = new ReportParameter[3];
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        strSearchBy += " / เรียงลำดับ: รหัสการไฟฟ้า";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC06Report> reportCAC06Data = _reportService.GetReportCAC06(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC06Report";
                        dataSource.Value = reportCAC06Data;

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC06_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC06_3:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        ReportParameter[] rParam = new ReportParameter[3];
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        strSearchBy += " / เรียงลำดับ: ผู้รับเงิน";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC06Report> reportCAC06Data = _reportService.GetReportCAC06(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC06Report";
                        dataSource.Value = reportCAC06Data;

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC06_3Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC07_1:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        ReportParameter[] rParam = new ReportParameter[3];
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        strSearchBy += " / เรียงลำดับ: รหัสการไฟฟ้าที่รับแทน";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC06Report> reportCAC07Data = _reportService.GetReportCAC07(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC06Report";
                        dataSource.Value = reportCAC07Data;

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC07_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;


                case ReportName.CAC07_2:

                    try
                    {
                        CAC06Param param = (CAC06Param)e.Data;
                        ReportParameter[] rParam = new ReportParameter[3];
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        strSearchBy += " / เรียงลำดับ: พบช.คุมใบเสร็จ";

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC06Report> reportCAC07Data = _reportService.GetReportCAC07(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC06Report";
                        dataSource.Value = reportCAC07Data;

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC07_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC09_1:

                    try
                    {
                        CAC09Param param = (CAC09Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC09Report> rp = _reportService.GetReportCAC09(param);
                        List<CAC09Report> reportCAC09Data = new List<CAC09Report>();

                        int numericValue;
                        int temp = 15;


                        for (int i = 0; i < rp.Count; i++)
                        {
                            if (i == 0)
                            {
                                rp[i].ReceiptId = rp[i].ReceiptId + " - " + rp[i].ReceiptId;
                                reportCAC09Data.Add(rp[i]);
                            }
                            else
                            {

                                temp = 15;

                                if (!(int.TryParse(rp[i].ReceiptId.Substring(1, 1), out numericValue)))
                                {
                                    temp = 14;
                                    var rep3 = Convert.ToInt64(rp[i].ReceiptId.Substring(rp[i].ReceiptId.Length - temp, temp));
                                    var rep2 = Convert.ToInt64(rp[i - 1].ReceiptId.Substring(rp[i - 1].ReceiptId.Length - temp, temp));
                                }



                                if ((rp[i].ReceiptId.Substring(0, 1) == rp[i - 1].ReceiptId.Substring(0, 1)) &&
                                    (Convert.ToInt64(rp[i].ReceiptId.Substring(rp[i].ReceiptId.Length - temp, temp)) - Convert.ToInt64(rp[i - 1].ReceiptId.Substring(rp[i - 1].ReceiptId.Length - temp, temp)) == 1) &&
                                    (rp[i].Type == rp[i - 1].Type))
                                {
                                    //reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId = reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Replace("- " + reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Substring(reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Length - (temp + 1), (temp + 1)), "- " + rp[i].ReceiptId);
                                    reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId = reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Replace("- " + reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Substring(reportCAC09Data[reportCAC09Data.Count - 1].ReceiptId.Length - 16, 16), "- " + rp[i].ReceiptId);
                                    reportCAC09Data[reportCAC09Data.Count - 1].Quantity += rp[i].Quantity;
                                    reportCAC09Data[reportCAC09Data.Count - 1].ElectricBaseAmount += rp[i].ElectricBaseAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].FtAmount += rp[i].FtAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].TotalVatAmount += rp[i].TotalVatAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].TotalGAmount += rp[i].TotalGAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].RPGAmount += rp[i].RPGAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].VatAmount += rp[i].VatAmount;
                                    reportCAC09Data[reportCAC09Data.Count - 1].GAmount += rp[i].GAmount;
                                }
                                else
                                {
                                    rp[i].ReceiptId = rp[i].ReceiptId + " - " + rp[i].ReceiptId;
                                    reportCAC09Data.Add(rp[i]);
                                }
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC09Report";
                        dataSource.Value = reportCAC09Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.PosId != null)
                        {
                            strSearchBy += " / รหัสเครื่องรับเงิน:" + param.PosId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC09_1Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC09_2:

                    try
                    {
                        CAC09Param param = (CAC09Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC09Report> reportCAC09Data = _reportService.GetReportCAC09(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC09Report";
                        dataSource.Value = reportCAC09Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.PosId != null)
                        {
                            strSearchBy += " / รหัสเครื่องรับเงิน:" + param.PosId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC09_2Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC11:

                    try
                    {
                        CAC11Param param = (CAC11Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC11Report> reportCAC11Data = _reportService.GetReportCAC11(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC11Report";
                        dataSource.Value = reportCAC11Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.PosId != null)
                        {
                            strSearchBy += " / รหัสเครื่องรับเงิน:" + param.PosId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC11Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC12:

                    try
                    {
                        CAC09Param param = (CAC09Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC12Report> reportCAC12Data = _reportService.GetReportCAC12(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC12Report";
                        dataSource.Value = reportCAC12Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC12Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;


                case ReportName.CAC13:

                    try
                    {
                        CAC11Param param = (CAC11Param)e.Data;
                        List<CAC13Report> reportCAC13Data = _reportService.GetReportCAC13(param);

                        for (int i = 0; i < reportCAC13Data.Count; i++)
                        {
                            if (reportCAC13Data[i].DtName == "1")
                            {
                                reportCAC13Data[i].Quantity1 = reportCAC13Data[i].Quantity;
                                reportCAC13Data[i].BaseAmount1 = reportCAC13Data[i].BaseAmount;
                                reportCAC13Data[i].FtAmount1 = reportCAC13Data[i].FtAmount;
                                reportCAC13Data[i].VatAmount1 = reportCAC13Data[i].VatAmount;
                                reportCAC13Data[i].GAmount1 = reportCAC13Data[i].GAmount;
                            }
                            else if (reportCAC13Data[i].DtName == "2")
                            {
                                reportCAC13Data[i].Quantity2 = reportCAC13Data[i].Quantity;
                                reportCAC13Data[i].BaseAmount2 = reportCAC13Data[i].BaseAmount;
                                reportCAC13Data[i].FtAmount2 = reportCAC13Data[i].FtAmount;
                                reportCAC13Data[i].VatAmount2 = reportCAC13Data[i].VatAmount;
                                reportCAC13Data[i].GAmount2 = reportCAC13Data[i].GAmount;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC13Report";
                        dataSource.Value = reportCAC13Data;



                        ReportParameter[] rParam = new ReportParameter[3];
                        DateTime transDate = ((CAC11Param)e.Data).TransFromDate.Value;

                        rParam[0] = new ReportParameter("parTransDate", transDate.ToString("MMMM yyyy", new CultureInfo("th-TH")));

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        strSearchBy += " / เดือนที่รับชำระ:" + transDate.ToString("MM/yyyy", new CultureInfo("th-TH"));

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC13Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC14:

                    try
                    {
                        CAC14Param param = (CAC14Param)e.Data;
                        List<CAC14Report> reportCAC14Data = _reportService.GetReportCAC14(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC14Report";
                        dataSource.Value = reportCAC14Data;

                        ReportParameter[] rParam = new ReportParameter[4];
                        rParam[0] = new ReportParameter("parCashierId", reportCAC14Data[0].CashierId);
                        rParam[1] = new ReportParameter("parPaymentDt", reportCAC14Data[0].PaymentDt.Value.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        rParam[2] = new ReportParameter("parReceiptId", reportCAC14Data[0].ReceiptId);

                        Branch branch = CodeTable.Instant.ListBranches(Session.Branch.Id);
                        rParam[3] = new ReportParameter("parBranchDetail", branch.BranchName);

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC14Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;


                case ReportName.CAC15:

                    try
                    {
                        CAC15Param param = (CAC15Param)e.Data;
                        DateTime transDate = param.TransDate;

                        string strSearchBy = "";
                        if (param.BranchId != null)
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        if (param.CaId != null)
                            strSearchBy += " / หมายเลขผู้ใช้ไฟ:" + param.CaId;
                        strSearchBy += GetPaymentDate(transDate)[1];
                        //strSearchBy += " / เรียงลำดับ: รหัสการไฟฟ้าที่รับแทน";

                        ReportParameter[] rParam = new ReportParameter[4];
                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(transDate)[0]);
                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        List<CAC15Report> reportCAC15Data = GetCAC15DataForRpt(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC15Report";
                        dataSource.Value = reportCAC15Data;

                        rParam[3] = new ReportParameter("parPosId", GetPosIdFromCAC15Report(reportCAC15Data));

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC15Report.rdlc", dataSource, rParam);

                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;


                //TODO: INSTALLMENT CASE
                //case ReportName.CAC16:

                //    try
                //    {
                //        CAC16Param param = (CAC16Param)e.Data;
                //        DateTime fromDate = param.TransFromDate.Value;
                //        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                //        DateTime toDate = param.TransToDate.Value;

                //        List<CAC16Report> reportCAC16Data = _reportService.GetReportCAC16(param);
                //        ReportDataSource dataSource = new ReportDataSource();
                //        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC16Report";
                //        dataSource.Value = reportCAC16Data;

                //        ReportParameter[] rParam = new ReportParameter[3];

                //        string strSearchBy = "";
                //        if (param.BranchId != null)
                //        {
                //            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                //        }
                //        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                //        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                //        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                //        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                //        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                //        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC16Report.rdlc", dataSource, rParam);
                //    }
                //    catch (Exception ex)
                //    {
                //        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                //    }

                //    break;
                case ReportName.CAC18: // DCR QR Payment 2023-03 

                    try
                    {
                        CAC18Param param = (CAC18Param)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<CAC18Report> reportCAC18Data = _reportService.GetReportCAC18(param);
                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC18Report";
                        dataSource.Value = reportCAC18Data;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                        }
                        if (param.ControllerId != null)
                        {
                            strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                        rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC18Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;

                case ReportName.CAC19: // DCR QR Payment 2023-03 

                    try
                    {


                        // Get data from report service class.
                        CAC19Param param = (CAC19Param)e.Data;
                        CAC19DisplayReport(param);


                    }
                    catch (Exception ex)
                    {
                        ClientExceptionController.ShowExceptionDialog(EErrorInModule.POS, ex);
                    }

                    break;
                default:
                    break;
            }
        }

        private void CAC19DisplayReport(CAC19Param param)
        {
            try
            {
                string qrNotCompleteText = "รายการที่แตกต่างกับรายงานธนาคาร";
                string qrCompleteText = "รายการที่ตรงกับรายงานธนาคาร";

                DateTime fromDate = param.TransFromDate.Value;
                param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                DateTime toDate = param.TransToDate.Value;

                // Convert data string to object. 
                List<CAC19QRPaymentReport> bankQRPayments = new List<CAC19QRPaymentReport>();
                bankQRPayments = param.BankQRPayment;

                // Result value before get data from Service.
                param.BankQRPayment = new List<CAC19QRPaymentReport>();
                List<CAC19Report> reportCAC19Data = _reportService.GetReportCAC19(param);

                // Group ข้อมูล bpm payment QR
                var bpmPaymentGroup = (from p in reportCAC19Data
                                       select new
                                       {
                                           Ref1 = p.QRRef1.Trim(),
                                           Ref2 = p.QRRef2.Trim(),
                                           GAmount = p.GAmount
                                       }).ToList();


                // Group ข้อมูล bank payment QR
                var bankPaymentGroup = (from p in bankQRPayments
                                        select new
                                        {
                                            Ref1 = p.QRRef1Bank.Trim(),
                                            Ref2 = p.QRRef2Bank.Trim(),
                                            GAmount = p.GAmountBank
                                        }).ToList();

                // BPM QR Join Bank QR
                var bpmJoinBankQR = (from b in reportCAC19Data
                                     join p in bankPaymentGroup
                                     on new { Ref1 = b.QRRef1.Trim(), Ref2 = b.QRRef2.Trim(), GAmount = b.GAmount }
                                     equals new { Ref1 = p.Ref1.Trim(), Ref2 = p.Ref2.Trim(), GAmount = p.GAmount }
                                     select new
                                     {
                                         Ref1 = b.QRRef1.Trim(),
                                         Ref2 = b.QRRef2.Trim(),
                                         GAmount = b.GAmount,
                                         CashierId = b.CashierId,
                                         b.ControllerName
                                     }).ToList();

                if (bpmPaymentGroup.Count() == bpmJoinBankQR.Count() && bpmPaymentGroup.Count() == bankPaymentGroup.Count())
                {
                    // ข้อมูล ตรงกัน message box แจ้ง user และจบกระบวนการ.
                    //MessageBox.Show("ข้อมูลการชำระเงินถูกต้อง  ตรงกับข้อมูลของทางธนาคาร", "ตรวจสอบการชำระเงินกับข้อมูลชำระเงินของธนาคาร", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    // Count join data. 
                    if (bpmJoinBankQR.Count > 0)
                    {
                        // Join data remove from reportCAC19Data report.  
                        foreach (var joinItem in bpmJoinBankQR)
                        {
                            // Remove from reportCAC19Data
                            var reportData = reportCAC19Data.FirstOrDefault(c => c.QRRef1.Trim() == joinItem.Ref1.Trim() &&
                                c.QRRef2.Trim() == joinItem.Ref2.Trim() && c.GAmount == joinItem.GAmount);
                            if (reportData != null)
                                reportCAC19Data.Remove(reportData);

                            // Remove from text file data. 
                            var bankData = bankQRPayments.FirstOrDefault(c => c.QRRef1Bank.Trim() == joinItem.Ref1.Trim() &&
                                c.QRRef2Bank.Trim() == joinItem.Ref2.Trim() && c.GAmountBank == joinItem.GAmount);
                            if (bankData != null)
                                bankQRPayments.Remove(bankData);
                        }

                        // Summarize data group by CashierId.
                        var joinDataByCashierId = (from b in bpmJoinBankQR
                                                   group b by b.CashierId into g
                                                   orderby g.Key
                                                   select new
                                                   {
                                                       CashierId = g.Key,
                                                       RowCount = g.Count(),
                                                       SumGAmount = g.Sum(c => c.GAmount),
                                                       ControllerName = g.FirstOrDefault().ControllerName
                                                   }).ToList();

                        foreach (var summaryItem in joinDataByCashierId)
                        {
                            CAC19Report reportRecord = new CAC19Report();
                            reportRecord.CashierId = summaryItem.CashierId;
                            reportRecord.ControllerName = summaryItem.ControllerName;
                            reportRecord.QRCompletedCount = summaryItem.RowCount;
                            reportRecord.QRCompletedGAmount = summaryItem.SumGAmount.Value;
                            reportRecord.QRCompleted = qrCompleteText;

                            reportRecord.QRRef1 = string.Empty;
                            reportRecord.QRRef2 = string.Empty;
                            reportRecord.GAmount = 0;

                            reportCAC19Data.Add(reportRecord);
                        }
                    }

                    // 1. BPM Side :  หาข้อมูล BPM ซึ่งไม่มีข้อมูลจากธนาคาร
                    var bpmLeft = (from b in reportCAC19Data
                                   join p in bankQRPayments
                                   on new { Ref1 = b.QRRef1.Trim(), Ref2 = b.QRRef2.Trim(), GAmount = b.GAmount }
                                   equals new { Ref1 = p.QRRef1Bank.Trim(), Ref2 = p.QRRef2Bank.Trim(), GAmount = p.GAmountBank }
                                   into g
                                   from sub in g.DefaultIfEmpty()
                                   where !string.IsNullOrEmpty(b.QRRef1)
                                   select new
                                   {
                                       Ref1 = b.QRRef1,
                                       Ref2 = b.QRRef2,
                                       GAmount = b.GAmount
                                   }).ToList();

                    // ซ่อมข้อมูลโดย ค้นหาด้วย Ref1, Ref2 จากข้อมูลธนาคาร 
                    foreach (var bpmPay in bpmLeft)
                    {
                        // Get data from bank QRPayment. 
                        var bankPay = (from b in bankQRPayments
                                       where b.QRRef1Bank.Trim() == bpmPay.Ref1 && b.QRRef2Bank.Trim() == bpmPay.Ref2
                                       select b).FirstOrDefault();

                        // Set record ในรายงานเป็นรายการที่ไม่ completed.
                        var reportRecord = reportCAC19Data.FirstOrDefault(c => c.QRRef1 == bpmPay.Ref1 && c.QRRef2 == bpmPay.Ref2);
                        if (reportRecord != null)
                        {
                            reportRecord.QRCompleted = qrNotCompleteText;
                            reportRecord.Record_Qty_New = 1;
                        }

                        if (bankPay != null)
                        {
                            // บันทึกข้อมูลในชุดข้อมูล CAC19Report
                            if (reportRecord != null)
                            {
                                reportRecord.QRRef1Bank = bankPay.QRRef1Bank;
                                reportRecord.QRRef2Bank = bankPay.QRRef2Bank;
                                reportRecord.GAmountBank = bankPay.GAmountBank;
                                reportRecord.QRCompleted = qrNotCompleteText;
                            }
                        }
                    }

                    // ข้อมูลซ่อม Bank ใน reportCAC19Data ให้นำออกจาก bankPaymentGroup  
                    var fixData = from f in reportCAC19Data where f.QRRef1Bank != null select f;
                    foreach (var fixItem in fixData)
                    {
                        // Search  bank group 
                        var bankPay = (from b in bankQRPayments
                                       where b.QRRef1Bank.Trim() == fixItem.QRRef1Bank.Trim() && b.QRRef2Bank.Trim() == fixItem.QRRef2Bank.Trim()
                                       select b).FirstOrDefault();

                        if (bankPay != null)
                            bankQRPayments.Remove(bankPay);
                    }

                    // 2. Bank QR Side. 
                    var bankQRLeft = from bk in bankQRPayments
                                     join bpm in reportCAC19Data
                                     on new { Ref1 = bk.QRRef1Bank.Trim(), Ref2 = bk.QRRef2Bank.Trim(), GAmount = bk.GAmountBank }
                                     equals new { Ref1 = bpm.QRRef1.Trim(), Ref2 = bpm.QRRef2.Trim(), GAmount = bpm.GAmount }
                                     into g
                                     from sub in g.DefaultIfEmpty()
                                     select new
                                     {
                                         Ref1 = bk.QRRef1Bank.Trim(),
                                         Ref2 = bk.QRRef2Bank.Trim(),
                                         GAmount = bk.GAmountBank.Value
                                     };

                    // Insert to CAC19 Report
                    foreach (var bkPay in bankQRLeft)
                    {
                        CAC19Report data = new CAC19Report();
                        data.QRRef1Bank = bkPay.Ref1;
                        data.QRRef2Bank = bkPay.Ref2;
                        data.GAmountBank = bkPay.GAmount;
                        data.PaymentDt = null;
                        data.QRCompleted = qrNotCompleteText;
                        data.Record_Qty_New = 1;
                        var dataByRef1 = reportCAC19Data.FirstOrDefault(c => c.QRRef1.Trim() == bkPay.Ref1.Trim());
                        if (dataByRef1 != null)
                            data.ControllerName = dataByRef1.ControllerName;
                        else
                            data.ControllerName = string.Empty;

                        reportCAC19Data.Add(data);
                    }
                }

                // Mock summary 
                List<CAC19SummaryReport> mock = new List<CAC19SummaryReport>();

                CAC19SummaryReport mockitem = new CAC19SummaryReport(); 
                mockitem.CashierId = "99000020"; 
                mockitem.ControllerName = "kwanta";
                mock.Add(mockitem);
                ReportDataSource dataSourcesummary = new ReportDataSource();
                dataSourcesummary.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC19SummaryReport";
                dataSourcesummary.Value = mock; 


                // Set data to report data source. 
                ReportDataSource dataSource = new ReportDataSource();
                dataSource.Name = "PEA_BPM_PaymentCollectionModule_Interface_BusinessEntities_Reports_CAC19Report";
                dataSource.Value = reportCAC19Data;

                ReportParameter[] rParam = new ReportParameter[3];

                string strSearchBy = "";
                if (param.BranchId != null)
                {
                    strSearchBy = "รหัส กฟฟ.:" + param.BranchId;
                }
                if (param.ControllerId != null)
                {
                    strSearchBy += " / รหัสผู้รับเงิน:" + param.ControllerId;
                }
                strSearchBy += GetPaymentDate(fromDate, toDate)[1];
                rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);

                Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                rParam[1] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);
                rParam[2] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");


                View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.CAC19Report.rdlc", dataSource, rParam);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private List<string> GetPaymentDate(DateTime transDate)
        {
            List<string> strResult = new List<string>();

            strResult.Add(transDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
            strResult.Add(" / วันที่รับชำระ: " + transDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));

            return strResult;
        }

        private List<string> GetPaymentDate(DateTime fromDate, DateTime toDate)
        {
            List<string> strResult = new List<string>();

            if (fromDate.ToString("yyyy") == toDate.ToString("yyyy"))
            {
                if (fromDate.ToString("MM") == toDate.ToString("MM"))
                {
                    if (fromDate.ToString("dd") == toDate.ToString("dd"))
                    {
                        strResult.Add(fromDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                    }
                    else
                    {
                        strResult.Add(fromDate.Day.ToString() + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                    }
                }
                else
                {
                    strResult.Add(fromDate.ToString("d MMMM", new CultureInfo("th-TH")) + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                    strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                }
            }
            else
            {
                strResult.Add(fromDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
            }

            return strResult;
        }


        private List<CAC15Report> GetCAC15DataForRpt(CAC15Param param)
        {
            string transactionPath = BPMPath.ConfigPath + "\\TransactionData";
            List<CAC15Report> totalReport = new List<CAC15Report>();

            string fileNamePattern = string.Format(param.BranchId + "-" + param.TransDate.ToString("yyyyMMdd", new CultureInfo("th-TH")) + "-" + "*.txt");

            if (!Directory.Exists(transactionPath))
            {
                //Directory.CreateDirectory(transactionPath);
                return totalReport;
            }
            else
            {
                List<CAC15Report> report = new List<CAC15Report>();

                //-----read file name list--------------------
                string[] fileNameList = Directory.GetFiles(transactionPath, fileNamePattern);
                if (fileNameList.Length > 0)
                {
                    foreach (string aFilename in fileNameList)
                    {

                        string filePath = aFilename;

                        //-----read data of each file-------------
                        if (File.Exists(filePath))
                        {
                            //Read existing transactions from text file
                            report = GetCAC15DataFromFile(filePath);

                            //Filter by condition
                            report = FilterCAC15DataByCondition(report, param);

                            //Merge total Report from any file.
                            totalReport = MergeCAC15ReportObj(totalReport, report);

                            //Sort by condition
                            //SortCAC15DataByCondition(totalReport);
                            //use sort in Rpt

                        }

                    }
                }


            }

            return totalReport;
        }

        private string GetPosIdFromCAC15Report(List<CAC15Report> obj)
        {
            string ret = "";
            if (obj != null && obj.Count > 0)
            {
                foreach (CAC15Report aObj in obj)
                {
                    string temp = aObj.BranchPosID.Substring(7, 5);
                    if (ret.IndexOf(temp) == -1)
                    {
                        ret = ret + ", " + temp;
                    }
                }
                ret = ret.Substring(1, ret.Length - 1);
            }

            return ret;
        }

        private List<CAC15Report> GetCAC15DataFromFile(string filePath)
        {
            List<CAC15Report> report = new List<CAC15Report>();

            FileStream fs = new FileStream(filePath, FileMode.Open);
            IFormatter formatter = new BinaryFormatter();
            report = (List<CAC15Report>)formatter.Deserialize(fs);
            fs.Close();

            return report;
        }

        private List<CAC15Report> FilterCAC15DataByCondition(List<CAC15Report> obj, CAC15Param param)
        {
            return obj.FindAll(delegate(CAC15Report o)
            {
                //return o.Active == "0"; 
                if (o.Active == "0")
                {
                    return false;
                }

                if (param.CaId != string.Empty && param.CaId != null)
                {
                    if (o.CaId.ToUpper().IndexOf(param.CaId.ToUpper()) == -1)
                        return false;
                }

                if (param.ReceiptId != string.Empty && param.ReceiptId != null)
                {
                    if (o.ReceiptId.ToUpper().IndexOf(param.ReceiptId.ToUpper()) == -1)
                        return false;
                }

                return true;
            }
            );
        }

        private List<CAC15Report> MergeCAC15ReportObj(List<CAC15Report> obj1, List<CAC15Report> obj2)
        {
            List<CAC15Report> objTmp = new List<CAC15Report>();
            obj1.AddRange(obj2);
            return obj1;
        }

        private void SortCAC15DataByCondition(List<CAC15Report> obj)
        {
            obj.Sort(delegate(CAC15Report o1, CAC15Report o2) { return o1.ReceiptId.CompareTo(o2.ReceiptId); });
        }


        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

