//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
// 
#pragma warning disable 1591

namespace PEA.BPM.CashManagementModule.BS.CashierCachingWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using PEA.BPM.Infrastructure.Interface.BusinessEntities;
    using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CashierCachingWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CashierCachingWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CacheOpenWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CacheCloseWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsOpenedWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestIsOpenedWorkOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CashierCachingWebService() {
            this.Url = global::PEA.BPM.CashManagementModule.BS.Properties.Settings.Default.CashManagementModule_BS_CashierCachingWS_CashierCachingWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CacheOpenWorkCompletedEventHandler CacheOpenWorkCompleted;
        
        /// <remarks/>
        public event CacheCloseWorkCompletedEventHandler CacheCloseWorkCompleted;
        
        /// <remarks/>
        public event IsOpenedWorkCompletedEventHandler IsOpenedWorkCompleted;
        
        /// <remarks/>
        public event TestIsOpenedWorkCompletedEventHandler TestIsOpenedWorkCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CacheOpenWork", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CacheOpenWork(string workid, string cashierid) {
            object[] results = this.Invoke("CacheOpenWork", new object[] {
                        workid,
                        cashierid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CacheOpenWorkAsync(string workid, string cashierid) {
            this.CacheOpenWorkAsync(workid, cashierid, null);
        }
        
        /// <remarks/>
        public void CacheOpenWorkAsync(string workid, string cashierid, object userState) {
            if ((this.CacheOpenWorkOperationCompleted == null)) {
                this.CacheOpenWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCacheOpenWorkOperationCompleted);
            }
            this.InvokeAsync("CacheOpenWork", new object[] {
                        workid,
                        cashierid}, this.CacheOpenWorkOperationCompleted, userState);
        }
        
        private void OnCacheOpenWorkOperationCompleted(object arg) {
            if ((this.CacheOpenWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CacheOpenWorkCompleted(this, new CacheOpenWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CacheCloseWork", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CacheCloseWork(string workid, string cashierid) {
            object[] results = this.Invoke("CacheCloseWork", new object[] {
                        workid,
                        cashierid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CacheCloseWorkAsync(string workid, string cashierid) {
            this.CacheCloseWorkAsync(workid, cashierid, null);
        }
        
        /// <remarks/>
        public void CacheCloseWorkAsync(string workid, string cashierid, object userState) {
            if ((this.CacheCloseWorkOperationCompleted == null)) {
                this.CacheCloseWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCacheCloseWorkOperationCompleted);
            }
            this.InvokeAsync("CacheCloseWork", new object[] {
                        workid,
                        cashierid}, this.CacheCloseWorkOperationCompleted, userState);
        }
        
        private void OnCacheCloseWorkOperationCompleted(object arg) {
            if ((this.CacheCloseWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CacheCloseWorkCompleted(this, new CacheCloseWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsOpenedWork", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CashierWorkStatusInfo[] IsOpenedWork(OpenWorkParam param) {
            object[] results = this.Invoke("IsOpenedWork", new object[] {
                        param});
            return ((CashierWorkStatusInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void IsOpenedWorkAsync(OpenWorkParam param) {
            this.IsOpenedWorkAsync(param, null);
        }
        
        /// <remarks/>
        public void IsOpenedWorkAsync(OpenWorkParam param, object userState) {
            if ((this.IsOpenedWorkOperationCompleted == null)) {
                this.IsOpenedWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsOpenedWorkOperationCompleted);
            }
            this.InvokeAsync("IsOpenedWork", new object[] {
                        param}, this.IsOpenedWorkOperationCompleted, userState);
        }
        
        private void OnIsOpenedWorkOperationCompleted(object arg) {
            if ((this.IsOpenedWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsOpenedWorkCompleted(this, new IsOpenedWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestIsOpenedWork", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CashierWorkStatusInfo TestIsOpenedWork(string BranchId, string CashierId, string PosId) {
            object[] results = this.Invoke("TestIsOpenedWork", new object[] {
                        BranchId,
                        CashierId,
                        PosId});
            return ((CashierWorkStatusInfo)(results[0]));
        }
        
        /// <remarks/>
        public void TestIsOpenedWorkAsync(string BranchId, string CashierId, string PosId) {
            this.TestIsOpenedWorkAsync(BranchId, CashierId, PosId, null);
        }
        
        /// <remarks/>
        public void TestIsOpenedWorkAsync(string BranchId, string CashierId, string PosId, object userState) {
            if ((this.TestIsOpenedWorkOperationCompleted == null)) {
                this.TestIsOpenedWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestIsOpenedWorkOperationCompleted);
            }
            this.InvokeAsync("TestIsOpenedWork", new object[] {
                        BranchId,
                        CashierId,
                        PosId}, this.TestIsOpenedWorkOperationCompleted, userState);
        }
        
        private void OnTestIsOpenedWorkOperationCompleted(object arg) {
            if ((this.TestIsOpenedWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestIsOpenedWorkCompleted(this, new TestIsOpenedWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
 
    public delegate void CacheOpenWorkCompletedEventHandler(object sender, CacheOpenWorkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CacheOpenWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CacheOpenWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CacheCloseWorkCompletedEventHandler(object sender, CacheCloseWorkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CacheCloseWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CacheCloseWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsOpenedWorkCompletedEventHandler(object sender, IsOpenedWorkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsOpenedWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsOpenedWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CashierWorkStatusInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CashierWorkStatusInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TestIsOpenedWorkCompletedEventHandler(object sender, TestIsOpenedWorkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestIsOpenedWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestIsOpenedWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CashierWorkStatusInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CashierWorkStatusInfo)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591