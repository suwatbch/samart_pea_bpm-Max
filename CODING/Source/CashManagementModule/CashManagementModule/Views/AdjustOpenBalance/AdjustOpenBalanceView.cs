//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;
using System.ComponentModel;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.CashManagementModule.Views.MoneyCheckInView;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using System.Text.RegularExpressions;
using PEA.BPM.Architecture.ArchitectureTool.Control;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class AdjustOpenBalanceView : UserControl, IAdjustOpenBalanceView
    {
        private BindingList<PaymentMethodInfo> _paymentMethods;
        private List<ChequeInfo> _openBlanceChqList;
        private int _editIndex = 0;
        private Mode _mode = Mode.Insert;
        private string _editPtId;
        private bool _viewReady = false;

        enum Mode
        {
            Insert = 0,
            Edit
        };

        #region "Code Generated"

        public AdjustOpenBalanceView()
        {
            InitializeComponent();
            paymentDataGridView.AutoGenerateColumns = false;
            _paymentMethods = new BindingList<PaymentMethodInfo>();
            currentOpenGv.ClearSelection();
            flowCBox.SelectedIndex = 0;

        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public AdjustOpenBalanceViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            LoadBranch();            
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<PaymentMethodInfo> PaymentList
        {
            set {
                _paymentMethods = new BindingList<PaymentMethodInfo>(value);
                paymentDataGridView.DataSource = _paymentMethods;
            }
        }

        #endregion   

        private bool ValidateForm()
        {
            if (paymentDataGridView.Rows.Count == 0)
            {
                MessageBox.Show("กรุณากรอกรายการเงินสดหรือรายการเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }

            return true;
        }

        public List<Branch> GetSectorBranches(string wcStr)
        {
            //Excluded L.4 branch
            List<Branch> strList = new List<Branch>();
            Regex rg = new Regex(wcStr + "[0-9][0-9][0-9]0[0-1]", RegexOptions.IgnoreCase);
            foreach (Branch b in CodeTable.Instant.ListBranches())
            {
                if (rg.IsMatch(b.BranchId))
                    strList.Add(b);
            }

            return strList;
        }

        private void LoadBranch()
        {
            List<Branch> branch = GetSectorBranches(Session.Branch.Id.Substring(0, 1));

            AutoCompleteTextBoxExtended<Branch> actb = new AutoCompleteTextBoxExtended<Branch>(branchIdMaskedTextBox, this);
            actb.PopupBackColor = Color.White;
            actb.PopupHeight = 100;
            actb.PopupExtendWidth = 80;
            actb.DataSource = branch;
            //actb.KeyPress += new KeyPressEventHandler(collectorIdMaskedTextBox_KeyPress);
            AutoCompleteTextBoxExtended<Branch>.SetSelectedItem(branchIdMaskedTextBox, Session.Branch.Id);

            //load cashier for default branch
            string branchId = (AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox) == null) ? null : AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox).BranchId;
            LoadCashier(branchId);
        }

        public void LoadCashier(string branchId)
        {
            _viewReady = false;
            List<CashierInfo> cashierList = _presenter.GetOpenWorkCashierByBranch(branchId);
            if (cashierList.Count > 0)
            {
                cashierCBox.DataSource = cashierList;
                cashierCBox.ValueMember = "CashierId";
                cashierCBox.DisplayMember = "LongName";
            }

            paymentDataGridView.Enabled = false;
            _viewReady = true;
        }

        private void flowCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (flowCBox.SelectedIndex > 0)
            {
                if (flowCBox.SelectedIndex == 1)
                    flowCBox.SelectedIndex = 2;
                else if (flowCBox.SelectedIndex == 6)
                    flowCBox.SelectedIndex = 7;

                if (refNoTxt.Text.Trim().Length > 0)
                    refNoTxt.SelectAll();

                addEditButton.Enabled = true;
                refNoTxt.Focus();
            }
            else
            {
                refNoTxt.Focus();
                refNoTxt.SelectAll();
            }


            //if (GetFlowType() == FlowType.Adjust_CashOutFromPOS_Minus ||
            //    GetFlowType() == FlowType.Adjust_MoneyDepositToBank_Minus ||
            //    GetFlowType() == FlowType.Adjust_MoneyFromBank_Minus ||
            //    GetFlowType() == FlowType.Adjust_MoneyReceivedFromPOS_Minus)
            //{
            //    if (paymentTypeTabControl.SelectedIndex == 1) //cheque
            //    {
            //        chequeActualAmountTextBox.ReadOnly = true;
            //        chqDtPicker.Enabled = false;
            //        chqAccNoTxt.ReadOnly = true;
            //    }
            //}
            //else
            //{
            //    if (paymentTypeTabControl.SelectedIndex == 1) //cheque
            //    {
            //        chequeActualAmountTextBox.ReadOnly = false;
            //        chqDtPicker.Enabled = true;
            //        chqAccNoTxt.ReadOnly = false;
            //    }
            //}
        }

        private void refNoTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (paymentTypeTabControl.SelectedIndex == 0)  // cash
                {
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                }
                else
                {
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                }
            }
        }

        private void chqBankSearchButton_Click(object sender, EventArgs e)
        {
            FindBank(chequeBankComboBox, false);
            chqAccNoTxt.Focus();
        }

        private void amountText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                refNoTxt.Focus();
                refNoTxt.SelectAll();
            }
        }

        private void SetBankDataSource(ComboBox bankComboBox, Bank bank, bool isDeposit)
        {
            List<Bank> banks = new List<Bank>();
            banks.Add(bank);
            bankComboBox.ValueMember = "BankKey";
            bankComboBox.DisplayMember = "BankName";
            bankComboBox.DataSource = banks;
            bankComboBox.SelectedIndex = 0;
        }

        private void FindBank(ComboBox bankComboBox, bool isDeposit)
        {
            using (BankSearchForm bsForm = new BankSearchForm(isDeposit))
            {
                if (bsForm.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    SetBankDataSource(chequeBankComboBox, bsForm.SelectedBank, isDeposit);
                }
            }
        }

        private string GetFlowType()
        {
            switch (flowCBox.SelectedIndex)
            {
                //case 2: return FlowType.Adjust_MoneyFromBank_Plus; //ปรนำเงินเข้าระบบ
                //case 3: return FlowType.Adjust_MoneyReceivedFromPOS_Plus;
                //case 4: return FlowType.Adjust_MoneyDepositToBank_Plus;
                //case 5: return FlowType.Adjust_CashOutFromPOS_Plus;
                //case 7: return FlowType.Adjust_MoneyFromBank_Minus;
                //case 8: return FlowType.Adjust_MoneyReceivedFromPOS_Minus;
                //case 9: return FlowType.Adjust_MoneyDepositToBank_Minus;
                //case 10: return FlowType.Adjust_CashOutFromPOS_Minus;

                case 2: return FlowType.Adjust_MoneyFromBank_Plus;
                case 3: return FlowType.Adjust_MoneyReceivedFromPOS_Plus;
                case 4: return FlowType.Adjust_MoneyDepositToBank_Minus;
                case 5: return FlowType.Adjust_CashOutFromPOS_Minus;
                case 7: return FlowType.Adjust_MoneyFromBank_Minus;
                case 8: return FlowType.Adjust_MoneyReceivedFromPOS_Minus;
                case 9: return FlowType.Adjust_MoneyDepositToBank_Plus;
                case 10: return FlowType.Adjust_CashOutFromPOS_Plus;

                default: return "00";
            }
        }


        private PaymentMethodInfo GetCashPayment()
        {
            PaymentMethodInfo pm = new PaymentMethodInfo();
            pm.PtId = "1";
            pm.PtName = "เงินสด";
            pm.FlowType = GetFlowType();
            pm.FlowDesc = flowCBox.SelectedItem.ToString();
            pm.Comment = refNoTxt.Text;

            //if (pm.FlowType == FlowType.Adjust_CashOutFromPOS_Minus ||
            //    pm.FlowType == FlowType.Adjust_MoneyDepositToBank_Minus ||
            //    pm.FlowType == FlowType.Adjust_MoneyFromBank_Minus ||
            //    pm.FlowType == FlowType.Adjust_MoneyReceivedFromPOS_Minus)
            if (pm.FlowType == FlowType.Adjust_MoneyFromBank_Minus ||
                pm.FlowType == FlowType.Adjust_MoneyReceivedFromPOS_Minus ||
                pm.FlowType == FlowType.Adjust_MoneyDepositToBank_Plus ||
                pm.FlowType == FlowType.Adjust_CashOutFromPOS_Plus)
                    pm.Amount = -Convert.ToDecimal(cashAmountTextBox.Text);
            else
                    pm.Amount = Convert.ToDecimal(cashAmountTextBox.Text);

            return pm;
        }

        private PaymentMethodInfo GetChequePayment()
        {
            PaymentMethodInfo pm = new PaymentMethodInfo();

            try
            {
                pm.PtId = "2";
                pm.PtName = "เช็ค";
                pm.FlowType = GetFlowType();
                pm.FlowDesc = flowCBox.SelectedItem.ToString();
                pm.Comment = refNoTxt.Text;

                //if (pm.FlowType == FlowType.Adjust_CashOutFromPOS_Minus ||
                //    pm.FlowType == FlowType.Adjust_MoneyDepositToBank_Minus ||
                //    pm.FlowType == FlowType.Adjust_MoneyFromBank_Minus ||
                //    pm.FlowType == FlowType.Adjust_MoneyReceivedFromPOS_Minus)
                if (pm.FlowType == FlowType.Adjust_MoneyFromBank_Minus ||
                    pm.FlowType == FlowType.Adjust_MoneyReceivedFromPOS_Minus ||
                    pm.FlowType == FlowType.Adjust_MoneyDepositToBank_Plus ||
                    pm.FlowType == FlowType.Adjust_CashOutFromPOS_Plus)
                        pm.Amount = -Convert.ToDecimal(chequeActualAmountTextBox.Text);
                else
                        pm.Amount = Convert.ToDecimal(chequeActualAmountTextBox.Text);

                pm.Bank = (Bank)chequeBankComboBox.SelectedItem;
                pm.BankId = pm.Bank.BankKey;
                pm.ChqNo = chqNoTxt.Text;
                pm.ChqAccNo = chqAccNoTxt.Text;
                pm.ChqDt = chqDtPicker.Value.Date;
            }
            catch (Exception)
            {
                MessageBox.Show("เกิดข้อผิดพลาดในกระบวณการรับข้อมูลเช็ค", "ผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return pm;
        }


        private decimal GetTotalCash()
        {
            decimal cashTotal = 0;
            decimal currentTotal = 0;

            //foreach (PaymentMethodInfo p in _paymentMethods)
            //{
            //    if(p.PtId == "1") // cash
            //        cashTotal = cashTotal + p.Amount.Value;
            //}

            for (int j = 0; j < currentOpenGv.Rows.Count; j++)
                currentTotal = currentTotal + Convert.ToDecimal(currentOpenGv.Rows[j].Cells["CashAmtTxt"].Value);

            decimal netCash = cashTotal + currentTotal;

            return netCash;
        }

        private bool ValidateCash()
        {
            try
            {
                if (Convert.ToDecimal(string.IsNullOrEmpty(cashAmountTextBox.Text) ? "0" : cashAmountTextBox.Text) < 0)
                {
                    MessageBox.Show("กรุณาป้อนจำนวนเงินที่ต้องการปรับปรุงยอด\nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                    return false;
                }

                //if (GetFlowType() == FlowType.Adjust_CashOutFromPOS_Minus ||
                //    GetFlowType() == FlowType.Adjust_MoneyDepositToBank_Minus ||
                //    GetFlowType() == FlowType.Adjust_MoneyFromBank_Minus ||
                //    GetFlowType() == FlowType.Adjust_MoneyReceivedFromPOS_Minus)
                if (GetFlowType() == FlowType.Adjust_MoneyFromBank_Minus ||
                    GetFlowType() == FlowType.Adjust_MoneyReceivedFromPOS_Minus ||
                    GetFlowType() == FlowType.Adjust_MoneyDepositToBank_Plus ||
                    GetFlowType() == FlowType.Adjust_CashOutFromPOS_Plus)
                {
                    decimal netCash = GetTotalCash();
                    decimal input = Convert.ToDecimal(string.IsNullOrEmpty(cashAmountTextBox.Text)? "0": cashAmountTextBox.Text);

                    if (input > netCash)
                    {
                        MessageBox.Show("ระบบมียอดเงินสดยกมาไม่เพียงพอสำหรับรายการปรับลดนี้", "ปรับลดเกินเงินสดยกมา", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return false;
                    }
                }

                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("Validate cash error!");
                return false;
            }
        }

        private bool ValidateCheque()
        {
            try
            {
                if (Convert.ToDecimal(string.IsNullOrEmpty(chequeActualAmountTextBox.Text) ? "0" : chequeActualAmountTextBox.Text) == 0)
                {
                    MessageBox.Show("กรุณาป้อนจำนวนเงินที่ระบุในเช็ค   \nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chequeActualAmountTextBox.Focus();
                    return false;
                }

                if (string.IsNullOrEmpty(chqNoTxt.Text.Trim()))
                {
                    MessageBox.Show("กรุณาป้อนเลขที่เช็คที่ระบุในเช็ค    \nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chqNoTxt.Focus();
                    return false;
                }

                if (string.IsNullOrEmpty(chqAccNoTxt.Text.Trim()))
                {
                    MessageBox.Show("กรุณาป้อนเลขที่บัญชีเช็ค  \nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chqAccNoTxt.Focus();
                    return false;
                }

                if (chequeBankComboBox.SelectedItem == null)
                {
                    MessageBox.Show("กรุณาระบุธนาคารของเช็ค\nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chqBankSearchButton.Focus();
                    return false;
                }

                //if decrease, make sure we have that cheque
                if (GetFlowType() == FlowType.Adjust_MoneyFromBank_Minus ||
                    GetFlowType() == FlowType.Adjust_MoneyReceivedFromPOS_Minus ||
                    GetFlowType() == FlowType.Adjust_MoneyDepositToBank_Plus ||
                    GetFlowType() == FlowType.Adjust_CashOutFromPOS_Plus)
                {
                    foreach (ChequeInfo chq in _openBlanceChqList)
                    {
                        Bank b = (Bank)chequeBankComboBox.SelectedItem;
                        string longChqNo = string.Format("{0}{1}", chq.BankKey.Trim(), chq.ChqNo.Trim());
                        string longInput = string.Format("{0}{1}", b.BankKey.Trim(), chqNoTxt.Text.Trim());

                        if (longChqNo == longInput) return true;
                    }

                    MessageBox.Show("ระบบไม่พบเช็คใบที่ต้องการปรับลดในรายการเช็คยกมา", "ไม่พบเช็ค", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    return false;
                }

                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("Validate cheque error!");
                return false;
            }
        }

        private void addEditButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (flowCBox.SelectedIndex == 0)
                {
                    MessageBox.Show("กรุณาเลือกรายการที่ต้องการปรับยอด\nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    flowCBox.Focus();
                    return;
                }

                if (refNoTxt.Text.Trim() == string.Empty)
                {
                    MessageBox.Show("กรุณากรอกเลขที่ใบเสร็จ/เลขที่ใบสำคัญจ่าย/เลขที่อ้างอิง\nกดปุ่ม OK เพื่อทำงานต่อ", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    refNoTxt.Focus();
                    return;
                }

                if (paymentTypeTabControl.SelectedIndex == 0)
                {
                    if (!ValidateCash())
                        return;

                    if (_mode == Mode.Insert)
                        _paymentMethods.Add(GetCashPayment());
                    else
                    {
                        PaymentMethodInfo pmEdit = GetCashPayment();
                        _paymentMethods[_editIndex].FlowType = pmEdit.FlowType;
                        _paymentMethods[_editIndex].FlowDesc = pmEdit.FlowDesc;
                        _paymentMethods[_editIndex].Amount = pmEdit.Amount;
                        _paymentMethods[_editIndex].Comment = pmEdit.Comment;
                    }
                }
                else
                {
                    if (!ValidateCheque())
                        return;

                    if (_mode == Mode.Insert)
                        _paymentMethods.Add(GetChequePayment());
                    else
                    {
                        PaymentMethodInfo pmEdit = GetChequePayment();
                        _paymentMethods[_editIndex].FlowType = pmEdit.FlowType;
                        _paymentMethods[_editIndex].FlowDesc = pmEdit.FlowDesc;
                        _paymentMethods[_editIndex].Amount = pmEdit.Amount;
                        _paymentMethods[_editIndex].Comment = pmEdit.Comment;
                        _paymentMethods[_editIndex].Bank = pmEdit.Bank;
                        _paymentMethods[_editIndex].BankId = pmEdit.BankId;
                        _paymentMethods[_editIndex].ChqNo = pmEdit.ChqNo;
                        _paymentMethods[_editIndex].ChqAccNo = pmEdit.ChqAccNo;
                        _paymentMethods[_editIndex].ChqDt = pmEdit.ChqDt;
                    }
                }

                paymentDataGridView.Refresh();
                _mode = Mode.Insert;
                editIcom.Visible = false;

                paymentDataGridView.DataSource = _paymentMethods;
                totalAmtTxt.Text = CalculateTotalAmount();

                cashAmountTextBox.Text = "0.00";
                chequeActualAmountTextBox.Text = "0.00";
                chqNoTxt.Clear();
                chqAccNoTxt.Clear();
                chqDtPicker.Value = DateTime.Today;
                cashAmountTextBox.Focus();
                cashAmountTextBox.SelectAll();
                //chequeBankComboBox.DataSource = null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error!");
            }
        }

        private string CalculateTotalAmount()
        {
            decimal total = 0;
            decimal currentTotal = 0;

            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                total = total + Convert.ToDecimal(paymentDataGridView.Rows[i].Cells["Amount"].Value);

            for (int j = 0; j < currentOpenGv.Rows.Count; j++)
                currentTotal = currentTotal + Convert.ToDecimal(currentOpenGv.Rows[j].Cells["TotalAmt"].Value);

            decimal net = total + currentTotal;
            openBalanceNetTxt.Text = net == 0 ? "0.00" : net.ToString("#,###.00");

            return total == 0 ? "0.00" : total.ToString("#,###.00");
        }

        private void paymentDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (e.ColumnIndex == 3)
                {
                    EditRecord(e.RowIndex);
                }
                else if (e.ColumnIndex == 4)
                {
                    if (MessageBox.Show("ต้องการลบรายการดังกล่าวหรือไม่", "ข้อความเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Question).ToString() == "Yes")
                    {
                        PaymentMethodInfo pm = (PaymentMethodInfo)paymentDataGridView.Rows[e.RowIndex].DataBoundItem;
                        _paymentMethods.Remove(pm);
                        paymentDataGridView.DataSource = _paymentMethods;

                        for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                            paymentDataGridView.Rows[i].Cells["deleteButton"].Value = Properties.Resources.Delete;

                        totalAmtTxt.Text = CalculateTotalAmount();
                    }
                }
            }
        }

        private void quiteBt_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }


        private void ClearScreen()
        {
            cashierCBox.SelectedIndex = 0;
            string branchId = (AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox) == null) ? null : AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox).BranchId;
            LoadCashier(branchId);
            flowCBox.SelectedIndex = 0;
            refNoTxt.Clear();
            cashAmountTextBox.Text = "0.00";
            chequeActualAmountTextBox.Text = "0.00";
            chqNoTxt.Clear();
            chqAccNoTxt.Clear();
            chqDtPicker.Value = DateTime.Today;
            chequeBankComboBox.DataSource = null;
        }


        private void okButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (ValidateForm())
                {
                    //confirmation box
                    DialogResult dlg = MessageBox.Show("คุณต้องการบันทึกการปรับปรุงยอดยกมา \nกรุณากดปุ่ม OK เพื่อยืนยัน", "บันทึกข้อมูล", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                    if (dlg == DialogResult.OK)
                    {
                        MoneyCheckInInfo param = new MoneyCheckInInfo();
                        //branch to adjust opening balance
                        param.BranchId = (AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox) == null) ? null : AutoCompleteTextBoxExtended<Branch>.GetSelectedItem(branchIdMaskedTextBox).BranchId;
                        CashierInfo cashierInfo = (CashierInfo)cashierCBox.SelectedItem;
                        param.CashierId = cashierInfo.CashierId;
                        param.WorkId = cashierInfo.WorkId;
                        param.PaymentDt = Session.BpmDateTime.Now;
                        param.PosId = Session.Terminal.Id;                        
                        param.ModifiedBy = Session.User.Id;
                        param.PaymentMethodList = new List<PaymentMethodInfo>(_paymentMethods);
                        _presenter.SaveAdjustOpenBalance(param);

                        MessageBox.Show("บันทึกรายการปรับปรุงยอดยกมาเรียบร้อยแล้ว \nกรุณากดปุ่ม OK เพื่อทำงานต่อ", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        paymentDataGridView.Rows.Clear();
                        ClearScreen();

                        CashierInfo cashier = (CashierInfo)cashierCBox.SelectedItem;
                        OpenWorkInfo openWorkInfo = _presenter.LoadCashierOpenBalance(cashier.CashierId, FlowType.MoneyOpeningBalance);
                        FillCashierOpenBalance(openWorkInfo);
                        //_presenter.LoadAdjustOpenBalance(cashierInfo.WorkId);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }

        private void FillZero()
        {
            List<OpenBalance> obList = new List<OpenBalance>();
            OpenBalance ob = new OpenBalance();
            ob.CashAmtTxt = "0.00";
            ob.ChqAmtTxt = "0.00";
            ob.SumAmtTxt = "0.00";
            obList.Add(ob);
            _openBlanceChqList = null;

            currentOpenGv.AutoGenerateColumns = false;
            currentOpenGv.DataSource = obList;
            currentOpenGv.ClearSelection();
        }

        private void FillCashierOpenBalance(OpenWorkInfo openWorkInfo)
        {
            List<OpenBalance> obList = new List<OpenBalance>();
            OpenBalance ob = new OpenBalance();
            decimal? sumChqAmt = 0;
            foreach (ChequeInfo chq in openWorkInfo.OpeningCheque)
                sumChqAmt += chq.Amount;

            openWorkInfo.ChequeAmt = sumChqAmt;
            ob.CashAmtTxt = openWorkInfo.CashAmt == 0 || openWorkInfo.CashAmt == null ? "0.00" : openWorkInfo.CashAmt.Value.ToString("#,###.00");
            ob.ChqAmtTxt = openWorkInfo.ChequeAmt == 0 || openWorkInfo.ChequeAmt == null ? "0.00" : openWorkInfo.ChequeAmt.Value.ToString("#,###.00");
            ob.SumAmtTxt = openWorkInfo.TotalAmt == 0 || openWorkInfo.TotalAmt == null ? "0.00" : openWorkInfo.TotalAmt.Value.ToString("#,###.00");
            obList.Add(ob);

            _openBlanceChqList = openWorkInfo.OpeningCheque;

            currentOpenGv.AutoGenerateColumns = false;
            currentOpenGv.DataSource = obList;
            currentOpenGv.ClearSelection();
        }

        private void cashierCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cashierCBox.SelectedIndex >= 0 && _viewReady)
            {
                if (paymentDataGridView.Rows.Count > 0)
                    okButton.Enabled = true;

                cashAmountTextBox.Focus();
                cashAmountTextBox.SelectAll();

                CashierInfo cashier = (CashierInfo)cashierCBox.SelectedItem;
                OpenWorkInfo openWorkInfo = _presenter.LoadCashierOpenBalance(cashier.CashierId, FlowType.MoneyOpeningBalance);
                FillCashierOpenBalance(openWorkInfo);
                _presenter.LoadAdjustOpenBalance(cashier.WorkId);

                if (cashierCBox.SelectedIndex > 0)
                {
                    inputGb.Enabled = true;
                    paymentDataGridView.Enabled = true;
                    cancelAllButton.Enabled = true;
                }
                else
                {
                    ClearScreen();
                    inputGb.Enabled = false;
                    paymentDataGridView.Enabled = false;
                    cancelAllButton.Enabled = false;
                }

                CalculateTotalAmount();
            }
        }

        private void cashAmountTextBox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (cashAmountTextBox.Text != string.Empty)
                {
                    string amtText = null;
                    decimal x = Convert.ToDecimal(cashAmountTextBox.Text);
                    if (x < 0) x = x * (-1);

                    if (x != 0)
                        amtText = x.ToString("#,###.00");
                    else
                        amtText = "0.00";

                    cashAmountTextBox.Text = amtText;
                }
            }
            catch
            {
                DialogResult dlg = MessageBox.Show("กรุณาป้อนจำนวนเงินที่เป็นตัวเลขเท่านั้น", "ป้อนจำนวนเงินไม่ถูกต้อง", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (dlg == DialogResult.OK)
                {
                    cashAmountTextBox.Text = "0.00";
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                }
                else
                {
                    cashAmountTextBox.Text = "0.00";
                }
            }
        }

        private void paymentDataGridView_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (paymentDataGridView.Rows.Count > 0 && cashierCBox.SelectedIndex > 0)
            {
                okButton.Enabled = true;
                totalAmtTxt.Text = CalculateTotalAmount();
            }
            else
                okButton.Enabled = false;

            
        }

        private void paymentDataGridView_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (paymentDataGridView.Rows.Count > 0 && cashierCBox.SelectedIndex > 0)
            {
                okButton.Enabled = true;
                totalAmtTxt.Text = CalculateTotalAmount();
            }
            else
                okButton.Enabled = false;

            totalAmtTxt.Text = CalculateTotalAmount();
        }

        private void cancelAllButton_Click(object sender, EventArgs e)
        {
            if (cashierCBox.SelectedIndex > 0)
            {
                DialogResult dlg = MessageBox.Show("คุณต้องการล้างค่าการป้อนปรับปรุงยอดยกมา \nกรุณากดปุ่ม OK เพื่อยืนยัน", "ล้างค่า", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (dlg == DialogResult.OK)
                {
                    ClearScreen();
                    cashierCBox.Focus();
                }
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            _mode = Mode.Insert;
            _editIndex = 0;
            editIcom.Visible = false;

            if (paymentTypeTabControl.SelectedIndex == 0)
            {
                cashAmountTextBox.Text = "0.00";
                cashAmountTextBox.Focus();
                cashAmountTextBox.SelectAll();
            }
            else
            {
                chequeActualAmountTextBox.Text = "0.00";
                chqNoTxt.Clear();
                chqAccNoTxt.Clear();
                chqDtPicker.Value = DateTime.Today;
                chequeActualAmountTextBox.Focus();
                chequeActualAmountTextBox.SelectAll();
            }
        }
            
        private void currentOpenGv_Leave(object sender, EventArgs e)
        {
            currentOpenGv.ClearSelection();
        }

        private void currentOpenGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex == 0 && Convert.ToDecimal(currentOpenGv.Rows[0].Cells["ChqAmtTxt"].Value) > 0)  //only first row
            //{
            //    ChequeItemView chqItem = new ChequeItemView();
            //    chqItem.Show();
            //}
        }

        private void cashAmountTextBox_Click(object sender, EventArgs e)
        {
            cashAmountTextBox.SelectAll();
        }

        private void chequeActualAmountTextBox_Click(object sender, EventArgs e)
        {
            chequeActualAmountTextBox.SelectAll();
        }

        private void chequeActualAmountTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Enter)
                chqNoTxt.Focus();
        }

        private void chqNoTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                chequeBankComboBox.Focus();
        }

        private void chequeBankComboBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                chqBankSearchButton.Focus();
        }

        private void chqBankSearchButton_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                chqAccNoTxt.Focus();
        }

        private void chqAccNoTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                chqDtPicker.Focus();
        }

        private void chqDtPicker_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                addEditButton.Focus();
        }

        private void paymentTypeTabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (paymentTypeTabControl.SelectedIndex == 0)
            {
                if (_editPtId == "2") //cheque
                {
                    _mode = Mode.Insert;
                    _editIndex = 0;
                    editIcom.Visible = false;
                }

                cashAmountTextBox.Focus();
                cashAmountTextBox.SelectAll();
            }
            else
            {
                if (_editPtId == "1") //cheque
                {
                    _mode = Mode.Insert;
                    _editIndex = 0;
                    editIcom.Visible = false;
                }

                chequeActualAmountTextBox.Focus();
                chequeActualAmountTextBox.SelectAll();
            }
        }

        private void cashAmountTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                addEditButton.Focus();
        }

        private decimal? Positive(decimal? money)
        {
            decimal? ret = 0;
            if (money < 0)
                ret = money * (-1);
            else
                ret = money;

            return ret;
        }

        private void EditRecord(int rowIndex)
        {
            if (rowIndex >= 0)
            {
                _editIndex = rowIndex;
                _mode = Mode.Edit;
                editIcom.Visible = true;
                PaymentMethodInfo pm = (PaymentMethodInfo)paymentDataGridView.Rows[rowIndex].DataBoundItem;
                refNoTxt.Text = pm.Comment;
                flowCBox.SelectedItem = pm.FlowDesc;
                _editPtId = pm.PtId;

                if (pm.PtId == "1") //cash
                {
                    paymentTypeTabControl.SelectedIndex = 0;
                    cashAmountTextBox.Text = Positive(pm.Amount).Value.ToString("#,###.00");
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                }
                else  //cheque
                {
                    List<Bank> bkList = new List<Bank>();
                    bkList.Add(pm.Bank);
                    chequeBankComboBox.ValueMember = "BankKey";
                    chequeBankComboBox.DisplayMember = "BankName";
                    chequeBankComboBox.DataSource = bkList;
                    chequeBankComboBox.SelectedIndex = 0;

                    paymentTypeTabControl.SelectedIndex = 1;
                    chequeActualAmountTextBox.Text = Positive(pm.Amount).Value.ToString("#,###.00");
                    chqNoTxt.Text = pm.ChqNo;
                    chqAccNoTxt.Text = pm.ChqAccNo;
                    
                    chqDtPicker.Value = pm.ChqDt.Value;
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                }
            }
        }

        private void paymentDataGridView_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            EditRecord(e.RowIndex);
        }
    }

    public class OpenBalance
    {
        private string _flowDesc = "ยอดยกมา";
        private string _cashAmtTxt;
        private string _chqAmtTxt;
        private string _sumAmtTxt;

        public string FlowDesc
        {
            get { return _flowDesc; }
        }

        public string CashAmtTxt
        {
            set { _cashAmtTxt = value; }
            get { return _cashAmtTxt; }
        }

        public string ChqAmtTxt
        {
            set { _chqAmtTxt = value; }
            get { return _chqAmtTxt; }
        }

        public string SumAmtTxt
        {
            set { _sumAmtTxt = value; }
            get { return _sumAmtTxt; }
        }
    }
}



