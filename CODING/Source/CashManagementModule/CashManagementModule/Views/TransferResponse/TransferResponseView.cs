//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using System.ComponentModel;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class TransferResponseView : UserControl, ITransferResponseView
    {
        private bool _showDialogResult = true;

        #region "Code Generated"

        public TransferResponseView()
        {
            InitializeComponent();           
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public TransferResponseViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.LoadTransferedRequestItem(Session.User.Id);
        }


        #endregion

        #region "Properties and Variables"

        private List<String> _transferId;

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<CashierMoneyTransferInfo> TransferItem
        {
            set 
            {
                if (value.Count != 0)
                {
                    acceptGv.AutoGenerateColumns = false;
                    BindingList<CashierMoneyTransferInfo> bd = new BindingList<CashierMoneyTransferInfo>(value);
                    acceptGv.DataSource = bd;
                }
                else
                {
                    if(_showDialogResult)
                        MessageBox.Show("ไม่มีรายการเงินโอนเข้า", "ผลลัพธ์", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    _presenter.OnCloseView();
                }
            }
        }

        #endregion   

        #region "Event Handling"

        private void acceptBt_Click(object sender, EventArgs e)
        {
            try
            {
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (IsAnyRowChecked())
                    {
                        if (!IsAnyTransferItemCanceled())
                        {
                            string status = "1"; //accept transfer items
                            string ret = _presenter.ResponseTransferedItems(_transferId, Session.Work.Id, status, Session.Terminal.Id, Session.Branch.Id, Session.User.Id);

                            if (ret == "INVALID")
                                MessageBox.Show("  รายการโอนถูกยกเลิกไปแล้ว \n  กดปุ่ม OK เพื่อไปยังหน้าจอดูสถานะการโอนออก", "ผลลัพธ์", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            else if (ret == "SUCCESS")
                                MessageBox.Show("  ทำการตอบรับการโอนเรียบร้อยแล้ว \n  กดปุ่ม OK เพื่อไปยังหน้าจอดูสถานะการโอนออก", "ผลลัพธ์", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            else
                                MessageBox.Show("  เกิดข้อผิดพลาดระหว่างการทำรายการรับโอน \n  กดปุ่ม OK เพื่อไปยังหน้าจอดูสถานะการโอนออก", "ผลลัพธ์", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            
                            _presenter.RefreshMoneyInTray();
                        }
                        else
                        {
                            MessageBox.Show("มีการแก้ไขรายการการโอนจากผู้โอน\nกรุณาเลือกเมนูเข้าหน้าจอตรวจสอบสถานะการโอนเงินอีกครั้ง", "คำเตือน", MessageBoxButtons.OK);
                            _presenter.LoadTransferedRequestItem(Session.User.Id);
                        }
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }

        private void rejectBt_Click(object sender, EventArgs e)
        {
            try
            {
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (IsAnyRowChecked())
                    {
                        if (!IsAnyTransferItemCanceled())
                        {
                            string status = "2"; //reject transfer items
                            _presenter.ResponseTransferedItems(_transferId, Session.Work.Id, status, Session.Terminal.Id, Session.Branch.Id, Session.User.Id);
                            DialogResult dr = MessageBox.Show("ทำการปฏิเสธการโอนเรียบร้อยแล้ว", "ผลลัพธ์", MessageBoxButtons.OK);
                            //if (dr == DialogResult.OK)
                            //    _presenter.LoadTransferedRequestItem(Session.User.Id);

                            _presenter.RefreshMoneyInTray();
                        }
                        else
                        {
                            DialogResult dr = MessageBox.Show("มีการแก้ไขรายการการโอนจากผู้โอน กรุณากดปุ่ม OK เพื่อแสดงสถานะล่าสุดของรายการการโอน", "คำเตือน", MessageBoxButtons.OK);
                            //if (dr == DialogResult.OK)
                            //    _presenter.LoadTransferedRequestItem(Session.User.Id);
                        }
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }


        #endregion

        #region "Custom Function"

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }


        public void ShowDialogResult(bool show)
        {
            _showDialogResult = show;
        }

        private bool IsAnyRowChecked()
        {
            _transferId = new List<String>();

            for (int i = 0; i < acceptGv.Rows.Count; i++)
            {
                if ((bool)acceptGv.Rows[i].Cells["GCheck"].FormattedValue)
                {
                    string obj = ((CashierMoneyTransferInfo)acceptGv.Rows[i].DataBoundItem).TransferId;
                    _transferId.Add(obj);
                }
            }

            return _transferId.Count > 0 ? true : false;
        }

        private bool IsAnyTransferItemCanceled()
        {
            bool _diffFlag = false;

            List<CashierMoneyTransferInfo> list = _presenter.IsAnyTransferItemCanceled(Session.User.Id);
            List<String> transferIdNew = new List<String>();

            foreach (CashierMoneyTransferInfo obj in list)
                transferIdNew.Add(obj.TransferId);

            foreach (String transferIdOld in _transferId)
            {
                if (transferIdNew.Contains(transferIdOld))
                    _diffFlag = false;
                else
                    _diffFlag = true;
            }

            return _diffFlag;
        }

        #endregion

        private void refreshBt_Click(object sender, EventArgs e)
        {
            _presenter.LoadTransferedRequestItem(Session.User.Id);
        }

        private void acceptGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            //acceptGv.EndEdit(); 
            //bool isCheck = false;
            //DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)acceptGv["TransCheck", e.RowIndex];
            //isCheck = Convert.ToBoolean(cb.Value);
            ////for(int i=0; i < acceptGv.Rows.Count; i++)
            ////{
            ////    DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)acceptGv["TransCheck", i];
            ////    isCheck = Convert.ToBoolean(cb.Value);
            ////    if (isCheck)
            ////        break;
            ////}

            //if (isCheck)
            //{
            //    acceptBt.Enabled = true;
            //    rejectBt.Enabled = true;
            //}
            //else
            //{
            //    acceptBt.Enabled = false;
            //    rejectBt.Enabled = false;
            //}
        }

    }
}



