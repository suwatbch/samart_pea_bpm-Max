//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;
using System.ComponentModel;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class CancelMoneyCheckInView : UserControl, ICancelMoneyCheckInView
    {
        private BindingList<PaymentMethodInfo> _paymentList;
        private List<string> _sapRefList;
        private bool _loadReady = false;
        private System.Timers.Timer _timer;

        #region "Code Generated"

        public CancelMoneyCheckInView()
        {
            InitializeComponent();
            paymentDataGridView.AutoGenerateColumns = false;
            _sapRefList = new List<string>();
            _sapRefList.Add("");
            _timer = new System.Timers.Timer();
            _timer.Interval = 100;
            _timer.Elapsed += new System.Timers.ElapsedEventHandler(OnLoadTicker);
            _timer.Start();            
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CancelMoneyCheckInViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        private void OnLoadTicker(object sender, System.Timers.ElapsedEventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            if (!_loadReady)
            {
                _timer.Stop();
                _loadReady = true;
                _presenter.LoadSapRefToCBox(Session.Work.Id);    
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<PaymentMethodInfo> MoneyCheckedIn
        {
            set
            {
                _paymentList = new BindingList<PaymentMethodInfo>(value);
                paymentDataGridView.DataSource = _paymentList;
                paymentDataGridView.ClearSelection();

                CalculateTotalAmount();
                okButton.Focus();
            }
        }

        public List<string> SapReferenceList
        {
            set {
                _sapRefList = new List<string>();
                _sapRefList.Add("");
                foreach (string s in value)
                    _sapRefList.Add(s);

                FillSapReference();
                this.Cursor = Cursors.Default;
            }
        }

        #endregion   

        #region Custom Function

        private void FillSapReference()
        {
            sapRefNoCBox.DataSource = _sapRefList;
            _loadReady = true;
        }
     
        private void CalculateTotalAmount()
        {
            decimal total = 0;

            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                //total = total + Convert.ToDecimal(paymentDataGridView.Rows[i].Cells["Amount"].Value);
                total = total + Convert.ToDecimal(paymentDataGridView.Rows[i].Cells["TotalAmt"].Value);

            totalAmtTxt.Text = total == 0 ? "0.00" : total.ToString("#,###.00");
        }

        #endregion

        #region Event Handling

        private void paymentDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            string x = paymentDataGridView.Rows[e.RowIndex].Cells["PtId"].Value.ToString();

            if (x == "1")
                paymentDataGridView.Rows[e.RowIndex].Cells["PtName"].Value = "เงินสด";
            else
                paymentDataGridView.Rows[e.RowIndex].Cells["PtName"].Value = "เช็ค";
        }

        #endregion

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            try
            {
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    string sapRef = (string)sapRefNoCBox.SelectedItem;
                    DialogResult dlg = MessageBox.Show("คุณต้องการยกเลิกการนำเงินเข้าระบบ \nเลขที่อ้างอิง: " + sapRef, "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);

                    if (dlg == DialogResult.OK)
                    {
                        if (Authorization.IsAuthorized(SecurityNames.CancelCashCheckingIn, true))
                        {
                            CancelMoneyCheckedInInfo param = new CancelMoneyCheckedInInfo();
                            param.WorkId = Session.Work.Id;
                            param.SapRefNo = sapRef;
                            param.PaymentDt = Session.BpmDateTime.Now;
                            param.PosId = Session.Terminal.Id;
                            param.CashierId = Session.User.Id;
                            param.CashierName = Session.User.Name;
                            param.BranchId = Session.Branch.Id;
                            param.ModifiedBy = Session.User.Id;

                            int status = _presenter.CancelMoneyCheckIn(param);
                            if (status == 1) //เงินสดไม่พอ สำหรับการยกเลิก
                            {
                                MessageBox.Show("เงินสดในลิ้นชักมีน้อยกว่าจำนวนเงินที่ต้องการยกเลิก \nกรุณากดปุ่ม OK เพื่อทำงานต่อ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            else if (status == 2)//ไม่สามารถยกเลิกเช็ค (เช็คมีการโอน หรือ ขณะรอการรับโอน)
                            {
                                MessageBox.Show("เช็คบางรายการถูกนำออกไปจากลิ้นชัก หรือขณะรอตอบรับการโอนออก \nกรุณากดปุ่ม OK เพื่อทำงานต่อ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            else if (status == 0)
                                MessageBox.Show("ทำการยกเลิกรายการเรียบร้อยแล้ว \nกรุณากดปุ่ม OK เพื่อทำงานต่อ", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            else
                                return;

                            ClearScreen();
                        }
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnCloseView();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }

        private void ClearScreen()
        {
            //ล้างค่า
            paymentDataGridView.Rows.Clear();
            totalAmtTxt.Text = "0.00";
            _presenter.LoadSapRefToCBox(Session.Work.Id);
        }

        private void cancelAllButton_Click(object sender, EventArgs e)
        {
            ClearScreen();
        }

        private void sapRefNoCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_loadReady)
            {
                this.Cursor = Cursors.WaitCursor;
                try
                {
                    string sapRef = (string)sapRefNoCBox.SelectedItem;
                    if (string.IsNullOrEmpty(sapRef))
                    {
                        paymentDataGridView.Rows.Clear();
                        totalAmtTxt.Text = "0.00";
                        okButton.Enabled = false;
                        this.Cursor = Cursors.Default;
                        return;
                    }

                    //it should be always found!
                    //if (_presenter.ExistSapRefNo(sapRef, Session.Work.Id))
                    //{
                    _presenter.LoadMoneyCheckedIn(sapRef, Session.Work.Id);
                    okButton.Enabled = true;
                    //}
                    //else
                    //    MessageBox.Show("ไม่พบหมายเลขอ้างอิงในระบบ กรุณาป้อนใหม่", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
                }

                this.Cursor = Cursors.Default;
            }
        }

        private void paymentDataGridView_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (paymentDataGridView.Rows.Count > 0)
                okButton.Enabled = true;
            else
                okButton.Enabled = false;
        }

        private void paymentDataGridView_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (paymentDataGridView.Rows.Count > 0)
                okButton.Enabled = true;
            else
                okButton.Enabled = false;
        }

        private void quitBt_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }



    }
}



