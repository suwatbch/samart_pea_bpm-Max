//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.IO;
using System.Text.RegularExpressions;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class CloseWorkSummaryView : UserControl, ICloseWorkSummaryView
    {
        private string _offlineDataDir = string.Format("{0}/{1}", BPMPath.ConfigPath, "offlineData");
        private CloseWorkSummaryInfo _closeWorkSummaryList;
        private System.Timers.Timer _timer;
        private bool _loadReady = false;

        private System.Timers.Timer _timerRefreshBt;
        private int counterRefreshBtDefault = 30;
        private int counterRefreshBt = 30;

        #region "Code Generated"

        public CloseWorkSummaryView()
        {
            InitializeComponent();
            itemDetailGv.AutoGenerateColumns = false;
            Line1.AutoGenerateColumns = false;
            Line2.AutoGenerateColumns = false;
            AdjustHeaderPosition();
            _timer = new System.Timers.Timer();
            _timer.Interval = 400;
            _timer.Elapsed += new System.Timers.ElapsedEventHandler(OnLoadTicker);
            _timer.Start();

            _timerRefreshBt = new System.Timers.Timer(10);
            _timerRefreshBt.AutoReset = true;
            _timerRefreshBt.Elapsed += new System.Timers.ElapsedEventHandler(OnLoad_TimerRefreshBt);
            _timerRefreshBt.Start();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CloseWorkSummaryViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public CloseWorkSummaryInfo CloseWorkSummary
        {
            set { 
                _closeWorkSummaryList = value;
                FillWorkFlow();
                Line1.ClearSelection();
                Line2.ClearSelection();
                WaitingForm.HideForm();
                this.Cursor = Cursors.Default;
            }
            get { return _closeWorkSummaryList; }
        }

        public void CloseView()
        {
            //Disable POS menu and Cashier menu here
            _presenter.RenewWork();

            Session.Work.Id = null;
            _presenter.OnCloseView();
        }

        private void OnLoadTicker(object sender, System.Timers.ElapsedEventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            
            if(!_loadReady)
            {
                _timer.Stop();
                _loadReady = true;
                _presenter.ShowCloseWorkSummary(Session.Work.Id);
            }
        }


        #endregion   

        private void AdjustHeaderPosition()
        {
            int x = itemDetailGv.RowHeadersWidth + itemDetailGv.Columns["Description"].Width + 9;
            int y = itemDetailGv.Location.Y - (sumHeader.Height - 1) ;

            Point headerLocation = new Point(x, y);
            sumHeader.Location = headerLocation;
        }

        private void FillWorkFlow()
        {
            itemDetailGv.DataSource = _closeWorkSummaryList.FlowList;
            if (_closeWorkSummaryList.FlowList.Count > 0)
                summaryGb.Text = "รายการรายละเอียดเงินเข้า - ออกระบบ  ของวันที่ " + _closeWorkSummaryList.FlowList[0].FlowDate;

            //sum flow
            //List<FlowSummaryInfo> sumFlowList = new List<FlowSummaryInfo>();
            //FlowSummaryInfo sumFlow = new FlowSummaryInfo();
            //sumFlow.Description = string.Format("รวมทั้งหมด  {0}  รายการ", _closeWorkSummaryList.FlowList.Count.ToString());
            //sumFlow.

            List<CloseWorkSumAll> topList = new List<CloseWorkSumAll>();
            CloseWorkSumAll top = new CloseWorkSumAll();
            top.Sum1 = _closeWorkSummaryList.CashLastWork;
            top.Sum2 = _closeWorkSummaryList.ChequeLastWork;
            top.Sum3 = _closeWorkSummaryList.TotalPayIn;
            top.Sum4 = 0; //not use
            topList.Add(top);
            Line1.DataSource = topList;
            
            List<CloseWorkSumAll> midleList = new List<CloseWorkSumAll>();
            CloseWorkSumAll midle = new CloseWorkSumAll();
            midle.Sum1 = _closeWorkSummaryList.SumCashIn;
            midle.Sum2 = _closeWorkSummaryList.SumChequeIn;
            midle.Sum3 = _closeWorkSummaryList.SumCashOut;
            midle.Sum4 = _closeWorkSummaryList.SumChequeOut;
            midleList.Add(midle);
            Line2.DataSource = midleList;

            List<CloseWorkSumAll> buttonList = new List<CloseWorkSumAll>();
            CloseWorkSumAll button = new CloseWorkSumAll();
            button.Sum1 = _closeWorkSummaryList.TotalCash;
            button.Sum2 = _closeWorkSummaryList.TotalCheque;
            button.Sum3 = _closeWorkSummaryList.CashNextWork;
            button.Sum4 = _closeWorkSummaryList.ChequeNextWork;
            buttonList.Add(button);
            Line3.DataSource = buttonList;

            decimal? total = _closeWorkSummaryList.CashNextWork.Value + _closeWorkSummaryList.ChequeNextWork.Value;
            if (total.Value == 0)
                totalAmountTxt.Text = "0.00";
            else 
                totalAmountTxt.Text = total.Value.ToString("#,###.00");
        }

        private void CloseWork()
        {
            if (Authorization.ConfirmPassword())
            {
                if (Session.Work.Id != null)
                {
                    CloseWorkSubmitInfo submitInfo = new CloseWorkSubmitInfo();
                    submitInfo.WorkId = Session.Work.Id;
                    submitInfo.CashierId = Session.User.Id;
                    submitInfo.CloseWorkBy = Session.User.Id;
                    submitInfo.BranchId = Session.Branch.Id;
                    submitInfo.PosId = Session.Terminal.Id;
                    _presenter.CloseWork(submitInfo);
                }
                else
                    MessageBox.Show("ยังไม่เปิดกะ และไม่อนุญาติให้ใช้ฟังก์ชันนี้ก่อนเปิดกะ", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                MessageBox.Show("รหัสผ่านไม่ถูกต้อง ระบบไม่อนุญาติให้ทำสรุปรายการ\nกดปุ่ม OK เพื่อกลับไปหน้าจอสรุปรายการ", "ไม่อนุญาติ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
        }

        //ปิดบัญชี
        private void CloseWorkWithBaseline()
        {
            if (Authorization.ConfirmPassword())
            {
                if (Session.Work.Id != null)
                {
                    this.Cursor = Cursors.WaitCursor;
                    CloseWorkSubmitInfo submitInfo = new CloseWorkSubmitInfo();
                    submitInfo.WorkId = Session.Work.Id;      
                    submitInfo.CashierId = Session.User.Id;
                    submitInfo.CloseWorkBy = Session.User.Id;
                    submitInfo.BranchId = Session.Branch.Id;
                    submitInfo.PosId = Session.Terminal.Id;
                    _presenter.SetBaseline(Session.Work.Id, Session.Branch.Id);
                    _presenter.CloseWork(submitInfo);
                    _presenter.SignalServerSyncup();
                    this.Cursor = Cursors.Default;
                }
                else
                    MessageBox.Show("ยังไม่เปิดกะ และไม่อนุญาติให้ใช้ฟังก์ชันนี้ก่อนเปิดกะ", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                MessageBox.Show("รหัสผ่านไม่ถูกต้อง ระบบไม่อนุญาติให้ทำสรุปรายการ\nกดปุ่ม OK เพื่อกลับไปหน้าจอสรุปรายการ", "ไม่อนุญาติ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private bool IsPendingOfflineFile()
        {
            Regex rg = new Regex("[0-9]*-[0-9]*-[0-9]*.txt", RegexOptions.IgnoreCase);
            string offlineDir = string.Format("{0}\\offlineData", BPMPath.ConfigPath);
            string[] files = Directory.GetFiles(offlineDir);
            foreach(string f in files)
                if(rg.IsMatch(f)) return true;

            return false;
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            try
            {
                okBt.Enabled = false;
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (IsPendingOfflineFile())
                    {
                        MessageBox.Show("พบไฟล์การรับชำระเงินแบบ Offline ค้างในระบบ \nไฟล์อาจเกิดความเสียหายซึ่งทำให้ไม่สามารถประมวลผลอัตโนมัติได้ \nกรุณาติดต่อ BPM Support", 
                                    "ไฟล์คงค้าง", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                        okBt.Enabled = true;
                        return;
                    }

                    //has permission to force everybody close work
                    //main cashier is closing work
                    if (Authorization.IsAuthorized(SecurityNames.ForceCloseWork, false))
                    {
                        //must closed all && total amount = 0
                        string status = _presenter.IsAllWorkClosed(Session.Work.Id, Session.Branch.Id);
                        if (status == "1")
                        {
                            MessageBox.Show("คุณเป็นแคชเชียร์หลักคนสุดท้าย กรุณาทำขั้นตอนต่อไปนี้เพื่อปิดบัญชี \n  1) บังคับโอนเงินจากแคชเชียร์อื่นมาให้คุณทั้งหมด (เมนู 1.2)" +
                                                    "\n  2) ปิดกะของแคชเชียร์อื่นให้หมด (เมนู 1.9)\n  3) ปิดกะของคุณเอง (เมนู 1.8) ", "ไม่อนุญาติให้ปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop, MessageBoxDefaultButton.Button2);

                            okBt.Enabled = true;
                            return;
                        }
                        else if(status == "2")
                        {
                            DialogResult dlg = MessageBox.Show("ระบบไม่สามารถปิดบัญชีประจำวันได้\nเนื่องจากตรวจพบว่ายังมีกะที่เปิดค้างไว้หรือมีเงินคงค้างในแคชเชียร์อื่น\n\nกดปุ่ม OK เพื่อยืนยันสรุปยอดเงินคงเหลือ\nที่เปิดกะวันที่: " + Session.Work.OpenWorkDt.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) +
                                        "  เวลา: " + Session.Work.OpenWorkDt.ToString("HH:mm", new CultureInfo("th-TH")),
                                        "ยืนยันปิดกะ", MessageBoxButtons.OKCancel, MessageBoxIcon.Stop, MessageBoxDefaultButton.Button2);


                            if (dlg == DialogResult.OK)
                            {

                                ci = IsClosedWork();
                                if (ci.CloseWorkBy == null)
                                {
                                    CloseWork();
                                }
                                else
                                {
                                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                                    _presenter.OnCashierOpenWork("tmp");
                                    _presenter.OnCloseView();
                                }

                            }
                            else
                            {
                                okBt.Enabled = true;
                                return;
                            }
                        }
                        else
                        {
                            BaselineConfirm bc = new BaselineConfirm();
                            bc.Desc = string.Format("สรุปยอดของวันที่: {0} เวลา: {1} น.",  Session.Work.OpenWorkDt.ToString("dd/MM/yyyy", new CultureInfo("th-TH")),
                                Session.Work.OpenWorkDt.ToString("HH:mm", new CultureInfo("th-TH")));
                            bc.ShowDialog();

                            if (bc.DialogResult == DialogResult.OK)
                            {
                                ci = IsClosedWork();
                                if (ci.CloseWorkBy == null)
                                {
                                    CloseWorkWithBaseline();
                                }
                                else
                                {
                                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                                    _presenter.OnCashierOpenWork("tmp");
                                    _presenter.OnCloseView();
                                }
                            }

                        }
                    }
                    else
                    {
                        if (Convert.ToDecimal(totalAmountTxt.Text) != 0)
                        {
                            MessageBox.Show("   พบเงินคงค้างในลิ้นชัก ซึ่งจะทำให้ไม่สามารถปิดบัญชีได้\n   กรุณาโอนเงินทั้งหมดไปที่แคชเชียร์หลักก่อนปิดกะ\n\n ",
                                                            "เงินคงค้าง", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        }
                        else
                        {
                            DialogResult dlg = MessageBox.Show("   คุณต้องการสรุปยอดเงินคงเหลือประจำวันใช่หรือไม่\n\n   สรุปยอดของวันที่: " + Session.Work.OpenWorkDt.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) +
                            "  เวลา: " + Session.Work.OpenWorkDt.ToString("HH:mm", new CultureInfo("th-TH")),
                            "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                            if (dlg == DialogResult.OK)
                            {

                                ci = IsClosedWork();
                                if (ci.CloseWorkBy == null)
                                {
                                    CloseWork();
                                }
                                else
                                {
                                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                                    _presenter.OnCashierOpenWork("tmp");
                                    _presenter.OnCloseView();
                                }

                            }

                        }
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnCloseView();
                }
            }
            catch (Exception ex)
            {
                okBt.Enabled = true;
                this.Cursor = Cursors.Default;
                ServiceHelper.TransformErrorMessage(ex);
            }
            okBt.Enabled = true;
        }
        
        private void reportBt_Click(object sender, EventArgs e)
        {
            WorkStatus ci = IsClosedWork();
            if (ci.CloseWorkBy == null)
            {
                DialogResult dlg = MessageBox.Show("คุณต้องการแสดงรายงานการรับ - จ่ายเงินใช่หรือไม่", "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                if (dlg == DialogResult.OK)
                {
                    if (Session.Work.Id != null)
                        _presenter.PreviewWorkFlowReport(Session.Work.Id);
                    else
                        MessageBox.Show("ยังไม่เปิดกะ และไม่อนุญาติให้ใช้ฟังก์ชันนี้ก่อนเปิดกะ", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                NotifyMsg.ShowForceCloseWorkMsg(ci);
                _presenter.OnCashierOpenWork("tmp");
                _presenter.OnCloseView();
            }
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        private void itemDetailGv_Resize(object sender, EventArgs e)
        {
            AdjustHeaderPosition();
        }

        private void refreshBt_Click(object sender, EventArgs e)
        {
            _loadReady = false;
            _timer.Start();
            _timerRefreshBt.Start();
            _presenter.OnEnableTrayMenu(false);
        }

        private void OnLoad_TimerRefreshBt(object sender, System.Timers.ElapsedEventArgs e)
        {
            //_presenter.OnEnableTrayMenu(false);
            refreshBt.Enabled = false;
            _timerRefreshBt.Interval = 1000;
            if (counterRefreshBt > 0)
            {
                refreshBt.Image = null;
                refreshBt.Text = counterRefreshBt.ToString();
                --counterRefreshBt;
                _timerRefreshBt.Start();
            }
            else //(counterRefreshBt <= 0)
            {
                refreshBt.Text = "";
                refreshBt.Image = PEA.BPM.CashManagementModule.Properties.Resources.RepeatHSR;
                _timerRefreshBt.Stop();
                _timerRefreshBt.Interval = 10;
                refreshBt.Enabled = true;
                _presenter.OnEnableTrayMenu(true);
                counterRefreshBt = counterRefreshBtDefault;
            }
        }
      
    }
}



