//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.CashManagementModule.Interface.Services;

namespace PEA.BPM.CashManagementModule
{
    public class CloseWorkSummaryViewPresenter : Presenter<ICloseWorkSummaryView>
    {
        private ICashManagementServices _cashMgntServices;
        private ICashReportServices _cashReportServices;

        [InjectionConstructor]
        public CloseWorkSummaryViewPresenter([ServiceDependency] ICashManagementServices cashMgntServices,
                                                                 ICashReportServices cashReportServices)
        {
            _cashMgntServices = cashMgntServices;
            _cashReportServices = cashReportServices;
        }

        //[EventSubscription(EventTopicNames.WaitCursor, Thread = ThreadOption.UserInterface)]
        //public void ShowWaitCursor(object sender, EventArgs<bool> e)
        //{
        //    View.OnWaitCursor(e.Data);
        //}

        public string IsAllWorkClosed(string workId, string branchId)
        {
            return _cashMgntServices.IsAllWorkClosed(workId, branchId);
        }

        public void SetBaseline(string workId, string branchId)
        {
            _cashMgntServices.SetBaseline(null, workId, branchId);
        }

        [EventPublication(EventTopicNames.CloseWorkFlowItem, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<string>> CloseWorkFlowItemHandler;
        public void ShowCloseWorkSummary(string workId)
        {
            if (CloseWorkFlowItemHandler != null)
                CloseWorkFlowItemHandler(this, new EventArgs<string>(workId));
        }

        [EventPublication(EventTopicNames.CloseWorkNow, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<CloseWorkSubmitInfo>> CloseWorkNowHandler;
        public void CloseWork(CloseWorkSubmitInfo submitInfo)
        {
            if (CloseWorkNowHandler != null)
                CloseWorkNowHandler(this, new EventArgs<CloseWorkSubmitInfo>(submitInfo));
        }

        [EventPublication(EventTopicNames.TriggerExport, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> TriggerExportHandler;
        public void TriggerSAPExport()
        {
            if (TriggerExportHandler != null)
                TriggerExportHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.TriggerSyncUp, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> TriggerSyncUpHandler;
        public void SignalServerSyncup()
        {
            if (TriggerSyncUpHandler != null)
                TriggerSyncUpHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.WorkFlowReport, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> WorkFlowReportHandler;
        public void PreviewWorkFlowReport(string workId)
        {
            if (WorkFlowReportHandler != null)
                WorkFlowReportHandler(this, new EventArgs<string>(workId));
        }

        [EventPublication(EventTopicNames.RenewWork, PublicationScope.Global)]
        public event EventHandler<EventArgs> RenewWorkHandler;
        public void RenewWork()
        {
            if (RenewWorkHandler != null)
                RenewWorkHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.CashierOpenWork, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> CashierOpenWorkHandler;
        public void OnCashierOpenWork(string tmp)
        {
            if (CashierOpenWorkHandler != null)
                CashierOpenWorkHandler(this, new EventArgs<string>(tmp));
        }

        [EventPublication(EventTopicNames.EnableTrayMenu, PublicationScope.Global)]
        public event EventHandler<EventArgs<bool>> EnableTrayMenuHandler;
        public void OnEnableTrayMenu(bool isEnable)
        {
            if (EnableTrayMenuHandler != null)
                EnableTrayMenuHandler(this, new EventArgs<bool>(isEnable));
        }


        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

