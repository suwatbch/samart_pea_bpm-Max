//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class ReportMoneyFlowView : UserControl, IReportMoneyFlowView
    {
        private List<CashierInfo> _cashierList;

        #region "Code Generated"

        public ReportMoneyFlowView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportMoneyFlowViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            this.Cursor = Cursors.WaitCursor;
            _presenter.LoadCashierCBox(Session.Branch.Id);
            fromDateTxt.Focus();
        }


        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<CashierInfo> CashierList
        { 
            set { _cashierList = value;
                FillCashierCBox();
            }
        }

        #endregion   


        private void FillCashierCBox()
        {
            CashierInfo cs = new CashierInfo();
            cs.CashierId = "%";
            cs.CashierName = "á¤ªàªÕÂÃì·Ø¡¤¹";
            _cashierList.Add(cs);
            cashierCBox.DataSource = _cashierList;
            cashierCBox.DisplayMember = "CashierName";
            cashierCBox.ValueMember = "CashierId";
            cashierCBox.SelectedIndex = _cashierList.Count - 1;
        }

        private void previewBt_Click(object sender, EventArgs e)
        {
            try
            {
                ReportParam param = new ReportParam();
                param.FromDate = new DateTime(fromDateTxt.Value.Year, fromDateTxt.Value.Month, fromDateTxt.Value.Day, 0, 0, 0);
                param.ToDate = new DateTime(toDateTxt.Value.Year, toDateTxt.Value.Month, toDateTxt.Value.Day, 0, 0, 0);
                TimeSpan t = new TimeSpan(23, 59, 59);
                param.ToDate = param.ToDate + t;
                CashierInfo si = (CashierInfo)cashierCBox.SelectedItem;
                param.CashierId = si.CashierId;
                param.PosId = "%";
                param.BranchId = Session.Branch.Id;
                _presenter.ShowReport(param);
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void fromDateTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                toDateTxt.Focus();
        }

        private void toDateTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                previewBt.Focus();
        }
      
    }
}



