//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.CashManagementModule.Properties;
using System.ComponentModel;
using System.Text.RegularExpressions;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class MoneyTransferManagementView : UserControl, IMoneyTransferManagementView
    {
        private bool _hasPermission = false;
        private TrayMoneyInfo _moneyInTray;
        private TrayMoneyInfo _moneyInTrayLastRequest;
        private TrayMoneyInfo _moneyInTrayValidation;
        private List<GLBankInfo> _glBankList;
        private List<GLBankAccountInfo> _glBankAccountList;
        private bool _isLoadReady = false;
        private bool _isMoneyLoaded = false;
        private CashierInfo _sender;
        private CashierInfo _receiver;
        private CashierInfo _commander;
        private decimal _currentCashChosenValue;
        private BindingList<ChequeInfo> _chosenChequeList;
        private string _chosenChqTxt;
        private string _senderWorkId;
        private bool _isForceTrans;
        private System.Timers.Timer _timer;
        private System.Timers.Timer _timerRefreshBt;
        private int counterRefreshBtDefault = 30;
        private int counterRefreshBt = 30;
            

        public void ShowSuccess(string msg)
        {
            MessageBox.Show(msg, "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            this.Cursor = Cursors.Default;
        }

        public void SetMoneyInTray2MoneyInTrayLastRequest()
        {
            _moneyInTrayLastRequest = _moneyInTray.ToNewObject();
        }

        public TrayMoneyInfo MoneyInTray
        {
            set { 
                _moneyInTray = value;
                if (_moneyInTray.CashAmount != null) FillTrayMoneyGv(); //init
            }
            get { return _moneyInTray; }
        }

        public TrayMoneyInfo MoneyInTrayLastRequest
        {
            set {
                _moneyInTrayLastRequest = value;
                //TrayMoneyInfo MoneyInTray_Temp = new TrayMoneyInfo();
                //MoneyInTray_Temp.CopyFrom(value);

                MoneyInTray = _moneyInTrayLastRequest.ToNewObject();
                //FillTrayMoneyGvOffline();
            }
            get { return _moneyInTrayLastRequest; }
        }

        public TrayMoneyInfo MoneyInTrayValidation
        {
            set
            {
                _moneyInTrayValidation = value;
            }
            get { return _moneyInTrayValidation; }
        }

        public List<GLBankInfo> GLBankList
        {
            set { _glBankList = value;
            FillBank();
            }
        }

        public string SenderWorkId
        {
            set {
                if (_senderWorkId != value)
                {
                    _senderWorkId = value;
                    RefreshTrayMoney();
                }
            }
        }

        public List<GLBankAccountInfo> GLBankAccountList
        {
            set { _glBankAccountList = value;
            FillBankAccount();
            }
        }

        public CashierInfo SenderHeadline
        {
            set {

                try
                {
                    if( !_sender.CashierId.Trim().Equals(value.CashierId.Trim()) )
                        RefreshScreen();

                    _sender = value;

                    senderBt.Text = string.Format("ผู้โอน : <{0}-{1}>", _sender.CashierId, _sender.CashierName);

                    //change UI mask
                    if (_sender.CashierId != _commander.CashierId)
                    {
                        if (_sender.Status == "0") //ปิดกะอยู่ จะโอนให้ได้เฉพาะ ผู้ออกคำสั่ง (cahier นี้)
                        {
                            _receiver = new CashierInfo();
                            _receiver.CashierId = Session.User.Id;
                            _receiver.CashierName = Session.User.Name;
                            ReceiverHeadline = _receiver;
                            receiverBt.Enabled = false;
                        }
                        else if (_sender.Status == "1") //must be only 0 or 1
                        {
                            receiverBt.Enabled = true;
                        }

                        _isForceTrans = true;
                        _senderWorkId = _sender.WorkId;
                        trayCashTxt.BackColor = Color.Salmon;
                        chqPanel.BackColor = Color.Salmon;
                        trayGrpBox.Text = "เงินในลิ้นชัก - ของ (" + _sender.CashierId + ") " + _sender.CashierName;
                        trayGrpBox.ForeColor = Color.Salmon;
                        chqPanel.ForeColor = Color.Black;
                        //RefreshTrayMoney();
                        RefreshTrayMoneyOffline();
                    }
                    else
                    {
                        _isForceTrans = false;
                        _senderWorkId = Session.Work.Id;
                        trayCashTxt.BackColor = System.Drawing.SystemColors.Control;
                        chqPanel.BackColor = System.Drawing.SystemColors.Control;
                        trayGrpBox.ForeColor = Color.Black;
                        trayGrpBox.Text = "เงินในลิ้นชัก";
                        RefreshTrayMoneyOffline();
                    }

                    if (_receiver != null && _receiver.CashierId == _sender.CashierId)
                    {
                        _receiver = null;
                        receiverBt.Text = "ผู้รับโอน : <ไม่ระบุ>";
                        receiverBt.Enabled = true;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    
                }
            }

        }

        public CashierInfo ReceiverHeadline
        {
            set
            {
                _receiver = value;
                receiverBt.Text = string.Format("ผู้รับโอน : <{0}-{1}>", _receiver.CashierId, _receiver.CashierName);
            }
        }

        #region "Code Generated"

        private void FillTrayMoneyGv()
        {
            //fill cash
            if (_moneyInTray.CashAmount.Value == 0)
                trayCashTxt.Text = "0.00";
            else
                trayCashTxt.Text = _moneyInTray.CashAmount.Value.ToString("#,##.00");

            //fill cheque
            checkGv.Enabled = false;
            checkGv.DataSource = _moneyInTray.ChequeList;
            checkGv.Enabled = true;
            ChosenSumFooter();
            checkGv.ClearSelection();
            chosenSumFooterGv.ClearSelection();
            checkSumFooterGv.ClearSelection();
            ChequeSumFooter();
            SortCheque();
            this.Cursor = Cursors.Default;
        }

        public MoneyTransferManagementView()
        {
            InitializeComponent();
            checkGv.AutoGenerateColumns = false;
            chosenCheckGv.AutoGenerateColumns = false;
            checkSumFooterGv.AutoGenerateColumns = false;
            chosenSumFooterGv.AutoGenerateColumns = false;
            _chosenChequeList = new BindingList<ChequeInfo>();
            sortCBox.SelectedIndex = 0;
      
            //allow to define sender and receiver
            if (_hasPermission)
                senderBt.Enabled = true;
            else
                senderBt.Enabled = false;

            senderBt.Text = string.Format("ผู้โอน : <{0}-{1}>", Session.User.Id, Session.User.Name);
            _sender = new CashierInfo();
            _sender.CashierId = Session.User.Id; //set default
            _sender.CashierName = Session.User.Name;
            _senderWorkId = Session.Work.Id;
            _commander = new CashierInfo();
            _commander.CashierId = Session.User.Id;
            _commander.CashierName = Session.User.Name;
            _timer = new System.Timers.Timer();
            _timer.Interval = 400;
            _timer.Elapsed += new System.Timers.ElapsedEventHandler(OnLoadTicker);
            _timer.Start();

            _timerRefreshBt = new System.Timers.Timer(10);
            _timerRefreshBt.AutoReset = true;
            _timerRefreshBt.Elapsed += new System.Timers.ElapsedEventHandler(OnLoad_TimerRefreshBt);
            _timerRefreshBt.Start();

        }

        public void RefreshTrayMoney()
        {
            _isMoneyLoaded = false;
            _timer.Start();
        }


        private void RefreshTrayMoneyOffline()
        {
            this.Cursor = Cursors.WaitCursor;

            //_presenter.LoadBankAccount(Session.Branch.Id.Substring(0, 4));
            if (Session.Work.Id == null)
            {
                MessageBox.Show("ผู้ใช้ต้องเปิดกะก่อนใช้งานฟังก์ชันนี้", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                RefreshTrayMoneyOffline();
                return;
            }

            MoneyInTray = MoneyInTrayLastRequest.ToNewObject();
        }

        private void FillBank()
        {
            //To prevent default selection, add none to the first row
            bankCBox.DisplayMember = "BankName";
            bankCBox.ValueMember = "BankKey";
            bankCBox.DataSource = _glBankList;
            if (_glBankList.Count > 0)
            {
                bankCBox.SelectedIndex = 0;
            }

            _isLoadReady = true;
        }

        private void FillBankAccount()
        {
            if (_isLoadReady)
            {
                object bankInfo = bankCBox.SelectedItem;
                if (bankInfo != null)
                {
                    GLBankInfo selected = (GLBankInfo)bankInfo;
                    List<GLBankAccountInfo> toFillAcc = FilterByBankKey(selected.BankKey);
                    bankAccCBox.DisplayMember = "BankAccountWithAccountType";
                    bankAccCBox.ValueMember = "BankAccount";
                    bankAccCBox.DataSource = toFillAcc;
                }
            }
        }

        private List<GLBankAccountInfo> FilterByBankKey(string bankKey)
        {
            List<GLBankAccountInfo> accList = new List<GLBankAccountInfo>();
            foreach (GLBankAccountInfo acc in _glBankAccountList)
            {
                if (acc.BankKey == bankKey)
                    accList.Add(acc);
            }
            return accList;
        }

        private void ChequeSumFooter()
        {
            decimal sumAllCheck = 0;
            foreach (DataGridViewRow r in checkGv.Rows)
            {
                ChequeInfo chq = (ChequeInfo)r.DataBoundItem;
                sumAllCheck += chq.Amount.Value;
            }

            string sumAllTxt = null;
            if (sumAllCheck == 0)
                sumAllTxt = "0.00";
            else
                sumAllTxt = sumAllCheck.ToString("#,###.00");

            CloseWorkSumAll s = new CloseWorkSumAll();
            s.Desc = string.Format(" รวมเช็ค {0} รายการ  จำนวนเงิน {1} บาท", checkGv.Rows.Count.ToString(), sumAllTxt);
            List<CloseWorkSumAll> slist = new List<CloseWorkSumAll>();
            slist.Add(s);
            checkSumFooterGv.ClearSelection();
            checkSumFooterGv.DataSource = slist;

            decimal trayCash = Convert.ToDecimal(trayCashTxt.Text);
            decimal cashCheque = trayCash + sumAllCheck;

            if (cashCheque == 0)
                traySumTxt.Text = "รวมทั้งหมด 0.00 บาท";
            else
                traySumTxt.Text = string.Format(" รวมทั้งหมด {0} บาท", cashCheque.ToString("#,###.00"));

            //if (transCashierRb.Checked)
            //{
            string sumCashPendingTxt = _moneyInTray.CashPendingAmount.Value == 0 ? "0.00" : _moneyInTray.CashPendingAmount.Value.ToString("#,###.00");
            traySumTxt.Text += ",  เงินสดรอตอบรับ " + sumCashPendingTxt + " บาท";
            //}
        }


        private void ChequeSumFooterOffline()
        {
            decimal sumAllCheck = 0;
            foreach (DataGridViewRow r in checkGv.Rows)
            {
                ChequeInfo chq = (ChequeInfo)r.DataBoundItem;
                sumAllCheck += chq.Amount.Value;
            }

            string sumAllTxt = null;
            if (sumAllCheck == 0)
                sumAllTxt = "0.00";
            else
                sumAllTxt = sumAllCheck.ToString("#,###.00");

            CloseWorkSumAll s = new CloseWorkSumAll();
            s.Desc = string.Format(" รวมเช็ค {0} รายการ  จำนวนเงิน {1} บาท", checkGv.Rows.Count.ToString(), sumAllTxt);
            List<CloseWorkSumAll> slist = new List<CloseWorkSumAll>();
            slist.Add(s);
            checkSumFooterGv.ClearSelection();
            checkSumFooterGv.DataSource = slist;

            decimal trayCash = Convert.ToDecimal(trayCashTxt.Text);
            decimal cashCheque = trayCash + sumAllCheck;

            if (cashCheque == 0)
                traySumTxt.Text = "รวมทั้งหมด 0.00 บาท";
            else
                traySumTxt.Text = string.Format(" รวมทั้งหมด {0} บาท", cashCheque.ToString("#,###.00"));

            //if (transCashierRb.Checked)
            //{
            string sumCashPendingTxt = _moneyInTrayLastRequest.CashPendingAmount.Value == 0 ? "0.00" : _moneyInTrayLastRequest.CashPendingAmount.Value.ToString("#,###.00");
            traySumTxt.Text += ",  เงินสดรอตอบรับ " + sumCashPendingTxt + " บาท";
            //}
        }

        private void ChosenSumFooter()
        {
            decimal sumAllCheck = 0;
            foreach (DataGridViewRow r in chosenCheckGv.Rows)
            {
                ChequeInfo chq = (ChequeInfo)r.DataBoundItem;
                sumAllCheck += chq.Amount.Value;
            }

            string sumAllTxt = null;
            if (sumAllCheck == 0)
                sumAllTxt = "0.00";
            else
                sumAllTxt = sumAllCheck.ToString("#,###.00");

            _chosenChqTxt = sumAllTxt;
            CloseWorkSumAll s = new CloseWorkSumAll();
            s.Desc = string.Format(" รวมเช็ค {0} รายการ  จำนวนเงิน {1} บาท", chosenCheckGv.Rows.Count.ToString(), sumAllTxt);
            List<CloseWorkSumAll> slist = new List<CloseWorkSumAll>();
            slist.Add(s);
            chosenSumFooterGv.DataSource = slist;
        }


        private void SummarizeTransferAmount()
        {
            if (chosenCashTxt.Text.Trim() == string.Empty) return;
            decimal cashAmount = Convert.ToDecimal(chosenCashTxt.Text);

            decimal chequeAmount = 0;
            foreach (DataGridViewRow r in chosenCheckGv.Rows)
            {
                ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                chequeAmount += cinfo.Amount.Value;
            }

            decimal total = cashAmount + chequeAmount;
            if (total == 0)
                totalTxt.Text = "0.00";
            else 
                totalTxt.Text = total.ToString("#,###.00");
        }


        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public MoneyTransferManagementViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        private void OnLoadTicker(object sender, System.Timers.ElapsedEventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;            

            if (!_isMoneyLoaded)
            {
                _timer.Stop();
                _isMoneyLoaded = true;
                _presenter.LoadBankAccount(Session.Branch.Id.Substring(0, 4));
                if (Session.Work.Id == null)
                {
                    MessageBox.Show("ผู้ใช้ต้องเปิดกะก่อนใช้งานฟังก์ชันนี้", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                _presenter.ShowMoneyInTray(_senderWorkId);   
            }
        }

        private void OnLoad_TimerRefreshBt(object sender, System.Timers.ElapsedEventArgs e)
        {
            refreshBt.Enabled = false;
            _timerRefreshBt.Interval = 1000;
            if (counterRefreshBt > 0)
            {
                refreshBt.Image = null;
                refreshBt.Text = counterRefreshBt.ToString();
                --counterRefreshBt;
                _timerRefreshBt.Start();
            }
            else //(counterRefreshBt <= 0)
            {
                refreshBt.Text = "";
                refreshBt.Image = PEA.BPM.CashManagementModule.Properties.Resources.RepeatHSR;
                _timerRefreshBt.Stop();
                _timerRefreshBt.Interval = 10;
                refreshBt.Enabled = true;
                counterRefreshBt = counterRefreshBtDefault;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
                RefreshScreenOffline();
            }
        }

        #endregion   

        #region "Event Handling"

        private void senderBt_Click(object sender, EventArgs e)
        {
            List<string> param = new List<string>();
            param.Add(Resources.SenderSearchBoxTitle);
            param.Add(_sender.CashierId); //has default
            param.Add(_receiver == null ? null : _receiver.CashierId);
            _presenter.ShowCashierSearchBox(param);
        }

        private void receiverBt_Click(object sender, EventArgs e)
        {
            List<string> param = new List<string>();
            param.Add(Resources.ReceiverSearchBoxTitle);
            param.Add(_sender.CashierId); //has default
            param.Add(_receiver == null ? null : _receiver.CashierId);
            _presenter.ShowCashierSearchBox(param);
        }

        private void transBankRb_CheckedChanged(object sender, EventArgs e)
        {
            if (transBankRb.Checked)
            {
                bankCBox.Enabled = true;
                bankAccCBox.Enabled = true;
                senderBt.Enabled = false;
                receiverBt.Enabled = false;
                transCashierRb.Checked = false;

                //if it is in force mode, reset it to normal mode
                if (_isForceTrans)
                {
                    this.Cursor = Cursors.WaitCursor;
                    _sender.CashierName = Session.User.Name;
                    _sender = new CashierInfo();
                    _sender.CashierId = Session.User.Id; //set default
                    _senderWorkId = Session.Work.Id;
                    _commander = new CashierInfo();
                    _commander.CashierId = Session.User.Id;
                    _commander.CashierName = Session.User.Name;
                    RefreshScreen();
                    this.SenderHeadline = _sender;
                }

                //ChequeSumFooter();
                RefreshScreenOffline();
            }
        }

        private void transCashierRb_CheckedChanged(object sender, EventArgs e)
        {
            if (transCashierRb.Checked)
            {
                AuthorizeForceTransfer();
                transBankRb.Checked = false;
                bankCBox.Enabled = false;
                bankAccCBox.Enabled = false;
                receiverBt.Enabled = true;

                if (_hasPermission)
                    senderBt.Enabled = true;
                else
                    senderBt.Enabled = false;

                ChequeSumFooter();

            }
        }

        private void bankCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillBankAccount();
        }

        private void chosenCashTxt_Enter(object sender, EventArgs e)
        {
            chosenCashTxt.SelectAll();
        }
        
        private void chosenCashTxt_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal temp = Convert.ToDecimal(chosenCashTxt.Text);

                if (((temp * 100) % 25) != 0)
                {
                    MessageBox.Show("ท่านสามารถกรอกจำนวนเงินสดที่เป็น 'เศษสตางค์' ได้เป็น 25, 50 หรือ 75 สตางค์เท่านั้น", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    chosenCashTxt.SelectAll();
                    chosenCashTxt.Focus();
                    return;
                }

                decimal remainingCashToTransfer = _moneyInTray.CashAmount.Value - _moneyInTray.CashPendingAmount.Value;
                string rTxt = null;
                if (remainingCashToTransfer == 0)
                    rTxt = "0.00";
                else
                    rTxt = remainingCashToTransfer.ToString("#,###.00");

                if (temp > remainingCashToTransfer)
                {
                    MessageBox.Show("เงินสดที่เหลืออยู่ไม่เพียงพอสำหรับโอน/มีเงินสดรอโอนออก\nเงินที่เพียงพอสำหรับโอน  " + rTxt + " บาท ",
                                     "เงินสดไม่เพียงพอสำหรับโอน", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    chosenCashTxt.Focus();
                    chosenCashTxt.SelectAll();
                    _currentCashChosenValue = remainingCashToTransfer;
                    return;
                }
                else
                {
                    decimal remainTrayCash = _moneyInTray.CashAmount.Value - temp;
                    if (remainTrayCash == 0)
                        trayCashTxt.Text = "0.00";
                    else 
                        trayCashTxt.Text = remainTrayCash.ToString("#,###.00");
                }

                if (temp == 0)
                    chosenCashTxt.Text = "0.00";
                else 
                    chosenCashTxt.Text = temp.ToString("#,###.00");

                SummarizeTransferAmount();
                ChequeSumFooter();

            }
            catch(Exception ex)
            {
                DialogResult dlg = MessageBox.Show("กรุณาป้อนจำนวนเงินที่เป็นตัวเลขเท่านั้น", "ป้อนจำนวนเงินไม่ถูกต้อง",  MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (dlg == DialogResult.OK)
                {
                    chosenCashTxt.Focus();
                    chosenCashTxt.SelectAll();
                }
                else if (dlg == DialogResult.Cancel)
                {
                    if (_currentCashChosenValue == 0)
                        chosenCashTxt.Text = "0.00";
                    else 
                        chosenCashTxt.Text = _currentCashChosenValue.ToString("#,###.00");
                }
            }
        }

        private void chosenCashTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                if (_currentCashChosenValue == 0)
                    chosenCashTxt.Text = "0.00";
                else 
                    chosenCashTxt.Text = _currentCashChosenValue.ToString("#,###.00");
            }
            else if (e.KeyCode == Keys.Enter)
            {
                checkIdInputTxt.Focus();
            }
        }

        private bool AllowRemove(ChequeInfo chq, bool warning)
        {
            if (chq.TransStatus == "0")
            {
                if(warning)
                    MessageBox.Show("เช็ครายการที่เลือกอยู่ในสถานะรอตอบรับการโอนออก", "ไม่สามารถเลือกได้", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else if (chq.TransStatus == "1")
            {
                if (warning)
                    MessageBox.Show("เช็คใบนี้มีการรับซ้ำในระบบ กรุณาตรวจสอบเลขที่เช็ค\nจากนั้นทำการยกเลิกรายการรับเช็คใบนี้ออกจากระบบ", "เซ็คซ้ำ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }
            return true;
        }

        private void FillChosenChequeGv()
        {
            chosenCheckGv.Enabled = false;
            chosenCheckGv.DataSource = _chosenChequeList;
            chosenCheckGv.Enabled = true;
        }

        private void ShowBox()
        {
            MessageBox.Show(string.Format("Left: {0} \nRight: {1} "));
        }

        private void checkGv_KeyDown(object sender, KeyEventArgs e)
        {
            List<int> rmIndex = new List<int>();
            if (e.KeyCode == Keys.Enter)
            {
                foreach(DataGridViewRow r in checkGv.SelectedRows)
                {
                    ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                    if (AllowRemove(cinfo, true))
                    {
                        if(AddCheque(_chosenChequeList, cinfo))
                            rmIndex.Add(r.Index);
                    }
                }

                foreach (int rm in rmIndex)
                    checkGv.Rows.RemoveAt(rm);

                FillChosenChequeGv();
            }
        }

        private void chosenCheckGv_KeyDown(object sender, KeyEventArgs e)
        {
            List<int> rmIndex = new List<int>();
            if (e.KeyCode == Keys.Enter && chosenCheckGv.SelectedRows.Count > 0)
            {
                foreach (DataGridViewRow r in chosenCheckGv.SelectedRows)
                {
                    ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                    if(AddCheque(_moneyInTray.ChequeList, cinfo))
                        rmIndex.Add(r.Index);
                }

                foreach (int rm in rmIndex)
                    _chosenChequeList.RemoveAt(rm);

                checkGv.DataSource = _moneyInTray.ChequeList;
            }
        }

        private void checkGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                ChequeInfo cinfo = (ChequeInfo)checkGv.Rows[e.RowIndex].DataBoundItem;
                if (AllowRemove(cinfo, true))
                {
                    if (AddCheque(_chosenChequeList, cinfo))
                    {
                        checkGv.Rows.RemoveAt(e.RowIndex);
                        FillChosenChequeGv();
                    }
                }
            }
        }

        private bool AddCheque(BindingList<ChequeInfo> chqList, ChequeInfo chq)
        {
            int count = 0;
            foreach (ChequeInfo q in chqList)
            {   
                //if (chq.BankKey == q.BankKey && chq.ChqNo == q.ChqNo)
                if (chq.BankKey == q.BankKey && chq.ChqNo == q.ChqNo && chq.ChqAccNo == q.ChqAccNo && chq.ChqDate == q.ChqDate) //เพิ่ม เลขที่บัญชีเช็ค กับ วันที่เช็ค ในการตรวจสอบ
                {
                    MessageBox.Show("พบเช็คธนาคารที่มีเลขที่เช็คเดียวกันอยู่ในระบบ\nระบบไม่อนุญาติให้ทำรายการกับเช็คใบนี้", "เกิดข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return false;
                }

                count++;
            }

            //not found, go ahead add it
            if (count == chqList.Count)
                chqList.Add(chq);

            return true;               
        }

        private void chosenCheckGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                ChequeInfo cinfo = (ChequeInfo)chosenCheckGv.Rows[e.RowIndex].DataBoundItem;
                if (AddCheque(_moneyInTray.ChequeList, cinfo))
                {
                    chosenCheckGv.Rows.RemoveAt(e.RowIndex);
                    checkGv.DataSource = _moneyInTray.ChequeList;
                }
            }
        }

        private void chosenCheckGv_Enter(object sender, EventArgs e)
        {
            checkGv.ClearSelection();
        }

        private void checkGv_Enter(object sender, EventArgs e)
        {
            chosenCheckGv.ClearSelection();
        }

        private void rightArrowBt_Click(object sender, EventArgs e)
        {
            List<int> rmIndex = new List<int>();
            foreach (DataGridViewRow r in checkGv.SelectedRows)
            {
                ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                if (AllowRemove(cinfo, true))
                {
                    if(AddCheque(_chosenChequeList, cinfo))
                        rmIndex.Add(r.Index);
                }
            }

            rmIndex.Sort(delegate(int i1, int i2) { return i2.CompareTo(i1);} );


            foreach (int rm in rmIndex)
                _moneyInTray.ChequeList.RemoveAt(rm);

            FillChosenChequeGv();
        }

        private void rightAllBt_Click(object sender, EventArgs e)
        {
            List<int> rmIndex = new List<int>();
            foreach (DataGridViewRow r in checkGv.Rows)
            {
                ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                if (AllowRemove(cinfo, true))
                {
                    if(AddCheque(_chosenChequeList, cinfo))
                        rmIndex.Add(r.Index);
                }
            }

            for (int i = rmIndex.Count-1; i >=0; i--)
                checkGv.Rows.RemoveAt(rmIndex[i]);

            FillChosenChequeGv();
        }

        private void leftArrowBt_Click(object sender, EventArgs e)
        {
            List<int> rmIndex = new List<int>();
            foreach (DataGridViewRow r in chosenCheckGv.SelectedRows)
            {
                ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                if(AddCheque(_moneyInTray.ChequeList, cinfo))
                    rmIndex.Add(r.Index);
            }


            rmIndex.Sort(delegate(int i1, int i2) { return i2.CompareTo(i1); });

            foreach (int rm in rmIndex)
                _chosenChequeList.RemoveAt(rm);

            checkGv.DataSource = _moneyInTray.ChequeList;
        }

        private void leftAllBt_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow r in chosenCheckGv.Rows)
            {
                ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                AddCheque(_moneyInTray.ChequeList, cinfo);
            }

            chosenCheckGv.Rows.Clear();
            checkGv.DataSource = _moneyInTray.ChequeList;
        }

        private void chosenCheckGv_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            ChosenSumFooter();
            SummarizeTransferAmount();
        }

        private void chosenCheckGv_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            ChosenSumFooter();
            SummarizeTransferAmount();
        }

        private void RefreshScreen()
        {            
            chosenCheckGv.Rows.Clear();
            chosenCashTxt.Text = "0.00";
            checkIdInputTxt.Clear();
            totalTxt.Text = "0.00";
            RefreshTrayMoney();
            ChosenSumFooter();
            ChequeSumFooter();
            SummarizeTransferAmount();
            chosenCashTxt.Focus();
        }

        private void RefreshScreenOffline()
        {            
            chosenCheckGv.Rows.Clear();
            chosenCashTxt.Text = "0.00";
            checkIdInputTxt.Clear();
            totalTxt.Text = "0.00";
            RefreshTrayMoneyOffline();
            ChosenSumFooter();
            ChequeSumFooter();
            SummarizeTransferAmount();
            chosenCashTxt.Focus();
        }

        private MoneyTransferInfo PackTransferMoney()
        {
            MoneyTransferInfo transferMoney = new MoneyTransferInfo();
            transferMoney.CashAmount = Convert.ToDecimal(chosenCashTxt.Text);

            BindingList<ChequeInfo> chqList = new BindingList<ChequeInfo>();
            foreach (DataGridViewRow chqRow in chosenCheckGv.Rows)
            {
                ChequeInfo chq = (ChequeInfo)chqRow.DataBoundItem;
                ChequeInfo item = new ChequeInfo(); //new a block of memory
                item.BankKey = chq.BankKey;
                item.BankName = chq.BankName;
                item.ChqNo = chq.ChqNo;
                item.ChqAccNo = chq.ChqAccNo;
                item.ChqDt = chq.ChqDt;
                item.Amount = chq.Amount;
                chqList.Add(item);
            }

            transferMoney.ChequeList = chqList;
            transferMoney.Commander = Session.User.Id; //power user
            transferMoney.ReqPosId = Session.Terminal.Id;
            transferMoney.ReqTerminalCode = Session.Terminal.Code;
            transferMoney.BranchId = Session.Branch.Id;

            if (transCashierRb.Checked)
            {
                transferMoney.Sender = _sender.CashierId;
                transferMoney.SenderName = _sender.CashierName;
                transferMoney.Receiver = _receiver.CashierId;
                transferMoney.ReceiverName = _receiver.CashierName;
                transferMoney.Commander = _commander.CashierId;
            }
            else
            {
                GLBankAccountInfo glBankAcc = (GLBankAccountInfo)bankAccCBox.SelectedItem;
                transferMoney.GLBankKey = glBankAcc.BankKey;
                transferMoney.BankName = glBankAcc.BankName;
                transferMoney.GLBankAcc = glBankAcc.BankAccount;
                transferMoney.ClearingAccno = glBankAcc.ClearingAccNo;
            
            }

            return transferMoney;
        }


        public List<ChequeInfo> GetChequeOfSameBranch(string glBankKey)
        {
            List<ChequeInfo> chqList = new List<ChequeInfo>();
            foreach (ChequeInfo chq in _chosenChequeList)
            {
                if (chq.BankKey == glBankKey)
                    chqList.Add(chq);
            }

            return chqList;
        }

        public List<ChequeInfo> GetChequeOfSameBank(string glBankKey)
        {
            List<ChequeInfo> chqList = new List<ChequeInfo>();
            foreach (ChequeInfo chq in _chosenChequeList)
            {
                if ((chq.BankKey.Substring(0, 3) == glBankKey.Substring(0, 3)) &&
                    (chq.BankKey != glBankKey))
                    chqList.Add(chq);
            }

            return chqList;
        }

        public List<ChequeInfo> GetChequeOfOtherBank(string glBankKey)
        {
            List<ChequeInfo> chqList = new List<ChequeInfo>();
            foreach (ChequeInfo chq in _chosenChequeList)
            {
                if ( chq.BankKey.Substring(0, 3) != glBankKey.Substring(0, 3) )
                    chqList.Add(chq);
            }

            return chqList;
        }

        public decimal SumChqAmt(List<ChequeInfo> chqList)
        {
            decimal sumAmt =0;
            foreach (ChequeInfo chq in chqList)
                sumAmt += chq.Amount.Value;

            return sumAmt;
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            try
            {
                //okBt.Enabled = cancelBt.Enabled = false;
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (Convert.ToDecimal(totalTxt.Text) == 0)
                    {
                        MessageBox.Show("กรุณาระบุจำนวนเงิน โดยเลือกรายการจากเงินทั้งหมดในลิ้นชัก", "ระบุจำนวนเงิน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        chosenCashTxt.Focus();
                        chosenCashTxt.SelectAll();
                        return;
                    }

                    if (transCashierRb.Checked)
                    {
                        if (_receiver == null)
                        {
                            MessageBox.Show("กรุณาระบุผู้รับโอนก่อนยืนยันการโอน", "ระบุผู้รับโอน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            receiverBt.Focus();
                            return;
                        }

                        List<String> list = new List<string>();

                        ConfirmCashierTransfering dlg = new ConfirmCashierTransfering(_commander, senderBt.Text, receiverBt.Text, chosenCashTxt.Text,
                                                                                _chosenChqTxt, totalTxt.Text, chosenCheckGv.Rows.Count, ref list);
                        dlg.ShowDialog();
                        if (dlg.DialogResult == DialogResult.OK)
                        {
                            //Pack money
                            MoneyTransferInfo transferMoney = PackTransferMoney();
                            transferMoney.WorkId = Session.Work.Id;
                            transferMoney.ToBank = false;
                            transferMoney.PreviewReport = true;
                            transferMoney.ModifiedBy = Session.User.Id;
                            transferMoney.IsForceTrans = _isForceTrans;

                             ////Validate Transfer Money
                            //_presenter.GetMoneyInTray(_senderWorkId);
                            //_moneyInTrayLastRequest = MoneyInTrayValidation.ToNewObject();
                            //bool isValid = ValidateTranferMoney(MoneyInTrayValidation, transferMoney);
                            //if (!isValid)
                            //{
                            //    MessageBox.Show("เงินในลิ้นชักไม่เพียงพอสำหรับการโอนเงิน  กรุณาลองใหม่อีกครั้ง", "เงินในลิ้นชักไม่เพียงพอ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            //    return;
                            //}

                            //print transer slip : print 2 slips for both sender and receiver (like credit slip)
                            if (list.Count > 0)
                            {
                                PEA.BPM.CashManagementModule.CashManagementUtilities.Printer.Instant.Print(list);
                                PEA.BPM.CashManagementModule.CashManagementUtilities.Printer.Instant.Print(list);
                            }
                            //store new transfer
                            _presenter.Transfer(transferMoney);
                            //MoneyInTrayLastRequest = MoneyInTray.ToNewObject();

                            //if (transferMoney.IsForceTrans == true)
                            //    RefreshScreen();
                            if (!transferMoney.IsForceTrans)
                            {
                                //Set MoneyInTray Offline
                                _moneyInTray.CashPendingAmount += transferMoney.CashAmount;
                                foreach (ChequeInfo item in transferMoney.ChequeList)
                                {
                                    item.TransStatus = "0";
                                    _moneyInTray.ChequeList.Add(item);
                                }
                            }
                            MoneyInTrayLastRequest = MoneyInTray.ToNewObject();

                        }

                    }
                    else if (transBankRb.Checked)
                    {
                        if (bankCBox.SelectedIndex == 0)
                        {
                            MessageBox.Show("กรุณาระบุธนาคารและเลขที่บัญชีที่ต้องการนำฝาก", "ระบุธนาคาร", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            bankCBox.Focus();
                            return;
                        }

                        GLBankAccountInfo glAccBank = (GLBankAccountInfo)bankAccCBox.SelectedItem;
                        List<ChequeInfo> chqSameBranch = GetChequeOfSameBranch(glAccBank.BankKey);
                        List<ChequeInfo> chqSameBank = GetChequeOfSameBank(glAccBank.BankKey);
                        List<ChequeInfo> chqOtherBank = GetChequeOfOtherBank(glAccBank.BankKey);

                        ConfirmBankDelivering dlg = new ConfirmBankDelivering(chosenCashTxt.Text, SumChqAmt(chqSameBranch), SumChqAmt(chqSameBank),
                                                                SumChqAmt(chqOtherBank), totalTxt.Text, chqSameBranch.Count, chqSameBank.Count, chqOtherBank.Count);
                        dlg.ShowDialog();
                        if (dlg.DialogResult == DialogResult.OK)
                        {
                            //pack money
                            MoneyTransferInfo transferMoney = PackTransferMoney();
                            transferMoney.WorkId = Session.Work.Id;
                            transferMoney.ToBank = true;
                            transferMoney.ModifiedBy = Session.User.Id;
                            transferMoney.PreviewReport = true;
                            transferMoney.SepChq = dlg.SeparatedCheque;

                            ////Validate Transfer Money
                            //_presenter.GetMoneyInTray(_senderWorkId);
                            //_moneyInTrayLastRequest = MoneyInTrayValidation.ToNewObject();
                            //bool isValid = ValidateTranferMoney(MoneyInTrayValidation, transferMoney);
                            //if (!isValid)
                            //{
                            //    MessageBox.Show("เงินในลิ้นชักไม่เพียงพอสำหรับการนำเงินฝากธนาคาร  กรุณาลองใหม่อีกครั้ง", "เงินในลิ้นชักไม่เพียงพอ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            //    return;
                            //}

                            //process to bank
                            _presenter.Transfer(transferMoney);

                            //Set MoneyInTray Offline
                            _moneyInTray.CashAmount -= transferMoney.CashAmount;

                            MoneyInTrayLastRequest = MoneyInTray.ToNewObject();
                        }
                    
                    }
                    else
                    {
                        //error, should not get here
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnCloseView();
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }

        private void checkGv_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            ChequeSumFooter();
        }

        private void checkGv_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            ChequeSumFooter();
        }

        private void FindCheque(string keyword)
        {
            try
            {
                if (checkGv.Rows.Count > 0)
                {
                    List<int> rmIndex = new List<int>();
                    Regex rg = new Regex("[0-9]*" + keyword + "[0-9]*", RegexOptions.IgnoreCase);
                    foreach (DataGridViewRow r in checkGv.Rows)
                    {
                        ChequeInfo cinfo = (ChequeInfo)r.DataBoundItem;
                        if (AllowRemove(cinfo, false))
                        {
                            if (rg.IsMatch(cinfo.ChqNo) || rg.IsMatch(cinfo.BankKey))
                            {
                                _chosenChequeList.Add(cinfo);
                                rmIndex.Add(r.Index);
                            }
                        }
                    }

                    for (int i = rmIndex.Count - 1; i >= 0; i--)
                        checkGv.Rows.RemoveAt(rmIndex[i]);

                    FillChosenChequeGv();
                    checkIdInputTxt.Focus();
                    checkIdInputTxt.SelectAll();
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void checkIdInputTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Enter && checkIdInputTxt.Text != string.Empty)
                FindCheque(checkIdInputTxt.Text);
        }

        private void findBt_Click(object sender, EventArgs e)
        {
            if (checkIdInputTxt.Text != string.Empty)
                FindCheque(checkIdInputTxt.Text);
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            //RefreshScreen();
            RefreshScreenOffline();
        }

        private void SortCheque()
        {
            List<ChequeInfo> chqList = new List<ChequeInfo>(_moneyInTray.ChequeList);

            if (sortCBox.SelectedIndex == 0) //bankKey
            {
                if (acesRb.Checked) //น้อยไปมาก
                    chqList.Sort(new SortByBankKeyAces());
                else //มากไปน้อย
                    chqList.Sort(new SortByBankKeyDesc());
            }
            else if (sortCBox.SelectedIndex == 1)
            {
                if (acesRb.Checked) //น้อยไปมาก
                    chqList.Sort(new SortByChqNoAces());
                else //มากไปน้อย
                    chqList.Sort(new SortByChqNoDesc());
            }
            else
            {
                if (acesRb.Checked) //น้อยไปมาก
                    chqList.Sort(new SortByChqAmtAces());
                else //มากไปน้อย
                    chqList.Sort(new SortByChqAmtDesc());
            }

            _moneyInTray.ChequeList = new BindingList<ChequeInfo>(chqList);
            checkGv.DataSource = _moneyInTray.ChequeList;
        }

        private void sortCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if(_isLoadReady)
                SortCheque();
        }

        private void acesRb_CheckedChanged(object sender, EventArgs e)
        {
            if (acesRb.Checked)
                SortCheque();
        }

        private void descRb_CheckedChanged(object sender, EventArgs e)
        {
            if (descRb.Checked)
                SortCheque();
        }

        #endregion

        #region "Function"

        private void AuthorizeForceTransfer()
        {
            if (!Authorization.IsAuthorized(SecurityNames.ForceTransferManagement, false))
            {
                senderBt.Enabled = false;
                _hasPermission = false;
            }
            else
            {
                senderBt.Enabled = true;
                _hasPermission = true;
            }
        }

        #endregion

        private void refreshBt_Click(object sender, EventArgs e)
        {
            RefreshScreen();
            _timerRefreshBt.Start();
        }

        private void chosenCashTxt_Click(object sender, EventArgs e)
        {
            chosenCashTxt.Focus();
            chosenCashTxt.SelectAll();
        }

        private void quitBt_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }


        private void enter_KeyPress(object sender, KeyPressEventArgs e)
        {

            if (e.KeyChar == (char)13)
            {
                SendKeys.Send("{TAB}");
            }

            if (sender == chosenCashTxt)
            {
                (sender as TextBoxDecimal).OnKeyPressValidateDecimal(e);
            }

        }

        private bool ValidateTranferMoney(TrayMoneyInfo moneyInTray, MoneyTransferInfo moneyTransfer)
        {
            if ( moneyInTray.CashAmount == 0 && moneyInTray.ChequeAmount == 0 )
                return false;
            else if ( moneyTransfer.CashAmount > moneyInTray.CashAmount || moneyTransfer.ChequeAmount > moneyInTray.ChequeAmount )
                return false;

            return true;
        }

        private void checkGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

    }
}



