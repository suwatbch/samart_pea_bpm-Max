//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.ComponentModel;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class OpenWorkItemView : UserControl, IOpenWorkItemView
    {
        private string _flowId;
        private decimal? _cashAmt;
        private decimal? _totalAmt;

        #region "Code Generated"

        public OpenWorkItemView()
        {
            InitializeComponent();           
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public OpenWorkItemViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            if(Session.IsNetworkConnectionAvailable)
                _presenter.LoadOpeningBalance(Session.User.Id, FlowType.MoneyOpeningBalance);
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public OpenWorkInfo OpeningBalance
        {
            set
            {
                _flowId = value.FlowId;
                _cashAmt = value.CashAmt;
                _totalAmt = value.TotalAmt;

                if (_cashAmt == 0)
                    cashInitShiftTxt.Text = "0.00";
                else
                    cashInitShiftTxt.Text = _cashAmt.Value.ToString("#,###.00");


                if (_totalAmt == 0)
                    totalTxt.Text = "0.00";
                else
                    totalTxt.Text = _totalAmt.Value.ToString("#,###.00");

                couponGridView.AutoGenerateColumns = false;
                BindingList<ChequeInfo> bd = new BindingList<ChequeInfo>(value.OpeningCheque);
                couponGridView.DataSource = bd;
                couponGridView.ClearSelection();
                ChequeSumFooter();
            }
        }

        #endregion   

        #region Custom Function

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private void ChequeSumFooter()
        {
            decimal sumAllCheck = 0;
            foreach (DataGridViewRow r in couponGridView.Rows)
            {
                ChequeInfo chq = (ChequeInfo)r.DataBoundItem;
                sumAllCheck += chq.Amount.Value;
            }

            string sumAllTxt = null;
            if (sumAllCheck == 0)
                sumAllTxt = "0.00";
            else
                sumAllTxt = sumAllCheck.ToString("#,###.00");

            CloseWorkSumAll s = new CloseWorkSumAll();
            s.Desc = string.Format(" รวมเช็ค {0} รายการ  จำนวนเงิน {1} บาท", couponGridView.Rows.Count.ToString(), sumAllTxt);
            List<CloseWorkSumAll> slist = new List<CloseWorkSumAll>();
            slist.Add(s);
            checkSumFooterGv.AutoGenerateColumns = false;
            checkSumFooterGv.DataSource = slist;
            checkSumFooterGv.ClearSelection();
        }

        private void ClearSelection()
        {
            for (int i = 0; i < couponGridView.Rows.Count; i++)
                couponGridView.Rows[i].Selected = false;

            checkSumFooterGv.Rows[0].Selected = false;
        }

        #endregion

        #region Event Handling

        private void addButton_Click(object sender, EventArgs e)
        {
            try
            {
                OpenWorkParam param = new OpenWorkParam();
                param.BranchId = Session.Branch.Id;
                param.CashierId = Session.User.Id;
                param.CashierName = Session.User.Name;
                param.PosId = Session.Terminal.Id;
                param.TerminalCode = Session.Terminal.Code;
                param.ModifiedBy = Session.User.Id;
                param.FlowType = FlowType.MoneyOpeningBalance;
                param.FlowId = _flowId;

                Session.Work.Id = _presenter.OpenWork(param);
                _presenter.Start();
            }
            catch (Exception ex)
            {
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

        #endregion

    }
}



