//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class ReportDailyRemainView : UserControl, IReportDailyRemainView
    {
        List<BaselineInfo> _baseList;
        bool _loadReady;

        #region "Code Generated"

        public ReportDailyRemainView()
        {
            InitializeComponent();
            baselineGv.AutoGenerateColumns = false;
        }

        public void ShowSuccess(string msg)
        {
            MessageBox.Show(msg, "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            this.Cursor = Cursors.Default;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportDailyRemainViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();           
            queryDate.Focus();
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<BaselineInfo> BaselineList 
        { 
            set 
            { 
                _baseList = value;
                FillBaseline();
            }
        }

        #endregion   
        
        private void FillBaseline()
        {
            baselineGv.DataSource = _baseList;

            foreach (DataGridViewRow r in baselineGv.Rows)
                r.Cells[1].Value = true;

            if (_baseList.Count > 0)
            {
                baselineGv.Rows[0].ReadOnly = true;
                previewBt.Enabled = true;
            }
            else
                previewBt.Enabled = false;

            _loadReady = true;
        }

        private void previewBt_Click(object sender, EventArgs e)
        {
            int count  =0;
            int maxBefore = 0;
            int maxAfter = -1;
            foreach (DataGridViewRow r in baselineGv.Rows)
            {
                //at 15.30
                if ((bool)r.Cells[1].Value)
                {
                    _baseList[count].AboveTimeline = true;
                    maxBefore = count;
                }
                else
                {
                    _baseList[count].AboveTimeline = false;
                    maxAfter = count;
                }

                count++;
            }

            List<BaselineInfo> baseLine = new List<BaselineInfo>();
            baseLine.Add(_baseList[maxBefore].Clone());

            if (maxAfter != -1)
                baseLine.Add(_baseList[maxAfter].Clone());

            ReportParam param = new ReportParam();
            param.Baseline = baseLine;
            param.DateString = queryDate.Value.ToString("ddMMyyyy", new CultureInfo("th-TH"));

            _presenter.PreviewReport(param);
        }

        private void searchBt_Click(object sender, EventArgs e)
        {
            try
            {
                _presenter.GetBaseline(queryDate.Value);
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void baselineGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if(e.RowIndex >= 0)
            {
                baselineGv.EndEdit();
                bool chk = (bool)baselineGv.Rows[e.RowIndex].Cells[1].Value;
                if (chk)
                {
                    //set all above to true
                    for (int i = e.RowIndex; i >= 0; i--)
                        baselineGv.Rows[i].Cells[1].Value = true;
                }
                else
                {
                    for (int i = e.RowIndex + 1; i < baselineGv.Rows.Count; i++)
                        baselineGv.Rows[i].Cells[1].Value = false;
                }
            }
        }


    }
}



