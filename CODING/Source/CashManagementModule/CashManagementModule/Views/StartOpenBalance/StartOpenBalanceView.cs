//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;
using System.ComponentModel;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.CashManagementModule.Views.MoneyCheckInView;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class StartOpenBalanceView : UserControl, IStartOpenBalanceView
    {
        private BindingList<PaymentMethodInfo> _paymentMethods;
        private string _prvCashAmt = "0.00";

        #region "Code Generated"

        public StartOpenBalanceView()
        {
            InitializeComponent();
            paymentDataGridView.AutoGenerateColumns = false;
            _paymentMethods = new BindingList<PaymentMethodInfo>();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public StartOpenBalanceViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            ScannerHelper.SwitchKeyBoardToEnglish();


            _paymentMethods = ToBindingList(_presenter.LoadSystemInitial(Session.Work.Id));
            //bindPaymentDataGridView(_paymentMethods);

            //paymentDataGridView = new DataGridView();
            paymentDataGridView.DataSource = _paymentMethods;
            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                paymentDataGridView.Rows[i].Cells["deleteButton"].Value = Properties.Resources.Delete;
            paymentDataGridView.Refresh();
            totalAmtTxt.Text = CalculateTotalAmount();

        }
        /*
        public static class Extensions{    
            public static BindingList<T> ToBindingList<T>(this IList<T> list)    
            {        
                return new BindingList<T>(list);    
            }
        }
         * */
        
        public BindingList<T> ToBindingList<T>(IList<T> list)    
        {        
            return new BindingList<T>(list);    
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        #endregion   

        #region Custom Function

        private bool ValidateForm()
        {
            cashAmountTextBox.Text = cashAmountTextBox.Text.Trim();
            chequeActualAmountTextBox.Text = chequeActualAmountTextBox.Text.Trim();

            if (paymentDataGridView.Rows.Count == 0)
            {
                MessageBox.Show("กรุณากรอกรายการเงินสดหรือรายการเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }

            if (paymentTypeTabControl.SelectedIndex == 0)
            {
                Decimal amount = string.IsNullOrEmpty(cashAmountTextBox.Text) == true ? 0 : Convert.ToDecimal(cashAmountTextBox.Text);
                if (amount > 0)
                    if (DialogResult.Cancel == MessageBox.Show("คำยืนยัน: มีข้อมูลเงินสดกรอกค้างไว้ คุณยังต้องการบันทึกยอดยกมาเริ่มต้นระบบใช่หรือไม่\n\n",
                        "ข้อความยืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                    {
                        return false;
                    }
            }
            else if (paymentTypeTabControl.SelectedIndex == 1)
            {
                Decimal amount = string.IsNullOrEmpty(chequeActualAmountTextBox.Text) == true ? 0 : Convert.ToDecimal(chequeActualAmountTextBox.Text);
                if (amount > 0)
                    if (DialogResult.Cancel == MessageBox.Show("คำยืนยัน: มีข้อมูลเช็คกรอกค้างไว้ คุณยังต้องการบันทึกยอดยกมาเริ่มต้นระบบใช่หรือไม่\n\n",
                        "ข้อความยืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                    {
                        return false;
                    }
            }

            return true;
        }

        private bool ValidateAddInGridView()
        {
            switch (paymentTypeTabControl.SelectedIndex)
            {
                case 0:
                    if (cashAmountTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินสดที่ต้องการรับเข้าระบบ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        cashAmountTextBox.Focus();
                        return false;
                    }                 
                    else
                    {
                        decimal cash = Convert.ToDecimal(cashAmountTextBox.Text);
                        if (cash <= 0)
                        {
                            MessageBox.Show("กรุณากรอกจำนวนเงินสดให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            cashAmountTextBox.SelectAll();
                            cashAmountTextBox.Focus();
                            return false;
                        }
                        else if (((cash * 100) % 25) != 0)
                        {
                            MessageBox.Show("ท่านสามารถกรอกจำนวนเงินสดที่เป็น 'เศษสตางค์' ได้เป็น 25, 50 หรือ 75 สตางค์เท่านั้น", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            cashAmountTextBox.SelectAll();
                            cashAmountTextBox.Focus();
                            return false;
                        }
                    }
                    return true;
                case 1:
                    if (chequeActualAmountTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeActualAmountTextBox.Focus();
                        return false;
                    }
                    else if (chequeBankComboBox.SelectedIndex < 0)
                    {
                        MessageBox.Show("กรุณาเลือกธนาคารของเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeBankComboBox.Focus();
                        return false;
                    }
                    else if (chequeNoTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกเลขที่เช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeNoTextBox.Focus();
                        return false;
                    }
                    else if (chequeBankAccNoTextBox.Text.Trim() == "")
                    {
                        MessageBox.Show("กรุณากรอกเลขที่บัญชีเช็ค", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeBankAccNoTextBox.Focus();
                        return false;
                    }
                    else if (chequeDateDateTimePicker.Value.Date > Session.BpmDateTime.Now.Date)
                    {
                        MessageBox.Show("วันที่เช็คต้องไม่มากกว่าวันที่ปัจจุบัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeDateDateTimePicker.Focus();
                        return false;
                    }
                    else if (Convert.ToDecimal(chequeActualAmountTextBox.Text.Trim()) <= 0)
                    {
                        MessageBox.Show("กรุณากรอกจำนวนเงินในเช็คให้ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        chequeActualAmountTextBox.Focus();
                        return false;
                    }                  
                    return true;                
                default:
                    return true;
            }
        }

        private PaymentMethodInfo GetCashPayment()
        {
            PaymentMethodInfo pm = new PaymentMethodInfo();
            pm.PtId = "1";
            pm.PtName = "เงินสด";
            pm.Amount = Convert.ToDecimal(cashAmountTextBox.Text);
            return pm;
        }

        private PaymentMethodInfo GetChequePayment()
        {
            PaymentMethodInfo pm = new PaymentMethodInfo();
            pm.PtId = "2";
            pm.PtName = "เช็ค";
            pm.Amount = Convert.ToDecimal(chequeActualAmountTextBox.Text);

            pm.Bank = (Bank)chequeBankComboBox.SelectedItem;
            pm.ChqNo = chequeNoTextBox.Text;
            pm.ChqAccNo = chequeBankAccNoTextBox.Text;
            pm.ChqDt = chequeDateDateTimePicker.Value.Date;

            return pm;
        }

        private void SetBankDataSource(ComboBox bankComboBox, Bank bank, bool isDeposit)
        {
            List<Bank> banks = new List<Bank>();
            banks.Add(bank);
            bankComboBox.ValueMember = "BankKey";
            bankComboBox.DisplayMember = "BankName";
            bankComboBox.DataSource = banks;
            bankComboBox.SelectedIndex = 0;
        }

        private void FindBank(ComboBox bankComboBox, bool isDeposit)
        {
            using (BankSearchForm bsForm = new BankSearchForm(isDeposit))
            {
                if (bsForm.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    SetBankDataSource(chequeBankComboBox, bsForm.SelectedBank, isDeposit);
                }
            }
        }

        private string CalculateTotalAmount()
        {
            decimal total = 0;

            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                total = total + Convert.ToDecimal(paymentDataGridView.Rows[i].Cells["Amount"].Value);

            return total == 0 ? "0.00" : total.ToString("#,###.00");
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        #endregion

        #region Event Handling

        private void addEditButton_Click(object sender, EventArgs e)
        {
            if (!ValidateAddInGridView()) { return; }

            paymentDataGridView.Enabled = false;

            switch (paymentTypeTabControl.SelectedIndex)
            {
                case 0:
                    _paymentMethods.Add(GetCashPayment());
                    cashAmountTextBox.Text = "0.00";
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                    break;
                case 1:
                    _paymentMethods.Add(GetChequePayment());
                    chequeActualAmountTextBox.Text = "0.00";
                    chequeBankComboBox.DataSource = null;
                    chequeNoTextBox.Text = "";
                    chequeBankAccNoTextBox.Text = "";
                    chequeDateDateTimePicker.Value = DateTime.Today.Date;
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                    break;            
                default:
                    break;
            }

            paymentDataGridView.Enabled = true;
            //paymentDataGridView.DataSource = _paymentMethods;

            //for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
            //    paymentDataGridView.Rows[i].Cells["deleteButton"].Value = Properties.Resources.Delete;

            paymentDataGridView.ClearSelection();
            bindPaymentDataGridView(_paymentMethods);

            totalAmtTxt.Text = CalculateTotalAmount();
            
        }

        private void bindPaymentDataGridView( BindingList<PaymentMethodInfo> _paymentMethods )
        {
            paymentDataGridView.DataSource = _paymentMethods;

            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                paymentDataGridView.Rows[i].Cells["deleteButton"].Value = Properties.Resources.Delete;

            //paymentDataGridView.ClearSelection();
        }

        private void chqBankSearchButton_Click(object sender, EventArgs e)
        {
            FindBank(chequeBankComboBox, false);
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            try
            {
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (ValidateForm())
                    {
                        //confirmation box
                        DialogResult dlg = MessageBox.Show("คำยืนยัน: คุณต้องการบันทึกยอดยกมาเริ่มต้นระบบ \nกรุณากดปุ่ม OK เพื่อยืนยัน", "บันทึก", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                        if (dlg == DialogResult.OK)
                        {
                            MoneyCheckInInfo param = new MoneyCheckInInfo();
                            param.BranchId = Session.Branch.Id;
                            param.CashierId = Session.User.Id;
                            param.PaymentDt = Session.BpmDateTime.Now;
                            param.ModifiedBy = Session.User.Id;
                            param.WorkId = Session.Work.Id;
                            param.FlowType = FlowType.SystemInitialCash;
                            param.FlowCat = "1"; // not cancel
                            param.PosId = Session.Terminal.Id;

                            List<PaymentMethodInfo> list = new List<PaymentMethodInfo>();
                            for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                            {
                                PaymentMethodInfo pm = (PaymentMethodInfo)paymentDataGridView.Rows[i].DataBoundItem;
                                list.Add(pm);
                            }

                            param.PaymentMethodList = list;
                            _presenter.SaveStartOpenBalance(param);

                            MessageBox.Show("รับเงินเข้าระบบเรียบร้อยแล้ว \nกรุณากดปุ่ม OK เพื่อทำงานต่อ", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            ClearScreen();
                            _presenter.OnCloseView();
                        }
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                    _presenter.OnCloseView();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }

        private void ClearScreen()
        {
            paymentDataGridView.Rows.Clear();
            cashAmountTextBox.Text = "0.00";
            chequeActualAmountTextBox.Text = "0.00";
            chequeBankAccNoTextBox.Clear();
            chequeBankComboBox.Text = "";
            chequeDateDateTimePicker.ResetText();
            totalAmtTxt.Text = "0.00";
            paymentTypeTabControl.SelectedIndex = 0;
        }

        private void cancelAllButton_Click(object sender, EventArgs e)
        {
            ClearScreen();
        }

        private void paymentDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (e.ColumnIndex == 3)
                {
                    if (MessageBox.Show("ต้องการลบรายการดังกล่าวหรือไม่", "ข้อความเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Question).ToString() == "Yes")
                    {
                        PaymentMethodInfo pm = (PaymentMethodInfo)paymentDataGridView.Rows[e.RowIndex].DataBoundItem;
                        _paymentMethods.Remove(pm);
                        paymentDataGridView.DataSource = _paymentMethods;

                        for (int i = 0; i < paymentDataGridView.Rows.Count; i++)
                            paymentDataGridView.Rows[i].Cells["deleteButton"].Value = Properties.Resources.Delete;

                        totalAmtTxt.Text = CalculateTotalAmount();
                    }
                }
            }
        }

        #endregion

        private void decimal_KeyPress(object sender, KeyPressEventArgs e)
        {
            (sender as TextBoxDecimal).OnKeyPressValidateDecimal(e);
        }

        private void cashAmountTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((char)Keys.Enter == e.KeyChar)
                addEditButton.Focus();

            decimal_KeyPress(sender, e);
        }

        private void cashAmountTextBox_Leave(object sender, EventArgs e)
        {
            try
            {
                if (cashAmountTextBox.Text != string.Empty)
                {
                    decimal x = Convert.ToDecimal(cashAmountTextBox.Text);
                    if (x != 0)
                        _prvCashAmt = x.ToString("#,###.00");
                    else
                        _prvCashAmt = "0.00";

                    cashAmountTextBox.Text = _prvCashAmt;
                }
            }
            catch
            {
                DialogResult dlg = MessageBox.Show("กรุณาป้อนจำนวนเงินที่เป็นตัวเลขเท่านั้น", "ป้อนจำนวนเงินไม่ถูกต้อง", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (dlg == DialogResult.OK)
                {
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                }
                else
                {
                    cashAmountTextBox.Text = _prvCashAmt;
                }
            }
        }

        private void cashAmountTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                cashAmountTextBox.Text = _prvCashAmt;
        }

        private void chequeActualAmountTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            chequeNoTextBox.Focus();


            decimal_KeyPress(sender, e);
        }

        private void chequeNoTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            chequeBankAccNoTextBox.Focus();
        }

        private void chequeBankAccNoTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            chequeDateDateTimePicker.Focus();
        }

        private void chequeDateDateTimePicker_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
                chequeBankComboBox.Focus();
        }

        private void chequeActualAmountTextBox_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal temp = Convert.ToDecimal(chequeActualAmountTextBox.Text);
                if (temp == 0)
                    chequeActualAmountTextBox.Text = "0.00";
                else
                    chequeActualAmountTextBox.Text = temp.ToString("#,###.00");

            }
            catch (Exception ex)
            {
                DialogResult dlg = MessageBox.Show("กรุณาป้อนจำนวนเงินที่เป็นตัวเลขเท่านั้น", "ป้อนจำนวนเงินไม่ถูกต้อง", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (dlg == DialogResult.OK)
                {
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                }
                else if (dlg == DialogResult.Cancel)
                {
                    chequeActualAmountTextBox.Text = _prvCashAmt;
                }
            }

        }

        private void chequeBankComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13 && chequeBankComboBox.SelectedIndex > -1)
                addEditButton.Focus();
            else
                FindBank(chequeBankComboBox, false);
        }

        private void cashAmountTextBox_Enter(object sender, EventArgs e)
        {
            cashAmountTextBox.SelectAll();
        }

        private void chequeActualAmountTextBox_Enter(object sender, EventArgs e)
        {
            chequeActualAmountTextBox.SelectAll();
        }

        private void chequeActualAmountTextBox_Click(object sender, EventArgs e)
        {
            chequeActualAmountTextBox.Focus();
            chequeActualAmountTextBox.SelectAll();
        }

        private void cashAmountTextBox_Click(object sender, EventArgs e)
        {
            cashAmountTextBox.Focus();
            cashAmountTextBox.SelectAll();
        }

        private void sapRefNoTxt_Leave(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToDefault();
        }

        private void sapRefNoTxt_Click(object sender, EventArgs e)
        {
            ScannerHelper.SwitchKeyBoardToEnglish();
        }

        private void paymentTypeTabControl_TabIndexChanged(object sender, EventArgs e)
        {

            switch (paymentTypeTabControl.SelectedIndex)
            {
                case 0:
                    ClearScreenExceptDataGrid();
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                    break;
                case 1:
                    ClearScreenExceptDataGrid();
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                    break;
                default:
                    break;
            }

        }

        private void ClearScreenExceptDataGrid()
        {
            cashAmountTextBox.Text = "0.00";
            chequeActualAmountTextBox.Text = "0.00";
            chequeBankAccNoTextBox.Clear();
            chequeBankComboBox.Text = "";
            chequeDateDateTimePicker.ResetText();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            switch (paymentTypeTabControl.SelectedIndex)
            {
                case 0:
                    cashAmountTextBox.Text = "0.00";
                    cashAmountTextBox.Focus();
                    cashAmountTextBox.SelectAll();
                    break;
                case 1:
                    chequeActualAmountTextBox.Text = "0.00";
                    chequeBankAccNoTextBox.Clear();
                    chequeBankComboBox.Text = "";
                    chequeDateDateTimePicker.ResetText();
                    chequeActualAmountTextBox.Focus();
                    chequeActualAmountTextBox.SelectAll();
                    break;
                default:
                    break;
            }
        }


    }
}



