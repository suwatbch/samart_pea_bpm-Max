//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using System.Text;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class TransferStatusView : UserControl, ITransferStatusView
    {
        #region "Code Generated"

        public TransferStatusView()
        {
            InitializeComponent();           
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public TransferStatusViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.LoadTransferStatusItem(Session.User.Id);
        }

        #endregion

        #region "Properties and Variables"

        private List<String> _transferId;
        private string _noOfChq;

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public List<CashierMoneyTransferInfo> TransferStatus
        {           
            set
            {
                if (value.Count != 0)
                    _noOfChq = value[0].NoOfChq;
                
                List<CashierMoneyTransferInfo> list = SetStatusText(value);
                acceptGv.AutoGenerateColumns = false;
                BindingList<CashierMoneyTransferInfo> bd = new BindingList<CashierMoneyTransferInfo>(list);
                acceptGv.DataSource = bd;
                EnableRows();

                if (bd.Count > 0)
                    printSlipBt.Enabled = true;
                else
                    printSlipBt.Enabled = false;
            }
        }

        #endregion   

        #region "Event Handling"

        private void rejectBt_Click(object sender, EventArgs e)
        {
            try
            {
                WorkStatus ci = IsClosedWork();
                if (ci.CloseWorkBy == null)
                {
                    if (IsAnyRowChecked())
                    {
                        _presenter.CancelTransferItem(_transferId, Session.User.Id);
                        _presenter.RefreshTransferScreen();
                        MessageBox.Show("ยกเลิกการโอนเรียบร้อยแล้ว", "สถานะ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    NotifyMsg.ShowForceCloseWorkMsg(ci);
                    _presenter.OnCashierOpenWork("tmp");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ผิดพลาด", MessageBoxButtons.OK);
            }
        }

        #endregion

        #region "Custom Function"

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private bool IsAnyRowChecked()
        {
            _transferId = new List<String>();

            for (int i = 0; i < acceptGv.Rows.Count; i++)
            {
                if ((bool)acceptGv.Rows[i].Cells["GCheck"].FormattedValue)
                {
                    string obj = ((CashierMoneyTransferInfo)acceptGv.Rows[i].DataBoundItem).TransferId;
                    _transferId.Add(obj);
                }
            }

            return _transferId.Count > 0 ? true : false;
        }


        #endregion        

        private List<CashierMoneyTransferInfo> SetStatusText(List<CashierMoneyTransferInfo> list)
        {
            foreach (CashierMoneyTransferInfo obj in list)
            {
                if (obj.Status == "0")
                   obj.DispStatus = "รอการตอบรับ";
                else if (obj.Status == "1")
                   obj.DispStatus = "ตอบรับแล้ว";
                else if (obj.Status == "2")
                   obj.DispStatus = "ปฎิเสธแล้ว";
                else if (obj.Status == "3")
                   obj.DispStatus = "ยกเลิกแล้ว";
            }

            return list;
        }

        private void EnableRows()
        {
            foreach (DataGridViewRow r in acceptGv.Rows)
            {
                string x = r.Cells["Status"].Value.ToString();

                if (x == "0")
                {
                    r.Cells["GCheck"].ReadOnly = false;
                }
                else
                {
                    r.Cells["GCheck"].ReadOnly = true;
                }
            }
        }

        private void printSlipBt_Click(object sender, EventArgs e)
        {
            bool notify = false;
            WorkStatus ci = IsClosedWork();
            if (ci.CloseWorkBy == null)
            {
                for (int i = 0; i < acceptGv.Rows.Count; i++)
                {
                    if ((bool)acceptGv.Rows[i].Cells["GCheck"].FormattedValue)
                    {
                        if (!notify)
                        {
                            DialogResult dlg = MessageBox.Show("คุณต้องการพิมพ์ซ่อมสลิปโอนเงิน \nกดปุ่ม OK เพื่อพิมพ์", "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                            if (dlg == DialogResult.OK)
                            {
                                CashierMoneyTransferInfo obj = (CashierMoneyTransferInfo)acceptGv.Rows[i].DataBoundItem;
                                PrintSlip(obj);
                                notify = true;
                            }
                        }
                        else
                        {
                            CashierMoneyTransferInfo obj = (CashierMoneyTransferInfo)acceptGv.Rows[i].DataBoundItem;
                            PrintSlip(obj);
                        }
                    }
                }
            }
            else
            {
                NotifyMsg.ShowForceCloseWorkMsg(ci);
                _presenter.OnCashierOpenWork("tmp");
                _presenter.OnCloseView();
            }            
        }

        private void PrintSlip(CashierMoneyTransferInfo obj)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat(string.Format("โอนเงิน ณ วันที่ {0} เวลา {1} น.", DateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH")), DateTime.Now.ToString("HH:mm",new CultureInfo("th-TH"))));
            sb.AppendLine();
            sb.AppendFormat(string.Format("ผู้ทำการโอน <{0}-{1}>", Session.User.Id, Session.User.Name));
            sb.AppendLine();
            sb.AppendFormat(string.Format("ผู้โอน <{0}-{1}>", obj.Sender, obj.SenderName));
            sb.AppendLine();
            sb.AppendFormat(string.Format("ผู้รับโอน <{0}-{1}>", obj, obj.FullName));
            sb.AppendLine(); 
            sb.AppendLine("จำนวนเงินสด ");
            sb.AppendFormat(string.Format("เช็ค {0} ใบ จำนวนเงิน", _noOfChq));
            sb.AppendLine();
            sb.AppendLine("จำนวนเงินรวม ");
            sb.AppendLine();
            sb.AppendFormat(string.Format("{0}", "  .........................................."));
            sb.AppendLine();
            //sb.AppendFormat(string.Format("{0}", "(                                       )"));
            sb.AppendFormat(string.Format("(     {0}     )", obj.FullName));
            sb.AppendLine();
            //sb.AppendFormat(string.Format("{0}", obj.FullName));
            sb.AppendLine();
            sb.Append('\t');
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine(string.Format("{0} บาท", obj.CashAmt.ToString()));
            sb.AppendLine(string.Format("{0} บาท", obj.ChequeAmt.ToString()));
            sb.AppendLine(string.Format("{0} บาท", obj.Amount.ToString()));
            sb.AppendLine();


            List<String> list = new List<string>();
            list.Add(sb.ToString());

            //print 2 slips for both sender and receiver
            PEA.BPM.CashManagementModule.CashManagementUtilities.Printer.Instant.Print(list);
            PEA.BPM.CashManagementModule.CashManagementUtilities.Printer.Instant.Print(list);
        }

        private void acceptGv_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            EnableRows();
        }

        private void acceptGv_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            // Change 0 to be your checkbox column #
            if (this.acceptGv.Columns[0].Index == e.ColumnIndex && e.RowIndex >= 0)
            {
                // If its read only, dont draw it
                if (acceptGv[e.ColumnIndex, e.RowIndex].ReadOnly)
                {
                    // You can change e.CellStyle.BackColor to Color.Gray for example
                    using (Brush backColorBrush = new SolidBrush(e.CellStyle.BackColor))
                    {
                        // Erase the cell.
                        e.Graphics.FillRectangle(backColorBrush, e.CellBounds);
                        e.Handled = true;
                    }
                }
            }
        }

    }
}



