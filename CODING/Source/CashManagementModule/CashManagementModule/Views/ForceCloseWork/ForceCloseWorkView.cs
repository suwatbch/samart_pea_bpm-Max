//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.CashManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;
using System.ComponentModel;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.CashManagementModule.CashManagementUtilities;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class ForceCloseWorkView : UserControl, IForceCloseWorkView
    {
        #region "Variables and Properties"

        private List<WorkInfo> _openWorkList;
        private System.Timers.Timer _timer;
        private bool _isLoadReady = false;

        private System.Timers.Timer _timerRefreshBt;
        private int counterRefreshBtDefault = 30;
        private int counterRefreshBt = 30;

        public List<WorkInfo> OpenWorkList
        {

            set
            {
                _openWorkList = value;
                FillOpenWorkList();
                SumFooter();
                FillStatusColor();
                //DisableRows();

                //check role
                if (Authorization.IsAuthorized(SecurityNames.ForceCloseWork, false))
                {
                    openWorkGv.Columns[0].ReadOnly = false;
                    okButton.Enabled = true;
                }
                else
                {
                    openWorkGv.Columns[0].ReadOnly = true;
                    okButton.Enabled = false;
                }

                this.Cursor = Cursors.Default;
                WaitingFormHelper.HideWaitingForm();
            }
            get { return _openWorkList; }
        }


        #endregion

        #region "Code Generated"

        public ForceCloseWorkView()
        {
            InitializeComponent();
            openWorkGv.AutoGenerateColumns = false;
            _timer = new System.Timers.Timer();
            _timer.Interval = 400;
            _timer.Elapsed += new System.Timers.ElapsedEventHandler(OnLoadTicker);
            _timer.Start();

            _timerRefreshBt = new System.Timers.Timer(10);
            _timerRefreshBt.AutoReset = true;
            _timerRefreshBt.Elapsed += new System.Timers.ElapsedEventHandler(OnLoad_TimerRefreshBt);
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ForceCloseWorkViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        private void OnLoadTicker(object sender, System.Timers.ElapsedEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                WaitingFormHelper.ShowWaitingForm();

                if (!_isLoadReady)
                {
                    _timer.Stop();
                    _isLoadReady = true;
                    _presenter.LoadAllOpenWork(Session.Branch.Id);
                }
            }
            catch (Exception ex)
            {

            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();            
        }

        #endregion

        #region "Event Handling"

        private bool IsAnyChecked()
        {
            foreach (DataGridViewRow r in openWorkGv.Rows)
            {
                //object obj = (bool)r.Cells["GCheck"].Value;
                object obj = (bool)r.Cells["GCheck"].FormattedValue;
                if (obj != null && (bool)obj)
                    return true;
            }

            return false;
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            try
            {
                 bool hasUnclosableCashier = false;
                 WorkStatus ci = IsClosedWork();
                 if (ci.CloseWorkBy == null)
                 {                 
                     if (IsAnyChecked())
                     {
                         bool closeChecked = false;
                         DialogResult dlg = MessageBox.Show("ต้องการปิดกะของรายการที่เลือกใช้หรือไม่ \nกดปุ่ม OK เพื่อยืนยันการปิดกะ", "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                         if (dlg == DialogResult.OK)
                         {
                             foreach (DataGridViewRow r in openWorkGv.Rows)
                             {
                                 //object obj = (bool)r.Cells["GCheck"].Value;
                                 object obj = (bool)r.Cells["GCheck"].FormattedValue;
                                 if (obj != null)
                                     closeChecked = (bool)obj;

                                 if (closeChecked)
                                 {
                                     WorkInfo workInfo = (WorkInfo)r.DataBoundItem;

                                     //money in tray MUST be zero
                                     if (workInfo.TotalWorkMoneyAmt > 0)
                                     {
                                         hasUnclosableCashier = true;

                                         continue;
                                     }

                                     workInfo.CloseWorkBy = Session.User.Id;
                                     workInfo.BranchId = Session.Branch.Id;
                                     workInfo.PosId = Session.Terminal.Id;
                                     //_presenter.ForceCloseWork(workInfo);


                                     CashierWorkStatus workstatus = _presenter.GetCahsierWorkStatus(workInfo.WorkId);

                                     if (workstatus.CloseWorkBy == null)//Check Close work by Cashier
                                     {
                                         _presenter.ForceCloseWork(workInfo); //Close WorkId

                                     }
                                     else
                                     {
                                         string cashierTxt = string.Format("({0}) - {1}", workstatus.CloseWorkBy, workstatus.FullName);
                                         MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                         
                                         continue;
                                     }
                                 }
                             }

                             if (hasUnclosableCashier)
                                 MessageBox.Show("ยังมีเงินคงเหลือในลิ้นชักของแคชเชียร์ย่อยบางคนที่จะบังคับปิดกะ \nต้องนำฝากหรือโอนให้แคชเชียร์อื่นหรือจ่ายออกให้หมด \nกดปุ่ม OK เพื่อทำรายการต่อ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Stop);

                             _isLoadReady = false;
                             _timer.Start();
                         }
                     }
                }
                else
                {
                     NotifyMsg.ShowForceCloseWorkMsg(ci);
                     _presenter.OnCashierOpenWork("tmp");
                     _presenter.OnCloseView();
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void cancelAllButton_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        private void openWorkGv_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if (openWorkGv.Rows[e.RowIndex].Cells["WorkId"].Value.ToString() == Session.Work.Id ||
                    openWorkGv.Rows[e.RowIndex].Cells["Status"].Value.ToString() == "ปิดกะ")
                {
                    openWorkGv.Rows[e.RowIndex].Cells["GCheck"].ReadOnly = true;
                }

                FillStatusColor();
            }
        }

        private void OnLoad_TimerRefreshBt(object sender, System.Timers.ElapsedEventArgs e)
        {
            refreshBt.Enabled = false;
            _timerRefreshBt.Interval = 1000;
            if (counterRefreshBt > 0)
            {
                refreshBt.Image = null;
                refreshBt.Text = counterRefreshBt.ToString();
                --counterRefreshBt;
                _timerRefreshBt.Start();
            }
            else //(counterRefreshBt <= 0)
            {
                refreshBt.Text = "รีเฟรส";
                refreshBt.Image = PEA.BPM.CashManagementModule.Properties.Resources.RepeatHSR;
                _timerRefreshBt.Stop();
                _timerRefreshBt.Interval = 10;
                refreshBt.Enabled = true;
                counterRefreshBt = counterRefreshBtDefault;
            }
        }

        #endregion

        #region "Custom Function"

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        private void FillOpenWorkList()
        {
            //Remove Super-User's work from list
            //foreach (WorkInfo work in _openWorkList)
            //{
            //    if (work.WorkId == Session.Work.Id)
            //    {
            //        _openWorkList.Remove(work);
            //        break;
            //    }
            //}

            openWorkGv.DataSource = _openWorkList;
        }

        private void FillStatusColor()
        {
            for (int i = 0; i < _openWorkList.Count; i++)
            {
                if (_openWorkList[i].Status != "เปิดกะ")
                    openWorkGv.Rows[i].Cells[7].Style.ForeColor = Color.Red;
            }
        }

        private void DisableRows()
        {
            foreach (DataGridViewRow r in openWorkGv.Rows)
            {
                string x = r.Cells["WorkId"].Value.ToString();

                if (x == Session.Work.Id)
                    r.Cells["GCheck"].ReadOnly = true;
                else
                    r.Cells["GCheck"].ReadOnly = false;
            }
         
        }

        private void SumFooter()
        {
            decimal sumAllCheck = 0;
            decimal sumAllCash = 0;
            decimal sumAll = 0;

            foreach (DataGridViewRow r in openWorkGv.Rows)
            {
                sumAllCheck += Convert.ToDecimal(r.Cells["SumChqAmt"].Value);
                sumAllCash += Convert.ToDecimal(r.Cells["SumCashAmt"].Value);
            }

            sumAll = sumAllCheck + sumAllCash;

            string sumAllCheckTxt = null;
            if (sumAllCheck == 0)
                sumAllCheckTxt = "0.00";
            else
                sumAllCheckTxt = sumAllCheck.ToString("#,###.00");

            string sumAllCashTxt = null;
            if (sumAllCash == 0)
                sumAllCashTxt = "0.00";
            else
                sumAllCashTxt = sumAllCash.ToString("#,###.00");

            string sumAllTxt = null;
            if (sumAll == 0)
                sumAllTxt = "0.00";
            else
                sumAllTxt = sumAll.ToString("#,###.00");

            CloseWorkSumAll s = new CloseWorkSumAll();
            //s.Desc = string.Format(" รวมจำนวนเงินสด {0} บาท  รวมจำนวนเงินในเช็ค {1} บาท   รวมจำนวนเงินทั้งหมด {2} บาท", sumAllCashTxt, sumAllCheckTxt, sumAllTxt);
            s.Desc = " รวมเงินทั้งหมด ";
            s.Sum1 = sumAllCash;
            s.Sum2 = sumAllCheck;
            s.Sum3 = sumAll;
            List<CloseWorkSumAll> slist = new List<CloseWorkSumAll>();
            slist.Add(s);
            checkSumFooterGv.ClearSelection();
            checkSumFooterGv.AutoGenerateColumns = false;
            checkSumFooterGv.DataSource = slist;

            
        }       

        #endregion

        private void refreshBt_Click(object sender, EventArgs e)
        {
            _isLoadReady = false;
            _timer.Start();
            _timerRefreshBt.Start();
        }

        private void forceTransferBt_Click(object sender, EventArgs e)
        {
            try
            {

            }
            catch (Exception ex)
            {
                ServiceHelper.TransformErrorMessage(ex);
            }
        }

     
    }
   
}



