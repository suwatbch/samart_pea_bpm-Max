//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;

namespace PEA.BPM.CashManagementModule
{
    [SmartPart]
    public partial class CashierSearchBoxView : UserControl, ICashierSearchBoxView
    {
        private bool _isSender;
        private string _receiverId;
        private string _senderId;

        #region "Code Generated"

        public CashierSearchBoxView()
        {
            InitializeComponent();
            cashierGv.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CashierSearchBoxViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            searchTxt.Focus();
        }

        #endregion

        #region "Properties and Variables"
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        public bool IsSender
        {
            set { 
                _isSender = value;
                if (_isSender)
                {
                    cashierGv.Columns["PosId"].Visible = false;
                    cashierGv.Columns["TotalAmt"].Visible = true;
                }
                else
                {
                    cashierGv.Columns["PosId"].Visible = true;
                    cashierGv.Columns["TotalAmt"].Visible = false;
                }
            }
        }

        public string SenderId
        {
            set { _senderId = value; }
        }

        public string ReceiverId
        {
            set { _receiverId = value; }
        }

        #endregion   

        private void FillCashier(List<CashierInfo> cashierList)
        {
            //remove counter part
            List<CashierInfo> rmList = new List<CashierInfo>();
            foreach (CashierInfo c in cashierList)
            {
                if (_isSender)
                {
                    if ((c.Status.Trim() == "0" && c.TotalAmt <= 0) ||
                         c.Status == "" )
                        rmList.Add(c);
                }
                else
                {
                    //remove only sender
                    if (c.CashierId == _senderId)
                    {
                        cashierList.Remove(c);
                        break;
                    }
                }
            }

            //remove all in rmList
            foreach (CashierInfo c in rmList)
                cashierList.Remove(c);

            cashierGv.Enabled = false;
            cashierGv.DataSource = cashierList;
            cashierGv.Enabled = true;
        }

        private void searchTxt_KeyDown(object sender, KeyEventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            if (e.KeyCode == Keys.Enter)
            {
                List<CashierInfo> cashierList = _presenter.ListCashier(searchTxt.Text, Session.Branch.Id);
                FillCashier(cashierList);
            }

            this.Cursor = Cursors.Default;
        }

        private void searchBt_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                List<CashierInfo> cashierList = _presenter.ListCashier(searchTxt.Text, Session.Branch.Id);
                FillCashier(cashierList);
                this.Cursor = Cursors.Default;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "º‘¥æ≈“¥", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (cashierGv.SelectedRows.Count == 1)
                {
                    CashierInfo selected = (CashierInfo)cashierGv.SelectedRows[0].DataBoundItem;

                    if (_isSender)
                        selected.Flag = "0";
                    else
                        selected.Flag = "1";

                    _presenter.Select(selected);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "º‘¥æ≈“¥", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cashierGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (cashierGv.SelectedRows.Count == 1)
            {
                CashierInfo selected = (CashierInfo)cashierGv.SelectedRows[0].DataBoundItem;

                if (_isSender)
                    selected.Flag = "0";
                else
                    selected.Flag = "1";

                _presenter.Select(selected);
            }

            _presenter.OnCloseView();
        }
         
      
    }
}



