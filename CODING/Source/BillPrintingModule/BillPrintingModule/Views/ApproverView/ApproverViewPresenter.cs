//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Constants;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.Interface.Services;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;

namespace PEA.BPM.BillPrintingModule
{
    public class ApproverViewPresenter : Presenter<IApproverView>
    {
        private IControlServices _controlServices;

        [InjectionConstructor]
        public ApproverViewPresenter([ServiceDependency] IControlServices controlServices)
        {
            _controlServices = controlServices;
        }

        [EventPublication(EventTopicNames.ApproverUpdated, PublicationScope.Global)]
        public event EventHandler ApproverUpdated;
        public void ApproverUpdatedHandler()
        {
            if (ApproverUpdated != null)
                ApproverUpdated(this, new EventArgs());
        }

        public List<AuthorizedPerson> LoadDeliveryPlace(string createBranchId)
        {
            return _controlServices.GetApprover(createBranchId);
        }

        public string ModifyApprover(AuthorizedPerson param, string flag)
        {
            string row = "";
            try
            {
                if (flag == "Insert")
                    row = _controlServices.InsertApprover(null, param);
                else if (flag == "Edit")
                    row = _controlServices.UpdateApprover(null, param);
                else if (flag == "Delete")
                    row = _controlServices.DeleteApprover(null, param);
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            return row;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

