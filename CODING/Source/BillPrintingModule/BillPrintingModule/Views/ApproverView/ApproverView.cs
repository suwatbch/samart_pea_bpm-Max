
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Drawing;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.ComponentModel;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ApproverView : UserControl, IApproverView
    {
        #region "Variables & Properties"

        string _tmpId;
        string _flag = "Insert";
        List<AuthorizedPerson> _approverList;

        public List<AuthorizedPerson> ApproverList
        {
            get { return _approverList; }
            set { _approverList = value; }
        }

        #endregion

        #region "Code Generated"

        public ApproverView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ApproverViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeDataGridView();
        }

        #endregion

        #region "Event Handling"

        private void submitButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (_flag != "Delete")
                    if (approverNameText.Text != string.Empty ||
                    positionText.Text != string.Empty)
                        DoUpdate();
                    else
                        MessageBox.Show("กรุณากรอกข้อมูล", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                else
                    DoUpdate();

                ClearControlValue();
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show("เกิดข้อผิดพลาดภายในระบบ :" + ex.ToString() , MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }     

        private void cancelButton_Click(object sender, EventArgs e)
        {
            ClearControlValue();
        }
       
        private void approverGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            _tmpId = approverGv.Rows[e.RowIndex].Cells["Id"].Value.ToString();

            if (approverGv.Columns[e.ColumnIndex].Name == "EditColumn")
            {
                approverNameText.Text = approverGv.Rows[e.RowIndex].Cells["ApproverName"].Value.ToString();
                positionText.Text = approverGv.Rows[e.RowIndex].Cells["Position"].Value.ToString();
                positionText.Focus();
                submitButton.Text = "แก้ไข";
                _flag = "Edit";  
            }
            else if (approverGv.Columns[e.ColumnIndex].Name == "DeleteColumn")
            {
                DialogResult dr = MessageBox.Show("กรุณากด Yes เพื่อยืนยันการลบ", MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if ( dr == DialogResult.Yes)
                {
                    _flag = "Delete";
                    DoUpdate();
                }
            }

            //InitializeDataGridView();
        }

        #endregion

        #region "Function"

        private void ClearControlValue()
        {
            submitButton.Text = "เพิ่ม";
            _flag = "Insert";
            positionText.ResetText();
            approverNameText.ResetText();
            approverNameText.Focus();

            InitializeDataGridView();
        }

        private void DoUpdate()
        {
            AuthorizedPerson approver = new AuthorizedPerson();
            approver.ApproverId = _tmpId;
            approver.ApproverName = approverNameText.Text;
            approver.Position = positionText.Text;            
            approver.CreateBranchId = Session.Branch.Id;
            approver.ModifiedBy = Session.User.Id;
            
            if (_flag == "Edit")
            {
                _presenter.ModifyApprover(approver, "Edit");
                approverNameText.Text = string.Empty;
                positionText.Text = string.Empty;
                approverNameText.Focus();
                //MessageBox.Show(MessageBoxText.MsgProcessingDone, MessageBoxText.CaptionInfo, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (_flag == "Insert")
            {
                _presenter.ModifyApprover(approver, "Insert");
                approverNameText.Text = string.Empty;
                positionText.Text = string.Empty;
                approverNameText.Focus();
                //MessageBox.Show(MessageBoxText.MsgProcessingDone, MessageBoxText.CaptionInfo, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (_flag == "Delete")
            {
                _presenter.ModifyApprover(approver, "Delete");
                //MessageBox.Show(MessageBoxText.MsgProcessingDone, MessageBoxText.CaptionInfo, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            InitializeDataGridView();          
        }
        
        private void InitializeDataGridView()
        {
            BindingList<AuthorizedPerson> bs = new BindingList<AuthorizedPerson>(_presenter.LoadDeliveryPlace(Session.Branch.Id));
            approverGv.Refresh();
            approverGv.AutoGenerateColumns = false;
            approverGv.DataSource = bs;
        }
      
        #endregion

        private void branchIdTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
                if (approverNameText.Text != string.Empty)
                    positionText.Focus();
        }

        private void deliveryPlaceTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
                if (positionText.Text != string.Empty && approverNameText.Text != string.Empty)
                    submitButton.Focus();
        }

        private void closeBt_Click(object sender, EventArgs e)
        {
            _presenter.ApproverUpdatedHandler();
            _presenter.OnCloseView();
        }


    }
}

