//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Globalization;
using PEA.BPM.BillPrintingModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.BillPrintingModule.Views;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class GreenBillReprintView : UserControl, IGreenBillReprintView
    {
        #region "Variables and Properties"

        private List<Bank> _bank;
        private bool _clearCmdFlag = false;
        private bool _isReadyToPrint = false;
        private PrintMode _printMode;
        private string _selectedBankId = null;


        private enum PrintMode
        {
            DDGreen = 1,
            DDBlue
        }

        public List<Bank> Bank
        {
            get { return _bank; }
            set { _bank = value; }
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                printButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                printButton.Enabled = true;
            }
        }

        #endregion

        #region "Code Generated"

        public GreenBillReprintView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public GreenBillReprintViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitialControlValue();
            
            if (Session.Branch.Id == "Z00000")
            {
                _printMode = PrintMode.DDBlue;
                blueRb.Checked = true;
                printCaptionTxt.Text = "¾ÔÁ¾ì«èÍÁãºá¨é§¤èÒä¿¿éÒ\n ËÑ¡ºÑ­ªÕ¸¹Ò¤ÒÃ (ºÔÅ¿éÒ)";
            }
            else
            {
                _printMode = PrintMode.DDGreen;
                greenRb.Checked = true;
                printCaptionTxt.Text = "¾ÔÁ¾ì«èÍÁãºá¨é§¤èÒä¿¿éÒ\n ËÑ¡ºÑ­ªÕ¸¹Ò¤ÒÃ (ºÔÅà¢ÕÂÇ)";
            }
        }

        #endregion

        #region "Event Handling"

        private void bankDueDateTxt_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (ValidateDate(bankDueDateTxt.Text))
                {
                    if (bankDueDateTxt.MaskCompleted)
                    {
                        if (advBillPredCheckBox.Checked)
                            advBillPredText.Focus();
                        else
                            fromCaIdMaskedTextBox.Focus();
                    }
                }
                else
                {
                    MessageBox.Show(MessageBoxText.MsgWrongFormatDueDate, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    bankDueDateTxt.ResetText();
                    bankDueDateTxt.SelectAll();
                }
            }
        }

        private void fromCaIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (fromCaIdMaskedTextBox.Text.Trim() != string.Empty)
                    toCaIdMaskedTextBox.Focus();
            }
        }

        private void toCaIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                try
                {
                    if (fromCaIdMaskedTextBox.Text.Length > 12 || toCaIdMaskedTextBox.Text.Length > 12)
                        throw new Exception();

                    if (fromCaIdMaskedTextBox.Text == string.Empty && toCaIdMaskedTextBox.Text != string.Empty)
                        fromCaIdMaskedTextBox.Text = toCaIdMaskedTextBox.Text;

                    if (fromCaIdMaskedTextBox.Text != string.Empty && toCaIdMaskedTextBox.Text == string.Empty)
                        toCaIdMaskedTextBox.Text = fromCaIdMaskedTextBox.Text;

                    Int64 from = Convert.ToInt64(fromCaIdMaskedTextBox.Text);
                    Int64 to = Convert.ToInt64(toCaIdMaskedTextBox.Text);
                    if (from > to)
                    {
                        fromCaIdMaskedTextBox.Text = to.ToString();
                        toCaIdMaskedTextBox.Text = from.ToString();
                    }
                }
                catch
                {
                    MessageBox.Show(null, "»éÍ¹ËÁÒÂàÅ¢¼Ùéãªéä¿¿éÒäÁè¶Ù¡µéÍ§", "»éÍ¹¢éÍÁÙÅäÁè¶Ù¡µéÍ§", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                AddToDataGridView(fromCaIdMaskedTextBox.Text.PadLeft(12,'0'), toCaIdMaskedTextBox.Text.PadLeft(12,'0'));
                toCaIdMaskedTextBox.Text = string.Empty;
                fromCaIdMaskedTextBox.Text = string.Empty;
                fromCaIdMaskedTextBox.Focus();
            }
        }

        private void greenBillReprintDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (greenBillReprintDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                    greenBillReprintDataGridView.Rows.RemoveAt(e.RowIndex);
                fromCaIdMaskedTextBox.Focus();
            }
        }

        private void Print()
        {
            if (ValidateBeforeSubmit())
            {
                //DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmPrintingBill, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                //if (dr == DialogResult.Yes)
                //{
                this.Cursor = Cursors.AppStarting;
                GreenBillReprintParam param = new GreenBillReprintParam();
                param.CommBranchId = Session.Branch.Id;
                param.PrintedBy = Session.User.Id;

                param.DueDate = bankDueDateTxt.Text.Substring(6, 4) + bankDueDateTxt.Text.Substring(3, 2) +
                                bankDueDateTxt.Text.Substring(0, 2);

                if (bankIdText.Text != string.Empty && bankIdText.Text.Length == 5)
                    param.BankId = bankIdText.Text;

                param.FromCaId = new string[greenBillReprintDataGridView.Rows.Count];
                param.ToCaId = new string[greenBillReprintDataGridView.Rows.Count];
                if (greenRb.Checked)
                    param.BillType = (int)BillType.ReprintGreenBillByBank;
                else
                    param.BillType = (int)BillType.ReprintBlueBillByBank;

                if(advBillPredCheckBox.Checked)
                    param.BillPeriod = advBillPredText.Text.Substring(3, 4) + advBillPredText.Text.Substring(0, 2);

                for (int i = 0; i < greenBillReprintDataGridView.Rows.Count; i++)
                {
                    param.FromCaId[i] = greenBillReprintDataGridView.Rows[i].Cells["fromCaIdColumn"].Value.ToString();
                    param.ToCaId[i] = greenBillReprintDataGridView.Rows[i].Cells["toCaIdColumn"].Value.ToString();
                }

                _presenter.ReprintBillByBank(param);
                this.Cursor = Cursors.Default;
                //}
            }
        }

        private void printButton_Click(object sender, EventArgs e)
        {
            if (!_isReadyToPrint)
            {
                Print();
            }
            else
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmPrintingBill, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    if (Authorization.IsAuthorized(SecurityNames.DirectDebitByBankRePrinting, true))
                        _presenter.PrintSelectedBillHandler();
                }
                printButton.Focus();
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            if (_isReadyToPrint)
                _presenter.ClearBillProcessingListViewHandler();

            InitialControlValue();
        }

        private void bankDueDateTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                bankDueDateTxt.Text = DateTime.Now.ToString("10MMyyyy", formatDate);

                if (advBillPredCheckBox.Checked)
                    advBillPredText.Focus();
                else
                    fromCaIdMaskedTextBox.Focus();
            }
        }

        private void bankIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (greenBillReprintDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "¤Ø³µéÍ§¡ÒÃÅéÒ§¢éÍÁÙÅ·Õè»éÍ¹·Ñé§ËÁ´ãªèäªèËÃ×ÍäÁè", "¤Óàµ×Í¹", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitialControlValue();
                }
                else
                {
                    bankIdText.ResetText();
                    bankIdText.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.Enter)
            {
                if (bankIdText.Text.Length == LocalSettingNames.BankIdLength)
                    bankDueDateTxt.Focus();
                else
                    bankSearchBt.Focus();
            }
        }

        private void fromCaIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Down)
                toCaIdMaskedTextBox.Focus();
            else if (e.KeyCode == Keys.F12)
            {
                if (greenBillReprintDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "¤Ø³µéÍ§¡ÒÃÅéÒ§¢éÍÁÙÅ·Õè»éÍ¹·Ñé§ËÁ´ãªèäªèËÃ×ÍäÁè", "¤Óàµ×Í¹", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitialControlValue();
                }
                else
                {
                    fromCaIdMaskedTextBox.ResetText();
                    fromCaIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
        }

        private void toCaIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
                fromCaIdMaskedTextBox.Focus();
            else if (e.KeyCode == Keys.F12)
            {
                if (greenBillReprintDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "¤Ø³µéÍ§¡ÒÃÅéÒ§¢éÍÁÙÅ·Õè»éÍ¹·Ñé§ËÁ´ãªèäªèËÃ×ÍäÁè", "¤Óàµ×Í¹", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitialControlValue();
                }
                else
                {
                    toCaIdMaskedTextBox.ResetText();
                    toCaIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
        }

        private void bankIdText_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
            if (bankIdText.Text.Length > 0)
            {
                _selectedBankId = null;
                if (bankIdText.MaskCompleted)
                    _selectedBankId = bankIdText.Text;
            }
        }

        private void fromCaIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void toCaIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        #endregion

        #region "Function"

        private void InitialControlValue()
        {
            _presenter.LoadBankComboBox(Session.Branch.Id);

            billTypeGroupBox.Enabled = true;
            printConditionGroupBox.Enabled = true;
            electricIdGroupBox.Enabled = true;
            greenBillListViewGroupBox.Enabled = true;
            _isReadyToPrint = false;
            printButton.Text = ControlCaption.ShowButton;

            //string dfBillPred = DateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
            //advBillPredText.Text = dfBillPred;
            advBillPredCheckBox.Checked = false;

            bankDueDateTxt.Clear();
            fromCaIdMaskedTextBox.Clear();
            toCaIdMaskedTextBox.Clear();
            greenBillReprintDataGridView.Rows.Clear();
            bankIdText.Clear();
            bankDueDateTxt.Clear();
            bankIdText.Focus();
            
        }

        private void AddToDataGridView(string fromId, string toId)
        {
            bool isRepeatedItem = false;
            greenBillReprintDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(fromId + "-" + toId, isRepeatedItem);
            if (isRepeatedItem == false)
            {
                try
                {
                    int i = greenBillReprintDataGridView.Rows.Count;
                    greenBillReprintDataGridView.Rows.Add(1);
                    greenBillReprintDataGridView.Rows[i].Cells["caIdColumn"].Value = fromId + "-" + toId;
                    greenBillReprintDataGridView.Rows[i].Cells["fromCaIdColumn"].Value = fromId;
                    greenBillReprintDataGridView.Rows[i].Cells["toCaIdColumn"].Value = toId;
                    greenBillReprintDataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                        greenBillReprintDataGridView.Rows[j].Selected = false;
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (greenBillReprintDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < greenBillReprintDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)greenBillReprintDataGridView.Rows[i].Cells["caIdColumn"].Value)
                        isRepeated = true;
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private bool ValidateBeforeSubmit()
        {
            bool _flag = true;
            if (!bankDueDateTxt.MaskCompleted || !ValidateDate(bankDueDateTxt.Text)) //duedate
            {
                MessageBox.Show(MessageBoxText.MsgWrongFormatDueDate, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                bankDueDateTxt.Focus();
                bankDueDateTxt.SelectAll();
                _flag = false;
            }
            else if (_selectedBankId == null)  //default is the first item in combo box
            {
                MessageBox.Show(null, "¡ÃØ³ÒÃÐºØ \"¸¹Ò¤ÒÃ\" ·ÕèµéÍ§¡ÒÃ¤é¹ËÒãºá¨é§Ë¹Õé", "¢éÍÁÙÅäÁè¤Ãº¶éÇ¹", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                bankIdText.Focus();
                bankIdText.SelectAll();
                _flag = false;
            }
            else if (greenBillReprintDataGridView.Rows.Count == 0)
            {
                MessageBox.Show("¡ÃØ³Ò»éÍ¹ËÁÒÂàÅ¢¼Ùéãªéä¿áÅÐ¡´»ØèÁ Enter à¾×èÍà¾ÔèÁÃÒÂ¡ÒÃ·ÕèµéÍ§¡ÒÃ¾ÔÁ¾ì", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                bankIdText.Focus();
                bankIdText.SelectAll();
                _flag = false;
            }
            else if (advBillPredCheckBox.Checked && !ValidateDate("01/" + advBillPredText.Text))
            {
                MessageBox.Show("ºÔÅà´×Í¹ (à¾ÔèÁàµÔÁ) ÁÕÃÙ»áººäÁè¶Ù¡µéÍ§ \nÃÙ»áºº·Õè¶Ù¡¤×Í ´´/»»»» àªè¹ 05/2552", "ÃÙ»áººäÁè¶Ù¡µéÍ§", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                advBillPredText.Focus();
                advBillPredText.SelectAll();
                _flag = false;
            }

            return _flag;
        }

        private bool ValidateDate(string date)
        {
            try
            {
                string _date = date;
                //input is dd/mm/yyyy
                date = date.Replace("/", "");
                int day = Convert.ToInt16(date.Substring(0, 2));
                int month = Convert.ToInt16(date.Substring(2, 2));
                int year = Convert.ToInt16(date.Substring(4, 4));

                if (day == 80)
                {
                    if (month > 0 && month < 13)
                        if (year > 1900 && year < 3000)
                            return true;
                }
                else
                    return CustomValidation.ValidateDate(_date);
            }
            catch
            {
                return false;
            }

            return false;
        }

        public void LockView(bool isLock)
        {
            if (isLock)
            {
                billTypeGroupBox.Enabled = false;
                printConditionGroupBox.Enabled = false;
                electricIdGroupBox.Enabled = false;
                greenBillListViewGroupBox.Enabled = false;
                _isReadyToPrint = true;
                printButton.Text = ControlCaption.PrintButton;
                printButton.Enabled = true;
                printButton.Focus();
            }
            else
            {
                billTypeGroupBox.Enabled = true;
                printConditionGroupBox.Enabled = true;
                electricIdGroupBox.Enabled = true;
                greenBillListViewGroupBox.Enabled = true;
                _isReadyToPrint = false;
                printButton.Text = ControlCaption.ShowButton;
                bankDueDateTxt.Focus();
            }
        }

        #endregion

        private void advBillPredCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (advBillPredCheckBox.Checked)
            {
                advBillPredText.Enabled = true;
                advBillPredText.Focus();
            }
            else
            {
                advBillPredText.Enabled = false;
                advBillPredText.Clear();
            }
        }

        private void advCondHint_Click(object sender, EventArgs e)
        {
            UserHint uh = new UserHint();
            uh.ShowDialog();
        }

        private void bankSearchBt_Click(object sender, EventArgs e)
        {
            BABankSelection bankDlg = new BABankSelection(_bank);
            bankDlg.ShowDialog();
            if (bankDlg.DialogResult == DialogResult.OK)
            {
                Bank chosenBank = bankDlg.ChesenBank;
                _selectedBankId = chosenBank.BankKey;
                bankIdText.Text = chosenBank.BankKey;
                bankDueDateTxt.Focus();
            }
        }

    }
}

