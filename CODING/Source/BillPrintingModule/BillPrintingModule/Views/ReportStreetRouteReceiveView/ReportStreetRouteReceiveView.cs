//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Collections.Generic;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportStreetRouteReceiveView : UserControl, IReportStreetRouteReceiveView
    {
        enum PrintState
        {
            All = 0,
            Branch
        }

        #region "Variables & Properties"
        private List<Branch> _childBranch;
        private List<Portion> _portion;
        private bool _clearCmdFlag = false;
        private PrintState _state = PrintState.All;

        public List<Portion> Portion
        {
            get { return _portion; }
            set
            {
                _portion = value;
                LoadPortion();
            }
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showButton.Enabled = true;
            }
        }

        #endregion

        #region "Code Generated"

        public ReportStreetRouteReceiveView()
        {
            InitializeComponent();
            dateReceivedDtPicker.Value = dateReceivedDtPicker.Value.AddDays(-1);
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportStreetRouteReceiveViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();
            _childBranch = CodeTable.Instant.ListBranches();
            _presenter.GetPortion(Session.Branch.Id);

            dateReceivedDtPicker.Value = DateTime.Now.AddDays(-1);
            toDateReceivedDtPicker.Value = DateTime.Now;
        }

        #endregion

        #region "Event Handling"

        private void LoadPortion()
        {
            billPeriodSpecificPortionComboBox.ValueMember = "PortionKey";
            billPeriodSpecificPortionComboBox.DisplayMember = "PortionNo";
            billPeriodSpecificPortionComboBox.DataSource = _portion;
        }

        private void PreviewReport()
        {
            if (ValidateBeforeSubmit())
            {
                DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dlg == DialogResult.OK)
                {
                    this.Cursor = Cursors.Default;
                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    param.DataReceiveDt = dateReceivedDtPicker.Value.Date;
                    param.ToDataReceiveDt = toDateReceivedDtPicker.Value.Date;
                    param.Portion = (billPeriodAllPortionRadioButton.Checked == true ? "0" : "1");
                    param.FromTime = fromTimeMskTxt.Text.Replace(".","");
                    param.ToTime = toTimeMskTxt.Text.Replace(".", "");

                    if (billPeriodSpecificPortionRadioButton.Checked)
                        param.PortionNo = billPeriodSpecificPortionComboBox.Text;

                    if (printAllRadioButton.Checked)
                        param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    else
                        param.PrintingCondition = (int)PrintingCondition.BranchPrinting;

                    List<InputParam> paramList = new List<InputParam>();
                    if (reportStreetRouteReceiveDataGridView.Rows.Count != 0)
                    {
                        for (int i = 0; i < reportStreetRouteReceiveDataGridView.Rows.Count; i++)
                        {
                            InputParam p = new InputParam();
                            p.InputStr = reportStreetRouteReceiveDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                            paramList.Add(p);
                        }

                        param.InputParamList = paramList;
                    }

                    _presenter.PreviewStreetRouteReceiveReport(param);
                }
                else
                {
                    showButton.Focus();
                }
            }
            
        }

        private void showButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            InitializeControlValue();
        }

        private void billPeriodAllPortionRadioButton_Click(object sender, EventArgs e)
        {
            billPeriodAllPortionRadioButton.Checked = true;
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.ResetText();
            billPeriodSpecificPortionComboBox.Enabled = false;
        }

        private void billPeriodSpecificPortionRadioButton_Click(object sender, EventArgs e)
        {
            billPeriodAllPortionRadioButton.Checked = false;
            billPeriodSpecificPortionRadioButton.Checked = true;
            billPeriodSpecificPortionComboBox.ResetText();
            billPeriodSpecificPortionComboBox.Enabled = true;
            billPeriodSpecificPortionComboBox.Focus();
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                if (_state == PrintState.Branch && reportStreetRouteReceiveDataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr != DialogResult.Yes)
                    {
                        printBranchRadioButton.Checked = true;
                        return;
                    }
                }

                reportStreetRouteReceiveDataGridView.Rows.Clear();
                reportStreetRouteReceiveDataGridView.Enabled = false;
                branchIdMaskedTextBox.Clear();
                branchIdMaskedTextBox.Enabled = false;

                _state = PrintState.All;
            }
        }

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
            {
                if (_state == PrintState.All)
                {
                    reportStreetRouteReceiveDataGridView.Enabled = true;
                    branchIdMaskedTextBox.Enabled = true; 
                }

                branchIdMaskedTextBox.Focus();
                _state = PrintState.Branch;
            }
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {                    
                    if (printBranchRadioButton.Checked == true)
                    {
                        //Add to DataGridView
                        AddToDataGridView(ToUpperCase(branchIdMaskedTextBox));
                        //then focus on branchIdMaskedTextBox
                        branchIdMaskedTextBox.Text = string.Empty;
                        //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
                        branchIdMaskedTextBox.Focus();
                    }
                    else
                    {
                        MessageBox.Show("คุณสามารถป้อนรหัสการไฟฟ้าของตนเองและการไฟฟ้าลูกเท่านั้น", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }                    
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }
            }
        }


        private void reportStreetRouteReceiveDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (reportStreetRouteReceiveDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                reportStreetRouteReceiveDataGridView.Rows.RemoveAt(e.RowIndex);
        }

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                _clearCmdFlag = false;
                if (reportStreetRouteReceiveDataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    branchIdMaskedTextBox.ResetText();
                    branchIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.N)
            {
                branchIdMaskedTextBox.Text = Session.Branch.Id;
            }
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        #endregion

        #region "Function"

        private void AddToDataGridView(string elecId)
        {
            bool isRepeatedItem = false;
            reportStreetRouteReceiveDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(elecId, isRepeatedItem);

            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportStreetRouteReceiveDataGridView.Rows.Count;
                    reportStreetRouteReceiveDataGridView.Rows.Add(1);
                    reportStreetRouteReceiveDataGridView.Rows[i].Cells["electricityIdColumn"].Value = elecId;
                    reportStreetRouteReceiveDataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        reportStreetRouteReceiveDataGridView.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportStreetRouteReceiveDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < reportStreetRouteReceiveDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)reportStreetRouteReceiveDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                dateReceivedDtPicker.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = true;

            if (reportStreetRouteReceiveDataGridView.Rows.Count == 0 && printBranchRadioButton.Checked == true)
            {
                isValidated = false;
                MessageBox.Show(MessageBoxText.MsgMissingElectricId, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                branchIdMaskedTextBox.Focus();
                branchIdMaskedTextBox.SelectAll();
            }
            
            return isValidated;
        }

        private void InitializeControlValue()
        {
            reportStreetRouteReceiveDataGridView.Enabled = false;
            reportStreetRouteReceiveDataGridView.Rows.Clear();
            reportStreetRouteReceiveDataGridView.AutoGenerateColumns = false;
            billPeriodAllPortionRadioButton.Checked = true;
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.ResetText();
            billPeriodSpecificPortionComboBox.Enabled = false;
            printAllRadioButton.Checked = true;
            printBranchRadioButton.Checked = false;
            branchIdMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Enabled = false;
            dateReceivedDtPicker.Focus();
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        #endregion       

        private void label6_Click(object sender, EventArgs e)
        {

        }

      
    }
}

