//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Collections.Generic;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportDailyUnprintView : UserControl, IReportDailyUnprintView
    {
        #region "Variables & Properties"
        string rbFlag = ""; //A = all, B = branch
        private List<Branch> _childBranch;
        private bool _clearCmdFlag = false;
        private List<Portion> _portion;
        private bool isReady = false;

        public List<Portion> Portion
        {
            get { return _portion; }
            set
            {
                _portion = value;
                LoadPortion();
            }
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showButton.Enabled = true;
            }
        }

        #endregion

        #region "Code Generated"

        public ReportDailyUnprintView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportDailyUnprintViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();
            _childBranch = CodeTable.Instant.ListBranches();
            _presenter.GetPortion(Session.Branch.Id);
        }

        #endregion

        #region "Event Handling"


        private void PreviewReport()
        {
            if (ValidateBeforeSubmit())
            {
                DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dlg == DialogResult.OK)
                {
                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                    param.Portion = (billPeriodAllPortionRadioButton.Checked ? "0" : "1"); //0 = all, 1 = specific

                    if (!billPeriodAllPortionRadioButton.Checked)
                    {
                        if (billPeriodSpecificPortionComboBox.Items.Count > 0)
                            param.PortionNo = ((Portion)billPeriodSpecificPortionComboBox.SelectedItem).PortionNo;//all = null, specific = value
                        else
                            param.Portion = null;
                    }
                    else
                        param.PortionNo = null;
                     
                    if (printAllRadioButton.Checked)
                        param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    else
                        param.PrintingCondition = (int)PrintingCondition.BranchPrinting;

                    List<InputParam> paramList = new List<InputParam>();
                    if (reportDailyUnprintDataGridView.Rows.Count != 0)
                    {
                        for (int i = 0; i < reportDailyUnprintDataGridView.Rows.Count; i++)
                        {
                            InputParam p = new InputParam();
                            p.InputStr = reportDailyUnprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                            paramList.Add(p);
                        }
                        param.InputParamList = paramList;
                    }

                    _presenter.PreviewDailyUnprintReport(param);
                }
            }
            else
            {
                showButton.Focus();
            }
        }

        private void LoadPortion()
        {
            billPeriodSpecificPortionComboBox.ValueMember = "PortionKey";
            billPeriodSpecificPortionComboBox.DisplayMember = "PortionNo";
            billPeriodSpecificPortionComboBox.DataSource = _portion;

            if (_portion.Count > 0)
                billPeriodSpecificPortionComboBox.SelectedIndex = 0;
        }

        private void showButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            InitializeControlValue();
        }


        private void DisablePeriodInput()
        {
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Enabled = false;
            billPeriodAllPortionRadioButton.Checked = false;
            billPeriodAllPortionRadioButton.Enabled = false;
            billPeriodSpecificPortionRadioButton.Enabled = false;
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.Text = string.Empty;
            billPeriodSpecificPortionComboBox.Enabled = false;
        }

        private void EnablePeriodInput()
        {
            billPeriodMaskedTextBox.Enabled = true;
            billPeriodAllPortionRadioButton.Checked = true;
            billPeriodAllPortionRadioButton.Enabled = true;
            billPeriodSpecificPortionRadioButton.Enabled = true;
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.Text = string.Empty;
            billPeriodSpecificPortionComboBox.Enabled = false;   
            SetMaskedTextBehavior(billPeriodMaskedTextBox, billPeriodMaskedTextBox.Text, true);
        }

        private void printAllRadioButton_Click(object sender, EventArgs e)
        {
            if (reportDailyUnprintDataGridView.Rows.Count != 0)
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    printBranchRadioButton.Checked = false;
                    branchIdMaskedTextBox.Text = string.Empty;
                    branchIdMaskedTextBox.Enabled = false;
                    reportDailyUnprintDataGridView.Rows.Clear();
                    rbFlag = "A";
                }
                else
                {
                    printBranchRadioButton.Checked = true;
                    printAllRadioButton.Checked = false;
                    branchIdMaskedTextBox.Focus();
                    rbFlag = "B";
                }
            }
            else
            {
                branchIdMaskedTextBox.Text = string.Empty;
                branchIdMaskedTextBox.Enabled = false;
                printBranchRadioButton.Checked = false;
                reportDailyUnprintDataGridView.Rows.Clear();
                rbFlag = "A";
            }
        }

        private void printBranchRadioButton_Click(object sender, EventArgs e)
        {
            if (reportDailyUnprintDataGridView.Rows.Count != 0)
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    printAllRadioButton.Checked = false;
                    branchIdMaskedTextBox.Enabled = true;
                    branchIdMaskedTextBox.Text = string.Empty;
                    reportDailyUnprintDataGridView.Rows.Clear();
                    reportDailyUnprintDataGridView.Enabled = true;
                    SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, true);
                    branchIdMaskedTextBox.Focus();
                    rbFlag = "B";
                }
                else
                {
                    printAllRadioButton.Checked = true;
                    printBranchRadioButton.Checked = false;
                    rbFlag = "A";
                }
            }
            else
            {
                printAllRadioButton.Checked = false;
                branchIdMaskedTextBox.Enabled = true;
                branchIdMaskedTextBox.Text = string.Empty;
                reportDailyUnprintDataGridView.Rows.Clear();
                reportDailyUnprintDataGridView.Enabled = true;
                SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, true);
                branchIdMaskedTextBox.Focus();
                rbFlag = "B";
            }
        }

        private void billPeriodAllPortionRadioButton_Click(object sender, EventArgs e)
        {
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.Text = string.Empty;
            billPeriodSpecificPortionComboBox.Enabled = false;
        }

        private void billPeriodSpecificPortionRadioButton_Click(object sender, EventArgs e)
        {
            billPeriodSpecificPortionComboBox.Enabled = true;
            billPeriodSpecificPortionComboBox.Focus();
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    //Add into dataGrid
                    AddToDataGridView(ToUpperCase(branchIdMaskedTextBox));
                    SetMaskedTextBehavior(branchIdMaskedTextBox, "", true);
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }
            }
        }

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);
                if (billPeriodSpecificPortionRadioButton.Checked)
                    billPeriodSpecificPortionComboBox.Focus();
                else
                    billPeriodAllPortionRadioButton.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                _clearCmdFlag = false;
                PreviewReport();
            }
        }

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                _clearCmdFlag = false;
                if (reportDailyUnprintDataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    branchIdMaskedTextBox.ResetText();
                    branchIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.N)
                branchIdMaskedTextBox.Text = Session.Branch.Id;
        }

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return && billPeriodMaskedTextBox.MaskCompleted)
            {
                if (ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    if (billPeriodMaskedTextBox.MaskCompleted == true)
                    {
                        billPeriodAllPortionRadioButton.Checked = true;
                        billPeriodAllPortionRadioButton.Focus();
                    }
                }
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบวันที่ของบิลประจำเดือน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.Clear();
                }

                _clearCmdFlag = false;
            }
        }

        private void reportDailyUnprintDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (reportDailyUnprintDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                reportDailyUnprintDataGridView.Rows.RemoveAt(e.RowIndex);
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }


        #endregion

        #region "Function"

        private void AddToDataGridView(string elecId)
        {
            bool isRepeatedItem = false;
            reportDailyUnprintDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(elecId, isRepeatedItem);

            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportDailyUnprintDataGridView.Rows.Count;
                    reportDailyUnprintDataGridView.Rows.Add(1);
                    reportDailyUnprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value = elecId;
                    reportDailyUnprintDataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        reportDailyUnprintDataGridView.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportDailyUnprintDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < reportDailyUnprintDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)reportDailyUnprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                billPeriodMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            if (billPeriodMaskedTextBox.Text.Replace("/", "").Trim() == string.Empty || !billPeriodMaskedTextBox.MaskCompleted ||
                !ValidateDate(billPeriodMaskedTextBox.Text))
            {
                MessageBox.Show(null, "กรุณาป้อนบิลประจำเดือนให้ครบถ้วน", "กรุณาป้อน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billPeriodMaskedTextBox.Focus();
                billPeriodMaskedTextBox.SelectAll();
                return false;
            }

            if (printBranchRadioButton.Checked)
            {
                if (reportDailyUnprintDataGridView.Rows.Count == 0)
                {
                    MessageBox.Show(null, "กรุณาป้อนรหัสการไฟฟ้า", "กรุณาป้อน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
            }

            return true;
        }

        private void InitializeControlValue()
        {
            reportDailyUnprintDataGridView.Enabled = false;
            reportDailyUnprintDataGridView.Rows.Clear();
            reportDailyUnprintDataGridView.AutoGenerateColumns = false;
            billPeriodMaskedTextBox.Enabled = true;
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
            billPeriodAllPortionRadioButton.Checked = true;
            billPeriodSpecificPortionRadioButton.Checked = false;
            billPeriodSpecificPortionComboBox.Text = string.Empty;
            billPeriodSpecificPortionComboBox.Enabled = false;
            printAllRadioButton.Checked = true;
            printBranchRadioButton.Checked = false;
            branchIdMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Enabled = false;
            billPeriodMaskedTextBox.Focus();
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private bool ValidateDate(string date)
        {
            if (CustomValidation.ValidateDate(date))
                return true;
            else
                return false;
        }

        #endregion


    }
}

