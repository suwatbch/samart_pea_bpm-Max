//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.BillPrintingModule.Interface.Constants;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class GroupInvoiceReprintView : UserControl, IGroupInvoiceReprintView
    {
        #region "Variables and Properties"

        private PrintCondition _printCondition = PrintCondition.MtNo;
        private string dash = Properties.Resources.PrintSeperatorText;
        private bool _clearCmdFlag = false;
        private bool _isReadyToPrint = false;
        private List<AuthorizedPerson> _approverList;

        enum PrintCondition 
        {
            MtNo = 1,
            PaidBy,
            CaId
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                printButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                printButton.Enabled = true;
            }
        }

        public List<AuthorizedPerson> ApproverList
        {
            get { return _approverList; }
            set
            {
                _approverList = value;
                FillApproverCBox();
            }
        }

        public void RefreshApprover()
        {
            GetApprover();
            if (!approverCheck.Checked)
                approverCBox.Enabled = false;
            else
                approverCBox.Enabled = true;
        }

        #endregion

        #region "Code Generated"

        public GroupInvoiceReprintView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public GroupInvoiceReprintViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();
            try
            {
                GetApprover();
            }
            catch // TODO: ตั้งใจ ?
            {
            }
        }

      
        
        #endregion      

        #region "Event Handling"

        private void mtNoMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (printMtNoRadioButton.Checked && mtNoMaskedTextBox.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(mtNoMaskedTextBox.Text);
                    SetMaskedTextBehavior(mtNoMaskedTextBox, "", true);
                }
            }
        }

        private void Print()
        {
            try
            {
                if (ValidateBeforeSubmit())
                {
                    this.Cursor = Cursors.AppStarting;

                    List<String> tmp = new List<String>();
                    GroupInvoiceParam param = new GroupInvoiceParam();
                    param.CommBranchId = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    param.BillType = (int)BillType.ReprintGroupInvoiceA4Bill;

                    if (printMtNoRadioButton.Checked)
                    {
                        param.PrintingCondition = (int)PrintingCondition.MtNoPrinting;
                    }
                    else if (caIdRb.Checked)
                    {
                        string[] pdd = paymentDueDateText.Text.Split('/');
                        param.PaymentDueDate = pdd[2] + pdd[1] + pdd[0];
                        param.PrintingCondition = (int)PrintingCondition.UserPrinting;
                    }

                    for (int i = 0; i < groupInvoiceReprintDataGridView.Rows.Count; i++)
                    {
                        tmp.Add(groupInvoiceReprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString());
                    }
                    param.Id = tmp;

                    if (printMtNoRadioButton.Checked)
                        param.BranchId = Session.Branch.Id;

                    //print approver in bill footer
                    if (approverCheck.Checked && approverCBox.SelectedItem != null)
                    {
                        AuthorizedPerson approver = (AuthorizedPerson)approverCBox.SelectedItem;
                        param.ApproverId = approver.ApproverId;
                        param.ApproverName = approver.ApproverName;
                        param.ApproverPosition = approver.Position;
                    }
                    else
                    {
                        param.ApproverId = "";
                        param.ApproverName = "";
                        param.ApproverPosition = "";
                    }

                    _presenter.ReprintGroupInvoiceWithoutCoverPage(param);

                    this.Cursor = Cursors.Default;
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void printButton_Click(object sender, EventArgs e)
        {            
            if (!_isReadyToPrint)
            {
                Print();
            }
            else
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmPrintingBill, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    if (Authorization.IsAuthorized(SecurityNames.GroupInvoiceReprinting, true))
                        _presenter.PrintSelectedBillHandler();
                }
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            if (_isReadyToPrint)
                _presenter.ClearBillProcessingListViewHandler();

            InitializeControlValue();
        }

        private void GetApprover()
        {
            _presenter.GetApprover(Session.Branch.Id);
        }

        private void groupInvoiceReprintDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (groupInvoiceReprintDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                    groupInvoiceReprintDataGridView.Rows.RemoveAt(e.RowIndex);
            }
        }

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                paymentDueDateText.Text = DateTime.Now.ToString("MMyyyy", formatDate);

                if (printMtNoRadioButton.Checked)
                    printMtNoRadioButton.Focus();
                else if (caIdRb.Checked)
                    caIdTxt.Focus();
            }
        }

        private void mtNoMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    mtNoMaskedTextBox.ResetText();
                    mtNoMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (groupInvoiceReprintDataGridView.Rows.Count > 0)
                    Print();
            }
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void toMruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void paidByMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mtNoMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void approverCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (!approverCheck.Checked)
                approverCBox.Enabled = false;
            else
                approverCBox.Enabled = true;
        }

        private void printMtNoRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printMtNoRadioButton.Checked)
            {
                if (_printCondition != PrintCondition.MtNo && groupInvoiceReprintDataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                        groupInvoiceReprintDataGridView.Rows.Clear();
                    else
                    {
                        caIdRb.Checked = true;
                        return;
                    }
                }

                paymentDueDateText.Enabled = false;
                paymentDueDateText.Clear();
                caIdTxt.Enabled = false;
                toCaIdTxt.Enabled = false;
                caIdTxt.Clear();
                toCaIdTxt.Clear();
                mtNoMaskedTextBox.Enabled = true;
                mtNoMaskedTextBox.Focus();
                _printCondition = PrintCondition.MtNo;
            }
            else
                paymentDueDateText.Enabled = true;
        }

        private void caIdRb_CheckedChanged(object sender, EventArgs e)
        {
            if (caIdRb.Checked)
            {
                caIdTxt.Mask = MaskedValue.ElectricUserId;
                toCaIdTxt.Mask = MaskedValue.ElectricUserId;
                
                if (_printCondition != PrintCondition.CaId && groupInvoiceReprintDataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                        groupInvoiceReprintDataGridView.Rows.Clear();
                    else
                    {
                        printMtNoRadioButton.Checked = true;
                        return;
                    }
                }

                paymentDueDateText.Enabled = true;
                paymentDueDateText.Clear();               
                mtNoMaskedTextBox.Enabled = false;
                mtNoMaskedTextBox.Clear();
                caIdTxt.Enabled = true;
                toCaIdTxt.Enabled = true;
                if (paymentDueDateText.Text.Replace("/", "").Trim() != string.Empty)
                    caIdTxt.Focus();
                else
                    paymentDueDateText.Focus();

                _printCondition = PrintCondition.CaId;
            }
        }

        private void caIdTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (caIdTxt.Text.Length > 12 || string.IsNullOrEmpty(caIdTxt.Text.Trim()))
                {
                    MessageBox.Show("กรุณาป้อนหมายเลขผู้ใช้ไฟฟ้าให้ถูกต้อง", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    caIdTxt.Focus();
                    caIdTxt.SelectAll();
                }
                else
                    toCaIdTxt.Focus();
               
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (groupInvoiceReprintDataGridView.Rows.Count > 0)
                    Print();
            }
        }

        private void toCaIdTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Int64 caIdInt = 0;
                Int64 toCaIdInt = 0;

                try
                {
                    caIdInt = Convert.ToInt64(caIdTxt.Text);
                }
                catch
                {
                    caIdTxt.Clear();
                    caIdTxt.Focus();
                }

                try
                {
                    toCaIdInt = Convert.ToInt64(toCaIdTxt.Text);
                    if (toCaIdInt < caIdInt)
                    {
                        caIdTxt.Text = toCaIdInt.ToString();
                        toCaIdTxt.Text = caIdInt.ToString();
                    }
                }
                catch
                {
                    toCaIdTxt.Clear();
                    toCaIdTxt.Focus();
                }

                if (caIdTxt.Text.Trim() != string.Empty && toCaIdTxt.Text.Trim() == string.Empty)
                {
                    AddToDataGridView(string.Format("{0}-{1}", caIdTxt.Text.PadLeft(12, '0'), caIdTxt.Text.PadLeft(12, '0')));
                    toCaIdTxt.Clear();
                    caIdTxt.Clear();
                    caIdTxt.Focus();
                }
                else if (caIdTxt.Text.Trim() == string.Empty && toCaIdTxt.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(string.Format("{0}-{1}", toCaIdTxt.Text.PadLeft(12, '0'), toCaIdTxt.Text.PadLeft(12, '0')));
                    toCaIdTxt.Clear();
                    caIdTxt.Clear();
                    caIdTxt.Focus();
                }
                else
                {
                    AddToDataGridView(string.Format("{0}-{1}", caIdTxt.Text.PadLeft(12, '0'), toCaIdTxt.Text.PadLeft(12 ,'0')));
                    toCaIdTxt.Clear();
                    caIdTxt.Clear();
                    caIdTxt.Focus();
                }
            }

        }

        private void paymentDueDateText_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (ValidateDate(paymentDueDateText.Text))
                    caIdTxt.Focus();
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบวันที่ของวันกำหนดชำระเงิน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    paymentDueDateText.ResetText();
                    paymentDueDateText.SelectAll();
                }
            }
        }


        #endregion

        #region "Function"

        private void InitializeControlValue()
        {
            printConditionGroupBox.Enabled = true;
            electricIdGroupBox.Enabled = true;
            groupInvoiceListViewGroupBox.Enabled = true;
            approverGBox.Enabled = true;
            _isReadyToPrint = false;
            printButton.Text = ControlCaption.ShowButton;

            groupInvoiceReprintDataGridView.Rows.Clear();
            groupInvoiceReprintDataGridView.Enabled = false;
            groupInvoiceReprintDataGridView.AutoGenerateColumns = false;

            paymentDueDateText.Enabled = false;
            paymentDueDateText.Text = string.Empty;
            printMtNoRadioButton.Checked = true;
            mtNoMaskedTextBox.Enabled = true;
            mtNoMaskedTextBox.Text = string.Empty;

            //approverCheck.Checked = false;
            //approverCBox.Enabled = false;

            mtNoMaskedTextBox.Focus();
        }

        private void AddToDataGridView(string txt)
        {
            bool isRepeatedItem = false;
            groupInvoiceReprintDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(txt, isRepeatedItem);
            if (isRepeatedItem == false)
            {
                try
                {
                    int i = groupInvoiceReprintDataGridView.Rows.Count;
                    groupInvoiceReprintDataGridView.Rows.Add(1);
                    groupInvoiceReprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value = txt;
                    groupInvoiceReprintDataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        groupInvoiceReprintDataGridView.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (groupInvoiceReprintDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < groupInvoiceReprintDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)groupInvoiceReprintDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                        isRepeated = true;
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                mtNoMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = true; //always true for print all 
            if (printMtNoRadioButton.Checked)
            {
                if (groupInvoiceReprintDataGridView.Rows.Count == 0)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingMtNo, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    mtNoMaskedTextBox.Focus();
                    mtNoMaskedTextBox.SelectAll();
                }
            }
            else if (caIdRb.Checked)
            {
                if (!paymentDueDateText.MaskCompleted || paymentDueDateText.Text.Replace("/", "").Trim() == string.Empty ||
                    !ValidateDate(paymentDueDateText.Text))
                {
                    isValidated = false;
                    MessageBox.Show("กรุณาตรวจสอบวันที่กำหนดชำระเงิน", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    paymentDueDateText.Focus();
                    paymentDueDateText.SelectAll();
                }
                else if (groupInvoiceReprintDataGridView.Rows.Count == 0)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingCaId, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    caIdTxt.Focus();
                    caIdTxt.SelectAll();
                }
            }

            return isValidated;
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private void FillApproverCBox()
        {
            approverCBox.Enabled = false;
            approverCBox.DataSource = _approverList;
            approverCBox.DisplayMember = "ApproverName";
            approverCBox.ValueMember = "ApproverId";
            approverCBox.Enabled = true;
            if (_approverList.Count > 0)
            {
                approverCBox.SelectedIndex = 0;
                approverCheck.Enabled = true;
            }
            else
            {
                approverCheck.Enabled = false;
                approverCheck.Checked = false;
            }
        }

        private bool ValidateDate(string date)
        {
            if (CustomValidation.ValidateDate(date))
                return true;
            else
                return false;
        }

        public void LockView(bool isLock)
        {
            if (isLock)
            {
                printConditionGroupBox.Enabled = false;
                electricIdGroupBox.Enabled = false;
                groupInvoiceListViewGroupBox.Enabled = false;
                approverGBox.Enabled = false;
                _isReadyToPrint = true;
                printButton.Text = ControlCaption.PrintButton;
                printButton.Enabled = true;
                printButton.Focus();
            }
            else
            {
                printConditionGroupBox.Enabled = true;
                electricIdGroupBox.Enabled = true;
                groupInvoiceListViewGroupBox.Enabled = true;
                approverGBox.Enabled = true;
                _isReadyToPrint = false;
                printButton.Text = ControlCaption.ShowButton;
                paymentDueDateText.Focus();
            }
        }

        #endregion

       
      
       
    }
}

