//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.Globalization;
using System.ComponentModel;
using System.Collections;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Text.RegularExpressions;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportBillDeliveryView : UserControl, IReportBillDeliveryView
    {
        #region "variables"

        private string _billPeriod;
        private string _tmpBillPeriodLog;
        private List<PrintableId> _printableId;
        private List<PrintableId> _selectedId;
        private List<ReportBillDelivery> _reportBillDelivery;
        private List<AuthorizedPerson> _authorizedPerson;
        private List<DeliveryPlace> _deliveryPlace;
        private List<String> _childBranch;
        private OptionState _option = OptionState.Normal;
        private TypeState _typeState = TypeState.Blue;
        private bool _loadReady = false;
        private PrintState _printState = PrintState.Preview;

        private enum OptionState
        {
            Normal = 1,
            Fixed
        };

        private enum TypeState
        {
            Blue = 1,
            Green, 
            Spot,
            Receipt
        };

        private enum PrintState
        {
            Preview =1, 
            Print
        }

        #endregion

        #region "Properties"

        public string BillPeriod
        {
            get { return _billPeriod; }
            set { _billPeriod = value; }
        }

        public List<PrintableId> PrintableId
        {
            get { return _printableId; }
            set 
            {
                _printableId = value;
                FillGroupBranch();
                //BindBillDeliveryData();
            }
        }

        public List<ReportBillDelivery> ReportBillDelivery
        {
            get { return _reportBillDelivery; }
            set 
            { 
                _reportBillDelivery = value; 
            }
        }

        public List<AuthorizedPerson> AuthorizedPerson
        {
            get { return _authorizedPerson; }
            set { _authorizedPerson = value; }
        }

        public List<DeliveryPlace> DeliveryPlace
        {
            get { return _deliveryPlace; }
            set { _deliveryPlace = value; }
        }
        
        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showReportButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showReportButton.Enabled = true;
            }
        }

        public void RefreshDeliveryTo()
        {
            InitialComboBox();
        }

        #endregion

        #region "Code Generated"
        /// <summary>
        /// First,bind to dataGrid 
        /// Constructor
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportBillDeliveryViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitialControlValue();
            LoadToPersonComboBox();
            _childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
        }

        public ReportBillDeliveryView()
        {
            InitializeComponent();
            _selectedId = new List<PrintableId>();
        }

        #endregion

        #region "Event Handling"

        private void ProcessOptionChanged()
        {
            if ((blueBillRadioButton.Checked && _option == OptionState.Fixed) || (reprintFixBillRadioButton.Checked && _option == OptionState.Normal))
            {
                if (reportBillDeliveryDataGridView.Rows.Count != 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                    {
                        reportBillDeliveryDataGridView.Rows.Clear();
                        billPeriodLogMaskedTextBox.ResetText();
                        billPeriodMaskedTextBox.Clear();
                        _printableId.Clear();
                        billPeriodMaskedTextBox.Focus();
                        billPeriodMaskedTextBox.SelectAll();
                    }
                    else
                    {
                        if (_option == OptionState.Normal)
                            blueBillRadioButton.Checked = true;
                        else
                            reprintFixBillRadioButton.Checked = true;
                    }
                }
                else
                {
                    reportBillDeliveryDataGridView.Rows.Clear();
                    billPeriodLogMaskedTextBox.ResetText();
                    billPeriodMaskedTextBox.Focus();
                    billPeriodMaskedTextBox.SelectAll();
                }

                if (blueBillRadioButton.Checked)
                    _option = OptionState.Normal;
                else
                    _option = OptionState.Fixed;
            }
        }

        private void blueBillRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            ProcessOptionChanged();
        }

        private void reprintFixBillRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            ProcessOptionChanged();
        }

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return && billPeriodMaskedTextBox.MaskCompleted)
            {
                if (!CustomValidation.ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    MessageBox.Show("กรุณากรอกวันที่ให้ถูกต้องตามรูปแบบ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.Clear();
                }
                else
                {
                    if (reprintCheck.Checked)
                        reprintLog.Focus();
                    else
                        searchBillBt.Focus();
                }
            }
        }

        private bool ValidateSelection()
        {
            bool ret = false;
            if (reportBillDeliveryDataGridView.Rows.Count == 0)
                return ret;

            for (int i = 0; i < reportBillDeliveryDataGridView.Rows.Count; i++)
            {
                object isChecked = reportBillDeliveryDataGridView.Rows[i].Cells["checkColumn"].Value;
                if (isChecked != null && (bool)isChecked)
                    return true;
            }

            return ret;
        }
        
        private void PreviewReport(bool save)
        {
            try
            {

                if (!billPeriodMaskedTextBox.MaskCompleted)
                {
                    MessageBox.Show(MessageBoxText.MsgWrongFormatBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    billPeriodMaskedTextBox.Focus();
                    billPeriodMaskedTextBox.SelectAll();
                    return;
                }

                if (billPeriodLogMaskedTextBox.Text == string.Empty)
                {
                    MessageBox.Show(null, "กรุณาระบุบันทึกฉบับที่ ", "ป้อนข้อมูลไม่ครบ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    if (billPeriodMaskedTextBox.MaskCompleted)
                    {
                        billPeriodLogMaskedTextBox.Focus();
                        billPeriodLogMaskedTextBox.SelectAll();
                    }
                    else
                    {
                        billPeriodMaskedTextBox.Focus();
                        billPeriodMaskedTextBox.SelectAll();
                    }
                    return;
                }

                if (deliveryToComboBox.SelectedValue == null)
                {
                    MessageBox.Show(null, "กรุณาระบุสถานที่นำส่งใบแจ้งหนี้ค่าไฟฟ้า ", "ป้อนข้อมูลไม่ครบ", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    if (_deliveryPlace.Count == 0)
                        _presenter.ShowDeliveryPlaceScreen();

                    return;
                }

                if (!ValidateSelection())
                {
                    MessageBox.Show(null, "ไม่พบหรือยังไม่ได้เลือกการไฟฟ้าที่จะออกรายงานนำส่ง ", "กรุณาเลือกรายการ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    reportBillDeliveryDataGridView.Focus();
                    return;
                }

                DialogResult dlg;
                if(save)
                    dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการบันทึกฉบับที่ของการนำส่ง\nฉบับนำส่งครั้งต่อไปจะเพิ่มขึ้น", "บันทึกการนำส่ง", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                else
                    dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                if (dlg == DialogResult.OK)
                {
                    if (save)
                        SaveToPersonText();

                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    param.Save = save;
                    param.IsReprint = reprintCheck.Checked;

                    //ปกติ หรือแก้ไข
                    param.ReportType = blueBillRadioButton.Checked ? 0 : 1;
                    

                    //ตัวแทน หรือธนาคาร
                    if (blueRb.Checked) //1=blue, 2=green
                        param.PrintType = 1;
                    else if(bankRb.Checked)
                        param.PrintType = 2;
                    else if (spotbillRadioButton.Checked)
                        param.PrintType = 5;
                    else 
                        param.PrintType = 6;

                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                    param.BillPeriodLog = Convert.ToInt16(billPeriodLogMaskedTextBox.Text);
                    DeliveryPlace dp = (DeliveryPlace)deliveryToComboBox.SelectedItem;
                    param.DeliveryPlace = (string)dp.Id; //delivery place ID
                    param.DeliveryPlaceName = (string)dp.PlaceName;
                    param.SaveNumber = saveNumberMaskedTextBox.Text;
                    //param.ToWhom = learnText.Text;
                    param.ToWhom = toPersonComboBox.Text;

                    List<InputParam> paramList = new List<InputParam>();
                    for (int i = 0; i < reportBillDeliveryDataGridView.Rows.Count; i++)
                    {
                        object isChecked = reportBillDeliveryDataGridView.Rows[i].Cells["checkColumn"].Value;
                        if (isChecked != null && (bool)isChecked == true)
                        {
                            InputParam p = new InputParam();
                            string tmp = reportBillDeliveryDataGridView.Rows[i].Cells["printTypeColumn"].Value.ToString();
                            if (tmp == "ตัวแทน")
                                p.PrintType = 1;
                            else if(tmp == "ธนาคาร")
                                p.PrintType = 2;
                            else if(tmp == "spotbill")
                                p.PrintType = 5;
                            else
                                p.PrintType = 6;

                            p.InputStr = reportBillDeliveryDataGridView.Rows[i].Cells["branchIdColumn"].Value.ToString();
                            paramList.Add(p);
                        }
                    }

                    param.InputParamList = paramList;
                    _presenter.PreviewBillDeliveryReport(param);
                }
                else
                {
                    showReportButton.Focus();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(e.ToString());
            }
        }

        private void showReportButton_Click(object sender, EventArgs e)
        {
           //bool isPassed = ValidateBeforeSubmit();
            if (_printState == PrintState.Preview)
                PreviewReport(false);
            else
                PreviewReport(true);
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            ResetUI(true);
        }

        public void ResetUI(bool emptyReport)
        {
            reportBillDeliveryDataGridView.Rows.Clear();
            checkAllCheckBox.Checked = false;
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
            billPeriodLogMaskedTextBox.Text = string.Empty;
            saveNumberMaskedTextBox.Text = string.Empty;
            if (_printableId != null)
                _printableId.Clear();
            if (_selectedId != null)
                _selectedId.Clear();

            reportTypeGb.Enabled = true;
            billTypeGb.Enabled = true;
            billPredGb.Enabled = true;
            parentBranchGb.Enabled = true;
            branchListGb.Enabled = true;
            sendToGb.Enabled = true;
            ToWhomGb.Enabled = true;
            runningNoGb.Enabled = true;

            if(emptyReport)
                _presenter.BlankReport();

            _printState = PrintState.Preview;
            showReportButton.Text = "แสดงรายงาน";

            LoadToPersonComboBox();

            billPeriodMaskedTextBox.Focus();
        }

        private void billPeriodLogMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (reportBillDeliveryDataGridView.Rows.Count > 0)
                {
                    if (_printState == PrintState.Preview)
                        PreviewReport(false);
                    else
                        PreviewReport(true);
                }
            }
            else if (e.KeyCode == Keys.Enter)
            {
                checkAllCheckBox.Checked = false;
            }
        }

        private void ProcessBillMaskText()
        {
            if (billPeriodMaskedTextBox.MaskCompleted)
            {
                try
                {
                    // Load data following billPeriodMaskedTextBox.Text
                    //in this case, we can not reuse BindToDataGrid() because condition is slightly diferrent.
                    billPeriodLogMaskedTextBox.Enabled = true;
                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                    if (blueBillRadioButton.Checked == true)
                        param.ReportType = 0;
                    else
                        param.ReportType = 1;

                    if (blueRb.Checked) //1=blue, 2=green
                        param.PrintType = 1;
                    else if(bankRb.Checked)
                        param.PrintType = 2;
                    else if(spotbillRadioButton.Checked)
                        param.PrintType = 5;
                    else if(greenReceiptRb.Checked)
                        param.PrintType = 6;

                    string[] printBranch = { Session.Branch.Id };
                    //param.GroupElectricId = printBranch;

                    _presenter.GetBranchForBillDelivery(param);                    
                    billPeriodLogMaskedTextBox.Focus();
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //ServiceHelper.TransformErrorMessage(ex);
                }
            }   
        }

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);
            }
        }

        private void checkAllCheckBox_Click(object sender, EventArgs e)
        {
            if (checkAllCheckBox.Checked == true)
            {
                //checkAllTextBox
                for (int i = 0; i < reportBillDeliveryDataGridView.Rows.Count; i++)
                {
                    reportBillDeliveryDataGridView.Rows[i].Cells["CheckColumn"].Value = (Object)true;
                }
            }
            else
            {
                for (int i = 0; i < reportBillDeliveryDataGridView.Rows.Count; i++)
                {
                    reportBillDeliveryDataGridView.Rows[i].Cells["CheckColumn"].Value = (Object)false;
                }
            }
        }

        private void reportBillDeliveryDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (reportBillDeliveryDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                reportBillDeliveryDataGridView.Rows.RemoveAt(e.RowIndex);
        }

        private void bankRb_CheckedChanged(object sender, EventArgs e)
        {
            ProcessTypeChanged();
        }

        private void blueRb_CheckedChanged(object sender, EventArgs e)
        {
            ProcessTypeChanged();
        }

        private void reprintCheck_CheckedChanged(object sender, EventArgs e)
        {
            reprintLog.Clear();
            if (_printableId != null)
                _printableId.Clear();
            if (_selectedId != null)
                _selectedId.Clear();

            checkAllCheckBox.Checked = false;
            reportBillDeliveryDataGridView.Rows.Clear();

            if (reprintCheck.Checked)
            {
                reprintLog.Enabled = true;
                periodTxt.Text = "เดือนที่ออกบันทึก:";
                if (string.IsNullOrEmpty(reprintLog.Text.Trim()))
                    reprintLog.Focus();
                else
                    billPeriodMaskedTextBox.Focus();
            }
            else
            {
                reprintLog.Enabled = false;
                periodTxt.Text = "บิลเดือน (ดด/ปปปป):";
                if (billPeriodMaskedTextBox.MaskCompleted)
                    parentBranchCBox.Focus();
                else
                    billPeriodMaskedTextBox.Focus();
            }
        }

        private void searchBillBt_Click(object sender, EventArgs e)
        {
            if (reprintCheck.Checked)
            {
                try
                {
                    billPeriodLogMaskedTextBox.Text = reprintLog.Text;
                    if (!billPeriodMaskedTextBox.MaskCompleted)
                    {
                        MessageBox.Show(MessageBoxText.MsgWrongFormatBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        billPeriodMaskedTextBox.Focus();
                    }
                    else if (billPeriodLogMaskedTextBox.Text != string.Empty) //&& e.Handled == true)
                    {
                        try
                        {
                            Convert.ToInt32(billPeriodLogMaskedTextBox.Text);
                        }
                        catch // TODO: ไว้เข้ามา clear ตอนแจ้ง error อีกรอบ
                        {
                            ServiceHelper.TransformErrorMessage(new Exception("กรุณาป้อนตัวเลขเท่านั้น"));
                            billPeriodLogMaskedTextBox.SelectAll();
                            return;
                        }
                        BindToDataGrid(true);
                    }
                    else if (billPeriodLogMaskedTextBox.Text == string.Empty)
                    {
                        //in this case, we can not reuse BindToDataGrid() because condition is slightly differrent.
                        billPeriodLogMaskedTextBox.Enabled = true;
                        ReportConditionParam param = new ReportConditionParam();
                        param.PrintBranch = Session.Branch.Id;
                        param.PrintedBy = Session.User.Id;
                        param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                        //param.ApprovedPerson = approvedByMaskedTextBox.Text;
                        param.SaveNumber = saveNumberMaskedTextBox.Text;

                        string[] printBranch = { Session.Branch.Id };
                        //param.GroupElectricId = printBranch;

                        if (blueBillRadioButton.Checked)
                            param.ReportType = 0;
                        else
                            param.ReportType = 1;
                        _presenter.GetBranchForBillDelivery(param);
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //ServiceHelper.TransformErrorMessage(ex);
                }
            }
            else
                ProcessBillMaskText();
        }

        private void reprintLog_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {
                    Convert.ToInt32(reprintLog.Text);

                    if (billPeriodMaskedTextBox.MaskCompleted)
                    searchBillBt.Focus();
                    else
                        billPeriodMaskedTextBox.Focus();
                }
                catch
                {
                    MessageBox.Show("กรุณาป้อนตัวเลขฉบับนำส่งของรายงานนำส่ง", "กรุณาป้อนตัวเลข", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void learnText_KeyDown(object sender, KeyEventArgs e)
        {
        //    if (e.KeyCode == Keys.Enter && learnText.Text.Trim() != string.Empty)
        //    {
        //        saveNumberMaskedTextBox.Focus();
        //    }
        }

        private void saveBt_Click(object sender, EventArgs e)
        {
            PreviewReport(true);
        }

        private void toPersonComboBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && toPersonComboBox.Text.Trim() != string.Empty)
            {
                saveNumberMaskedTextBox.Focus();
            }
        }
        
        #endregion

        #region "Function"

        private void InitialControlValue()
        {
            //BindToDataGrid(false); //for loading the newest data into control at the first time 
            InitialComboBox();
            billPeriodMaskedTextBox.Focus();
        }
        
        private void InitialComboBox()
        {
            _presenter.LoadComboBox();
            deliveryToComboBox.DataSource = _deliveryPlace;
            deliveryToComboBox.ValueMember = "Id";
            deliveryToComboBox.DisplayMember = "PlaceName";
            
        }

        private void BindToDataGrid(bool isFromPredLog)
        {
            try
            {
                ReportConditionParam param = new ReportConditionParam();
                param.PrintBranch = Session.Branch.Id;
                param.PrintedBy = Session.User.Id;
                IFormatProvider provider = CultureInfo.CreateSpecificCulture("th-TH");

                //param.ApprovedPerson = approvedByMaskedTextBox.Text;
                param.SaveNumber = saveNumberMaskedTextBox.Text;

                if (isFromPredLog == false)
                {
                    string datePatt = @"yyyy/M";
                    string date = DateTime.Now.ToString(datePatt, provider);
                    string month = date.Substring(5, date.Length - date.Substring(0, 4).Length - 1);
                    param.BillPeriod = date.Substring(0, 4) + (month.Length == 1 ? "0" + month : month);
                }
                else
                {
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                }

                if (blueBillRadioButton.Checked == true)
                    param.ReportType = 0;
                else
                    param.ReportType = 1;

                if (blueRb.Checked)
                    param.PrintType = 1;
                else if(bankRb.Checked)
                    param.PrintType = 2;
                else if (spotbillRadioButton.Checked)
                    param.PrintType = 5;
                else if (greenReceiptRb.Checked)
                    param.PrintType = 6;

                if (isFromPredLog)
                    param.BillPeriodLog = Convert.ToInt16(billPeriodLogMaskedTextBox.Text);

                string[] printBranch = { Session.Branch.Id };
                //param.GroupElectricId = printBranch;

                _presenter.GetBranchForBillDelivery(param);
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        private void FillGroupBranch()
        {
            List<string> branchList = new List<string>();
            foreach (PrintableId pt in _printableId)
                branchList.Add(pt.BranchId);

            Branch b = new Branch();
            b.BranchId = Session.Branch.Id;
            b.BranchLevel = Session.Branch.BranchLevel;

            List<string> onlyParent = CustomValidation.OnlyParentBranch(b);
            parentBranchCBox.DataSource = onlyParent;
            _loadReady = true;

            //Choose the first row
            if (onlyParent.Count > 0)
            {
                //see it is reprint or not
                if (_printableId.Count > 0)
                {
                    string parent = _printableId[0].BranchId.Substring(0, 4) + "01";
                    parentBranchCBox.SelectedItem = parent;
                    GetChildInfo(parent);
                }
            }
            else
            {
                reportBillDeliveryDataGridView.AutoGenerateColumns = false;
                reportBillDeliveryDataGridView.Enabled = true;
                if (reportBillDeliveryDataGridView.Rows.Count != 0)
                    reportBillDeliveryDataGridView.Rows.Clear();
                //MessageBox.Show("ไม่พบรายการข้อมูลบิลประจำเดือน-งวด", "ผลการค้นหา", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                billPeriodLogMaskedTextBox.Focus();
            }
        }

        private void parentBranchCBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_loadReady)
            {
                reportBillDeliveryDataGridView.Rows.Clear();
                string parent = (string)parentBranchCBox.SelectedItem;
                GetChildInfo(parent);
            }
        }

        private void GetChildInfo(string parent)
        {
            _selectedId.Clear();
            Regex rg = new Regex(parent.Substring(0, 4) + "[0-9]*", RegexOptions.IgnoreCase);

            foreach (PrintableId pt in _printableId)
            {
                if (rg.IsMatch(pt.BranchId))
                    _selectedId.Add(pt);
            }

            BindBillDeliveryData();
        }

        private void BindBillDeliveryData()
        {
            if (_selectedId.Count > 0)
            {
                foreach (PrintableId pt in _selectedId)
                {
                    if (pt.PrintType == "1")
                        pt.PrintType = "ตัวแทน";
                    else if (pt.PrintType == "2")
                        pt.PrintType = "ธนาคาร";
                    else if (pt.PrintType == "5")
                        pt.PrintType = "spotbill";
                    else if(pt.PrintType == "6")
                        pt.PrintType = "ใบเสร็จธนาคาร";
                }

                reportBillDeliveryDataGridView.AutoGenerateColumns = false;
                reportBillDeliveryDataGridView.Enabled = true;
                reportBillDeliveryDataGridView.Refresh();
                BindingList<PrintableId> bs = new BindingList<PrintableId>(_selectedId);
                bs.AllowNew = false;
                reportBillDeliveryDataGridView.DataSource = bs;
                //if i use anything else for binding,datagrid won't update itself when we manipulate data.

                //select all
                checkAllCheckBox.Checked = true;
                foreach (DataGridViewRow r in reportBillDeliveryDataGridView.Rows)
                    r.Cells[0].Value = true;

                if (reportBillDeliveryDataGridView.Rows[0].Cells["billPeriodLogColumn"].Value != null)
                {
                    billPeriodLogMaskedTextBox.Text = reportBillDeliveryDataGridView.Rows[0].Cells["billPeriodLogColumn"].Value.ToString().Trim();
                    _tmpBillPeriodLog = billPeriodLogMaskedTextBox.Text;
                }

                billPeriodMaskedTextBox.Text = _billPeriod.Substring(4, 2) + "/" + _billPeriod.Substring(0, 4);
                billPeriodLogMaskedTextBox.Enabled = true;
            }
        }        

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = false;
            if (reportBillDeliveryDataGridView.Rows.Count == 0)
            {
                isValidated = false;
                MessageBox.Show(MessageBoxText.MsgMissingBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                isValidated = true;
            }

            if (_tmpBillPeriodLog != billPeriodLogMaskedTextBox.Text)
            {
                isValidated = false;
                MessageBox.Show("กรุณากรอกงวดของบิลให้ถูกต้อง หรือ ปล่อยว่างไว้ แล้วกด Enter", "งวดของบิลไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            //no validation for approvedBy and saveNumber MaskedTextBox yet!
            //validate here!!!

            return isValidated;
        }

        private void ProcessTypeChanged()
        {
            if ((blueRb.Checked && _typeState != TypeState.Blue) || (bankRb.Checked && _typeState != TypeState.Green) ||
                 (spotbillRadioButton.Checked && _typeState != TypeState.Spot) || (greenReceiptRb.Checked && _typeState != TypeState.Receipt))
            {
                if (reportBillDeliveryDataGridView.Rows.Count != 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                    {
                        reportBillDeliveryDataGridView.Rows.Clear();
                        billPeriodLogMaskedTextBox.ResetText();
                        billPeriodMaskedTextBox.ResetText();
                        _printableId.Clear();
                        reprintCheck.Checked = false;
                        reprintLog.Clear();
                        billPeriodMaskedTextBox.Focus();
                    }
                    else
                    {
                        if (_typeState == TypeState.Blue)
                            blueRb.Checked = true;
                        else if (_typeState == TypeState.Green)
                            bankRb.Checked = true;
                        else if (_typeState == TypeState.Spot)
                            spotbillRadioButton.Checked = true;
                        else
                            greenReceiptRb.Checked = true;
                    }
                }
                else
                {
                    reportBillDeliveryDataGridView.Rows.Clear();
                    billPeriodLogMaskedTextBox.ResetText();
                    reprintCheck.Checked = false;
                    reprintLog.Clear();
                    billPeriodMaskedTextBox.Focus();
                }

                if (blueRb.Checked)
                    _typeState = TypeState.Blue;
                else if (bankRb.Checked)
                    _typeState = TypeState.Green;
                else if (spotbillRadioButton.Checked)
                    _typeState = TypeState.Spot;
                else
                    _typeState = TypeState.Receipt;
            }
        }
             
        public void DisabledUI()
        {
            reportTypeGb.Enabled = false;
            billTypeGb.Enabled = false;
            billPredGb.Enabled = false;
            parentBranchGb.Enabled = false;
            branchListGb.Enabled = false;
            sendToGb.Enabled = false;
            ToWhomGb.Enabled = false;
            runningNoGb.Enabled = false;
            _printState = PrintState.Print;
            showReportButton.Text = "บันทึก";
        }


        #endregion

        private void LoadToPersonComboBox()
        {
            LocalSettingHelper hp = LocalSettingHelper.Instance();
            if (hp.Read(LocalSettingNames.ToPersonText) != null)
            {
                List<String> s = new List<String>(hp.Read(LocalSettingNames.ToPersonText).ToString().Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries));
                toPersonComboBox.DataSource = s;
                toPersonComboBox.AutoCompleteMode = AutoCompleteMode.Suggest;
                toPersonComboBox.AutoCompleteSource = AutoCompleteSource.CustomSource;
                AutoCompleteStringCollection acsc = new AutoCompleteStringCollection();
                acsc.AddRange(s.ToArray());
                toPersonComboBox.AutoCompleteCustomSource = acsc;
            }

        }

        private void SaveToPersonText()
        {         
            BlanLocalSettingHelper.SaveToWhom(toPersonComboBox.Text);
            LoadToPersonComboBox();
        }

        private void greenReceiptRb_CheckedChanged(object sender, EventArgs e)
        {
            ProcessTypeChanged();
            if (greenReceiptRb.Checked)
            {
                reportTypeGb.Enabled = false;
                blueBillRadioButton.Checked = true;
                billPeriodMaskedTextBox.Focus();
            }
            else
                reportTypeGb.Enabled = true;
        }

        private void spotbillRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            ProcessTypeChanged();
        }

      

   
    }
}