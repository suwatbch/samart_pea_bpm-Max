//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.BillPrintingModule.Constants;
using PEA.BPM.BillPrintingModule.Services;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.Interface.Services;
using System.Collections.Generic;
using System.Windows.Forms;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;

namespace PEA.BPM.BillPrintingModule
{
    public class ReportContainerViewPresenter : Presenter<IReportContainerView>
    {
        private IReportServices _reportServices;
        
        [InjectionConstructor]
        public ReportContainerViewPresenter([ServiceDependency] IReportServices reportServices)
		{
            _reportServices = reportServices;
		}

        /// <summary>
        /// View Cursor Setting 
        /// </summary>
        [EventPublication(EventTopicNames.WaitCursor, PublicationScope.Global)]
        public event EventHandler<EventArgs<bool>> WaitCursorCommandHandler;
        public void OnWaitCursor(bool set)
        {
            View.OnWaitCursor(set); //this view
            if (WaitCursorCommandHandler != null)
                WaitCursorCommandHandler(this, new EventArgs<bool>(set));
        }

        /// <summary>
        /// Subscribe from ReportDailyPrintView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintDailyPrintReport, Thread = ThreadOption.UserInterface)]
        public void PrintDailyPrintReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportDailyPrint";
                View.PrintDate = e.Data.PrintDate;
                View.PrintType = e.Data.PrintType;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportDailyPrint.rdlc";
                View.ReportDailyPrint = _reportServices.GetDailyPrintReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportBillDeliveryView 
        /// </summary> 
        [EventSubscription(EventTopicNames.PrintBillDeliveryReport, Thread = ThreadOption.UserInterface)]
        public void PrintBillDeliveryReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportBillDelivery";
                View.ApprovedPerson = e.Data.ApprovedPerson;
                View.DeliveryPlace = e.Data.DeliveryPlaceName;
                View.SaveNumber = e.Data.SaveNumber;
                View.BillPeriod = e.Data.BillPeriod;
                View.ToWhom = e.Data.ToWhom;
                View.ReportType = e.Data.ReportType.Value.ToString();
                View.PrintType = e.Data.PrintType;
                if (!e.Data.Save && !e.Data.IsReprint)
                    View.BillPeriodLog = "บันทึก?";
                else
                    View.BillPeriodLog = e.Data.BillPeriodLog.ToString();

                if (e.Data.ReportType == 1)
                {
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportBillDeliveryReprint.rdlc";
                    View.ReportBillDelivery = _reportServices.GetBillDeliveryReport(e.Data);

                    if (!e.Data.Save && !e.Data.IsReprint)
                    {                 
                        DialogResult dlg = MessageBox.Show("ระบบกำลังสร้างรายงาน กรุณาเลือกการทำงานต่อไป\n\n  - กดปุ่ม   Yes\tบันทึกเลขที่รายงานนำส่งใบแจ้ง \n  - กดปุ่ม   No\tตรวจสอบรายงานก่อนบันทึก\n  - กดปุ่ม   Cancel\tยกเลิกการออกรายงาน", "กรุณาเลือกรายการ", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information);
                        if (dlg == DialogResult.No)
                        {                            
                            DisabledUI();
                            //disable print icon
                            View.EnabledPrintButton(false);
                        }
                        else if (dlg == DialogResult.Yes)
                        {
                            //save printLog
                            e.Data.Save = true;
                            BlanLocalSettingHelper.SaveToWhom(e.Data.ToWhom);
                            View.BillPeriodLog = e.Data.BillPeriodLog.ToString();
                            View.ReportBillDelivery = _reportServices.GetBillDeliveryReport(e.Data);
                            ResetUI(false);

                            //enable print icon
                            View.EnabledPrintButton(true);
                        }
                        else if(dlg == DialogResult.Cancel)  //cancel 
                        {
                            ResetUI(true);
                            //enable print icon
                            View.EnabledPrintButton(true);
                        }
                    }
                    else if (e.Data.Save && !e.Data.IsReprint)
                    {
                        MessageBox.Show("บันทึกฉบับนำส่งเรียบร้อยแล้ว \nกรุณากด OK เพื่อทำงานต่อ", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ResetUI(false);
                        //enable print icon
                        View.EnabledPrintButton(true);
                    }
                }
                else
                {
                    if (e.Data.PrintType == 6)
                        View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportBillDelivery_Receipt.rdlc";
                    else 
                        View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportBillDelivery.rdlc";

                    View.ReportBillDelivery = _reportServices.GetBillDeliveryReport(e.Data);

                    if (!e.Data.Save && !e.Data.IsReprint)
                    {
                        DialogResult dlg = MessageBox.Show("ระบบกำลังสร้างรายงาน กรุณาเลือกการทำงานต่อไป\n\n  - กดปุ่ม   Yes\tบันทึกเลขที่รายงานนำส่งใบแจ้ง\n  - กดปุ่ม   No\tตรวจสอบรายงานก่อนบันทึก\n  - กดปุ่ม   Cancel\tยกเลิกการออกรายงาน", "กรุณาเลือกรายการ", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information);
                        if (dlg == DialogResult.No)
                        {
                            DisabledUI();
                            //disable print icon
                            View.EnabledPrintButton(false);
                        }
                        else if (dlg == DialogResult.Yes)
                        {
                            //save printLog
                            e.Data.Save = true;
                            BlanLocalSettingHelper.SaveToWhom(e.Data.ToWhom);
                            View.BillPeriodLog = e.Data.BillPeriodLog.ToString();
                            View.ReportBillDelivery = _reportServices.GetBillDeliveryReport(e.Data);                            
                            ResetUI(false);
                            //enable print icon
                            View.EnabledPrintButton(true);
                        }
                        else if(dlg== DialogResult.Cancel) //cancel 
                        {
                            ResetUI(true);
                            //enable print icon
                            View.EnabledPrintButton(true);
                        }
                    }
                    else if(e.Data.Save && !e.Data.IsReprint)
                    {
                        MessageBox.Show("บันทึกฉบับนำส่งเรียบร้อยแล้ว \nกรุณากด  OK  เพื่อทำงานต่อ", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ResetUI(false);
                        //enable print icon
                        View.EnabledPrintButton(true);
                    }
                }

                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        [EventSubscription(EventTopicNames.ShowBlankReport, Thread = ThreadOption.UserInterface)]
        public void ShowBlankReportHandler(object sender, EventArgs e)
        {
            View.BlankReport();
        }

        [EventPublication(EventTopicNames.FreezePanel, PublicationScope.Global)]
        public event EventHandler<EventArgs> FreezePanelHandler;
        public void DisabledUI()
        {
            if (FreezePanelHandler != null)
                FreezePanelHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.InitBillDeliveryUI, PublicationScope.Global)]
        public event EventHandler<EventArgs<bool>> InitBillDeliveryUIHandler;
        public void ResetUI(bool emptyReport)
        {
            if (InitBillDeliveryUIHandler != null)
                InitBillDeliveryUIHandler(this, new EventArgs<bool>(emptyReport));
        }

        /// <summary>
        /// Subscribe from ReportDailyUnprintView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintDailyUnprintReport, Thread = ThreadOption.UserInterface)]
        public void PrintDailyUnprintReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportDailyUnprint";
                View.BillPeriod = e.Data.BillPeriod;
                View.PortionNo = e.Data.PortionNo;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportDailyUnprint_New.rdlc";
                View.ReportDailyUnprint = _reportServices.GetDailyUnprintReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false); 
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportStreetRouteView 
        /// </summary>        
       [EventSubscription(EventTopicNames.PrintStreetRouteReport, Thread = ThreadOption.UserInterface)]
        public void PrintStreetRouteReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportStreetRoute";
                View.BillPeriod = e.Data.BillPeriod;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportStreetRoute_New.rdlc";
                List<ReportStreetRoute> rst = _reportServices.GetStreetRouteReport(e.Data);
                View.ReportStreetRoute = rst;
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportStreetRouteReceiveView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintStreetRouteReceiveReport, Thread = ThreadOption.UserInterface)]
        public void PrintStreetRouteReceiveReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportStreetRouteReceive";
                View.BillPeriod = e.Data.BillPeriod;
                View.DataReceiveDate = e.Data.DataReceiveDt;
                View.ToDataReceiveDate = e.Data.ToDataReceiveDt;
                View.DataReceiveTime = e.Data.FromTime;
                View.ToDataReceiveTime = e.Data.ToTime;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportStreetRouteReceive_New.rdlc";
                View.ReportStreetRouteReceive = _reportServices.GetStreetRouteReceiveReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportStreetRouteUnreceiveView
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintStreetRouteUnreceiveReport, Thread = ThreadOption.UserInterface)]
        public void PrintStreetRouteUnreceiveReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportStreetRouteUnreceive";
                View.BillPeriod = e.Data.BillPeriod;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportStreetRouteUnreceive.rdlc";
                View.ReportStreetRouteUnreceive = _reportServices.GetStreetRouteUnreceiveReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportF16View
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintF16Report, Thread = ThreadOption.UserInterface)]
        public void PrintF16ReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportF16";
                View.BillPeriod = e.Data.BillPeriod;

                if (e.Data.ReportType == 0) // 0 = detail
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportF16.rdlc";
                else // 1 = summary 
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportF16Summary.rdlc";
                
                View.ReportF16 = _reportServices.GetF16Report(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        //New added. March, 17 alex
        /// <summary>
        /// รายงานสรุปการพิมพ์ใบแจ้งค่าไฟฟ้าแบบรวมศูนย์
        /// </summary>        
        [EventSubscription(EventTopicNames.GrpInvSummaryReport, Thread = ThreadOption.UserInterface)]
        public void PrintGrpInvSummaryReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "GrpInvSummaryReport";
                View.BillPeriod = e.Data.BillPeriod;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportGroupInvoiceSummary.rdlc";
                View.ReportGrpInvSummary = _reportServices.GetGrpInvSummaryReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// รายงานสรุปใบแจ้งค่าไฟฟ้า ผู้ใช้ไฟฟ้าที่ชำระผ่านธนาคาร
        /// </summary>        
        [EventSubscription(EventTopicNames.GreenByBankReport, Thread = ThreadOption.UserInterface)]
        public void PrintGreenByBankReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);


                View.FromDate = e.Data.FromDate;
                View.ToDate = e.Data.ToDate;

                //headquarter
                if (e.Data.ReportType == 0) //direct debit blue
                {
                    View.SetLabel = "BlueByBankReport";
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportPrintBlueByBank.rdlc";
                }
                else
                {
                    View.SetLabel = "GreenByBankReport";
                    if (Session.Branch.Id == "Z00000")
                        View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportPrintGreenByBank_Hq.rdlc";
                    else //branch
                        View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportPrintGreenByBank_Branch.rdlc";
                }

                View.ReportPrintGreenByBank = _reportServices.GetPrintGreenByBankReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }


        /// <summary>
        /// รายงาน Grouping Cross Check
        /// </summary>        
        [EventSubscription(EventTopicNames.GroupingCrossCheckReport, Thread = ThreadOption.UserInterface)]
        public void PrintGroupingCrossCheckReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "GroupingCrossCheckReport";
                View.BillPeriod = e.Data.BillPeriod;

                //headquarter only
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportGroupingCrossCheck.rdlc";
                View.ReportGroupingCrossCheck = _reportServices.GetGroupingCrossCheckReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }



        ////*******************************
        ////List<TestObject> test = _result.FindAll(delegate(TestObject t) { return (t.Id.IndexOf("111") > 0); });
        ////int test = _result.RemoveAll(delegate(TestObject t) { return (t.Id.IndexOf("111") > 0); });

        /// <summary>
        /// Subscribe from ReportUnlockingLogView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintUnlockingLogReport, Thread = ThreadOption.UserInterface)]
        public void PrintUnlockingLogReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportUnlockingLog";
                //View.PrintDate = e.Data.PrintDate;
                //View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportUnlockingLog.rdlc";
                //View.ReportUnlockingLog = _reportServices.GetReportUnlockingLog(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportBillStatusView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintBillStatusReport, Thread = ThreadOption.UserInterface)]
        public void PrintBillStatusReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportBillStatus";
                View.PrintType = e.Data.PrintType; //0=A4, 1=blue, 2=Green
                View.BillPeriod = e.Data.BillPeriod;
                View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportBillingStatus_New.rdlc";              
                View.ReportBillingStatus = _reportServices.GetBillingStatusReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportCAUnprintReportView 
        /// </summary>        
        [EventSubscription(EventTopicNames.CAUnprintReport, Thread = ThreadOption.UserInterface)]
        public void CAUnprintReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);
                View.SetLabel = "ReportCAUnprint";

                if (e.Data.ReportType == 0) //bank
                {
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportCAUnprint_Bank.rdlc";
                }
                else if (e.Data.ReportType == 1) //grp invoice
                {
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportCAUnprint_MtNo.rdlc";
                }
                else
                {
                    throw new Exception("Invalid report type, function: PrintBillStatusReportHandler");
                }

                View.ReportCAUnprint = _reportServices.GetCAUnprintReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);
            }
        }

        /// <summary>
        /// Subscribe from ReportDailyPrintView 
        /// </summary>        
        [EventSubscription(EventTopicNames.DirectDebitStatusReport, Thread = ThreadOption.UserInterface)]
        public void DirectDebitStatusReportHandler(object sender, EventArgs<ReportConditionParam> e)
        {
            try
            {
                OnWaitCursor(true);
                ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);

                View.SetLabel = "ReportDirectDebitStatus";
                if(e.Data.BillPeriod.Length == 6)
                    View.BillPeriod = e.Data.BillPeriod.Substring(4,2) + "/" + e.Data.BillPeriod.Substring(0, 4);

                if(e.Data.PrintedFlag == "0")
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportDirectDebitStatus.rdlc";
                else
                    View.ReportName = "PEA.BPM.BillPrintingModule.Reports.ReportDirectDebitStatus_Printed.rdlc";

                View.ReportDirectDebitStatus = _reportServices.GetDirectDebitStatusReport(e.Data);
                OnWaitCursor(false);
            }
            catch (Exception ex)
            {
                OnWaitCursor(false);
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //ServiceHelper.TransformErrorMessage(ex);

            }
        }



        #region "Code Generated"
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
        #endregion
    }
}

