//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Collections.Generic;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportF16View : UserControl, IReportF16View
    {
        #region "Variables & Properties"
        private string dash = Properties.Resources.PrintSeperatorText;
        private List<Branch> _childBranch;
        private bool _clearCmdFlag = false;
        private PrintConditionEnum _state = PrintConditionEnum.Branch;

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                printButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                printButton.Enabled = true;
            }
        }

        #endregion

        #region "Code Generated"
        public ReportF16View()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportF16ViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();
            //_childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
            _childBranch = CodeTable.Instant.ListBranches();
        }
        #endregion

        #region "Event Handling"

        private void PreviewReport()
        {
            try
            {
                if (ValidateBeforeSubmit())
                {
                    DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (dlg == DialogResult.OK)
                    {
                        ReportConditionParam param = new ReportConditionParam();
                        param.PrintBranch = Session.Branch.Id;
                        param.PrintedBy = Session.User.Id;
                        param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                        param.ReportType = (detailReportRadioButton.Checked == true ? 0 : 1); //0 = detail, 1 = summary

                        if (printAllRadioButton.Checked)
                            param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                        else if (printBranchRadioButton.Checked)
                            param.PrintingCondition = (int)PrintingCondition.BranchPrinting;
                        else if (printMruRadioButton.Checked)
                            param.PrintingCondition = (int)PrintingCondition.MruPrinting;
                        else
                            MessageBox.Show("ระบบไม่รองรับเงื่อนไขการแสดงรายงานที่กำหนด");

                        List<InputParam> inputBranchList = new List<InputParam>();
                        if (reportF16DataGridView.Rows.Count != 0) //branch, mru
                        {
                            for (int i = 0; i < reportF16DataGridView.Rows.Count; i++)
                            {
                                InputParam b = new InputParam();
                                b.InputStr = reportF16DataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                                inputBranchList.Add(b);
                            }
                            param.InputParamList = inputBranchList;
                        }

                        _presenter.PreviewF16Report(param);
                    }
                    else
                    {
                        printButton.Focus();
                    }
                }               
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(e.ToString());
            }
        }

        private void printButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }
        
        private void clearButton_Click(object sender, EventArgs e)
        {
            InitializeControlValue();
        }

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return && billPeriodMaskedTextBox.MaskCompleted)
            {
                if (CustomValidation.ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    if (billPeriodMaskedTextBox.MaskCompleted == true)
                    {
                        switch (_state)
                        {
                            case  PrintConditionEnum.All:
                                printButton.Focus();
                                break;
                            case  PrintConditionEnum.Branch:
                                branchIdMaskedTextBox.Focus();
                                break;
                            case PrintConditionEnum.Mru:
                                branchIdMaskedTextBox.Focus();
                                break;                         
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบวันที่ของบิลประจำเดือน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.Focus();
                }
            }
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    if (printBranchRadioButton.Checked == true)
                    {
                        AddToDataGridView(ToUpperCase(branchIdMaskedTextBox));
                        SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                    }
                    else if (printMruRadioButton.Checked == true)
                    {
                        //then focus on mruIdMaskedTextBox
                        SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                    }
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }
            }
        }

        private void mruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (printMruRadioButton.Checked == true &&
               branchIdMaskedTextBox.Text.Length == 6 &&
               mruIdMaskedTextBox.Text.Length == 4)
                {
                    SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                }
            }
        }

        private void toMruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (printMruRadioButton.Checked &&
                 branchIdMaskedTextBox.MaskCompleted &&
                 mruIdMaskedTextBox.MaskCompleted &&
                 (toMruIdMaskedTextBox.MaskCompleted ||
                 toMruIdMaskedTextBox.Text == string.Empty))
                {
                    string branchId = ToUpperCase(branchIdMaskedTextBox);
                    if (toMruIdMaskedTextBox.MaskCompleted)
                    {
                        int fromMru = Convert.ToInt32(mruIdMaskedTextBox.Text);
                        int toMru = Convert.ToInt32(toMruIdMaskedTextBox.Text);
                        if (fromMru > toMru)
                        {
                            mruIdMaskedTextBox.Text = toMru.ToString().PadLeft(4, '0');
                            toMruIdMaskedTextBox.Text = fromMru.ToString().PadLeft(4, '0');
                        }
                        AddToDataGridView(branchId + dash + mruIdMaskedTextBox.Text + dash + toMruIdMaskedTextBox.Text);
                    }
                    else //user leave blank and press enter = no mruId-range required
                        AddToDataGridView(branchId + dash + mruIdMaskedTextBox.Text);
                    SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, false);
                    SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                }
            }
        }

        private void detailReportRadioButton_Click(object sender, EventArgs e)
        {
            if (reportF16DataGridView.Rows.Count != 0)
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    summaryReportRadioButton.Checked = false;
                    detailReportRadioButton.Checked = true;
                    //billPeriodMaskedTextBox.Text = string.Empty;
                    //billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
                    //printAllRadioButton.Checked = true;
                    branchIdMaskedTextBox.Text = string.Empty;
                    mruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Text = string.Empty;
                    reportF16DataGridView.Rows.Clear();
                    branchIdMaskedTextBox.Focus();
                }
                else
                {
                    summaryReportRadioButton.Checked = false;
                    detailReportRadioButton.Checked = true;
                }
            }
            else
            {
                summaryReportRadioButton.Checked = false;
                detailReportRadioButton.Checked = true;
                //billPeriodMaskedTextBox.Text = string.Empty;
                //billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
                //printAllRadioButton.Checked = true;
                branchIdMaskedTextBox.Text = string.Empty;
                mruIdMaskedTextBox.Text = string.Empty;
                toMruIdMaskedTextBox.Text = string.Empty;
                reportF16DataGridView.Rows.Clear();
                branchIdMaskedTextBox.Focus();
            }
        }

        private void summaryReportRadioButton_Click(object sender, EventArgs e)
        {
            if (reportF16DataGridView.Rows.Count != 0)
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    detailReportRadioButton.Checked = false;
                    summaryReportRadioButton.Checked = true;
                    //billPeriodMaskedTextBox.Text = string.Empty;
                    //billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
                    //printAllRadioButton.Checked = true;
                    branchIdMaskedTextBox.Text = string.Empty;
                    mruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Text = string.Empty;
                    reportF16DataGridView.Rows.Clear();
                    branchIdMaskedTextBox.Focus();
                }
                else
                {
                    summaryReportRadioButton.Checked = false;
                    detailReportRadioButton.Checked = true;
                }
            }
            else
            {
                detailReportRadioButton.Checked = false;
                summaryReportRadioButton.Checked = true;
                //billPeriodMaskedTextBox.Text = string.Empty;
                //billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
                //printAllRadioButton.Checked = true;
                branchIdMaskedTextBox.Text = string.Empty;
                mruIdMaskedTextBox.Text = string.Empty;
                toMruIdMaskedTextBox.Text = string.Empty;
                reportF16DataGridView.Rows.Clear();
                branchIdMaskedTextBox.Focus();
            }
        }

        private void reportF16DataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (reportF16DataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                    reportF16DataGridView.Rows.RemoveAt(e.RowIndex);
            }
        }

        #endregion

        #region "Function"

        private void InitializeControlValue()
        {
            reportF16DataGridView.Rows.Clear();
            reportF16DataGridView.Enabled = false;
            reportF16DataGridView.AutoGenerateColumns = false;
            detailReportRadioButton.Checked = true;
            summaryReportRadioButton.Checked = false;
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;           
            printBranchRadioButton.Checked = true;
            printMruRadioButton.Checked = false;
            branchIdMaskedTextBox.Text = string.Empty;
            //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
            branchIdMaskedTextBox.Enabled = true;
            mruIdMaskedTextBox.Text = string.Empty;
            //mruIdMaskedTextBox.Mask = MaskedValue.ElectricMruId;
            mruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Focus();
        }

        private void AddToDataGridView(string txt)
        {
            bool isRepeatedItem = false;
            reportF16DataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(txt, isRepeatedItem);
            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportF16DataGridView.Rows.Count;
                    reportF16DataGridView.Rows.Add(1);
                    reportF16DataGridView.Rows[i].Cells["electricityIdColumn"].Value = txt;
                    reportF16DataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        reportF16DataGridView.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportF16DataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < reportF16DataGridView.Rows.Count; i++)
                {

                    if (txt == (string)reportF16DataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                branchIdMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = true;
            
            if (!billPeriodMaskedTextBox.MaskCompleted || !CustomValidation.ValidateDate(billPeriodMaskedTextBox.Text))
            {
                isValidated = false;
                MessageBox.Show(MessageBoxText.MsgWrongFormatBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billPeriodMaskedTextBox.Focus();
                billPeriodMaskedTextBox.SelectAll();
            }
     
            if (printAllRadioButton.Checked == false && reportF16DataGridView.Rows.Count == 0)
            {
                isValidated = false;
                string errTxt = string.Empty;
                if (printBranchRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingBranchId;
                else
                    errTxt = MessageBoxText.MsgMissingBranchIdMruId;

                MessageBox.Show(errTxt, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);

                branchIdMaskedTextBox.Focus();
            }

            return isValidated;
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        #endregion

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);
                if (!printAllRadioButton.Checked)
                    branchIdMaskedTextBox.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (printAllRadioButton.Checked)
                    PreviewReport();
            }
        }

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (reportF16DataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    branchIdMaskedTextBox.ResetText();
                    branchIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.N)
            {
                branchIdMaskedTextBox.Text = Session.Branch.Id;
            }
        }

        private void mruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (reportF16DataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    mruIdMaskedTextBox.ResetText();
                    mruIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
        }

        private void toMruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (reportF16DataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    toMruIdMaskedTextBox.ResetText();
                    toMruIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void toMruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }


        private void PrintAllCheckd(bool renew)
        {
            if (renew)
                reportF16DataGridView.Rows.Clear();

            reportF16DataGridView.Enabled = false;
            branchIdMaskedTextBox.Enabled = false;
            mruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Enabled = false;
            branchIdMaskedTextBox.Clear();
            mruIdMaskedTextBox.Clear();
            toMruIdMaskedTextBox.Clear();
            printButton.Focus();
        }

        private void PrintBranchChecked(bool renew)
        {
            if (renew)
                reportF16DataGridView.Rows.Clear();

            reportF16DataGridView.Enabled = true;
            branchIdMaskedTextBox.Enabled = true;
            mruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Enabled = false;
            branchIdMaskedTextBox.Clear();
            mruIdMaskedTextBox.Clear();
            toMruIdMaskedTextBox.Clear();
            branchIdMaskedTextBox.Focus();
        }

        private void PrintMruChecked(bool renew)
        {
            if(renew)
                reportF16DataGridView.Rows.Clear();

            reportF16DataGridView.Enabled = true;
            branchIdMaskedTextBox.Enabled = true;
            mruIdMaskedTextBox.Enabled = true;
            toMruIdMaskedTextBox.Enabled = true;
            branchIdMaskedTextBox.Clear();
            mruIdMaskedTextBox.Clear();
            toMruIdMaskedTextBox.Clear();
            branchIdMaskedTextBox.Focus();
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                if (_state != PrintConditionEnum.All && reportF16DataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                        PrintAllCheckd(true);
                    else
                    {
                        if (_state == PrintConditionEnum.Branch)
                            PrintBranchChecked(false);
                        else //mru
                            PrintMruChecked(false);
                    }
                }
                else
                    PrintAllCheckd(false);

                _state = PrintConditionEnum.All;
            }
        }

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
            {
                if (_state != PrintConditionEnum.Branch && reportF16DataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                        PrintBranchChecked(true);
                    else
                    {
                        if (_state == PrintConditionEnum.All)
                            PrintAllCheckd(false);
                        else //mru
                            PrintMruChecked(false);
                    }
                }
                else
                    PrintBranchChecked(false);

                _state = PrintConditionEnum.Branch;
            }
        }

        private void printMruRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printMruRadioButton.Checked)
            {
                if (_state != PrintConditionEnum.Mru && reportF16DataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                        PrintMruChecked(true);
                    else
                    {
                        if (_state == PrintConditionEnum.All)
                            PrintAllCheckd(false);
                        else //mru
                            PrintBranchChecked(false);
                    }
                }
                else
                    PrintMruChecked(false);

                _state = PrintConditionEnum.Mru;
            }
        }
       
    }
}

