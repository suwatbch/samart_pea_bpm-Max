//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.IO;
using System.Text;
using System.Threading;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.Constants;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.Architecture.PrintUtilities;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool.Security;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class BillProcessingListView : UserControl, IBillProcessingListView
    {
        #region "Variables & Properties"

        List<A4Bill> _a4Bill;
        List<GreenBill> _greenBill;
        List<BlueBill> _blueBill;
        List<PrintableId> _printId; //store every id came from presenter after calling service
        List<PrintableId> printableIds; //used in loop for printing bills
        List<Bills> _billTxt; //store bills and their id(BranchId+MruId+CaId)    

        int? _tmpBillType;
        string _tmpBillPeriod;
        string _approverId;
        string _approverName;
        string _approverPosition;
        string _tmpBank;
        string _billId;
        int? _printCondition;
        int? _a4Reprint;
        int? _hasOrgDoc;
        bool _isReprintBill;
        bool _isPrintCompleted = false;

        public int? PrintCondition
        {
            get { return _printCondition; }
            set { _printCondition = value; }
        }

        public int? A4Reprint
        {
            get { return _a4Reprint; }
            set { _a4Reprint = value; }
        }

        public int? HasOrgDoc
        {
            get { return _hasOrgDoc; }
            set { _hasOrgDoc = value; }
        }

        public bool IsReprintBill
        {
            get { return _isReprintBill; }
            set { _isReprintBill = value; }
        }

        public string TmpBank
        {
            get { return _tmpBank; }
            set { _tmpBank = value; }
        }

        public int? TmpBillType
        {
            get { return _tmpBillType; }
            set { _tmpBillType = value; }
        }

        public string TmpBillPeriod
        {
            get { return _tmpBillPeriod; }
            set { _tmpBillPeriod = value; }
        }

        public string ApproverId
        {
            get { return _approverId; }
            set { _approverId = value; }
        }

        public string ApproverName
        {
            get { return _approverName; }
            set { _approverName = value; }
        }

        public string ApproverPosition
        {
            get { return _approverPosition; }
            set { _approverPosition = value; }
        }

        public List<Bills> BillTxt
        {
            get { return _billTxt; }
            set 
            { 
                _billTxt = value;
                PrintBills();
            }
        }              

        public List<A4Bill> A4Bill
        {
            get { return this._a4Bill; }
            set
            {
                this._a4Bill = value;
            }
        }

        public List<GreenBill> GreenBill
        {
            get { return this._greenBill; }
            set
            {
                this._greenBill = value;
            }
        }

        public List<BlueBill> BlueBill
        {
            get { return this._blueBill; }
            set
            {
                this._blueBill = value;
            }
        }

        public string GetOnPrintBillType()
        {
            string ret = null;
            if (_tmpBillType != null)
            {
                if (_tmpBillType == (int)BillType.BlueBill || _tmpBillType == (int)BillType.ReprintBlueBill ||
                    _tmpBillType == (int)BillType.BlueBillByBank || _tmpBillType == (int)BillType.ReprintBlueBillByBank ||
                    _tmpBillType == (int)BillType.SpotBill || _tmpBillType == (int)BillType.ReprintSpotBill)
                {
                    ret = "B";
                }
                else if (_tmpBillType == (int)BillType.GreenBill || _tmpBillType == (int)BillType.ReprintGreenBill ||
                        _tmpBillType == (int)BillType.GreenBillByBank || _tmpBillType == (int)BillType.ReprintGreenBillByBank ||
                        _tmpBillType == (int)BillType.GreenReceipt || _tmpBillType == (int)BillType.ReprintGreenReceipt)
                {
                    ret = "G";
                }
                else
                    ret = "A";
            }
            return ret;
        }

        //set the value and display on listview
        public List<PrintableId> PrintId 
        {
            get { return _printId; }
            set
            {
                _printId = value;
                LoadBillToListView();
            }
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
                this.Cursor = Cursors.WaitCursor;
            else
                this.Cursor = Cursors.Default;
        }

        #endregion       

        #region "Code Generated"

        public BillProcessingListView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillProcessingListViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region "Function"

        private void LoadBillToListView()
        {
            string txtId = string.Empty;

            //try to put each record into appropriated listView.
            try
            {
                //in the case whare any record is not found
                if (_printId.Count == 0 || _printId[0].IsZeroRecord == true)
                {
                    MessageBox.Show("ไม่พบข้อมูลบิลที่พร้อมพิมพ์", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    ClearList();
                    SummarizeRecords();
                    _presenter.OnCloseView();
                }
                else
                {
                    ClearList();                   

                    printableIds = new List<PrintableId>();

                    foreach (PrintableId pt in _printId)
                    {
                        pt.TxtId = SetTextForListView(pt);
                        printableIds.Add(pt);
                    }

                    printBillDataGrid.AutoGenerateColumns = false;
                    BindingList<PrintableId> bd = new BindingList<PrintableId>(printableIds);
                    printBillDataGrid.DataSource = bd;
                    
                    //1=printable
                    printableBillDataGrid.AutoGenerateColumns = false;
                    BindingList<PrintableId> bd1 = new BindingList<PrintableId>(printableIds.FindAll(delegate(PrintableId p) { return (p.PrintingStatus == 1); }));
                    printableBillDataGrid.DataSource = bd1; 
                    printableBillDataGrid.Columns[0].Visible = false;
                    //0=printed
                    printedBillDataGrid.AutoGenerateColumns = false;
                    BindingList<PrintableId> bd2 = new BindingList<PrintableId>(printableIds.FindAll(delegate(PrintableId p) { return (p.PrintingStatus == 0); }));
                    printedBillDataGrid.DataSource = bd2;
                    //2=not found
                    printBillNoDataFoundDataGrid.AutoGenerateColumns = false;
                    BindingList<PrintableId> bd3 = new BindingList<PrintableId>(printableIds.FindAll(delegate(PrintableId p) { return (p.PrintingStatus == 2); }));
                    printBillNoDataFoundDataGrid.DataSource = bd3;

                    _printId = _printId.FindAll(delegate(PrintableId p) { return (p.PrintingStatus == 1); });

                    SummarizeRecords();

                    if (printableBillDataGrid.Rows.Count != 0)
                        PrepareToPrintBill();

                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //string msg = String.Format(MessageBoxText.MsgGeneralError + ex.Message);
                //MessageBox.Show(msg, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }        
        }

        private void PrepareToPrintBill()
        {
            if (_tmpBillType == (int)BillType.GreenBillByBank||
                _tmpBillType == (int)BillType.BlueBillByBank)
            {
                PrintBill();
            }
            else
            {
                string tmp = " - กดปุ่ม\t Yes \tเพื่อทำการพิมพ์รายการทันที\n - กดปุ่ม\t No \tเพื่อแก้ไขรายการก่อนทำการพิมพ์\n - กดปุ่ม\t Cancel \tเพื่อยกเลิกการพิมพ์";

                DialogResult result = MessageBox.Show(tmp, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    if( _tmpBillType == (int)BillType.ReprintBlueBill ||
                        _tmpBillType == (int)BillType.ReprintGreenBill)
                    {
                        if(Authorization.IsAuthorized(SecurityNames.DualBillReprinting, true))
                            PrintBill();
                    }
                    else if( _tmpBillType == (int)BillType.ReprintBlueBillByBank ||
                             _tmpBillType == (int)BillType.ReprintGreenBillByBank)
                    {
                        if (Authorization.IsAuthorized(SecurityNames.DirectDebitByBankRePrinting, true))
                            PrintBill();
                    }
                    else if (_tmpBillType == (int)BillType.ReprintGroupInvoiceA4Bill)
                    {
                        if (Authorization.IsAuthorized(SecurityNames.GroupInvoiceReprinting, true))
                            PrintBill();
                    }
                    else
                    {
                        PrintBill();
                    }
                }
                else if (result == DialogResult.No)
                {
                    printableBillDataGrid.Columns[0].Visible = true;

                    //check all checkBox
                    for (int i = 0; i < printableBillDataGrid.Rows.Count; i++)
                        printableBillDataGrid.Rows[i].Cells["CheckColumn"].Value = (Object)true;

                    _presenter.ChangeStatusPrintingSelectedBill(true);
                }
                else if (result == DialogResult.Cancel)
                {
                    ClearList();
                    SummarizeRecords();
                    _presenter.ChangeStatusPrintingSelectedBill(false);
                }
            }
        }

        private void PrintBill()
        {

            if (_printId.Count > 0)
            {
                _isPrintCompleted = false;

                PrintableId pt = _printId[0];
                _printId.RemoveAt(0);

                //_presenter.PrintBill(pt, _tmpBillPeriod, _tmpBillType, _isReprintBill, _approverName, _approverPosition, _printCondition);
                _presenter.PrintBill(pt, _tmpBillPeriod, _tmpBillType.Value, _isReprintBill, _approverId, _approverName, _approverPosition, _printCondition.Value);
            }
            else
            {
                IsPrintCompleted();
            }
        }

        public void PrintSelectedBill()
        {
            _printId = new List<PrintableId>();

            for (int i = 0; i < printableBillDataGrid.Rows.Count; i++)
            {
                PrintableId pt = new PrintableId();
                object isChecked = printableBillDataGrid.Rows[i].Cells["CheckColumn"].Value;
                if (isChecked != null && (bool)isChecked == true)
                {
                    pt = (PrintableId)printableBillDataGrid.Rows[i].DataBoundItem;
                    _printId.Add(pt);
                }
            }

            if (_printId.Count != 0)
                PrintBill();
            else
                MessageBox.Show("กรุณาเลือกรายการที่ต้องการพิมพ์", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        private void IsPrintCompleted()
        {
            if (_isPrintCompleted == true)
            {
                DialogResult result = MessageBox.Show(MessageBoxText.MsgPrintingBillDone, MessageBoxText.CaptionInfo, MessageBoxButtons.OK, MessageBoxIcon.Information);
                if (result == DialogResult.OK)
                {
                    ClearList();
                    SummarizeRecords();
                    printBillProgressBar.Value = 0;
                    printBillTextBox.Text = string.Empty;
                    _presenter.ChangeStatusPrintingSelectedBill(false);
                    _presenter.OnWaitCursor(false);
                }
            }            
        }

        private string SetTextForListView(PrintableId pt)
        {
            string txtId="";
            string flagLabelHeader = "";

            if (pt.MtNo != null)
            {
                txtId = pt.MtNo;
                flagLabelHeader = "MT";
            }         
            else if (pt.BranchId != null && pt.MruId == null && pt.CaId == null && pt.FromNumberId == null && pt.ToNumberId == null && pt.MtNo == null)
            {
                txtId = pt.BranchId;
                flagLabelHeader = "B";
            }
            else if (pt.BranchId != null && pt.MruId != null && pt.CaId == null && pt.FromNumberId == null && pt.ToNumberId == null)
            {
                txtId = pt.BranchId + Properties.Resources.PrintSeperatorText + pt.MruId;
                flagLabelHeader = "M";
            }
            else if (pt.CaId != null && pt.MtNo == null)
            {
                txtId = pt.CaId;
                flagLabelHeader = "U";
                if (txtId.Length <= 7)
                    flagLabelHeader = "S";
            }
            else if (pt.FromNumberId != null && pt.ToNumberId != null && pt.MtNo == null)
            {
                if(pt.FromNumberId.Length > 12 || pt.ToNumberId.Length > 12)
                    txtId = pt.FromNumberId.Substring(pt.FromNumberId.Length-12, 12) + Properties.Resources.PrintSeperatorText +
                        pt.ToNumberId.Substring(pt.ToNumberId.Length - 12, 12);
                else
                    txtId = pt.FromNumberId + Properties.Resources.PrintSeperatorText + pt.ToNumberId;

                if (pt.FromNumberId.Length == 12)
                    flagLabelHeader = "U";
                else if (pt.FromNumberId.Length == 7)
                    flagLabelHeader = "S";
                else
                    flagLabelHeader = "O";
            }

            SetTextLabelForHeaderListView(flagLabelHeader);

            return txtId;
        }

        private void SetTextLabelForHeaderListView(string flag)
        {
            if (flag == "M")
            {
                printBillLabel.Text = "สายที่สั่งพิมพ์";
                printableBillLabel.Text = "สายที่พิมพ์ได้";
                printedBillLabel.Text = "สายที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "สายที่ไม่พบข้อมูล";
            }
            else if (flag == "S")
            {
                printBillLabel.Text = "เลขลำดับที่สั่งพิมพ์";
                printableBillLabel.Text = "เลขลำดับที่พิมพ์ได้";
                printedBillLabel.Text = "เลขลำดับที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "เลขลำดับที่ไม่พบข้อมูล";
            }
            else if (flag == "U")
            {
                printBillLabel.Text = "เลขผู้ใช้ไฟที่สั่งพิมพ์";
                printableBillLabel.Text = "เลขผู้ใช้ไฟที่พิมพ์ได้";
                printedBillLabel.Text = "เลขผู้ใช้ไฟที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "เลขผู้ใช้ไฟที่ไม่พบข้อมูล";
            }
            else if (flag == "B")
            {
                printBillLabel.Text = "รหัสการไฟฟ้าที่สั่งพิมพ์";
                printableBillLabel.Text = "รหัสการไฟฟ้าที่พิมพ์ได้";
                printedBillLabel.Text = "รหัสการไฟฟ้าที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "รหัสการไฟฟ้าที่ไม่พบข้อมูล";
            }
            else if (flag == "MT")
            {
                printBillLabel.Text = "เลขที่ มท. ที่สั่งพิมพ์";
                printableBillLabel.Text = "เลขที่ มท. ที่พิมพ์ได้";
                printedBillLabel.Text = "เลขที่ มท. ที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "เลขที่ มท. ที่ไม่พบข้อมูล";
            }
            else
            {
                printBillLabel.Text = "รายการที่สั่งพิมพ์";
                printableBillLabel.Text = "รายการที่พิมพ์ได้";
                printedBillLabel.Text = "รายการที่พิมพ์แล้ว";
                printBillNoDataFoundLabel.Text = "รายการที่ไม่พบข้อมูล";
            }
        }        

        private bool CheckRepeatedElecCodeList(ListBox lstBox, string txt)
        {

            bool isRepeatedItem = false;
            for (int i = 0; i < lstBox.Items.Count; i++)
            {
                if (txt.Trim() == lstBox.Items[i].ToString())
                {
                    isRepeatedItem = true;
                    break;
                }
                else
                {
                    isRepeatedItem = false;
                }
            }
            return isRepeatedItem;
        }

        public void ClearList()
        {
            //printBillDataGrid.DataSource = null;
            //printableBillDataGrid.DataSource = null;
            //printedBillDataGrid.DataSource = null;
            //printBillNoDataFoundDataGrid.DataSource = null;

            printBillDataGrid.Rows.Clear();
            printableBillDataGrid.Rows.Clear();
            printedBillDataGrid.Rows.Clear();
            printBillNoDataFoundDataGrid.Rows.Clear();
        }

        private string BarcodeMapping(string bCode)
        {
            string realBarCode = string.Empty;
            
            if (bCode != null || bCode != string.Empty)
            {
                char[] seperator = new char[] { '#' };
                string[] p1 = bCode.Trim().Split(seperator, StringSplitOptions.RemoveEmptyEntries);

                for (int i = 0; i <= p1.Length - 1; i++)
                {
                    try
                    {
                        realBarCode = realBarCode + Ch(Convert.ToInt32(p1[i]));
                    }
                    catch
                    {
                        if (p1[i].Substring(0, 1) == "$")
                            p1[i] = p1[i].Replace("$", "");

                        realBarCode = realBarCode + p1[i];
                    }
                }               
            }
            
            return realBarCode;
        }

        private string Ch(int value)
        {
            return ((char)value).ToString();
        }

        public string[] GetPrinterCode()
        {
            return GetPrinterConfig(GetOnPrintBillType());
        }

        private string[] GetPrinterConfig(string printType)
        {
            string[] printerCfg = new string[9];

            try
            {
                LocalSettingHelper hp = LocalSettingHelper.Instance();

                if (printType == "B")
                {
                    //migrate default printer config to specific blue
                    if (hp.Read(LocalSettingNames.BlueBillPrinterName) == null)
                    {
                        string defaultPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                        hp.Add(LocalSettingNames.BlueBillPrinterName, defaultPrinterName);
                    }

                    //migrate default printer code
                    if (hp.Read(LocalSettingNames.BlueBillPrinterChoice) == null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            hp.Add(LocalSettingNames.BlueBillPrinterChoice, barcodeChoice);
                        }
                        else
                        {
                            string[] tmpCfg = new string[6];
                            tmpCfg[0] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                            tmpCfg[1] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
                            tmpCfg[2] = hp.Read(LocalSettingNames.Barcode2Start).ToString();
                            tmpCfg[3] = hp.Read(LocalSettingNames.Barcode2Stop).ToString();

                            tmpCfg[4] = hp.Read(LocalSettingNames.Barcode3Start).ToString();
                            tmpCfg[5] = hp.Read(LocalSettingNames.Barcode3Stop).ToString();

                            hp.Add(LocalSettingNames.BlueBillBarcode1Start, tmpCfg[0]);
                            hp.Add(LocalSettingNames.BlueBillBarcode1Stop, tmpCfg[1]);
                            hp.Add(LocalSettingNames.BlueBillBarcode2Start, tmpCfg[2]);
                            hp.Add(LocalSettingNames.BlueBillBarcode2Stop, tmpCfg[3]);

                            hp.Add(LocalSettingNames.BlueBillBarcode3Start, tmpCfg[4]);
                            hp.Add(LocalSettingNames.BlueBillBarcode3Stop, tmpCfg[5]); 
                        }
                    }

                    if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
                    else
                    {
                        //adhoc
                        throw new Exception("กรุณาระบุเครื่องพิมพ์สำหรับพิมพ์บิลตัวแทนเก็บเงิน/split bill ที่วางไม่ได้");
                    }
                    //else if (hp.Read(LocalSettingNames.PrinterName) != null)
                    //    printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();


                    if (hp.Read(LocalSettingNames.BlueBillPrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                            printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
                            printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
                            printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
                            printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];

                            #region #ISSUE NEW FORM
                            printerCfg[7] = cmdPrinter["BarcodeTxt3Start"]; 
                            printerCfg[8] = cmdPrinter["BarcodeTxt3Stop"]; 
                            #endregion
                        }
                        else
                        {
                            printerCfg[1] = hp.Read(LocalSettingNames.BlueBillBarcode1Start).ToString();
                            printerCfg[2] = hp.Read(LocalSettingNames.BlueBillBarcode1Stop).ToString();
                            printerCfg[3] = hp.Read(LocalSettingNames.BlueBillBarcode2Start).ToString();
                            printerCfg[4] = hp.Read(LocalSettingNames.BlueBillBarcode2Stop).ToString();
                            #region #ISSUE NEW FORM
                            printerCfg[7] = hp.Read(LocalSettingNames.BlueBillBarcode3Start).ToString();
                            printerCfg[8] = hp.Read(LocalSettingNames.BlueBillBarcode3Stop).ToString();
                            #endregion

                        }
                    }
                    else
                    {
                        //adhoc
                        throw new Exception("ไม่พบ code เครื่องพิมพ์ที่ตั้งค่าไว้ (บิลตัวแทน)");
                    }
                    //else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
                    //{
                    //    int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                    //    if (barcodeChoice != 7)
                    //    {
                    //        Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                    //        printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
                    //        printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
                    //        printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
                    //        printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];
                    //    }
                    //    else
                    //    {
                    //        printerCfg[1] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                    //        printerCfg[2] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
                    //        printerCfg[3] = hp.Read(LocalSettingNames.Barcode2Start).ToString();
                    //        printerCfg[4] = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
                    //    }
                    //}
                }

                if (printType == "A")
                {
                    //migrate default printer config to specific blue
                    if (hp.Read(LocalSettingNames.A4BillPrinterName) == null)
                    {
                        string defaultPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                        hp.Add(LocalSettingNames.A4BillPrinterName, defaultPrinterName);
                    }

                    //migrate default printer code
                    if (hp.Read(LocalSettingNames.A4BillPrinterChoice) == null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            hp.Add(LocalSettingNames.A4BillPrinterChoice, barcodeChoice);
                        }
                        else
                        {
                            string[] tmpCfg = new string[2];
                            tmpCfg[0] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                            tmpCfg[1] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();

                            hp.Add(LocalSettingNames.BarcodeA4Start, tmpCfg[0]);
                            hp.Add(LocalSettingNames.BarcodeA4Stop, tmpCfg[1]);
                        }
                    }

                    if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
                    else
                    {
                        //adhoc
                        throw new Exception("กรุณาระบุเครื่องพิมพ์สำหรับพิมพ์หนังสือแจ้งค่าไฟฟ้า");
                    }
                    //else if (hp.Read(LocalSettingNames.PrinterName) != null)
                    //    printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();

                    if (hp.Read(LocalSettingNames.A4BillPrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
                        Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                        printerCfg[5] = cmdPrinter["BarcodeA4Start"];
                        printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
                    }
                    else
                    {
                        //adhoc
                        throw new Exception("ไม่พบ code เครื่องพิมพ์ที่ตั้งค่าไว้ (หนังสือแจ้ง)");
                    }
                    //else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
                    //{
                    //    int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                    //    if (barcodeChoice != 7)
                    //    {
                    //        Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                    //        printerCfg[5] = cmdPrinter["BarcodeA4Start"];
                    //        printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
                    //    }
                    //    else
                    //    {
                    //        printerCfg[5] = hp.Read(LocalSettingNames.BarcodeA4Start).ToString();
                    //        printerCfg[6] = hp.Read(LocalSettingNames.BarcodeA4Stop).ToString();
                    //    }
                    //}
                }

                if (printType == "G")
                {
                    //migrate default printer config to specific blue
                    if (hp.Read(LocalSettingNames.GreenBillPrinterName) == null)
                    {
                        string defaultPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                        hp.Add(LocalSettingNames.GreenBillPrinterName, defaultPrinterName);
                    }

                    if (hp.Read(LocalSettingNames.GreenBillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.GreenBillPrinterName).ToString();
                    else
                    {
                        //adhoc
                        throw new Exception("กรุณาระบุเครื่องพิมพ์สำหรับพิมพ์บิลธนาคาร");
                    }
                    //else if (hp.Read(LocalSettingNames.PrinterName) != null)
                    //    printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();
                }
            }
            catch (Exception)
            {
                //do nothing, return empty arrays
            }


            return printerCfg;
        }

        private void AddToDataGridView(DataGridView dg, string txt)
        {
            dg.Enabled = true;

            if (!IsRepeatedItem(dg, txt))
            {
                try
                {
                    int i = dg.Rows.Count;
                    dg.Rows.Add(1);
                    dg.Rows[i].Cells[0].Value = txt;
                    dg.Rows[i].Selected = false;                 
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.ToString(), MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool IsRepeatedItem(DataGridView dg, string txt)
        {
            for (int i = 0; i < dg.Rows.Count; i++)
            {
                if (txt == (string)dg.Rows[i].Cells[0].Value)
                   return true;
            }

            return false;
        }

        private void PrintBills()
        {
            printBillProgressBar.Step = 1;
            printBillProgressBar.Minimum = 0;
            printBillProgressBar.Maximum = 100;

            BackgroundWorker backgroundWorker1 = new BackgroundWorker();

            backgroundWorker1.WorkerReportsProgress = true;
            backgroundWorker1.WorkerSupportsCancellation = true;
            backgroundWorker1.DoWork += new DoWorkEventHandler(this.backgroundWorker1_DoWork);
            backgroundWorker1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.backgroundWorker1_RunWorkerCompleted);
            backgroundWorker1.ProgressChanged += new ProgressChangedEventHandler(this.backgroundWorker1_ProgressChanged);

            backgroundWorker1.RunWorkerAsync();
        }

        private void CalculateBillToPrint()
        {
            int billCount = 0;
            int index = 0;
            printableBillDataGrid.EndEdit();
            foreach (PrintableId pt in _printId)
            {
                bool check = printableBillDataGrid.Rows[index].Cells["CheckColumn"].Value == null ? false : (bool)printableBillDataGrid.Rows[index].Cells["CheckColumn"].Value;
                if (pt.BillCount != null && check)
                    billCount += pt.BillCount.Value;

                index++;
            }

            _presenter.ShowBillCount(billCount);
        }

        #endregion

        #region "BackGroundWorker Component"

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker bx = (BackgroundWorker)sender;
            e.Result = DoPrintBills(bx);
           
        }

        ///<summary>
        ///Because we cann't update control within thread currently running 
        ///so we hava to update the value into a variable and 
        /// then update the control in backgroundWorker1_ProgressChanged krub.
        ///</summary> 
        private int DoPrintBills(BackgroundWorker bx)
        {
            StreamWriter sw = null;
            string printHeader = null;

            try
            {
                //read printer configurations
                string[] printerCode = GetPrinterConfig(GetOnPrintBillType());   

                //get print target
                LocalSettingHelper hp = LocalSettingHelper.Instance();
                string printTarget = hp.Read(LocalSettingNames.PrintTarget).ToString();

                if (printTarget == "F" || printTarget == "A")
                {
                    //++ separate file into 3 bill types A4, Green, and Blue
                    string targetFilePath = (string)hp.Read(LocalSettingNames.FilePrintTargetPath);
 
                    //create day file
                    string dayStamp = DateTime.Now.ToString("yyyyMMdd", new CultureInfo("th-TH"));
                    string fullPath = string.Empty;

                    if(GetOnPrintBillType() == "A")
                        fullPath = string.Format("{0}\\a4bill_{1}.txt", targetFilePath, dayStamp);
                    else if (GetOnPrintBillType() == "B")
                        fullPath = string.Format("{0}\\bluebill_{1}.txt", targetFilePath, dayStamp);
                    else if (GetOnPrintBillType() == "G")
                        fullPath = string.Format("{0}\\greenbill_{1}.txt", targetFilePath, dayStamp);
                    else //should not reach here
                        fullPath = string.Format("{0}\\allbill_{1}.txt", targetFilePath, dayStamp);

                    if (File.Exists(fullPath))
                        sw = new StreamWriter(fullPath, true, Encoding.Default);
                    else
                        sw = new StreamWriter(fullPath, false, Encoding.Default);

                    printHeader = string.Format("***********    Printed By: {0}    ***********", printerCode[0]);
                    sw.WriteLine(printHeader);
                }

                              
                for (int i = 0; i < _billTxt.Count; i++)
                {                    
                    if (_billTxt[i].BillTxt.Contains("BLAN_Barcode"))
                    {
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Start", BarcodeMapping(printerCode[1]));
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Stop", BarcodeMapping(printerCode[2]));
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Start", BarcodeMapping(printerCode[3]));
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Stop", BarcodeMapping(printerCode[4]));

                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_3_Start", BarcodeMapping(printerCode[7]));
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_3_Stop", BarcodeMapping(printerCode[8]));
                    }
                    else if (_billTxt[i].BillTxt.Contains("BLAN_A4_Barcode"))
                    {
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_A4_Barcode_Start", BarcodeMapping(printerCode[5]));
                        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_A4_Barcode_Stop", BarcodeMapping(printerCode[6]));
                    }
                    
                    //log data to file
                    if(printTarget == "A" || printTarget == "F")
                        sw.Write(_billTxt[i].BillTxt);
                    
                    //send to printer
                    if(printTarget == "A" || printTarget == "P")
                        RawPrinterHelper.SendStringToPrinter(printerCode[0], _billTxt[i].BillTxt);

                    _billId = _billTxt[i].BillId; //read summary
                    int pg = (i + 1) * 100 / _billTxt.Count;
                    bx.ReportProgress(pg);
                    Thread.Sleep(30);                    
                }

                if (sw != null)
                {
                    sw.Close();
                    sw.Dispose();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            
            return 1;
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            printBillTextBox.Text = "กำลังพิมพ์บิลเลขที่ " + _billId;
            printBillProgressBar.Value = e.ProgressPercentage;
            //label2.Text = "จำนวน " + printableBillListView.Items.Count.ToString() + " รายการ";
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                // There was an error during the operation.
                string msg = String.Format(MessageBoxText.MsgGeneralError + e.Error.Message);
                MessageBox.Show(msg, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                _isPrintCompleted = true;               
            }

            //X - 22.10.2012
            //To prevent bill(MRU) shuffling causing by process communication between BLAN and Windows's print spooler. 
            Thread.Sleep(200);

            PrintBill();
        }

        #endregion
        
        #region Summary all records in list view

        public void SummarizeRecords()
        {
            label1.Text = "จำนวน " + printBillDataGrid.Rows.Count.ToString() + " รายการ";
            label2.Text = "จำนวน " + printableBillDataGrid.Rows.Count.ToString() + " รายการ";
            label3.Text = "จำนวน " + printedBillDataGrid.Rows.Count.ToString() + " รายการ";
            label4.Text = "จำนวน " + printBillNoDataFoundDataGrid.Rows.Count.ToString() + " รายการ";
        }
        
        #endregion

        #region Event Handling

        private void printableBillDataGrid_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            CalculateBillToPrint();
        }

        private void printableBillDataGrid_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Space)
            {
                foreach (DataGridViewRow r in printableBillDataGrid.SelectedRows)
                {
                    bool check = (bool)r.Cells[0].Value;
                    if (check)
                        r.Cells[0].Value = false;
                    else
                        r.Cells[0].Value = true;
                }

                CalculateBillToPrint();
            }
        }

        #endregion

        
       
    }
}

