//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.ComponentModel;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ManageBarcodeView : UserControl, IManageBarcodeView
    {
        List<BarcodeMRU> _barcodeMRU;

        public List<BarcodeMRU> BarcodeMRU
        {
            get { return _barcodeMRU; }
            set 
            { 
                _barcodeMRU = value;
                BindGridView();
            }
        }

        public ManageBarcodeView()
        {
            InitializeComponent();            
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ManageBarcodeViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            Branch parent = new Branch(Session.Branch.Id, Session.Branch.Name);
            List<Branch> branchLine = CodeTable.Instant.ListChildBranch(parent);
            foreach (Branch b in branchLine)
                b.BranchName = b.BranchId + " - " + b.BranchName2;

            branchCBox.DisplayMember = "BranchName";
            branchCBox.ValueMember = "BranchId";
            branchCBox.DataSource = branchLine;

            InitializeControl();
        }

        private void mruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                //if (mruIdMaskedTextBox.MaskCompleted)
                    ListMRU();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (dlg == DialogResult.Yes)
                    InitializeControl();
            }
            else if (e.KeyCode == Keys.Down)
            {
                toMruIdMaskedTextBox.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                branchCBox.Focus();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                //if (mruIdMaskedTextBox.MaskCompleted)
                toMruIdMaskedTextBox.Focus();
            }
        }

        private void toMruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                //if (mruIdMaskedTextBox.MaskCompleted && toMruIdMaskedTextBox.MaskCompleted)
                    ListMRU();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (dlg == DialogResult.Yes)
                    InitializeControl();
            }
            else if (e.KeyCode == Keys.Down)
            {
                searchButton.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                mruIdMaskedTextBox.Focus();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                //if (branchIdMaskedTextBox.MaskCompleted && mruIdMaskedTextBox.MaskCompleted && toMruIdMaskedTextBox.MaskCompleted)
                    searchButton.Focus();
            }
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            ListMRU();
        }

        private void submitButton_Click(object sender, EventArgs e)
        {
            try
            {
                BarcodeMRU param = new BarcodeMRU();

                List<BarcodeMRU> list = new List<BarcodeMRU>();
                for (int i = 0; i < mruListGridView.Rows.Count; i++)
                {
                    
                    //BarcodeMRU obj = new BarcodeMRU();

                    //object isChecked = mruListGridView.Rows[i].Cells["IsPrinted"].Value;
                    //if (isChecked != null && (bool)isChecked == true)
                    //{
                    //    obj = (BarcodeMRU)mruListGridView.Rows[i].DataBoundItem;
                    //    list.Add(obj);
                    //}
                        list.Add((BarcodeMRU)mruListGridView.Rows[i].DataBoundItem);
                }

                param.List = list;
                param.ModifiedBy = Session.User.Id;

                _presenter.UpdateBarcodeMRU(param);

                MessageBox.Show(MessageBoxText.MsgProcessingDone, MessageBoxText.CaptionInfo, MessageBoxButtons.OK, MessageBoxIcon.Information);

                mruListGridView.Rows.Clear();
                ListMRU();

                submitButton.Enabled = false;
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(ex.ToString(), "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void closeBt_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        private void InitializeControl()
        {
            mruIdMaskedTextBox.ResetText();
            toMruIdMaskedTextBox.ResetText();
            mruListGridView.Rows.Clear();
            if (branchCBox.Items.Count > 0)
            {
                branchCBox.SelectedIndex = 0;
                branchCBox.Focus();
            }
        }

        private void ListMRU()
        {
            ManageBarcodeParam param = new ManageBarcodeParam();
            param.BranchId = ((Branch)branchCBox.SelectedItem).BranchId;
            param.MruId = mruIdMaskedTextBox.Text;
            param.ToMruId = toMruIdMaskedTextBox.Text;
            _presenter.ListBarcodeMRU(param);
        }

        private void BindGridView()
        {
            BindingList<BarcodeMRU> bl = new BindingList<BarcodeMRU>(_barcodeMRU);
            bl.AllowNew = false;

            mruListGridView.Rows.Clear();
            mruListGridView.AutoGenerateColumns = false;
            mruListGridView.DataSource = bl;
            mruListGridView.Refresh();
        }

        private void mruListGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 2)
                submitButton.Enabled = true;
        }

        private void branchCBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
                mruIdMaskedTextBox.Focus();
        }

       
    }
}

