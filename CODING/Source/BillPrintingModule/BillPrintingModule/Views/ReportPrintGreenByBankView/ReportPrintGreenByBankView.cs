//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportPrintGreenByBankView : UserControl, IReportPrintGreenByBankView
    {
        enum ConditionState
        {
            All = 0,
            Bank
        }

        private List<Bank> _bank;
        private bool _loadReady = false;
        private string _selectedBankId = null;
        private ConditionState _state = ConditionState.All;

        public List<Bank> Bank
        {
            get { return _bank; }
            set { _bank = value; }
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showReportButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showReportButton.Enabled = true;
            }
        }

        public ReportPrintGreenByBankView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportPrintGreenByBankViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            //bind bank date into comboBox
            _presenter.LoadBankComboBox(Session.Branch.Id);

            if (Session.Branch.Id == "Z00000")
                ddrepLabel.Text = "สรุปการพิมพ์ใบแจ้งค่าไฟฟ้า\n หักบัญชีธนาคาร (บิลฟ้า)";
            else
                ddrepLabel.Text = "สรุปการพิมพ์ใบแจ้งค่าไฟฟ้า\n หักบัญชีธนาคาร (บิลเขียว)";

            fromDateText.Focus();
        }

        private void PreviewReport()
        {
            if (!fromDateText.MaskCompleted || !CustomValidation.ValidateDate(fromDateText.Text))
            {
                MessageBox.Show("กรุณาป้อน \"จากวันที่\" ให้ถูกต้อง รูปแบบ วว/ดด/ปปปป ", "ป้อนข้อมูลไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                fromDateText.Focus();
                fromDateText.SelectAll();
                return;
            }

            if (!toDateText.MaskCompleted || !CustomValidation.ValidateDate(toDateText.Text))
            {
                MessageBox.Show("กรุณาป้อน \"ถึงวันที่ \" ให้ถูกต้อง รูปแบบ วว/ดด/ปปปป ", "ป้อนข้อมูลไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                toDateText.Focus();
                toDateText.SelectAll();
                return;
            }

            if (bankRb.Checked && bankGv.Rows.Count == 0)
            {
                MessageBox.Show("กรุณาป้อนรายการรหัสธนคารเพื่อออกรายงาน ", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                bankIdText.Focus();
                return;
            }

            try
            {
                DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dlg == DialogResult.OK)
                {
                    ReportConditionParam param = new ReportConditionParam();
                    param.FromDate = DateTime.ParseExact(fromDateText.Text, "dd/MM/yyyy", new CultureInfo("th-TH"));
                    param.FromDate = new DateTime(param.FromDate.Year, param.FromDate.Month, param.FromDate.Day, 0, 0, 0);
                    param.ToDate = DateTime.ParseExact(toDateText.Text, "dd/MM/yyyy", new CultureInfo("th-TH"));
                    TimeSpan t = new TimeSpan(23, 59, 59);
                    param.ToDate = param.ToDate + t;
                    param.PrintBranch = Session.Branch.Id;

                    if (Session.Branch.Id == "Z00000")
                        param.ReportType = 0; //big customer (blue)
                    else
                        param.ReportType = 1; //normal green

                    if (allRb.Checked)
                        param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    else
                    {
                        param.PrintingCondition = (int)PrintingCondition.BankPrinting;
                        List<InputParam> paramList = new List<InputParam>();
                        foreach(DataGridViewRow r in bankGv.Rows)
                        {
                            InputParam p = new InputParam();
                            p.InputStr = r.Cells["BankId"].Value.ToString();
                            paramList.Add(p);
                        }

                        param.InputParamList = paramList;
                    }

                    _presenter.PreviewGreenByBankReport(param);
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(e.ToString());
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            bankGv.Rows.Clear();
            fromDateText.ResetText();
            toDateText.ResetText();
            allRb.Checked = true;
            bankIdText.Clear();
            fromDateText.Focus();
        }

        private void fromDateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && CustomValidation.ValidateDate(fromDateText.Text))
            {
                toDateText.Focus();
            }
            else if (e.KeyCode == Keys.N)
            {
                fromDateText.Text = DateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                toDateText.Focus();
            }
        }

        private void toDateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && CustomValidation.ValidateDate(toDateText.Text))
            {
                if (allRb.Checked)
                    showReportButton.Focus();
                else
                    bankIdText.Focus();
            }
            else if (e.KeyCode == Keys.N)
            {
                toDateText.Text = DateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                if (allRb.Checked)
                    showReportButton.Focus();
                else
                    bankIdText.Focus();
            }
        }

        private void showReportButton_Click(object sender, EventArgs e)
        {
            if (bankIdText.MaskCompleted)
            {
                AddToDataGridView(bankIdText.Text.ToUpper());
                bankIdText.Clear();
            }

            PreviewReport();
        }

        private void allRb_CheckedChanged(object sender, EventArgs e)
        {
            if (allRb.Checked)
            {
                if (_state == ConditionState.Bank && bankGv.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr != DialogResult.Yes)
                    {
                        bankRb.Checked = true;
                        return;
                    }

                    bankGv.Rows.Clear();
                }

                bankGb.Enabled = false;
                bankListGb.Enabled = false;
                bankGv.Enabled = false;
                showReportButton.Focus();
                _state = ConditionState.All;
            }
            else
            {
                bankGb.Enabled = true;
                bankListGb.Enabled = true;
                bankGv.Enabled = true;
                _state = ConditionState.Bank;
                bankIdText.Clear();
                bankIdText.Focus();
            }
        }

        private void bankIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (bankIdText.MaskCompleted)
                {
                    //Add to DataGridView
                    AddToDataGridView(bankIdText.Text.ToUpper());
                    bankIdText.Clear();
                    bankIdText.Focus();
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                PreviewReport();
            }
        }

        private void bankGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && bankGv.Columns[e.ColumnIndex].Name == "delColumn")
                bankGv.Rows.RemoveAt(e.RowIndex);
        }

        private void AddToDataGridView(string bankId)
        {
            try
            {
                //check repeated item
                foreach (DataGridViewRow r in bankGv.Rows)
                {
                    string gvBankId = r.Cells["BankId"].Value.ToString();
                    if (gvBankId == bankId)
                        return;
                }

                //start adding
                bankGv.Rows.Add(1);
                bankGv.Rows[bankGv.Rows.Count-1].Cells["BankId"].Value = bankId;
                bankGv.Rows[bankGv.Rows.Count-1].Selected = true;
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void bankSearchBt_Click(object sender, EventArgs e)
        {
            BABankSelection bankDlg = new BABankSelection(_bank);
            bankDlg.ShowDialog();
            if (bankDlg.DialogResult == DialogResult.OK)
            {
                Bank chosenBank = bankDlg.ChesenBank;
                _selectedBankId = chosenBank.BankKey;
                bankIdText.Text = chosenBank.BankKey;
                AddToDataGridView(bankIdText.Text.ToUpper());
                //bankIdText.Clear();
                bankIdText.Focus();
            }
        }

    }
}

