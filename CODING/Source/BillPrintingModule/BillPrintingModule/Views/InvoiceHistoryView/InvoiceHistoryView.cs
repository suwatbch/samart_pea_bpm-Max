//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class InvoiceHistoryView : UserControl, IInvoiceHistoryView
    {
        private List<Invoice> _invList;
        
        public InvoiceHistoryView()
        {
            InitializeComponent();
            InvGv.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public InvoiceHistoryViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        private void LoadInvoiceHistory()
        {
            this.Cursor = Cursors.WaitCursor;
            _invList = _presenter.GetContractAccountHistory(caIdTxt.Text, "G07102");
            if (_invList.Count > 0)
            {
                caNameTxt.Text = _invList[0].CaName;
                snameTxt.Text =  _invList[0].W_1860_trsg + " - " + _invList[0].W_40_sname;
            }

            //do some filter
            List<Invoice> tmpInvList = new List<Invoice>();
            foreach (Invoice iv in _invList)
            {
                if(iv.Active == "1")
                    tmpInvList.Add(iv);
            }

            InvGv.DataSource = tmpInvList;
            this.Cursor = Cursors.Default;

            caIdTxt.Focus();
            caIdTxt.SelectAll();
        }

        private void submitButton_Click(object sender, EventArgs e)
        {
            LoadInvoiceHistory();            
        }

        private void caIdTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                LoadInvoiceHistory();
        }

        public List<Invoice> GetChild(string printDoc)
        {
            List<Invoice> invChild = new List<Invoice>();
            foreach (Invoice b in _invList)
            {
                if (b.W_01_print_doc == printDoc)
                {
                    invChild.Add(b);
                    if(b.W_1910_org_doc != null)
                        invChild.AddRange(GetChild(b.W_1910_org_doc));
                }
            }
            return invChild;
        }

        private void InvGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if(e.RowIndex >= 0)
            {
                try
                {
                InvoiceDrillDown dd = new InvoiceDrillDown();
                    string invoiceNo = InvGv.Rows[e.RowIndex].Cells["InvoiceNo"].Value.ToString();
                    List<Invoice> childInvoices = GetChild(invoiceNo.Substring(4, 12));

                    //change status 
                    foreach (Invoice i in childInvoices)
                    {
                        if (i.Active == "1")
                            i.Status = "สมบูรณ์";
                        else
                            i.Status = "ยกเลิก";
                    }

                    dd.InvoiceList = childInvoices;
                    dd.ShowDialog();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        private void searchBt_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(caIdTxt.Text.Trim()))
                LoadInvoiceHistory();
            else
            {
                caIdTxt.Focus();
                caIdTxt.SelectAll();
            }
        }






    }
}

