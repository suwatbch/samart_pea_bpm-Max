//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportDirectDebitStatusView : UserControl, IReportDirectDebitStatusView
    {
        private List<String> _childBranch;

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showReportButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showReportButton.Enabled = true;
            }
        }

        public ReportDirectDebitStatusView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportDirectDebitStatusViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
            InitializeControl();
            periodMaskedTextBox.Focus();
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            periodMaskedTextBox.Clear();
            printAllRadioButton.Checked = true;
        }

        private bool ValidateDate(string date)
        {
            if (CustomValidation.ValidateDate(date))
                return true;
            else
                return false;
        }

        private bool ValidateBeforeSubmit()
        {
            if (branchDataGridView.Rows.Count == 0 && printBranchRadioButton.Checked)
            {
                string errTxt = string.Empty;
                if (printBranchRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingBranchId;
                else if (printMruRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingBranchIdMruId;

                MessageBox.Show(errTxt, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            if (!periodMaskedTextBox.MaskCompleted || !ValidateDate(periodMaskedTextBox.Text))
            {
                MessageBox.Show("กรุณาตรวจสอบเดือนของใบเสร็จ", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                periodMaskedTextBox.Focus();
                periodMaskedTextBox.SelectAll();
                return false;
            }

            return true;
        }

        private void PreviewReport()
        {
            if (ValidateBeforeSubmit())
            {
                DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dlg == DialogResult.OK)
                {
                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.BillPeriod = periodMaskedTextBox.Text.Substring(3, 4) + periodMaskedTextBox.Text.Substring(0, 2);
                    if (notPrintRb.Checked)
                        param.PrintedFlag = "0";
                    else
                        param.PrintedFlag = "1";

                    OverlapHelper oh = new OverlapHelper();

                    string[] id = new string[branchDataGridView.Rows.Count];
                    if (branchDataGridView.Rows.Count != 0)
                    {
                        for (int i = 0; i < branchDataGridView.Rows.Count; i++)
                        {
                            id[i] = branchDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                            if (printMruRadioButton.Checked == true)
                                oh.Check(id[i]);
                        }
                    }

                    if (printAllRadioButton.Checked)
                    {
                        param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    }
                    else if (printBranchRadioButton.Checked)
                    {
                        param.PrintingCondition = (int)PrintingCondition.BranchPrinting;
                        param.ListElectricId = new List<string>(id);
                    }
                    else if (printMruRadioButton.Checked)
                    {
                        param.PrintingCondition = (int)PrintingCondition.MruPrinting;
                        param.ListElectricId = oh.GetResult();
                    }

                    _presenter.PreviewDirectDebitStatusReport(param);
                }
                else
                {
                    showReportButton.Focus();
                }
            }
        }

        private void showReportButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }

        private void printMruRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printMruRadioButton.Checked)
            {
                mruIdMaskedTextBox.Enabled = true;
                mruIdMaskedTextBox.Clear();
                toMruIdMaskedTextBox.Enabled = true;
                toMruIdMaskedTextBox.Clear();
                branchIdMaskedTextBox.Enabled = true;
                branchIdMaskedTextBox.Clear();
                branchDataGridView.Rows.Clear();
                branchIdMaskedTextBox.Focus();
            }
        }

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
            {
                mruIdMaskedTextBox.Enabled = false;
                mruIdMaskedTextBox.Clear();
                toMruIdMaskedTextBox.Enabled = false;
                toMruIdMaskedTextBox.Clear();
                branchIdMaskedTextBox.Enabled = true;
                branchDataGridView.Rows.Clear();
                branchIdMaskedTextBox.Focus();
            }
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                branchDataGridView.Rows.Clear();
                branchIdMaskedTextBox.Enabled = false;
                branchIdMaskedTextBox.Clear();
                mruIdMaskedTextBox.Enabled = false;
                mruIdMaskedTextBox.Clear();
                toMruIdMaskedTextBox.Enabled = false;
                toMruIdMaskedTextBox.Clear();

                if (periodMaskedTextBox.Text.Replace("/", "").Trim().Length <= 0)
                    periodMaskedTextBox.Focus();
                else
                    showReportButton.Focus();
            }
        }

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (branchDataGridView.Rows.Count > 0)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.N)
            {
                branchIdMaskedTextBox.Text = Session.Branch.Id;
            }
        }

        private void periodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (CustomValidation.ValidateDate(periodMaskedTextBox.Text))
                {
                    if (printAllRadioButton.Checked)
                        showReportButton.Focus();
                    else
                        branchIdMaskedTextBox.Focus();
                }
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบใบเสร็จเดือน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    periodMaskedTextBox.Clear();
                }
            }
            else if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                periodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);
                if (printBranchRadioButton.Checked)
                    branchIdMaskedTextBox.Focus();
                else
                    showReportButton.Focus();
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (branchDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < branchDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)branchDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void AddToDataGridView(string txt)
        {
            bool isRepeatedItem = false;
            branchDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(txt, isRepeatedItem);
            if (isRepeatedItem == false)
            {
                try
                {
                    int i = branchDataGridView.Rows.Count;
                    branchDataGridView.Rows.Add(1);
                    branchDataGridView.Rows[i].Cells["electricityIdColumn"].Value = txt;
                    branchDataGridView.Rows[i].Selected = true;

                    //when selected = true, bgColor = blue so we didn't need it.
                    for (int j = 0; j <= i - 1; j++)
                    {
                        branchDataGridView.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool ValidateBranchLevel()
        {
            bool _flag = false;

            if (_childBranch.Contains(branchIdMaskedTextBox.Text.ToUpper()))
                _flag = true;
            else
                _flag = false;

            return _flag;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
                mskTxtBox.Focus();
            else
                branchIdMaskedTextBox.Focus();

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    if (ValidateBranchLevel())
                    {
                        if (printBranchRadioButton.Checked)
                        {
                            AddToDataGridView(branchIdMaskedTextBox.Text.ToUpper());
                            SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                        }
                        else if (printMruRadioButton.Checked)
                        {
                            mruIdMaskedTextBox.Focus();
                        }
                    }
                    else
                    {
                        MessageBox.Show(MessageBoxText.MsgOnlyChildBranchAllowed, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }
            }
        }

        private void mruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12 && branchDataGridView.Rows.Count > 0)
                PreviewReport();
            else if (e.KeyCode == Keys.Up)
                branchIdMaskedTextBox.Focus();
            else if (e.KeyCode == Keys.Down)
                toMruIdMaskedTextBox.Focus();
        }

        private void toMruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12 && branchDataGridView.Rows.Count > 0)
                PreviewReport();
            else if (e.KeyCode == Keys.Up)
                mruIdMaskedTextBox.Focus();
            else if (e.KeyCode == Keys.Down)
                showReportButton.Focus();
        }

        private void mruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (printMruRadioButton.Checked == true && branchIdMaskedTextBox.Text.Length == 6 && mruIdMaskedTextBox.Text.Length == 4)
                {
                    SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                    toMruIdMaskedTextBox.Focus();
                }
            }
        }

        private void toMruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (printMruRadioButton.Checked && branchIdMaskedTextBox.MaskCompleted && mruIdMaskedTextBox.MaskCompleted && 
                    (toMruIdMaskedTextBox.MaskCompleted || toMruIdMaskedTextBox.Text == string.Empty))
                {
                    string branchId = branchIdMaskedTextBox.Text.Substring(0, 1).ToUpper() + branchIdMaskedTextBox.Text.Substring(1, 5);
                    if (toMruIdMaskedTextBox.Text != string.Empty)
                    {
                        int fromMru = Convert.ToInt32(mruIdMaskedTextBox.Text);
                        int toMru = Convert.ToInt32(toMruIdMaskedTextBox.Text);
                        if (fromMru > toMru)
                        {
                            mruIdMaskedTextBox.Text = toMru.ToString().PadLeft(4, '0');
                            toMruIdMaskedTextBox.Text = fromMru.ToString().PadLeft(4, '0');
                        }
                        AddToDataGridView(string.Format("{0}-{1}-{2}",branchId,mruIdMaskedTextBox.Text,toMruIdMaskedTextBox.Text));                        
                    }
                    else //user leave blank and press enter = no mruId-range required
                        AddToDataGridView(string.Format("{0}-{1}", branchId, mruIdMaskedTextBox.Text));                        

                    SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, false);
                    SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                }
            }
        }

        private void InitializeControl()
        {
            periodMaskedTextBox.Clear();
            printAllRadioButton.Checked = true;
            printBranchRadioButton.Checked = false;
            printMruRadioButton.Checked = false;
            branchIdMaskedTextBox.Clear();
            mruIdMaskedTextBox.Clear();
            toMruIdMaskedTextBox.Clear();
            branchIdMaskedTextBox.Enabled = false;
            mruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Enabled = false;
            branchDataGridView.Rows.Clear();
        }

        private void branchDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && branchDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                branchDataGridView.Rows.RemoveAt(e.RowIndex);
        }

    
    }
}

