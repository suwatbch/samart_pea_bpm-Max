//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Globalization;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportDailyPrintView : UserControl, IReportDailyPrintView
    {
        #region "Properties and Variables"
        private List<Branch> _childBranch;
        private bool _clearCmdFlag;
        private PrintConditionEnum _state = PrintConditionEnum.All;

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showReportButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showReportButton.Enabled = true;
            }
        }

        #endregion

        #region "Code Generated"
        
        public ReportDailyPrintView()
        {
            InitializeComponent();
            InitializeControlValue();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportDailyPrintViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            //_childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
            _childBranch = CodeTable.Instant.ListBranches(); //choose all
            dateReceivedDtPicker.Focus();
        }

        #endregion

        #region "Event Handling"

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12) //print shortkey
            {
                PreviewReport();
                _clearCmdFlag = false;
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        ClearInput();

                    _clearCmdFlag = false;
                }
                else
                {
                    branchIdMaskedTextBox.ResetText();
                    branchIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }

            }
            else if (e.KeyCode == Keys.N)
            {
                branchIdMaskedTextBox.Text = Session.Branch.Id;
            }

        }

        //add hot key for default value
        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    if (printBranchRadioButton.Checked == true)
                    {
                        //Add to DataGridView
                        AddToDataGridView(ToUpperCase(branchIdMaskedTextBox));
                        //then focus on branchIdMaskedTextBox
                        branchIdMaskedTextBox.Text = string.Empty;
                        //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
                        branchIdMaskedTextBox.Focus();
                    }
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }

                _clearCmdFlag = false;
            }
        }

        private void PreviewReport()
        {
            if (ValidateBeforeSubmit())
            {
                DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dlg == DialogResult.OK)
                {
                    ReportConditionParam param = new ReportConditionParam();
                    param.PrintBranch = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    IFormatProvider provider = CultureInfo.CreateSpecificCulture("th-TH");
                    //DataTime is just a chunk of number we don't know what kind or type it is
                    //but when it was shown on the screen, it'll use localization setting.
                    param.PrintDate = dateReceivedDtPicker.Value.Date;
                    //param.PrintDate = Convert.ToDateTime(billPeriodMaskedTextBox.Text, provider);

                    if (printAllRadioButton.Checked)
                        param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    else
                        param.PrintingCondition = (int)PrintingCondition.BranchPrinting;

                    if (a4Rb.Checked)
                        param.PrintType = 0;
                    else if (blueRb.Checked)
                        param.PrintType = 1;
                    else if (greenRb.Checked)
                        param.PrintType = 2;
                    else if (spotBillRb.Checked)
                        param.PrintType = 5;
                    else if (mixedBillRb.Checked)
                        param.PrintType = 15;

                    List<InputParam> inputBranchList = new List<InputParam>();
                    if (reportDailyPrintDataGridView.Rows.Count != 0)
                    {
                        for (int i = 0; i < reportDailyPrintDataGridView.Rows.Count; i++)
                        {
                            InputParam b = new InputParam();
                            b.InputStr = reportDailyPrintDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                            b.GroupBranch = CodeTable.Instant.GetParentOfChild(b.InputStr);
                            b.GroupBranchName = CodeTable.Instant.GetBranchName(b.GroupBranch);
                            b.GroupBranch = b.GroupBranch.Substring(0, 4);
                            inputBranchList.Add(b);
                        }

                        param.InputParamList = inputBranchList;
                        //param.PrintingCondition = "B";
                    }
                    //else
                    //{
                    //    //show all branch that printed in registering branch (printBranch)
                    //    param.PrintingCondition = "A";
                    //}

                    _presenter.PreviewDailyPrintReport(param);
                }
                else
                {
                    showReportButton.Focus();
                }
            }    
        }

        private void showReportButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }

        private void ClearInput()
        {
            reportDailyPrintDataGridView.Rows.Clear();
            printAllRadioButton.Checked = true;
            branchIdMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Enabled = false;
            dateReceivedDtPicker.Focus();
            //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
        }
        
        private void clearButton_Click(object sender, EventArgs e)
        {
            ClearInput();
        }

        private void reportDailyPrintDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (reportDailyPrintDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                reportDailyPrintDataGridView.Rows.RemoveAt(e.RowIndex);
        }

        #endregion

        #region "Function"

        private void AddToDataGridView(string elecId)
        {
            bool isRepeatedItem = false;
            reportDailyPrintDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(elecId, isRepeatedItem);

            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportDailyPrintDataGridView.Rows.Count;
                    reportDailyPrintDataGridView.Rows.Add(1);
                    reportDailyPrintDataGridView.Rows[i].Cells["electricityIdColumn"].Value = elecId;
                    reportDailyPrintDataGridView.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        reportDailyPrintDataGridView.Rows[j].Selected = false;
                    }  
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportDailyPrintDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < reportDailyPrintDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)reportDailyPrintDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
         
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                dateReceivedDtPicker.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = true;
           
            if (reportDailyPrintDataGridView.Rows.Count == 0 && printBranchRadioButton.Checked)
            {
                isValidated = false;
                MessageBox.Show(MessageBoxText.MsgMissingBranchId, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
      
            return isValidated;
        }

        private void InitializeControlValue()
        {
            printAllRadioButton.Checked = true;
            printBranchRadioButton.Checked = false;
            branchIdMaskedTextBox.Text = string.Empty;
            //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
            branchIdMaskedTextBox.Enabled = false;
            reportDailyPrintDataGridView.Enabled = false;
            dateReceivedDtPicker.Focus();
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                if (_state != PrintConditionEnum.All && reportDailyPrintDataGridView.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                    {
                        reportDailyPrintDataGridView.Enabled = false;
                        reportDailyPrintDataGridView.Rows.Clear();
                        branchIdMaskedTextBox.Enabled = false;
                        branchIdMaskedTextBox.Clear();
                        showReportButton.Focus();
                    }
                    else //restore to branch selected
                    {
                        printBranchRadioButton.Checked = true;
                        branchIdMaskedTextBox.Clear();
                        branchIdMaskedTextBox.Focus();
                    }
                }
                else //click the many time
                {
                    reportDailyPrintDataGridView.Enabled = false;
                    reportDailyPrintDataGridView.Rows.Clear();
                    showReportButton.Focus();
                }

                _state = PrintConditionEnum.All;
            }
        }

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
            {
                if (_state != PrintConditionEnum.Branch) //sure it is all
                {
                    reportDailyPrintDataGridView.Enabled = true;
                    branchIdMaskedTextBox.Enabled = true;
                    branchIdMaskedTextBox.Clear();
                    branchIdMaskedTextBox.Focus();
                }

                _state = PrintConditionEnum.Branch;
            }
        }

        #endregion

    }
}

