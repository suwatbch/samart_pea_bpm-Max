//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Globalization;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class ReportGrpInvSummaryView : UserControl, IReportGrpInvSummaryView
    {
        private List<String> _childBranch;
        private ConditionState _state = ConditionState.All;

        enum ConditionState
        {
            All = 1, 
            MtNo,
            Paidby
        }

        public ReportGrpInvSummaryView()
        {
            InitializeComponent();
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                showReportButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                showReportButton.Enabled = true;
            }
        }


        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportGrpInvSummaryViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
            billPeriodMaskedTextBox.Focus();
        }

        private void PreviewReport()
        {
            if (!mtNoRb.Checked && string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace('/',' ').Trim()))
            {
                MessageBox.Show(null, "กรุณาป้อนรอบบิลของใบแจ้งนี้ที่จะให้แสดงในรายงาน", "กรุณาป้อนรอบบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billPeriodMaskedTextBox.Focus();
                billPeriodMaskedTextBox.SelectAll();
                return;
            }

            if (!mtNoRb.Checked && !CustomValidation.ValidateDate(billPeriodMaskedTextBox.Text))
            {
                MessageBox.Show(null, "กรุณาตรวจสอบวันที่รอบเดือนกำหนดชำระ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billPeriodMaskedTextBox.Focus();
                billPeriodMaskedTextBox.SelectAll();
                return;
            }

            if ((paidByRb.Checked || mtNoRb.Checked) && reportGrpInvSummaryGv.Rows.Count == 0)
            {
                MessageBox.Show(null, "กรุณาป้อนรายการเลขที่ มท.หรือหมายเลขผู้ชำระเงินที่จะออกรายงาน", "กรุณาป้อนข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                paidByMaskedTextBox.Focus();
                paidByMaskedTextBox.SelectAll();
                return;
            }

            DialogResult dlg = MessageBox.Show("กรุณากด OK เพื่อยืนยันการแสดงรายงาน", "แสดงรายงาน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            if (dlg == DialogResult.OK)
            {

                ReportConditionParam param = new ReportConditionParam();

                if (printAllRadioButton.Checked)
                {
                    param.PrintingCondition = (int)PrintingCondition.AllPrinting;
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                }
                else if (mtNoRb.Checked)
                {
                    param.PrintingCondition = (int)PrintingCondition.MtNoPrinting;
                }
                else
                {
                    param.PrintingCondition = (int)PrintingCondition.PaidByPrinting;
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);
                }

                //fill branchId to collector
                List<InputParam> paramList = new List<InputParam>();
                if (reportGrpInvSummaryGv.Rows.Count != 0)
                {
                    InputParam grpInput = new InputParam();
                    for (int i = 0; i < reportGrpInvSummaryGv.Rows.Count; i++)
                    {
                        grpInput.InputStr = reportGrpInvSummaryGv.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                        paramList.Add(grpInput);
                    }

                    param.InputParamList = paramList;
                }

                param.PrintBranch = Session.Branch.Id;
                _presenter.PreviewGrpInvSummaryReport(param);
            }
            else
            {
                showReportButton.Focus();
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            reportGrpInvSummaryGv.Rows.Clear();
            mtNoMaskedTextBox.Clear();
            billPeriodMaskedTextBox.Clear();
            billPeriodMaskedTextBox.Focus();
        }

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (billPeriodMaskedTextBox.MaskCompleted)
                {
                    if (printAllRadioButton.Checked)
                        showReportButton.Focus();
                    else
                        paidByMaskedTextBox.Focus();
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (billPeriodMaskedTextBox.MaskCompleted && printAllRadioButton.Checked)
                    PreviewReport();
            }
            else if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);

                showReportButton.Focus();
            }
        }

        private void showReportButton_Click(object sender, EventArgs e)
        {
            PreviewReport();
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportGrpInvSummaryGv.Rows.Count != 0)
            {
                for (int i = 0; i < reportGrpInvSummaryGv.Rows.Count; i++)
                {

                    if (txt == (string)reportGrpInvSummaryGv.Rows[i].Cells["electricityIdColumn"].Value)
                    {
                        isRepeated = true;
                        break;
                    }
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void AddToDataGridView(string elecId)
        {
            bool isRepeatedItem = false;
            reportGrpInvSummaryGv.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(elecId, isRepeatedItem);

            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportGrpInvSummaryGv.Rows.Count;
                    reportGrpInvSummaryGv.Rows.Add(1);
                    reportGrpInvSummaryGv.Rows[i].Cells["electricityIdColumn"].Value = elecId;
                    reportGrpInvSummaryGv.Rows[i].Selected = true;

                    for (int j = 0; j <= i - 1; j++)
                    {
                        reportGrpInvSummaryGv.Rows[j].Selected = false;
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                billPeriodMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                //clean up
                if (_state == ConditionState.All && reportGrpInvSummaryGv.Rows.Count > 0)
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                    {
                        reportGrpInvSummaryGv.Rows.Clear();
                        mtNoMaskedTextBox.ResetText();
                    }
                    _state = ConditionState.All;
                }

                mtNoMaskedTextBox.Enabled = false;
                paidByMaskedTextBox.Enabled = false;
                mtNoMaskedTextBox.ResetText();
                paidByMaskedTextBox.ResetText();
                billPeriodMaskedTextBox.Enabled = true;

                if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim()))
                {
                    billPeriodMaskedTextBox.Focus();
                }
                else
                {
                    showReportButton.Focus();
                }
            }
        }


        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (reportGrpInvSummaryGv.Rows.Count > 0)
                    PreviewReport();
            }
        }

        private void reportGrpInvSummaryGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (reportGrpInvSummaryGv.Columns[e.ColumnIndex].Name == "delColumn")
                reportGrpInvSummaryGv.Rows.RemoveAt(e.RowIndex);
        }

        private void mtNoMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (mtNoRb.Checked && mtNoMaskedTextBox.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(mtNoMaskedTextBox.Text);
                    SetMaskedTextBehavior(mtNoMaskedTextBox, "", true);
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (reportGrpInvSummaryGv.Rows.Count > 0)
                    PreviewReport();
            }
        }

        private void paidByMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (paidByRb.Checked && paidByMaskedTextBox.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(paidByMaskedTextBox.Text.TrimStart('0'));
                    SetMaskedTextBehavior(paidByMaskedTextBox, "", true);
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (reportGrpInvSummaryGv.Rows.Count > 0)
                    PreviewReport();
            }
        }

        private void mtNoRb_CheckedChanged(object sender, EventArgs e)
        {
            if (mtNoRb.Checked)
            {
                if (_state != ConditionState.MtNo)
                {
                    //clean up
                    if (reportGrpInvSummaryGv.Rows.Count > 0)
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            reportGrpInvSummaryGv.Rows.Clear();
                            mtNoMaskedTextBox.ResetText();
                        }
                    }
                    _state = ConditionState.MtNo;
                }

                mtNoMaskedTextBox.Enabled = true;
                mtNoMaskedTextBox.Focus();
                billPeriodMaskedTextBox.Enabled = false;
                billPeriodMaskedTextBox.ResetText();
                paidByMaskedTextBox.ResetText();
                paidByMaskedTextBox.Enabled = false;
            }
        }

        private void paidByRb_CheckedChanged(object sender, EventArgs e)
        {
            if (paidByRb.Checked)
            {
                if (_state != ConditionState.Paidby)
                {
                    //clean up
                    if (reportGrpInvSummaryGv.Rows.Count > 0)
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            reportGrpInvSummaryGv.Rows.Clear();
                            mtNoMaskedTextBox.ResetText();
                        }
                    }
                    _state = ConditionState.Paidby;
                }

                paidByMaskedTextBox.Enabled = true;
                mtNoMaskedTextBox.Enabled = false;
                mtNoMaskedTextBox.ResetText();
                billPeriodMaskedTextBox.Enabled = true;

                if (billPeriodMaskedTextBox.Text.Replace("/", "").Trim() == string.Empty)
                {
                    billPeriodMaskedTextBox.Focus();
                }
                else
                {
                    paidByMaskedTextBox.Focus();
                }

            }
        }


    }
}

