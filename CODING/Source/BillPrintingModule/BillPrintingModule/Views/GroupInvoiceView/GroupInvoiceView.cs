//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Globalization;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class GroupInvoiceView : UserControl, IGroupInvoiceView
    {
        #region "Variables and Properties"

        private string dash = Properties.Resources.PrintSeperatorText;
        private bool _clearCmdFlag = false;
        private bool _isReadyToPrint = false;
        private List<AuthorizedPerson> _approverList;
        private ParamType _paramType = ParamType.PaymentDueDate;
        private PrintCondition _printCondition = PrintCondition.MtNo;

        enum ParamType
        {
            Period =1 ,
            PaymentDueDate
        }

        enum PrintCondition
        {
            MtNo =1, 
            PaidBy 
        }

        public void RefreshApprover()
        {
            GetApprover();
            if (!approverCheck.Checked)
                approverCBox.Enabled = false;
            else
                approverCBox.Enabled = true;
        }

        #endregion

        #region "Code Generated"

        public GroupInvoiceView()
        {
            InitializeComponent();
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                printButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                printButton.Enabled = true;
            }
        }

        public List<AuthorizedPerson> ApproverList
        {
            get { return _approverList; }
            set
            {
                _approverList = value;
                FillApproverCBox();
            }
        }

        public int AvailableBillCount
        {
            set { availableBillCountTxt.Text = value.ToString(); }
        }

        private void FillApproverCBox()
        {
            approverCBox.Enabled = false;
            approverCBox.DataSource = _approverList;
            approverCBox.DisplayMember = "ApproverName";
            approverCBox.ValueMember = "ApproverId";
            approverCBox.Enabled = true;
            if (_approverList.Count > 0)
            {
                approverCBox.SelectedIndex = 0;
                approverCheck.Enabled = true;
            }
            else
            {
                approverCheck.Enabled = false;
                approverCheck.Checked = false;

            }
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public GroupInvoiceViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();
            GetApprover();
        }

        #endregion

        #region "Event Handling"


        private void paidByMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (paidByMaskedTextBox.Text.Length > 12)
                {
                    MessageBox.Show("กรุณาตรวจสอบค่า PaidBy ซึ่งมีความยาวเกินจากที่กำหนด", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    paidByMaskedTextBox.Focus();
                    paidByMaskedTextBox.SelectAll();
                }
                else if (printPaidByRadioButton.Checked && paidByMaskedTextBox.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(paidByMaskedTextBox.Text.TrimStart('0').Trim());
                    SetMaskedTextBehavior(paidByMaskedTextBox, "", true);
                }

            }
        }

        private void mtNoMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (printMtNoRadioButton.Checked && mtNoMaskedTextBox.Text.Trim() != string.Empty)
                {
                    AddToDataGridView(mtNoMaskedTextBox.Text);
                    SetMaskedTextBehavior(mtNoMaskedTextBox, "", true);
                }
            }
        }

        private void groupInvoiceDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (groupInvoiceDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                    groupInvoiceDataGridView.Rows.RemoveAt(e.RowIndex);
            }
        }    

        private void GetApprover()
        {
            _presenter.GetApprover(Session.Branch.Id);
        }        

        private void printButton_Click(object sender, EventArgs e)
        {
            if (!_isReadyToPrint)
            {
                Print();
            }
            else
            {
                DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmPrintingBill, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                    _presenter.PrintSelectedBillHandler();
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            if (_isReadyToPrint)
                _presenter.ClearBillProcessingListViewHandler();

            InitializeControlValue();
        }    

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);

                if (printBranchRadioButton.Checked)
                    printBranchRadioButton.Focus();
                else if (printMruRadioButton.Checked)
                    printMruRadioButton.Focus();
                else if (printPaidByRadioButton.Checked)
                    printPaidByRadioButton.Focus();
                else if (printMtNoRadioButton.Checked)
                    printMtNoRadioButton.Focus();
            }
        }
    
        private void paidByMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    paidByMaskedTextBox.ResetText();
                    paidByMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (groupInvoiceDataGridView.Rows.Count > 0)
                    Print();
            }
        }

        private void mtNoMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    mtNoMaskedTextBox.ResetText();
                    mtNoMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (groupInvoiceDataGridView.Rows.Count > 0)
                    Print();
            }
        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void toMruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void paidByMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mtNoMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        #endregion

        #region "Function"

        private void Print()
        {
            if (ValidateBeforeSubmit())
            {
                    this.Cursor = Cursors.AppStarting;

                    List<String> tmp = new List<String>();
                    GroupInvoiceParam param = new GroupInvoiceParam();
                    param.CommBranchId = Session.Branch.Id;
                    param.BranchId = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                  
                    param.PrintingCondition = (int)PrintingCondition.MtNoPrinting;


                    for (int i = 0; i < groupInvoiceDataGridView.Rows.Count; i++)
                        tmp.Add(groupInvoiceDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString());

                    tmp.Sort();
                    param.Id = tmp;

                    //print approver in bill footer
                    if (approverCheck.Checked && approverCBox.SelectedItem != null)
                    {
                        AuthorizedPerson approver = (AuthorizedPerson)approverCBox.SelectedItem;
                        param.ApproverId = approver.ApproverId;
                        param.ApproverName = approver.ApproverName;
                        param.ApproverPosition = approver.Position;
                    }
                    else
                    {
                        param.ApproverId = "";
                        param.ApproverName = "";
                        param.ApproverPosition = "";
                    }

                    _presenter.PrintGroupInvoiceWithoutCoverPage(param);

                    this.Cursor = Cursors.Default;
                //}
            }
        }

        private void InitializeControlValue()
        {
            dueDateGroupBox.Enabled = true;
            printConditionGroupBox.Enabled = true;
            electricIdGroupBox.Enabled = true;
            groupInvoiceListViewGroupBox.Enabled = true;
            approverGBox.Enabled = true;
            _isReadyToPrint = false;
            printButton.Text = ControlCaption.ShowButton;
            
            groupInvoiceDataGridView.Rows.Clear();
            groupInvoiceDataGridView.AutoGenerateColumns = false;

            billPeriodMaskedTextBox.Enabled = false;
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
            printBranchRadioButton.Checked = false;
            printMruRadioButton.Checked = false;
            printPaidByRadioButton.Checked = false;
            printMtNoRadioButton.Checked = true;
            paidByMaskedTextBox.Enabled = false;
            paidByMaskedTextBox.Text = string.Empty;
            mtNoMaskedTextBox.Enabled = true;
            mtNoMaskedTextBox.Text = string.Empty;
            //approverCheck.Checked = false;
            //approverCBox.Enabled = false;
            electricIdGroupBox.Text = Properties.Resources.InputMtNoText;
            groupInvoiceListViewGroupBox.Text = Properties.Resources.PrintMtNoText;
            availableBillCountTxt.Text = "0";

            mtNoMaskedTextBox.Focus();
        }

        private bool AddToDataGridView(string txt)
        {
            if (!IsRepeatedItem(txt))
            {
                try
                {
                    //clear selected row
                    groupInvoiceDataGridView.ClearSelection();

                    int i = groupInvoiceDataGridView.Rows.Count;
                    groupInvoiceDataGridView.Rows.Add(1);
                    groupInvoiceDataGridView.Rows[i].Cells["electricityIdColumn"].Value = txt;
                    groupInvoiceDataGridView.Rows[i].Selected = true;
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.BLAN, ex);
                    return false;
                    //MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }

            return true;
        }

        private bool IsRepeatedItem(string txt)
            {
                for (int i = 0; i < groupInvoiceDataGridView.Rows.Count; i++)
                {
                    if (txt == (string)groupInvoiceDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    return true;
                    }

            return false;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                mtNoMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = true; //always true for print all 
            if (printMtNoRadioButton.Checked)
            {
                if (groupInvoiceDataGridView.Rows.Count == 0)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingMtNo, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    mtNoMaskedTextBox.Focus();
                    mtNoMaskedTextBox.SelectAll();
                }
            }
            else if (printPaidByRadioButton.Checked) //paid by
            {
                if ( periodRb.Checked && (!billPeriodMaskedTextBox.MaskCompleted || billPeriodMaskedTextBox.Text.Replace("/", "").Trim() == string.Empty))
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    billPeriodMaskedTextBox.Focus();
                    billPeriodMaskedTextBox.SelectAll();
                }
                else if (paymentDueDateRb.Checked && (!paymentDueDateText.MaskCompleted || paymentDueDateText.Text.Replace("/", "").Trim() == string.Empty))
                {
                    isValidated = false;
                    MessageBox.Show("กรุณาป้อนวันที่กำหนดชำระเงิน", MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    paymentDueDateText.Focus();
                    paymentDueDateText.SelectAll();
                }
                else if (groupInvoiceDataGridView.Rows.Count == 0)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingPaidBy, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    paidByMaskedTextBox.Focus();
                    paidByMaskedTextBox.SelectAll();
                }  
            }
            else if (printBranchRadioButton.Checked || printMruRadioButton.Checked)
            {
                if (billPeriodMaskedTextBox.Text == string.Empty || billPeriodMaskedTextBox.MaskCompleted == false)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    billPeriodMaskedTextBox.Focus();
                    billPeriodMaskedTextBox.SelectAll();
                }
                else if (groupInvoiceDataGridView.Rows.Count == 0)
                {
                    isValidated = false;
                    MessageBox.Show(MessageBoxText.MsgMissingElectricId, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    mtNoMaskedTextBox.Focus();
                    mtNoMaskedTextBox.SelectAll();
                }
            }

            return isValidated;
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        public void LockView(bool isLock)
        {
            if (isLock)
            {
                dueDateGroupBox.Enabled = false;
                printConditionGroupBox.Enabled = false;
                electricIdGroupBox.Enabled = false;
                groupInvoiceListViewGroupBox.Enabled = false;
                approverGBox.Enabled = false;
                _isReadyToPrint = true;
                printButton.Text = ControlCaption.PrintButton;
                printButton.Enabled = true;
                printButton.Focus();
            }
            else
            {
                dueDateGroupBox.Enabled = true;
                printConditionGroupBox.Enabled = true;
                electricIdGroupBox.Enabled = true;
                groupInvoiceListViewGroupBox.Enabled = true;
                approverGBox.Enabled = true;
                availableBillCountTxt.Text = "0";
                _isReadyToPrint = false;
                printButton.Text = ControlCaption.ShowButton;
                billPeriodMaskedTextBox.Focus();
            }
        }

        #endregion

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
                billPeriodMaskedTextBox.Enabled = true;
        }

        private void approverCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (!approverCheck.Checked)
                approverCBox.Enabled = false;
            else
                approverCBox.Enabled = true;
        }

        private void printPaidByRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printPaidByRadioButton.Checked)
            {
                paymentDueDateText.Enabled = true;
                paymentDueDateRb.Enabled = true;
                paymentDueDateRb.Checked = true;
                periodRb.Enabled = true;
                billPeriodMaskedTextBox.Enabled = false;
                paymentDueDateText.Focus();

                paidByMaskedTextBox.Enabled = true;
                mtNoMaskedTextBox.Enabled = false;
                mtNoMaskedTextBox.ResetText();

                if (_printCondition == PrintCondition.MtNo)
                {
                    groupInvoiceDataGridView.Rows.Clear();
                }

                _printCondition = PrintCondition.PaidBy;
            }
            else
            {
                paymentDueDateText.Enabled = false;
                billPeriodMaskedTextBox.Enabled = false;
                paymentDueDateRb.Enabled = false;
                periodRb.Enabled = false;
            }
        }

        private void printMtNoRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printMtNoRadioButton.Checked)
            {
                paymentDueDateText.Enabled =  false;
                billPeriodMaskedTextBox.Enabled = false;
                paymentDueDateRb.Enabled = false;
                periodRb.Enabled = false;                

                mtNoMaskedTextBox.Enabled = true;
                mtNoMaskedTextBox.Focus();
                paidByMaskedTextBox.Enabled = false;
                paidByMaskedTextBox.ResetText();

                if (_printCondition == PrintCondition.PaidBy)
                {
                    groupInvoiceDataGridView.Rows.Clear();
                }

                _printCondition = PrintCondition.MtNo;
            }
            else
            {
                paymentDueDateText.Enabled = true;
                paymentDueDateRb.Enabled = true;
                paymentDueDateRb.Checked = true;
                periodRb.Enabled = true;
                billPeriodMaskedTextBox.Enabled = false;
                paymentDueDateText.Focus();
            }
        }

        private void periodRb_CheckedChanged(object sender, EventArgs e)
        {
            if (periodRb.Checked)
            {
                billPeriodMaskedTextBox.Enabled = true;
                paymentDueDateText.Enabled = false;
                billPeriodMaskedTextBox.Focus();
                paymentDueDateText.ResetText();

                if (_paramType == ParamType.PaymentDueDate)
                    groupInvoiceDataGridView.Rows.Clear();

                _paramType = ParamType.Period;
            }
        }

        private void paymentDueDateRb_CheckedChanged(object sender, EventArgs e)
        {
            if (paymentDueDateRb.Checked)
            {
                billPeriodMaskedTextBox.Enabled = false;
                paymentDueDateText.Enabled = true;
                paymentDueDateText.Focus();
                billPeriodMaskedTextBox.ResetText();

                if (_paramType == ParamType.Period)
                    groupInvoiceDataGridView.Rows.Clear();

                _paramType = ParamType.PaymentDueDate;
            }
        }

        private void paymentDueDateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (ValidateDate(paymentDueDateText.Text))
                {
                    paidByMaskedTextBox.Focus();
                }
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบวันที่ของวันชำระเงิน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    paymentDueDateText.ResetText();
                    paymentDueDateText.SelectAll();
                }
            }          
        }

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                if (ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    paidByMaskedTextBox.Focus();
                }
                else
                {
                    MessageBox.Show("กรุณาตรวจสอบวันที่ของรอบเดือนกำหนดชำระ", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.ResetText();
                    billPeriodMaskedTextBox.SelectAll();
                }
            }
            
        }

        private bool ValidateDate(string date)
        {
            if (CustomValidation.ValidateDate(date))
                return true;
            else
                return false;
        }

        private void Item1_Click(object sender, EventArgs e)
        {
            DoPaste();
        }

        private void DoPaste()
        {
            try
            {
                string s = Clipboard.GetText();
                string[] lines = s.Split(new char[] { '\r' });

                for (int i = 0; i < lines.Length - 1; i++)
                    if (!AddToDataGridView(lines[i].Replace("\n", ""))) break;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void groupInvoiceDataGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.V)
                DoPaste();
        }



    
      
    }
}

