//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using System.Drawing;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using System.Collections.Generic;
using System.Collections;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;
using System.Globalization;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Text.RegularExpressions;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;

namespace PEA.BPM.BillPrintingModule
{
    [SmartPart]
    public partial class A4BillView : UserControl, IA4BillView
    {
        #region "Properties and Variables"
        
        private string dash = Properties.Resources.PrintSeperatorText;
        private string rbFlag = ""; //A = All, B = Branch, M = Mru, U = User
        private bool _clearCmdFlag = false;
        private bool _isReadyToPrint = false;
        private List<String> _childBranch;
        private List<AuthorizedPerson> _approverList;

        public List<AuthorizedPerson> ApproverList
        {
            get { return _approverList; }
            set { 
                _approverList = value;
                FillApproverCBox();
            }
        }

        public void RefreshApprover()
        {
            GetApprover();
            if (approverCheck.Checked)
                approverCBox.Enabled = true;
            else
                approverCBox.Enabled = false;
        }

        public void OnWaitCursor(bool set)
        {
            if (set)
            {
                this.Cursor = Cursors.WaitCursor;
                printButton.Enabled = false;
            }
            else
            {
                this.Cursor = Cursors.Default;
                printButton.Enabled = true;
            }
        }

        private void FillApproverCBox()
        {
            approverCBox.Enabled = false;
            approverCBox.DataSource = _approverList;
            approverCBox.DisplayMember = "ApproverName";
            approverCBox.ValueMember = "ApproverId";
            //approverCBox.Enabled = true;
            if (_approverList.Count > 0)
            {
                approverCBox.SelectedIndex = 0;
                approverCheck.Enabled = true;
            }
            else
            {
                approverCheck.Enabled = false;
                approverCheck.Checked = false;
            }
        }

        #endregion

        #region "Code Generated"

        public A4BillView()
        {
            InitializeComponent();           
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public A4BillViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            InitializeControlValue();

            try
            {
                _childBranch = CodeTable.Instant.ListChildBranchByParent(Session.Branch.Id);
                GetApprover();
            }
            catch // TODO: ตั้งใจ ?
            {
                //ignored
            }
        }

        #endregion

        #region "Event Handing"

        private void Print()
        {
            if (ValidateBeforeSubmit() )
            {
                    this.Cursor = Cursors.AppStarting;
                    BillPrintingConditionParam param = new BillPrintingConditionParam();
                    param.CommBranchId = Session.Branch.Id;
                    param.PrintedBy = Session.User.Id;
                    OverlapHelper oh = new OverlapHelper();
                    List<string> input = new List<string>();

                    if (printAllRadioButton.Checked )
                        param.BillPrintingCondition = (int)PrintingCondition.AllPrinting;
                    else if (printBranchRadioButton.Checked)
                        param.BillPrintingCondition = (int)PrintingCondition.BranchPrinting;
                    else if (printMruRadioButton.Checked )
                        param.BillPrintingCondition = (int)PrintingCondition.MruPrinting;
                    else if (printUserRadioButton.Checked )
                        param.BillPrintingCondition = (int)PrintingCondition.UserPrinting;
                    else if (printBillSeqRadioButton.Checked)
                        param.BillPrintingCondition = (int)PrintingCondition.BillSeqPrinting;

                    if(!printBillSeqRadioButton.Checked)
                    param.BillPeriod = billPeriodMaskedTextBox.Text.Substring(3, 4) + billPeriodMaskedTextBox.Text.Substring(0, 2);

                    param.BillType = (int)BillType.A4Bill;

                    //Feature added Nov,18: to choose only unprinted bill
                    if (onlyUnprintRb.Checked)
                        param.A4Reprint = 0;
                    else
                        param.A4Reprint = 1;

                    if (printAllRadioButton.Checked)
                    {
                        string[] printBranch = { Session.Branch.Id };
                        param.GroupElectricId = printBranch;
                    }
                    else if(printBranchRadioButton.Checked || printMruRadioButton.Checked)
                    {
                        string[] id = new string[a4BillDataGridView.Rows.Count];
                        for (int i = 0; i < a4BillDataGridView.Rows.Count; i++)
                        {
                            id[i] = a4BillDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                            if (printMruRadioButton.Checked )
                                oh.Check(id[i]);
                        }

                        param.GroupElectricId = (printMruRadioButton.Checked ? oh.GetResult().ToArray() : id);
                    }
                    else if (printUserRadioButton.Checked)
                    {
                        param.BillPrintingCondition = (int)PrintingCondition.UserPrinting;
                        if (a4BillDataGridView.Rows.Count != 0)
                        {
                            //From UserId - To User Id
                            for (int i = 0; i < a4BillDataGridView.Rows.Count; i++)
                                input.Add(a4BillDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString());

                            param.GroupElectricId = input.ToArray();
                        }
                    }
                    else if (printBillSeqRadioButton.Checked)
                    {
                        param.BillPrintingCondition = (int)PrintingCondition.BillSeqPrinting;
                        if (a4BillDataGridView.Rows.Count != 0)
                        {
                            //From Bill Seq Number - To Bill Seq Number
                            for (int i = 0; i < a4BillDataGridView.Rows.Count; i++)
                                input.Add(a4BillDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString());

                            param.GroupElectricId = input.ToArray();
                        }
                    }

                    //print approver in bill footer
                    if (approverCheck.Checked && approverCBox.SelectedItem != null)
                    {
                        AuthorizedPerson approver = (AuthorizedPerson)approverCBox.SelectedItem;
                        param.ApproverId = approver.ApproverId;
                        param.ApproverName = approver.ApproverName;
                        param.ApproverPosition = approver.Position;
                    }
                    else
                    {
                        param.ApproverId = "";
                        param.ApproverName = "";
                        param.ApproverPosition = "";
                    }

                    _presenter.PrintA4BillAndReceipt(param);
                    this.Cursor = Cursors.Default;
            }
        }

        private void printButton_Click(object sender, EventArgs e)
        {
            if (!_isReadyToPrint)
            {
                Print();
            }
            else
            {
                 DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmPrintingBill, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                 if (dr == DialogResult.Yes)
                     _presenter.PrintSelectedBillHandler();
            }

        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            if (_isReadyToPrint)
                _presenter.ClearBillProcessingListViewHandler();
            
            InitializeControlValue();
        }

        private void printAllRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printAllRadioButton.Checked)
            {
                pickBillGb.Enabled = false;
                billPeriodMaskedTextBox.Enabled = true;
                onlyUnprintRb.Checked = true;
                if (a4BillDataGridView.Rows.Count != 0)
                {
                    if (rbFlag != "A")
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            printBranchRadioButton.Checked = false;
                            printMruRadioButton.Checked = false;
                            printUserRadioButton.Checked = false;
                            branchIdMaskedTextBox.Enabled = false;
                            branchIdMaskedTextBox.Text = string.Empty;
                            mruIdMaskedTextBox.Enabled = false;
                            mruIdMaskedTextBox.Text = string.Empty;
                            toMruIdMaskedTextBox.Enabled = false;
                            toMruIdMaskedTextBox.Text = string.Empty;
                            fromNumberMaskedTextBox.Enabled = false;
                            fromNumberMaskedTextBox.Clear();
                            toNumberMaskedTextBox.Enabled = false;
                            toNumberMaskedTextBox.Clear();
                            electricIdGroupBox.Text = Properties.Resources.PrintAllText;
                            a4BillListViewGroupBox.Text = Properties.Resources.PrintAllText;
                            a4BillDataGridView.Rows.Clear();
                            if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                            rbFlag = "A";
                        }
                        else// user don't change the radioButton
                        {
                            if (rbFlag == "B")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = true;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "M")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = true;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "U")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = true;
                            }
                        }
                    }                    
                }
                else
                {
                    printBranchRadioButton.Checked = false;
                    printMruRadioButton.Checked = false;
                    printUserRadioButton.Checked = false;
                    branchIdMaskedTextBox.Enabled = false;
                    branchIdMaskedTextBox.Text = string.Empty;
                    mruIdMaskedTextBox.Enabled = false;
                    mruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Enabled = false;
                    toMruIdMaskedTextBox.Text = string.Empty;
                    fromNumberMaskedTextBox.Enabled = false;
                    fromNumberMaskedTextBox.Clear();
                    toNumberMaskedTextBox.Enabled = false;
                    toNumberMaskedTextBox.Clear();
                    electricIdGroupBox.Text = Properties.Resources.PrintAllText;
                    a4BillListViewGroupBox.Text = Properties.Resources.PrintAllText;
                    a4BillDataGridView.Rows.Clear();
                    if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                    rbFlag = "A";
                }
            }
        }

        private void printBranchRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBranchRadioButton.Checked)
            {
                onlyUnprintRb.Checked = true;
                billPeriodMaskedTextBox.Enabled = true;
                pickBillGb.Enabled = true;
                if (a4BillDataGridView.Rows.Count != 0)
                {
                    if (rbFlag != "B")
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            printAllRadioButton.Checked = false;
                            printMruRadioButton.Checked = false;
                            printUserRadioButton.Checked = false;
                            branchIdMaskedTextBox.Enabled = true;
                            branchIdMaskedTextBox.Text = string.Empty;
                            mruIdMaskedTextBox.Enabled = false;
                            mruIdMaskedTextBox.Text = string.Empty;
                            toMruIdMaskedTextBox.Text = string.Empty;
                            toMruIdMaskedTextBox.Enabled = false;
                            fromNumberMaskedTextBox.Enabled = false;
                            fromNumberMaskedTextBox.Text = string.Empty;
                            toNumberMaskedTextBox.Enabled = false;
                            toNumberMaskedTextBox.Text = string.Empty;
                            electricIdGroupBox.Text = Properties.Resources.PrintBranchText;
                            SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                            a4BillListViewGroupBox.Text = Properties.Resources.PrintBranchText;
                            a4BillDataGridView.Rows.Clear();
                            if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                            rbFlag = "B";
                        }
                        else
                        {
                            if (rbFlag == "A")
                            {
                                printAllRadioButton.Checked = true;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "M")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = true;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "U")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = true;
                            }
                        }
                    }                    
                }
                else
                {
                    printAllRadioButton.Checked = false;
                    printMruRadioButton.Checked = false;
                    printUserRadioButton.Checked = false;
                    branchIdMaskedTextBox.Enabled = true;
                    branchIdMaskedTextBox.Text = string.Empty;
                    mruIdMaskedTextBox.Enabled = false;
                    mruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Enabled = false;
                    fromNumberMaskedTextBox.Enabled = false;
                    fromNumberMaskedTextBox.Clear();
                    toNumberMaskedTextBox.Enabled = false;
                    toNumberMaskedTextBox.Clear();
                    electricIdGroupBox.Text = Properties.Resources.PrintBranchText;
                    SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                    a4BillListViewGroupBox.Text = Properties.Resources.PrintBranchText;
                    a4BillDataGridView.Rows.Clear();
                    if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                    rbFlag = "B";
                }
            }
        }

        private void printMruRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printMruRadioButton.Checked)
            {
                onlyUnprintRb.Checked = true;
                billPeriodMaskedTextBox.Enabled = true;
                pickBillGb.Enabled = true;
                if (a4BillDataGridView.Rows.Count != 0)
                {
                    if (rbFlag != "M")
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            printAllRadioButton.Checked = false;
                            printBranchRadioButton.Checked = false;
                            printUserRadioButton.Checked = false;
                            branchIdMaskedTextBox.Enabled = true;
                            mruIdMaskedTextBox.Enabled = true;
                            toMruIdMaskedTextBox.Enabled = true;
                            fromNumberMaskedTextBox.Enabled = false;
                            toNumberMaskedTextBox.Enabled = false;
                            electricIdGroupBox.Text = Properties.Resources.PrintBranchText + Properties.Resources.PrintSeperatorText + Properties.Resources.PrintMruText;
                            a4BillListViewGroupBox.Text = Properties.Resources.PrintBranchText + Properties.Resources.PrintSeperatorText + Properties.Resources.PrintMruText;
                            SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                            SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, false);
                            a4BillDataGridView.Rows.Clear();
                            if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                            rbFlag = "M";
                        }
                        else
                        {
                            if (rbFlag == "A")
                            {
                                printAllRadioButton.Checked = true;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "B")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = true;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "U")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = true;
                            }
                        }
                    }
                }
                else
                {
                    printAllRadioButton.Checked = false;
                    printBranchRadioButton.Checked = false;
                    printUserRadioButton.Checked = false;
                    branchIdMaskedTextBox.Enabled = true;
                    mruIdMaskedTextBox.Enabled = true;
                    toMruIdMaskedTextBox.Enabled = true;
                    fromNumberMaskedTextBox.Enabled = false;
                    toNumberMaskedTextBox.Enabled = false;
                    electricIdGroupBox.Text = Properties.Resources.PrintBranchText + Properties.Resources.PrintSeperatorText + Properties.Resources.PrintMruText;
                    a4BillListViewGroupBox.Text = Properties.Resources.PrintBranchText + Properties.Resources.PrintSeperatorText + Properties.Resources.PrintMruText;
                    SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                    SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, false);
                    a4BillDataGridView.Rows.Clear();
                    if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                    rbFlag = "M";
                }
            }
        }

        private void printUserRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printUserRadioButton.Checked)
            {
                fromNumberMaskedTextBox.Mask = MaskedValue.ElectricUserId;
                toNumberMaskedTextBox.Mask = MaskedValue.ElectricUserId;
                billPeriodMaskedTextBox.Enabled = true;
                a4BillDataGridView.Enabled = true;
                chooseAllRb.Checked = true;
                pickBillGb.Enabled = false;
                if (a4BillDataGridView.Rows.Count != 0)
                {
                    if (rbFlag != "U")
                    {
                        DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dr == DialogResult.Yes)
                        {
                            printAllRadioButton.Checked = false;
                            printBranchRadioButton.Checked = false;
                            printMruRadioButton.Checked = false;
                            branchIdMaskedTextBox.Enabled = false;
                            branchIdMaskedTextBox.Text = string.Empty;
                            mruIdMaskedTextBox.Enabled = false;
                            mruIdMaskedTextBox.Text = string.Empty;
                            toMruIdMaskedTextBox.Enabled = false;
                            toMruIdMaskedTextBox.Text = string.Empty;
                            fromNumberMaskedTextBox.Enabled = true;
                            toNumberMaskedTextBox.Enabled = true;
                            electricIdGroupBox.Text = Properties.Resources.PrintUserText;
                            a4BillListViewGroupBox.Text = Properties.Resources.PrintUserText;
                            SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricUserId, true);
                            a4BillDataGridView.Rows.Clear();
                            a4BillDataGridView.Columns["electricityIdColumn"].HeaderText = "หมายเลขผู้ใช้ไฟ";
                            //itemTxt.Text = "หมายเลขผู้ใช้ไฟ :";
                            if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                            rbFlag = "U";
                        }
                        else
                        {
                            if (rbFlag == "A")
                            {
                                printAllRadioButton.Checked = true;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "B")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = true;
                                printMruRadioButton.Checked = false;
                                printUserRadioButton.Checked = false;
                            }
                            else if (rbFlag == "M")
                            {
                                printAllRadioButton.Checked = false;
                                printBranchRadioButton.Checked = false;
                                printMruRadioButton.Checked = true;
                                printUserRadioButton.Checked = false;
                            }
                        }
                    }
                }
                else
                {
                    printAllRadioButton.Checked = false;
                    printBranchRadioButton.Checked = false;
                    printMruRadioButton.Checked = false;
                    branchIdMaskedTextBox.Enabled = false;
                    branchIdMaskedTextBox.Text = string.Empty;
                    mruIdMaskedTextBox.Enabled = false;
                    mruIdMaskedTextBox.Text = string.Empty;
                    toMruIdMaskedTextBox.Enabled = false;
                    toMruIdMaskedTextBox.Text = string.Empty;
                    fromNumberMaskedTextBox.Enabled = true;
                    toNumberMaskedTextBox.Enabled = true;
                    electricIdGroupBox.Text = Properties.Resources.PrintUserText;
                    a4BillListViewGroupBox.Text = Properties.Resources.PrintUserText;
                    SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricUserId, true);
                    a4BillDataGridView.Columns["electricityIdColumn"].HeaderText = "หมายเลขผู้ใช้ไฟ";
                    a4BillDataGridView.Rows.Clear();
                    //itemTxt.Text = "หมายเลขผู้ใช้ไฟ :";
                    if (string.IsNullOrEmpty(billPeriodMaskedTextBox.Text.Replace("/", "").Trim())) billPeriodMaskedTextBox.Focus();
                    rbFlag = "U";
                }
            }
        }

        private void printBillSeqRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (printBillSeqRadioButton.Checked)
            {
                billPeriodMaskedTextBox.Enabled = false;
                billPeriodMaskedTextBox.Clear();
                if (a4BillDataGridView.Rows.Count != 0 && rbFlag != "S")
                {
                    DialogResult dr = MessageBox.Show(MessageBoxText.MsgConfirmConditionChanged, MessageBoxText.CaptionConfirm, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr != DialogResult.Yes)
                        return;
                }

                printAllRadioButton.Checked = false;
                printBranchRadioButton.Checked = false;
                printMruRadioButton.Checked = false;
                printUserRadioButton.Checked = false;
                branchIdMaskedTextBox.Enabled = false;
                branchIdMaskedTextBox.Clear();
                mruIdMaskedTextBox.Enabled = false;
                mruIdMaskedTextBox.Clear();
                toMruIdMaskedTextBox.Enabled = false;
                toMruIdMaskedTextBox.Clear();
                fromNumberMaskedTextBox.Enabled = true;
                toNumberMaskedTextBox.Enabled = true;
                electricIdGroupBox.Text = Properties.Resources.PrintBillSeqText;
                a4BillListViewGroupBox.Text = Properties.Resources.PrintBillSeqText;
                SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricBillSeq, true);
                a4BillDataGridView.Rows.Clear();
                a4BillDataGridView.Columns["electricityIdColumn"].HeaderText = Properties.Resources.PrintBillSeqText;
                //itemTxt.Text = "เลขลำดับ :";
                fromNumberMaskedTextBox.Mask = MaskedValue.ElectricBillSeq;
                toNumberMaskedTextBox.Mask = MaskedValue.ElectricBillSeq;
                a4BillDataGridView.Enabled = true;
                chooseAllRb.Checked = true;
                pickBillGb.Enabled = false;
                
                rbFlag = "S";
            }
        }

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return && billPeriodMaskedTextBox.MaskCompleted)
            {
                if (ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    if (billPeriodMaskedTextBox.MaskCompleted == true)
                    {
                        switch (rbFlag)
                        {
                            case "A":
                                //printAllRadioButton.Focus();
                                printButton.Focus();
                                break;
                            case "B":
                                branchIdMaskedTextBox.Focus();
                                break;
                            case "M":
                                branchIdMaskedTextBox.Focus();
                                break;
                            case "U":
                                fromNumberMaskedTextBox.Focus();
                                break;
                            default:
                                printAllRadioButton.Focus();
                                break;
                        }
                    }
                }
                else
                {
                    MessageBox.Show(MessageBoxText.MsgWrongFormatBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.ResetText();
                    billPeriodMaskedTextBox.SelectAll();
                }
            }
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    //if (ValidateBranchLevel())
                    //{
                        if (printBranchRadioButton.Checked == true)
                        {
                            AddToDataGridView(ToUpperCase(branchIdMaskedTextBox));
                            SetMaskedTextBehavior(branchIdMaskedTextBox, MaskedValue.ElectricBranchId, false);
                        }
                        else if (printMruRadioButton.Checked == true || printUserRadioButton.Checked == true)
                        {
                            SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                        }
                    //}
                    //else // in the case where branch level = 1,2 and input branch id != session branch id
                    //{
                    //    MessageBox.Show(MessageBoxText.MsgOnlyChildBranchAllowed, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //}
                }
                else if (printBranchRadioButton.Checked) //special feature added May, 6 '08, wildcard selection
                {
                    if (branchIdMaskedTextBox.Text.Length > 2 && branchIdMaskedTextBox.Text.Length < 6)
                    {
                        List<string> branchList = CustomValidation.FindBranchByWildCard(branchIdMaskedTextBox.Text, _childBranch);
                        branchList.Sort();
                        foreach (string branch in branchList)
                            AddToDataGridView(branch.ToUpper());
                    }
                }
            }            
        }

        private void mruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (printMruRadioButton.Checked == true &&
                 branchIdMaskedTextBox.Text.Length == 6 &&
                 mruIdMaskedTextBox.Text.Length == 4)
                {                    
                    SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                }
                else if (printUserRadioButton.Checked == true &&
                    branchIdMaskedTextBox.Text.Length == 6 &&
                    mruIdMaskedTextBox.Text.Length == 4)
                {
                    //then focus on branchIdMaskedTextBox
                    SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricUserId, true);
                }
            }
        }
        
        private void toMruIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)Keys.Return)
                {
                    if (printMruRadioButton.Checked &&
                     branchIdMaskedTextBox.MaskCompleted &&
                     mruIdMaskedTextBox.MaskCompleted &&
                     (toMruIdMaskedTextBox.MaskCompleted ||
                     toMruIdMaskedTextBox.Text == string.Empty))
                    {
                        string branchId = ToUpperCase(branchIdMaskedTextBox);

                        if (toMruIdMaskedTextBox.Text != string.Empty)
                        {
                            //we have mask so feel free to cast digits
                            int fromMru = Convert.ToInt32(mruIdMaskedTextBox.Text);
                            int toMru = Convert.ToInt32(toMruIdMaskedTextBox.Text);
                            if (fromMru > toMru)
                            {
                                mruIdMaskedTextBox.Text = toMru.ToString().PadLeft(4, '0');
                                toMruIdMaskedTextBox.Text = fromMru.ToString().PadLeft(4, '0');
                            }
                            
                            AddToDataGridView(branchId + dash + mruIdMaskedTextBox.Text + dash + toMruIdMaskedTextBox.Text);
                        }
                        else //user leave blank and press enter = no mruId-range required
                            AddToDataGridView(branchId + dash + mruIdMaskedTextBox.Text);

                        SetMaskedTextBehavior(toMruIdMaskedTextBox, MaskedValue.ElectricMruId, false);
                        SetMaskedTextBehavior(mruIdMaskedTextBox, MaskedValue.ElectricMruId, true);
                    }
                }
            }
            catch
            {
                MessageBox.Show(null, "ป้อนข้อมูลการพิมพ์ไม่ถูกต้อง กรุณาตรวจสอบ", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void a4BillDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1)
            {
                //MessageBox.Show("จะกด Column Header ไปทำไมกันครับ");
            }
            else if (a4BillDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
            {
                a4BillDataGridView.Rows.RemoveAt(e.RowIndex);
            }            
        }

        private void approvedByGroupBox_Enter(object sender, EventArgs e)
        {
            printButton.Focus();
        }

        private void billPeriodMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                IFormatProvider formatDate = CultureInfo.CreateSpecificCulture("th-TH");
                billPeriodMaskedTextBox.Text = DateTime.Now.ToString("MMyyyy", formatDate);

                if (printBranchRadioButton.Checked)
                    printBranchRadioButton.Focus();
                else if (printMruRadioButton.Checked)
                    printMruRadioButton.Focus();
                else if (printUserRadioButton.Checked)
                    printUserRadioButton.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (printAllRadioButton.Checked)
                    Print();
            }
        }

        private void branchIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                if (printBranchRadioButton.Checked)
                    printBranchRadioButton.Focus();
                else if (printMruRadioButton.Checked)
                    printMruRadioButton.Focus();
                else if (printUserRadioButton.Checked)
                    printUserRadioButton.Focus();
                else
                    printAllRadioButton.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (a4BillDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    branchIdMaskedTextBox.ResetText();
                    branchIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if(e.KeyCode == Keys.N)
            {
                branchIdMaskedTextBox.Text = Session.Branch.Id;
            }
        }

        private void mruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (a4BillDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    mruIdMaskedTextBox.ResetText();
                    mruIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.Up)
                branchIdMaskedTextBox.Focus();
            else if (e.KeyCode == Keys.Down)
                toMruIdMaskedTextBox.Focus();
        }

        private void toMruIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                if (a4BillDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    toMruIdMaskedTextBox.ResetText();
                    toMruIdMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.Up)
            {
                mruIdMaskedTextBox.Focus();
            }
        }

        private void userIdMaskedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && !string.IsNullOrEmpty(fromNumberMaskedTextBox.Text.Trim()))
            {
                toNumberMaskedTextBox.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                if (a4BillDataGridView.Rows.Count > 0)
                    Print();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (_clearCmdFlag)
                {
                    _clearCmdFlag = false;
                    DialogResult dlg = MessageBox.Show(null, "คุณต้องการล้างข้อมูลที่ป้อนทั้งหมดใช่ไช่หรือไม่", "คำเตือน", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        InitializeControlValue();
                }
                else
                {
                    fromNumberMaskedTextBox.ResetText();
                    fromNumberMaskedTextBox.Focus();
                    _clearCmdFlag = true;
                }
            }
            else if (e.KeyCode == Keys.Up)
            {
                printUserRadioButton.Focus();
            }

        }

        private void branchIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void mruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void toMruIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void userIdMaskedTextBox_TextChanged(object sender, EventArgs e)
        {
            _clearCmdFlag = false;
        }

        private void approverCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (!approverCheck.Checked)
                approverCBox.Enabled = false;
            else
                approverCBox.Enabled = true;
        }

        #endregion

        #region "Function"

        private void InitializeControlValue()
        {
            printConditionGroupBox.Enabled = true;
            electricIdGroupBox.Enabled = true;
            a4BillListViewGroupBox.Enabled = true;
            approverGBox.Enabled = true;
            pickBillGb.Enabled = true;
            a4BillDataGridView.Enabled = false;
            a4BillDataGridView.Columns["electricityIdColumn"].HeaderText = "รหัสการไฟฟ้า";
            a4BillDataGridView.Rows.Clear();
            billPeriodGroupBox.Enabled = true;
            billPeriodMaskedTextBox.Enabled = true;
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodMonthYear;
            printAllRadioButton.Checked = true;
            printBranchRadioButton.Checked = false;
            printMruRadioButton.Checked = false;
            printUserRadioButton.Checked = false;
            branchIdMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Enabled = false;
            mruIdMaskedTextBox.Text = string.Empty;
            mruIdMaskedTextBox.Enabled = false;
            toMruIdMaskedTextBox.Text = string.Empty;
            toMruIdMaskedTextBox.Enabled = false;
            fromNumberMaskedTextBox.Text = string.Empty;
            fromNumberMaskedTextBox.Enabled = false;
            toNumberMaskedTextBox.Enabled = false;
            approverCheck.Checked = false;
            approverCBox.Enabled = false;
            printButton.Text = ControlCaption.ShowButton;
            _isReadyToPrint = false;
            pickBillGb.Enabled = false;
            onlyUnprintRb.Checked = true;
            billPeriodMaskedTextBox.Focus();
            rbFlag = "A";
        }

        private void GetApprover()
        {
            _presenter.GetApprover(Session.Branch.Id);
        }

        private bool AddToDataGridView(string txt)
        {
            a4BillDataGridView.Enabled = true;

            if (!IsRepeatedItem(txt))
            {
                try
                {
                    //clear selected row
                    a4BillDataGridView.ClearSelection();

                    int i = a4BillDataGridView.Rows.Count;
                    a4BillDataGridView.Rows.Add(1);
                    a4BillDataGridView.Rows[i].Cells["electricityIdColumn"].Value = txt;
                    a4BillDataGridView.Rows[i].Selected = true;

                }
                catch (Exception ex)
                {
                    MessageBox.Show(MessageBoxText.MsgGeneralError + ex.Message, MessageBoxText.CaptionError, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }              
            }

            return true;
        }

        private bool IsRepeatedItem(string txt)
            {
                for (int i = 0; i < a4BillDataGridView.Rows.Count; i++)
                {
                    if (txt == (string)a4BillDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                    return true;
                    }

            return false;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {
            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                branchIdMaskedTextBox.Focus();
            }
            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;           
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = false;
            if (!printBillSeqRadioButton.Checked && (!billPeriodMaskedTextBox.MaskCompleted || 
                ValidateDate(billPeriodMaskedTextBox.Text) == false))
            {
                isValidated = false;
                MessageBox.Show(MessageBoxText.MsgWrongFormatBillPeriod, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billPeriodMaskedTextBox.Focus();
                billPeriodMaskedTextBox.SelectAll();
            }
            else if (printAllRadioButton.Checked == false && a4BillDataGridView.Rows.Count == 0)
            {
                isValidated = false;
                string errTxt = string.Empty;

                if (printBranchRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingBranchId;
                else if (printMruRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingBranchIdMruId;
                else if(printUserRadioButton.Checked)
                    errTxt = MessageBoxText.MsgMissingCaId;
                else
                    errTxt = MessageBoxText.MsgMissingBillSeqNo;

                MessageBox.Show(errTxt, MessageBoxText.CaptionWarning, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                branchIdMaskedTextBox.Focus();
            } 
            else
            {
                isValidated = true;
            }

            return isValidated;
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private bool ValidateBranchLevel()
        {            
            bool _flag = false;

            if (_childBranch.Contains(ToUpperCase(branchIdMaskedTextBox)))
                _flag = true;
            else
                _flag = false;

            return _flag;
        }

        public void LockView(bool isLock)
        {
            if (isLock)
            {
                billPeriodGroupBox.Enabled = false;
                billPeriodMaskedTextBox.Enabled = false;
                printConditionGroupBox.Enabled = false;
                electricIdGroupBox.Enabled = false;
                a4BillListViewGroupBox.Enabled = false;
                approverGBox.Enabled = false;
                pickBillGb.Enabled = false;
                _isReadyToPrint = true;
                printButton.Text = ControlCaption.PrintButton;
                printButton.Enabled = true;
                printButton.Focus();
            }
            else
            {
                billPeriodGroupBox.Enabled = true;
                billPeriodMaskedTextBox.Enabled = true;
                printConditionGroupBox.Enabled = true;
                electricIdGroupBox.Enabled = true;
                a4BillListViewGroupBox.Enabled = true;

                if(!printAllRadioButton.Checked && !printUserRadioButton.Checked)
                    pickBillGb.Enabled = true;

                approverGBox.Enabled = true;
                _isReadyToPrint = false;
                printButton.Text = ControlCaption.ShowButton;
                billPeriodMaskedTextBox.Focus();
            }
        }

        private bool ValidateDate(string date)
        {
            if (CustomValidation.ValidateDate(date))
                return true;
            else
                return false;
        }

        #endregion               

        private void caListImg_Click(object sender, EventArgs e)
        {
            CAInputList caList = new CAInputList();
            caList.ShowDialog();
        }

        private void DoPaste()
        {
            try
            {
                string s = Clipboard.GetText();
                string[] lines = s.Split(new char[] { '\r' });
       
                for (int i = 0; i < lines.Length - 1; i++)
                    if (!AddToDataGridView(lines[i].Replace("\n", ""))) break;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void a4BillDataGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.V && (printUserRadioButton.Checked || printBillSeqRadioButton.Checked))
                DoPaste();
        }

        private void Item1_Click(object sender, EventArgs e)
        {
            if(printUserRadioButton.Checked || printBillSeqRadioButton.Checked)
                DoPaste();
        }      
      
        private void toUserIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (printUserRadioButton.Checked)
                {
                    if (toNumberMaskedTextBox.Text.Trim() == string.Empty)
                    {
                        if (!string.IsNullOrEmpty(fromNumberMaskedTextBox.Text.Trim()))
                            AddToDataGridView(fromNumberMaskedTextBox.Text.Trim().PadLeft(12, '0'));
                    }
                    else
                    {
                        try
                        {
                            //we have mask so feel free to cast digits
                            Int64 fromNum = Convert.ToInt64(fromNumberMaskedTextBox.Text);
                            Int64 toNum = Convert.ToInt64(toNumberMaskedTextBox.Text);
                            if (fromNum > toNum)
                            {
                                fromNumberMaskedTextBox.Text = toNum.ToString();
                                toNumberMaskedTextBox.Text = fromNum.ToString();
                            }

                            AddToDataGridView(fromNumberMaskedTextBox.Text.PadLeft(12, '0') + "-" + toNumberMaskedTextBox.Text.PadLeft(12, '0'));
                        }
                        catch 
                        {
                            fromNumberMaskedTextBox.SelectAll();
                            fromNumberMaskedTextBox.Focus();
                        }
                    }
                    SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricUserId, false);
                    SetMaskedTextBehavior(toNumberMaskedTextBox, MaskedValue.ElectricUserId, true);
                    fromNumberMaskedTextBox.Focus();
                }
                else if (printBillSeqRadioButton.Checked)
                {
                    if (toNumberMaskedTextBox.Text.Trim() == string.Empty)
                    {
                        if (!string.IsNullOrEmpty(fromNumberMaskedTextBox.Text.Trim()))
                            AddToDataGridView(fromNumberMaskedTextBox.Text.Trim().PadLeft(7, '0'));
                    }
                    else
                    {
                        try
                        {
                            //we have mask so feel free to cast digits
                            int fromNum = Convert.ToInt32(fromNumberMaskedTextBox.Text);
                            int toNum = Convert.ToInt32(toNumberMaskedTextBox.Text);
                            if (fromNum > toNum)
                            {
                                fromNumberMaskedTextBox.Text = toNum.ToString();
                                toNumberMaskedTextBox.Text = fromNum.ToString();
                            }

                            AddToDataGridView(fromNumberMaskedTextBox.Text.PadLeft(7, '0') + "-" + toNumberMaskedTextBox.Text.PadLeft(7, '0'));
                        }
                        catch
                        {
                            fromNumberMaskedTextBox.SelectAll();
                            fromNumberMaskedTextBox.Focus();
                        }
                    }

                    SetMaskedTextBehavior(fromNumberMaskedTextBox, MaskedValue.ElectricBillSeq, false);
                    SetMaskedTextBehavior(toNumberMaskedTextBox, MaskedValue.ElectricBillSeq, true);
                    fromNumberMaskedTextBox.Focus();
                }
            }
        }
      
    }
}



