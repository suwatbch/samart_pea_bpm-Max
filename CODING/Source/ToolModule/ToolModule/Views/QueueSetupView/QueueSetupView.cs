//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ToolModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using System.IO.Ports;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class QueueSetupView : UserControl, IQueueSetupView
    {
        public QueueSetupView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public QueueSetupViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            GetLocalSetting();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog fbd = new FolderBrowserDialog();
            fbd.Description = "ตำแหน่งของโฟลเดอร์ที่ใช้ในการติดต่อกับระบบ Queue";
            fbd.RootFolder = Environment.SpecialFolder.MyComputer;

            if (fbd.ShowDialog(this.FindForm()) == DialogResult.OK)
            {
                //MessageBox.Show(fbd.SelectedPath);
                qFilePathMskTxtBox.Text = fbd.SelectedPath;
                qFilePathMskTxtBox.Focus();
            }
        }

        private void saveButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (IsInputValided())
                {
                    string scannerPort = "USB";
                    string filePath = qFilePathMskTxtBox.Text;
                    string QueueEnable = "0";

                    if (qEnablecheckbox.Checked)
                        QueueEnable = "1";    

                    if (com1RdoBt.Checked)
                        scannerPort = "COM1";
                    else if (com2RdoBt.Checked)
                        scannerPort = "COM2";
                    else if (usbRdoBt.Checked)
                        scannerPort = "USB";

                    SetLocalSetting(filePath, scannerPort, QueueEnable);
                    DialogResult dr = MessageBox.Show("ทำการบันทึกเรียบร้อยแล้ว", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _presenter.OnCloseView();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private SerialPort serialPort;
        private bool IsInputValided()
        {
            if (String.IsNullOrEmpty(qFilePathMskTxtBox.Text))
            {
                MessageBox.Show("กรุณาระบุ Path ของไฟล์", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            string[] ports = SerialPort.GetPortNames();
            string porttype = "";

            string scannerPort = "";

            if (com1RdoBt.Checked)
            {
                scannerPort = "COM1";
                porttype = "COM";
            }
            else if (com2RdoBt.Checked)
            {
                scannerPort = "COM2";
                porttype = "COM";
            }
            else if (usbRdoBt.Checked)
                scannerPort = "USB";

            int index = Array.IndexOf(ports, scannerPort);

            if (index == -1 && porttype == "COM")
            {
                MessageBox.Show("ไม่พบ port " + scannerPort, "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            return true;
        }

        private void SetLocalSetting(string filePath, string scannerChoice, string QueueEnable)
        {
            LocalSettingHelper hp = LocalSettingHelper.Instance();
            hp.Add(LocalSettingNames.QueueEnable, QueueEnable);
            hp.Add(LocalSettingNames.QueueFilePath, filePath);
            hp.Add(LocalSettingNames.ScannerPort, scannerChoice);

            ScannerHelper.CloseScanner();
        }

        private void GetLocalSetting()
        {
            LocalSettingHelper hp = LocalSettingHelper.Instance();
            if (hp.Read(LocalSettingNames.QueueEnable) != null)
                qEnablecheckbox.Checked = (hp.Read(LocalSettingNames.QueueEnable).ToString() == "1" ? true : false);

            //if (hp.Read(LocalSettingNames.QueueFilePath) != null)
            //    qFilePathMskTxtBox.Text = hp.Read(LocalSettingNames.QueueFilePath).ToString();
            //else
                qFilePathMskTxtBox.Text = BPMPath.ConfigPath + "\\QueueData";

            if (hp.Read(LocalSettingNames.ScannerPort) != null)
            {
                string tmp = hp.Read(LocalSettingNames.ScannerPort).ToString();
                if (tmp == "COM1")
                    com1RdoBt.Checked = true;
                else if (tmp == "COM2")
                    com2RdoBt.Checked = true;
                else if (tmp == "USB")
                    usbRdoBt.Checked = true;
            }
            else
                usbRdoBt.Checked = true;

        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            //qFilePathMskTxtBox.Text = string.Empty;
            //com1RdoBt.Checked = true;
            //button1.Focus();

            _presenter.OnCloseView();
        }

        private void qFilePathMskTxtBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (qFilePathMskTxtBox.Text != string.Empty)
            {
                LocalSettingHelper hp = LocalSettingHelper.Instance();
                if (hp.Read(LocalSettingNames.ScannerPort) != null)
                {
                    string tmp = hp.Read(LocalSettingNames.ScannerPort).ToString();
                    if (tmp == "COM1")
                    {
                        com1RdoBt.Checked = true;
                        com1RdoBt.Focus();
                    }
                    else if (tmp == "COM2")
                    {
                        com2RdoBt.Checked = true;
                        com2RdoBt.Focus();
                    }
                    else if (tmp == "USB")
                    {
                        usbRdoBt.Checked = true;
                        usbRdoBt.Focus();
                    }
                }
                else
                {
                    usbRdoBt.Checked = true;
                    usbRdoBt.Focus();
                }
            }
        }

        private void com1RdoBt_KeyPress(object sender, KeyPressEventArgs e)
        {
            saveButton.Focus();
        }

        private void com2RdoBt_KeyPress(object sender, KeyPressEventArgs e)
        {
            saveButton.Focus();
        }

        private void usbRdoBt_KeyPress(object sender, KeyPressEventArgs e)
        {
            saveButton.Focus();
        }
    }
}

