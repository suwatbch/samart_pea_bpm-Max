//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using System.Windows.Forms;
using PEA.BPM.ToolModule.Interface.Services;
using PEA.BPM.ToolModule.Interface.Constants;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;


namespace PEA.BPM.ToolModule
{
    public class ReportContainerViewPresenter : Presenter<IReportContainerView>
    {
        private IAzManService _azManService;
        
        [InjectionConstructor]
        public ReportContainerViewPresenter([ServiceDependency] IAzManService azManService)
		{
            _azManService = azManService;
		}     

        /// <summary>
        /// Subscribe from ReportUnlockingLogView 
        /// </summary>        
        [EventSubscription(EventTopicNames.PrintUnlockingLogReport, Thread = ThreadOption.UserInterface)]
        public void PrintUnlockingLogReportHandler(object sender, EventArgs<UnlockingLogParam> e)
        {
            //ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
            //WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);
            try
            {
                if (WorkItem.State["IReportContainerView"] != null)
                {
                    ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                    WorkItem.Workspaces[WorkspaceNames.HorizontalLayout.RightWorkspace].Show(rView);
                    View.SetLabel = "ReportUnlockingLog";
                    //View.PrintDate = e.Data.PrintDate;
                    View.ReportName = "PEA.BPM.ToolModule.Reports.ReportUnlockingLog.rdlc";
                    View.ReportUnlockingLog = _azManService.GetUnlockingLogReport(e.Data);
                    
                    WorkItem.State["IReportContainerView"] = null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [EventSubscription(EventTopicNames.OnCloseViewDisconnect, Thread = ThreadOption.UserInterface)]
        public void OnCloseViewDisconnectHandler(object sender, EventArgs e)
        {
            base.CloseView();
        }

        [EventSubscription(EventTopicNames.TestPrintPOSReport, Thread = ThreadOption.UserInterface)]
        public void TestPrintPOSReport(object sender, EventArgs<List<CAC05Report>> e)
        {
            try
            {
                if (WorkItem.State["IReportContainerView"] != null)
                {
                    ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                    WorkItem.Workspaces[WorkspaceNames.CenterWorkspace].Show(rView);
                    View.SetLabel = "TestPrintPOSReport";
                    View.ReportName = "PEA.BPM.ToolModule.Reports.CAC05_1Report.rdlc";
                    View.TestPrintPOSReport = (List<CAC05Report>)e.Data;
                    WorkItem.State["IReportContainerView"] = null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [EventSubscription(EventTopicNames.TestPrintAGENCYReport, Thread = ThreadOption.UserInterface)]
        public void TestPrintAGENCYReport(object sender, EventArgs<List<BillBookInfoDetailReport>> e)
        {
            try
            {
                if (WorkItem.State["IReportContainerView"] != null)
                {
                    ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                    WorkItem.Workspaces[WorkspaceNames.CenterWorkspace].Show(rView);
                    View.SetLabel = "TestPrintAGENCYReport";
                    View.ReportName = "PEA.BPM.ToolModule.Reports.CAB01_02.rdlc";
                    View.TestPrintAGENYReport = (List<BillBookInfoDetailReport>)e.Data;
                    WorkItem.State["IReportContainerView"] = null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [EventSubscription(EventTopicNames.TestPrintBLAN_F16, Thread = ThreadOption.UserInterface)]
        public void TestPrintBLAN_F16Report(object sender, EventArgs<List<ReportF16>> e)
        {
            try
            {
                if (WorkItem.State["IReportContainerView"] != null)
                {
                    ReportContainerView rView = WorkItem.Items.Get<ReportContainerView>("IReportContainerView");
                    WorkItem.Workspaces[WorkspaceNames.CenterWorkspace].Show(rView);
                    View.SetLabel = "TestPrintBLAN_F16Report";
                    View.ReportName = "PEA.BPM.ToolModule.Reports.ReportF16.rdlc";
                    View.TestPrintBLAN_F16Report = (List<ReportF16>)e.Data;
                    WorkItem.State["IReportContainerView"] = null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region "Code Generated"
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
        #endregion
    }
}

