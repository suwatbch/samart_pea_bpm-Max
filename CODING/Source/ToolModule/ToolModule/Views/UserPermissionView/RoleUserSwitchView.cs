//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using System.ComponentModel;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;

using PEA.BPM.Architecture.ArchitectureTool;//Added by Uthen.P 22-1-2015 13:22


namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class RoleUserSwitchView : UserControl, IRoleUserSwitchView
    {
        private const string rolePropertyText = "รายการผู้ใช้งานของกลุ่ม : ";
        private const string userPropertyText = "รายการกลุ่มของผู้ใช้งาน : ";
        private Label header;
        private BindingList<User> _users;
        private BindingList<Role> _roles;
        private BindingList<User> _roleDetail;
        private BindingList<Role> _userDetail;

        private BindingList<UserExceed> _userLimitDetail;

        public RoleUserSwitchView()
        {
            InitializeComponent();
            header = new Label();
            this.Controls.Add(header);
            System.Drawing.Point pp = new System.Drawing.Point(300, 23);
            header.Location = pp;
            header.BringToFront();
            header.AutoSize = false;
            header.Size = new System.Drawing.Size(600, 26);
            header.Font = new System.Drawing.Font("Tahoma", 12, System.Drawing.FontStyle.Bold);
            header.ForeColor = System.Drawing.Color.Blue;
            timer.Enabled = true;

            userGv.AutoGenerateColumns = false;
            roleGv.AutoGenerateColumns = false;
            userDetailGv.AutoGenerateColumns = false;
            roleDetailGv.AutoGenerateColumns = false;
            this.Cursor = Cursors.AppStarting;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public RoleUserSwitchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        private void roleUserSwitchTabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (roleUserSwitchTabControl.SelectedIndex == 0)
                {
                    _users = _presenter.ListAllUsers(filterTxt.Text);
                    userGv.DataSource = _users;
                }
                else
                {
                    _roles = _presenter.ListAllRoles();
                    roleGv.DataSource = _roles;
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void timer_Tick(object sender, EventArgs e)
        {
            try
            {
                _users = _presenter.ListAllUsers(filterTxt.Text);
                userGv.DataSource = _users;
            }
            finally
            {
                timer.Enabled = false;
                this.Cursor = Cursors.Default;
            }
        }

        private void roleGv_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    this.Cursor = Cursors.AppStarting;
                    Role role = (Role)roleGv.Rows[e.RowIndex].DataBoundItem;
                    header.Text = string.Format("{0}{1}", rolePropertyText, role.RoleName);
                    //load users of this role
                    _roleDetail = _presenter.ListUsersByRole(role.RoleId);
                    roleDetailGv.DataSource = _roleDetail;
                    userCountLabel.Text = string.Format("จำนวน {0} รายการ", roleDetailGv.Rows.Count.ToString());
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void userGv_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    this.Cursor = Cursors.AppStarting;
                    User user = (User)userGv.Rows[e.RowIndex].DataBoundItem;
                    header.Text = string.Format("{0}{1}", userPropertyText, user.FullName);
                    //load role of this user
                    _userDetail = _presenter.ListRolesByUser(user.UserId);
                    userDetailGv.DataSource = _userDetail;
                    roleCountLabel.Text = string.Format("จำนวน {0} รายการ", userDetailGv.Rows.Count.ToString());

                    if (_userDetail.Count > 0)
                    {
                        functionviewBt.Enabled = true;
                        removeRoleUserBt.Enabled = true;
                    }
                    else
                    {
                        functionviewBt.Enabled = false;
                        removeRoleUserBt.Enabled = false;
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        //there is no need to validate user scope since it has not been assigned role yet.
        private void createUserBt_Click(object sender, EventArgs e)
        {

            //Added by Uthen.P #Issue User Limit 26-1-2558

            _userLimitDetail = _presenter.ListUserLimitExceedsdDetails();
            UserExceed _userExceed = new UserExceed();

            foreach (var item in _userLimitDetail)
            {
                _userExceed.IsExceed = item.IsExceed;
                _userExceed.UserCurrentUsed = item.UserCurrentUsed;
                _userExceed.UserLimit = item.UserLimit;
            }
            if (_userExceed.IsExceed == true)
            {
                #region

                try
                {
                    UserExeedLimitWarningView warningView = new UserExeedLimitWarningView();
                    warningView.MappedUserExceededDetail = _userExceed;
                    warningView.Presenter = _presenter;
                    warningView.ShowDialog();

                    if (warningView.DialogResult == DialogResult.OK)
                    {
                        //warningView.Close();
                    }
                }
                catch
                {
                    //TODO:
                    //
                    //..
                }
                finally
                {
                    this.Cursor = Cursors.Default;
                }
                #endregion
            }
            else
            {
                #region

                try
                {
                    CreateUserView createUserView = new CreateUserView();
                    createUserView.Presenter = _presenter;
                    createUserView.ShowDialog();

                    if (createUserView.DialogResult == DialogResult.OK)
                    {
                        User user = createUserView.ChosenUser;
                        _users.Add(user);

                        filterTxt.Clear();
                    }
                }
                catch (Exception ex)
                {
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
                }
                finally
                {
                    this.Cursor = Cursors.Default;
                }

                #endregion
            }





        }

        private void editUserBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (userGv.SelectedRows.Count > 0)
                {
                    EditUserView editUserView = new EditUserView();
                    editUserView.Presenter = _presenter;
                    User user = (User)userGv.SelectedRows[0].DataBoundItem;
                    //refresh cache
                    editUserView.UserInfo = _presenter.ListAllUsers(user.UserId)[0];
                    editUserView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void userGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    EditUserView editUserView = new EditUserView();
                    editUserView.Presenter = _presenter;
                    User user = (User)userGv.SelectedRows[0].DataBoundItem;
                    //refresh cache
                    editUserView.UserInfo = _presenter.ListAllUsers(user.UserId)[0];
                    editUserView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void userDetailGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    this.Cursor = Cursors.AppStarting;
                    Role role = (Role)userDetailGv.SelectedRows[0].DataBoundItem;
                    RoleFunctionView roleFunctionView = new RoleFunctionView();
                    roleFunctionView.Presenter = _presenter;
                    roleFunctionView.ChosenRole = role;
                    roleFunctionView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void roleDetailGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    User user = (User)roleDetailGv.SelectedRows[0].DataBoundItem;
                    UserProperties properties = new UserProperties();
                    properties.ChosenUser = user;
                    properties.Presenter = _presenter;
                    properties.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        //there is no user assiged while creating role, so no need to validate user scope
        private void newRoleBt_Click(object sender, EventArgs e)
        {
            try
            {
                CreateRoleView createRoleView = new CreateRoleView();
                createRoleView.Presenter = _presenter;
                createRoleView.ShowDialog();

                if (createRoleView.DialogResult == DialogResult.OK)
                {
                    //refresh UI
                    this.Cursor = Cursors.AppStarting;
                    //_roles.Add(createRoleView.CreatedRole);
                    _roles = _presenter.ListAllRoles();
                    roleGv.DataSource = _roles;
                }

            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void editRoleBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleGv.SelectedRows.Count > 0)
                {
                    Role role = (Role)roleGv.SelectedRows[0].DataBoundItem;
                    EditRoleView editRoleView = new EditRoleView();
                    editRoleView.Presenter = _presenter;
                    editRoleView.ChosenRole = role;
                    editRoleView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void roleGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex >= 0)
                {
                    Role role = (Role)roleGv.SelectedRows[0].DataBoundItem;
                    EditRoleView editRoleView = new EditRoleView();
                    editRoleView.Presenter = _presenter;
                    editRoleView.ChosenRole = role;
                    editRoleView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void changePwdBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleDetailGv.SelectedRows.Count > 0)
                {
                    User user = (User)roleDetailGv.SelectedRows[0].DataBoundItem;
                    UserPwdChangeView changePwdView = new UserPwdChangeView();
                    changePwdView.Presenter = _presenter;
                    changePwdView.ChosenUser = user;
                    changePwdView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void addRoleUserBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (userGv.SelectedRows.Count > 0)
                {
                    //add to this user
                    User userOldInfo = (User)userGv.SelectedRows[0].DataBoundItem;
                    //refresh user information
                    User user = _presenter.ListAllUsers(userOldInfo.UserId)[0];

                    AddRoleUserView addRoleUserView = new AddRoleUserView();
                    addRoleUserView.Presenter = _presenter;
                    addRoleUserView.ChosenUser = user;
                    if (addRoleUserView.ShowDialog() == DialogResult.OK)
                    {
                        Role role = (Role)addRoleUserView.ChosenRole;
                        //TO DO - validate user scope
                        if (!_presenter.ValidateUserScope(user, role)) return;

                        _presenter.AddRoleUser(user, role);
                        //add to UI
                        _userDetail.Add(role);
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void addUserButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleGv.SelectedRows.Count > 0)
                {
                    AddUserView addUserView = new AddUserView();
                    addUserView.Presenter = _presenter;
                    addUserView.UserMode = true;
                    if (addUserView.ShowDialog() == DialogResult.OK)
                    {
                        User user = addUserView.ChosenUser;
                        //add to role
                        Role role = (Role)roleGv.SelectedRows[0].DataBoundItem;
                        //TO DO - validate user scope
                        if (!_presenter.ValidateUserScope(user, role)) return;

                        _presenter.AddRoleUser(user, role);
                        //add to UI
                        _roleDetail.Add(user);
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void scopeButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleDetailGv.SelectedRows.Count > 0)
                {
                    User user = (User)roleDetailGv.SelectedRows[0].DataBoundItem;
                    ChangeScopeView changeScopeView = new ChangeScopeView();
                    changeScopeView.Presenter = _presenter;
                    changeScopeView.ChosenUser = user;
                    if (changeScopeView.ShowDialog() == DialogResult.OK)
                    {
                        user = changeScopeView.ChosenUser;
                        _presenter.EditUser(user);

                        //refresh UI
                        _roleDetail[roleDetailGv.SelectedRows[0].Index] = user;
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void filterTxt_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    _users = _presenter.ListAllUsers(filterTxt.Text);
                    userGv.DataSource = _users;
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void functionviewBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (userDetailGv.SelectedRows.Count > 0)
                {
                    this.Cursor = Cursors.AppStarting;
                    Role role = (Role)userDetailGv.SelectedRows[0].DataBoundItem;
                    RoleFunctionView roleFunctionView = new RoleFunctionView();
                    roleFunctionView.Presenter = _presenter;
                    roleFunctionView.ChosenRole = role;
                    roleFunctionView.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void deleteRoleBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleDetailGv.Rows.Count > 0)
                {
                    MessageBox.Show("ไม่สามารถลบกลุ่มผู้ใช้งานได้ เนื่องจากมีผู้ใช้งานในกลุ่ม", "ผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return;
                }

                DialogResult dlgResult = MessageBox.Show("คุณกำลังลบกลุ่มผู้ใช้งาน กรุณายืนยัน", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
                if (dlgResult == DialogResult.OK)
                {
                    if (roleGv.SelectedRows.Count > 0)
                    {

                        Role role = (Role)roleGv.SelectedRows[0].DataBoundItem;
                        _presenter.DeleteRole(role);

                        MessageBox.Show("ลบกลุ่มผู้ใช้งานเรียบร้อยแล้ว", "สำเร็จ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //refresh UI
                        _roles.Remove(role);
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void removeUserButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (roleDetailGv.SelectedRows.Count > 0 && roleGv.SelectedRows.Count > 0)
                {
                    DialogResult dlgResult = MessageBox.Show("คุณกำลังถอดผู้ใช้งานออกจากกลุ่ม กรุณายืนยัน", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
                    if (dlgResult == DialogResult.OK)
                    {
                        Role role = (Role)roleGv.SelectedRows[0].DataBoundItem;
                        User user = (User)roleDetailGv.SelectedRows[0].DataBoundItem;
                        _presenter.RemoveRoleUser(user, role);

                        //refresh UI
                        _roleDetail.Remove(user);
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void deleteUserBt_Click(object sender, EventArgs e)
        {
            try
            {
                DialogResult dlgResult = MessageBox.Show("คุณกำลังลบผู้ใช้งานออกจากระบบ กรุณายืนยัน", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
                if (dlgResult == DialogResult.OK)
                {
                    User user = (User)userGv.SelectedRows[0].DataBoundItem;
                    _presenter.DeleteUser(user);

                    //refresh UI
                    _users.Remove(user);
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void removeRoleUserBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (userDetailGv.SelectedRows.Count > 0 && userGv.SelectedRows.Count > 0)
                {
                    DialogResult dlgResult = MessageBox.Show("คุณกำลังถอดกลุ่มออกจากผู้ใช้งาน กรุณายืนยัน", "คำเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
                    if (dlgResult == DialogResult.OK)
                    {
                        User user = (User)userGv.SelectedRows[0].DataBoundItem;
                        Role role = (Role)userDetailGv.SelectedRows[0].DataBoundItem;
                        _presenter.RemoveRoleUser(user, role);

                        //refresh UI
                        _userDetail.Remove(role);
                        //userDetailGv.Rows.Remove(userDetailGv.SelectedRows[0]);
                    }
                }
            }
            catch (Exception ex)
            {
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Tools, ex);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void userGv_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (userGv.Rows.Count == 0)
                userDetailGv.Rows.Clear();
        }

        private void roleGv_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            if (roleGv.Rows.Count == 0)
                roleDetailGv.Rows.Clear();
        }


    }
}

