//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using System.Net;
using PEA.BPM.ToolModule.Interface.Constants;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class ServerConfigView : UserControl, IServerConfigView
    {
        public ServerConfigView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ServerConfigViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #region "Event"
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            CheckAuthorized();
            LoadDefaultValue();
        }

        private void CheckAuthorized()
        {
            if (!PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.IsAuthorized(SecurityNames.DBSetUp, false))
            {
                printerSaveButton.Enabled = false;
                connTypeGb.Enabled = false;
                centerUrlGb.Enabled = false;
                localUrlGb.Enabled = false;
            }
            else
            {
                printerSaveButton.Enabled = true;
                connTypeGb.Enabled = true;
                centerUrlGb.Enabled = true;
                localUrlGb.Enabled = true;
            }
        }

        private void printerSaveButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (IsValidData())
                {

                    ////------Test Server URL---------------------------------------------------------
                    //CheckWebService(centerServerWSTextBox, false);
                    //if (radioButton2.Checked)
                    //    CheckWebService(branchServerTextBox, false);
                    ////------Test Server URL---------------------------------------------------------

                    SaveData();
                    DialogResult dr = MessageBox.Show("ทำการบันทึกเรียบร้อยแล้ว โปรแกรมจะปิดและเปิดตัวเอง อัตโนมัติ ", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    Session.Work.OnCloseNotify = false; //not to notify

                    // Restart current application, with same arguments/parameters
                    Application.Exit();
                    System.Diagnostics.Process.Start(Application.ExecutablePath, "restart");

                }
            }
            catch (Exception ex)
            {
                Logger.WriteError(Logger.Module.TOOL, "ตั้งค่าการเชื่อมต่อ online", ex.ToString());
                MessageBox.Show("ไม่สามารถตั้งค่าการเชื่อมต่อ online ได้ โปรดติดต่อผู้ดูแลระบบ\n", "ข้อผิดพลาด",
                   MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        #region "Function"

        private void SaveData()
        {            
            SaveLocalSetting("Online", radioButton1.Checked.ToString());
            SaveLocalSetting("CenterServerWsAddress", centerServerWSTextBox.Text);
            SaveLocalSetting("BranchServerWsAddress", branchServerTextBox.Text);
        }

        private void CloseView()
        {
            _presenter.OnCloseView();
        }

        private bool IsValidData()
        {

            bool retVal = true;
            string errorMsg = String.Empty;
            if (centerServerWSTextBox.Text.Trim() == string.Empty)
            {
                errorMsg += "กรุณาระบุ  Web Service URL ของเครื่องแม่ข่ายส่วนกลาง\n";
                retVal = false;
            }
            else 
            {
                centerServerWSTextBox.Text = AdjustServerUrl(centerServerWSTextBox.Text);
            }

            if (radioButton2.Checked)
            {
                if (branchServerTextBox.Text.Trim() == string.Empty)
                {
                    errorMsg += "กรุณาระบุ Web Service URL ของเครื่องแม่ข่ายประจำสาขา\n";
                    retVal = false;
                }
                else
                {
                    branchServerTextBox.Text = AdjustServerUrl(branchServerTextBox.Text);

                    if (branchServerTextBox.Text.Trim() == centerServerWSTextBox.Text.Trim())
                    {
                        errorMsg += "ระบบไม่อนุญาตให้ระบุ Web Service URL ของเครื่องแม่ข่ายประจำสาขาและส่วนกลาง มีค่าเดียวกัน\n";
                        retVal = false;
                    }
                }
            }

            if (!retVal)
            {
                MessageBox.Show(errorMsg, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            
            return retVal;
        }

        private string AdjustServerUrl(string serverUrl)
        {
            serverUrl = serverUrl.Trim().Replace(" ", "");
            if (serverUrl != string.Empty)
            {
                int len = serverUrl.Length;
                if (serverUrl.Substring(len - 1, 1) != "/")
                    serverUrl = serverUrl + "/";
            }
            return serverUrl;
        }

        private void LoadDefaultValue()
        {
            LocalSettingHelper local = LocalSettingHelper.Instance();
            bool isOnline = local.Read("Online") == null ? true : Convert.ToBoolean(local.Read("Online"));
            string centerServerWsAddress = local.Read("CenterServerWsAddress") == null ? String.Empty : local.Read("CenterServerWsAddress").ToString();
            string branchServerWsAddress = local.Read("BranchServerWsAddress") == null ? String.Empty : local.Read("BranchServerWsAddress").ToString();
            radioButton1.Checked = isOnline;
            centerServerWSTextBox.Text = centerServerWsAddress;
            branchServerTextBox.Text = branchServerWsAddress;
        }

        private void SaveLocalSetting(string key, string value)
        {
            LocalSettingHelper local = LocalSettingHelper.Instance();
            local.Add(key, value);
        }
        #endregion

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {            
            localUrlGb.Enabled = !radioButton1.Checked;
        }

        private void printerCancelButton_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        private void testButton_Click(object sender, EventArgs e)
        {

            //if (sender == centerTestButton)
            //{
            //    //TEST
            //    PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.SignalExport(PEA.BPM.Infrastructure.Interface.Constants.LocalSettingNames.DL008_EXPORT_AG_TO_SAP_BATCH, "G07301", "00497054"/*Session.User.Id*/);
            //}

            if (sender == centerTestButton)
            {
                centerServerWSTextBox.Text = AdjustServerUrl(centerServerWSTextBox.Text);
                CheckWebService(centerServerWSTextBox, true);
            }
            else
            {
                branchServerTextBox.Text = AdjustServerUrl(branchServerTextBox.Text);
                CheckWebService(branchServerTextBox, true);
            }


        }

        private void CheckWebService(MaskedTextBox wsServerTextBox, bool needAlert)
        {
            string StepStr = "";
            try
            {

                StepStr = "ติดต่อ WebService";
                DateTime dt = _presenter.TestWS(wsServerTextBox.Text);

                StepStr = "ติดต่อ Database";
                DateTime dt1 = _presenter.TestDB(wsServerTextBox.Text);

                StepStr = "";
                if(needAlert) 
                    MessageBox.Show(this, "สถานะ : สำเร็จ\n\nยินดีด้วยครับ ระบบสามารถติดต่อกับ Services ในเครื่องแม่ข่ายที่ระบุได้", "ข้อความ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                wsServerTextBox.Focus();
                wsServerTextBox.SelectAll();

                if (needAlert)
                {
                    //MessageBox.Show(this, "สถานะ :ไม่สามารถ" + StepStr + "\n\nมีข้อผิดพลาดดังนี้\n" + ex.ToString(), "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    string errStr = string.Format("สถานะ :ไม่สามารถ{0}\n\nมีข้อผิดพลาดดังนี้\n{1}", StepStr, ex.ToString());
                    MessageBox.Show(this, errStr, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    throw;
                }
            }
        }
           
    }
}

