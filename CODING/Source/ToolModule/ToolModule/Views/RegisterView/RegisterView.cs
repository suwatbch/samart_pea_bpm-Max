//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool;
using PEA.BPM.Infrastructure.Interface.Constants;
using System.Net;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class RegisterView : UserControl, IRegisterView
    {       
        private Terminal _terminal;
        private Terminal _currentTerminal;
        private string _tax_id;

        public RegisterView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public RegisterViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            LoadDefaultValue();
            _tax_id = CodeTable.Instant.GetAppSettingValue("ELEC_TAX_ID");
        }

        public Terminal FocusTerminalInfo
        {
            set
            {
                _terminal = value;
                saveBt.Enabled = true;
                if (Session.User.ScopeId != "B" && !string.IsNullOrEmpty(_currentTerminal.TerminalId))
                    FillTerminalInfo(true);
                else
                    FillTerminalInfo(false);
            }
            get { return _terminal; }
        }

        public Terminal DetaultTerminalInfo
        {
            set
            {
                _terminal = value;
                FillTerminalInfo(true);
            }
            get { return _terminal; }
        }

        private void FillTerminalInfo(bool defaultLoad)
        {
            //fill value
            branchIdText.Text = _terminal.BranchId;
            branchLevelText.Text = _terminal.BranchLevel.ToString();
            branchNameText.Text = _terminal.BranchName;
            branchName2Text.Text = _terminal.BranchName2;
            Address1Text.Text = _terminal.BranchAddress;
            branchNoText.Text = _terminal.BranchNo;
            baCodeText.Text = _terminal.BACode;
            branchLevelText.Text = _terminal.BranchLevel.ToString();
            baCodeText.Text = _terminal.BACode;

            if (defaultLoad)
            {
                TaxIdText.Text = _currentTerminal.TaxCode;
                POSIdText.Text = _currentTerminal.TerminalCode;
            }
            else
            {
                TaxIdText.Text = _tax_id;
                POSIdText.Text = "จะถูกกำหนดโดยอัตโนมัติ หลังการลงทะเบียนเครื่อง";
                //POSIdText.Text = "";
            }

            this.Cursor = Cursors.Default;
        }

        private void branchSearchBt_Click(object sender, EventArgs e)
        {
            _presenter.PeaCodedSearchShowDialogClicked();
        }


        public bool IsValidData()
        {
            bool retVal = true;
            string errorMsg = String.Empty;
            if (branchIdText.Text.Trim() == String.Empty)
            {
                retVal = false;
                errorMsg += "กรุณาระบุสาขาการไฟฟ้า\n";
            }

            if (TaxIdText.Text.Trim() == String.Empty)
            {
                retVal = false;
                errorMsg += "กรุณาระบุรหัสประจำตัวผู้เสียภาษี\n";
            }
            /*
            if (POSIdText.Text.Trim() == String.Empty)
            {
                retVal = false;
                errorMsg += "กรุณาระบุหมายเลขเครื่องรับชำระเงิน";
            }
             * */
            if (!retVal)
            {
                MessageBox.Show(errorMsg, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return retVal;
        }

        private void saveBt_Click(object sender, EventArgs e)
        {
            try
            {
                if (Session.User.ScopeId != "B" && !string.IsNullOrEmpty(_currentTerminal.TerminalId))  //R, A
                {
                    //just update branch information, without renewing terminalId  
                    //UpdateData();               // --> Remark on 2.0.5 Rev.1  ตามบันทึก เพื่อรองรับการพิมพ์ BLAN ที่เขต.
                    POSIdText.Text = SaveData();  // --> Remark on 2.0.5 Rev.1  ตามบันทึก เพื่อรองรับการพิมพ์ BLAN ที่เขต.
                }
                else
                {
                    if (IsValidData())
                    {
                        POSIdText.Text = SaveData();

                        try
                        {
                            if (!Session.Branch.OnlineConnection && Session.IsNetworkConnectionAvailable) //has branch server
                                PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.SignalSyncup(LocalSettingNames.DL070_TECHNICAL_BATCH);  //syncdown
                        }
                        catch (Exception k)
                        {
                            //ignored
                        }
                    }
                    else
                    {
                        MessageBox.Show("ไม่สามารถบันทึกข้อมูลได้", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleError(Logger.Module.TOOL, "ลงทะเบียนเครื่อง", ex);
            }
            finally
            {
                DialogResult dr = MessageBox.Show("ทำการบันทึกเรียบร้อยแล้ว โปรแกรมจะปิดและเปิดตัวเอง อัตโนมัติ", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Session.Work.OnCloseNotify = false; //not to notify

                // Restart current application, with same arguments/parameters
                Application.Exit();
                System.Diagnostics.Process.Start(Application.ExecutablePath, "restart");
            }
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            CloseView();
        }

        public void CloseView()
        {
            _presenter.OnCloseView();
        }

        public void UpdateData()
        {
            try
            {
                // register terminal to server
                _terminal.ModifiedBy = Session.User.Id;
                _terminal.BranchLevel = branchLevelText.Text;
                _terminal.BranchId = branchIdText.Text.Trim();
                _terminal.BranchName = branchNameText.Text.Trim();
                _terminal.BranchName2 = branchName2Text.Text.Trim();
                _terminal.BranchAddress = Address1Text.Text.Trim();
                _terminal.BranchNo = branchNoText.Text.Trim();
                _terminal.IP = MachineInfo.GetLocalIP();
                _terminal.BACode = baCodeText.Text.Trim();
                _presenter.UpdateTerminal(_terminal);
               
                // update teiminal to file
                _presenter.UpdateLocalSetting("BranchId", _terminal.BranchId);
                _presenter.UpdateLocalSetting("BranchLevel", _terminal.BranchLevel.ToString());
                _presenter.UpdateLocalSetting("BranchName", _terminal.BranchName);
                _presenter.UpdateLocalSetting("BranchName2", _terminal.BranchName2);
                _presenter.UpdateLocalSetting("BranchAddress", _terminal.BranchAddress);
                _presenter.UpdateLocalSetting("BranchNo", _terminal.BranchNo);
                //_presenter.SaveLocalSetting("PosId", _terminal.TerminalId);
                //_presenter.SaveLocalSetting("PosNo", _terminal.TerminalCode);
                //_presenter.SaveLocalSetting("TaxId", _terminal.TaxCode);
                _presenter.UpdateLocalSetting("BACode", _terminal.BACode);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string SaveData()
        {
            try
            {
                // register terminal to server
                Terminal terminal = new Terminal();
                terminal.TerminalCode = POSIdText.Text.Trim();
                terminal.ModifiedBy = Session.User.Id;
                terminal.BranchLevel = branchLevelText.Text;
                terminal.BranchId = branchIdText.Text.Trim();
                terminal.BranchName = branchNameText.Text.Trim();
                terminal.BranchName2 = branchName2Text.Text.Trim();
                terminal.BranchAddress = Address1Text.Text.Trim();
                terminal.BranchNo = branchNoText.Text.Trim();
                terminal.TaxCode = TaxIdText.Text.Trim();
                terminal.IP = MachineInfo.GetLocalIP();
                terminal.BACode = baCodeText.Text.Trim();
                string TerminalCode = "";
                string terminalId = _presenter.RegisterTerminal(terminal, out TerminalCode);
                terminal.TerminalCode = TerminalCode;
                if (terminalId != String.Empty)
                {
                    // register teiminal to file
                    _presenter.SaveLocalSetting("BranchId", terminal.BranchId);
                    _presenter.SaveLocalSetting("BranchLevel", terminal.BranchLevel.ToString());
                    _presenter.SaveLocalSetting("BranchName", terminal.BranchName);
                    _presenter.SaveLocalSetting("BranchName2", terminal.BranchName2);
                    _presenter.SaveLocalSetting("BranchAddress", terminal.BranchAddress);
                    _presenter.SaveLocalSetting("BranchNo", terminal.BranchNo);
                    _presenter.SaveLocalSetting("PosId", terminalId);
                    _presenter.SaveLocalSetting("PosNo", terminal.TerminalCode);
                    _presenter.SaveLocalSetting("TaxId", terminal.TaxCode);
                    _presenter.SaveLocalSetting("BACode", terminal.BACode);
                }
                return TerminalCode;
            }
            catch (Exception ex)
            {
                throw ex;
            }
                         
        }

        public void LoadDefaultValue()
        {
            _currentTerminal = _presenter.LoadDefaultValue();
            DetaultTerminalInfo = _currentTerminal;
        }

    }
}

