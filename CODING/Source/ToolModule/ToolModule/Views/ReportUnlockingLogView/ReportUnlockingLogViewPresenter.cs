//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.ToolModule.Interface.Constants;
using PEA.BPM.ToolModule;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using PEA.BPM.ToolModule.Interface.Services;
using System.Collections.Generic;

namespace PEA.BPM.ToolModule
{
    public class ReportUnlockingLogViewPresenter : Presenter<IReportUnlockingLogView>
    {
        private IAzManService _azManService;

        [InjectionConstructor]
        public ReportUnlockingLogViewPresenter([ServiceDependency] IAzManService azManService)
        {
            _azManService = azManService;
        }

        [EventPublication(EventTopicNames.PrintUnlockingLogReport, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<UnlockingLogParam>> PrintUnlockingLogReport;
        public void PreviewUnlockingLogReport(UnlockingLogParam param)
        {
            if (PrintUnlockingLogReport != null)
            {
                WorkItem.State["IReportContainerView"] = true;
                PrintUnlockingLogReport(this, new EventArgs<UnlockingLogParam>(param));
            }
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        public List<Function> ListAllFunctions()
        {
            //return _azManService.ListAllFunctions();
            //return _azManService.ListRemarkFunctions();
            return _azManService.ListUnlockableFunctions();
        }

        [EventSubscription(EventTopicNames.OnCloseViewDisconnect, Thread = ThreadOption.UserInterface)]
        public void OnCloseViewDisconnectHandler(object sender, EventArgs e)
        {
            base.CloseView();
        }

    }
}

