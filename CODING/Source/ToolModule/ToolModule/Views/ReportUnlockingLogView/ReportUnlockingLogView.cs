//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;

using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using System.Collections.Generic;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class ReportUnlockingLogView : UserControl, IReportUnlockingLogView
    {

        #region "Code Generated"
        private List<Function> _functionList;
        private string _selectedFncId;

        public ReportUnlockingLogView()
        {
            InitializeComponent();
        }

        private void FillFunctionCBox()
        {
            Function all = new Function();
            all.FunctionId = "0000";
            all.FunctionName = "- ทั้งหมด -";
            _functionList.Insert(0, all);

            fncCBox.DisplayMember = "FunctionName";
            fncCBox.ValueMember = "FunctionId";
            fncCBox.DataSource = _functionList;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ReportUnlockingLogViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        #endregion

        #region "Event Handling"

        private void billPeriodMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return && billPeriodMaskedTextBox.MaskCompleted)
            {
                if (ValidateDate(billPeriodMaskedTextBox.Text))
                {
                    if (billPeriodMaskedTextBox.MaskCompleted == true)
                        branchIdMaskedTextBox.Focus();
                }
                else
                {
                    MessageBox.Show("กรุณาระบุวันที่ให้ถูกต้องตามรูปแบบ วว/ดด/ปปปป (ระบุเป็นปีพุทธศักราช)", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    billPeriodMaskedTextBox.Clear();
                    billPeriodMaskedTextBox.Focus();
                }
            }
        }

        private void branchIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (branchIdMaskedTextBox.Text.Length == 6)
                {
                    string branchId = ToUpperCase(branchIdMaskedTextBox);

                    //if (Session.Branch.BranchLevel == "1" || Session.Branch.BranchLevel == "2")
                    //{
                    //    if (branchId == Session.Branch.Id)
                    //    {
                    //        if (printBranchRadioButton.Checked == true)
                    //        {
                    //            //Add to DataGridView
                    //            AddToDataGridView(branchId);
                    //            //then focus on branchIdMaskedTextBox
                    //            branchIdMaskedTextBox.Text = string.Empty;
                    //            //branchIdMaskedTextBox.Mask = MaskedValue.ElectricBranchId;
                    //            branchIdMaskedTextBox.Focus();
                    //        }
                    //    }
                    //    else
                    //    {
                    //        MessageBox.Show("คุณสามารถป้อนรหัสการไฟฟ้าของตนเองเท่านั้น(" + Session.Branch.Id + ")", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //    }
                    //}
                    //else
                    //{
                    //    if (printBranchRadioButton.Checked == true)
                    //    {
                            AddToDataGridView(branchId);
                            branchIdMaskedTextBox.Text = string.Empty;
                            branchIdMaskedTextBox.Focus();
                        //}
                    //}
                }
            }
        }

        private void reportUnlockingLogDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                if (reportUnlockingLogDataGridView.Columns[e.ColumnIndex].Name == "delColumn")
                    reportUnlockingLogDataGridView.Rows.RemoveAt(e.RowIndex);
            }
        }
     

        private void showReportButton_Click(object sender, EventArgs e)
        {
            if (ValidateBeforeSubmit())
            {
                UnlockingLogParam param = new UnlockingLogParam();
                IFormatProvider provider = CultureInfo.CreateSpecificCulture("th-TH");
              
                param.BillPred = Convert.ToDateTime(billPeriodMaskedTextBox.Text, provider);

                string[] id = new string[reportUnlockingLogDataGridView.Rows.Count];
                if (reportUnlockingLogDataGridView.Rows.Count != 0)
                {
                    for (int i = 0; i < reportUnlockingLogDataGridView.Rows.Count; i++)
                    {
                        id[i] = reportUnlockingLogDataGridView.Rows[i].Cells["electricityIdColumn"].Value.ToString();
                    }
                    param.BranchId = id;
                //}
                //else
                //{
                //    if (Session.Branch.BranchLevel == "1" || Session.Branch.BranchLevel == "2")
                //    {
                //        param.BranchId = Session.Branch.Id;
                //    }
                }

                //Sep, 25 - filter log by function
                param.FunctionId = _selectedFncId;

                _presenter.PreviewUnlockingLogReport(param);
            }
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            InitializeControlValue();
        }


        #endregion

      

        #region "Function"

        private void AddToDataGridView(string elecId)
        {
            bool isRepeatedItem = false;
            reportUnlockingLogDataGridView.Enabled = true;

            isRepeatedItem = CheckRepeatedItem(elecId, isRepeatedItem);

            if (isRepeatedItem == false)
            {
                try
                {
                    int i = reportUnlockingLogDataGridView.Rows.Count;
                    reportUnlockingLogDataGridView.Rows.Add(1);
                    reportUnlockingLogDataGridView.Rows[i].Cells["electricityIdColumn"].Value = elecId;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "ผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private bool CheckRepeatedItem(string txt, bool isRepeated)
        {
            if (reportUnlockingLogDataGridView.Rows.Count != 0)
            {
                for (int i = 0; i < reportUnlockingLogDataGridView.Rows.Count; i++)
                {

                    if (txt == (string)reportUnlockingLogDataGridView.Rows[i].Cells["electricityIdColumn"].Value)
                        isRepeated = true;
                    else
                        isRepeated = false;
                }
            }
            else
            {
                isRepeated = false;
            }
            return isRepeated;
        }

        private void SetMaskedTextBehavior(MaskedTextBox mskTxtBox, string mskValue, bool isContAddToList)
        {

            if (isContAddToList)
            {
                mskTxtBox.Focus();
            }
            else
            {
                billPeriodMaskedTextBox.Focus();
            }

            mskTxtBox.Enabled = true;
            mskTxtBox.Text = string.Empty;
            //mskTxtBox.Mask = mskValue;
        }

        private bool ValidateBeforeSubmit()
        {
            bool isValidated = false;

            if (reportUnlockingLogDataGridView.Rows.Count == 0)
            {
                isValidated = false;
                MessageBox.Show("กรุณากรอกรหัสการไฟฟ้า", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                isValidated = true;
            }

            if (billPeriodMaskedTextBox.MaskCompleted == false)
            {
                isValidated = false;
                MessageBox.Show("กรุณากรอกวันที่ปลดล็อค", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


            return isValidated;
        }

        private void InitializeControlValue()
        {
            billPeriodMaskedTextBox.Text = string.Empty;
            billPeriodMaskedTextBox.Mask = MaskedValue.BillPeriodDayMonthYear;
            branchIdMaskedTextBox.Text = string.Empty;
            branchIdMaskedTextBox.Enabled = true;
            reportUnlockingLogDataGridView.Enabled = true; ;
            reportUnlockingLogDataGridView.Rows.Clear();
            billPeriodMaskedTextBox.Focus();
        }

        private string ToUpperCase(Control control)
        {
            return control.Text.Substring(0, 1).ToUpper() + control.Text.Substring(1, control.Text.Length - 1);
        }

        private bool ValidateDate(string date)
        {
            bool flag = false;
            //IFormatProvider provider = CultureInfo.CreateSpecificCulture("th-TH");
            IFormatProvider provider = new CultureInfo("th-TH");
            char[] charSeparators = new char[] { '/' };
            string[] tmp = date.Split(charSeparators, StringSplitOptions.None);
            if (tmp.Length == 2)
            {

                if (Convert.ToInt16(tmp[0]) < 12)
                {
                    if (Convert.ToInt16(tmp[1]) - 543 <= Convert.ToInt16(DateTime.Now.Year.ToString(provider)))
                        flag = true;
                    else
                        flag = false;
                }
                else
                    flag = false;

            }
            else if (tmp.Length == 3)
            {
                if (Convert.ToInt16(tmp[0]) < 32)
                {
                    if (Convert.ToInt16(tmp[1]) < 13)
                    {
                        if (Convert.ToInt16(tmp[2]) < 2550)
                            flag = false;
                        else if (Convert.ToInt16(tmp[2]) - 543 <= Convert.ToInt16(DateTime.Now.Year.ToString(provider)))
                            flag = true;
                        else
                            flag = false;
                    }
                    else
                        flag = false;
                }
                else
                    flag = false;
            }

            return flag;
        }

        #endregion

        private void fncCBox_DropDown(object sender, EventArgs e)
        {
            if(_functionList == null)
                _functionList = _presenter.ListAllFunctions();

            FillFunctionCBox();
        }

        private void fncCBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            _selectedFncId = ((Function)fncCBox.SelectedItem).FunctionId;
        }

    
    }
}

