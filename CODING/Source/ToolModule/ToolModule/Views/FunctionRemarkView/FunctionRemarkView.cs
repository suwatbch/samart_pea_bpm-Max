//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using System.ComponentModel;
using PEA.BPM.ToolModule.Interface.BusinessEntities;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class FunctionRemarkView : UserControl, IFunctionRemarkView
    {
        private BindingList<Function> _functionList;

        public BindingList<Function> FunctionList
        {
            set
            {
                _functionList = value;
                functionGridView.AutoGenerateColumns = false;
                functionGridView.DataSource = _functionList;

                if (_functionList.Count > 0)
                    functionGridView.CurrentCell = functionGridView.Rows[0].Cells[0];

            }
        }

        public FunctionRemarkView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public FunctionRemarkViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.ListFunction();
        }

        private void SelectFunction(int rowId)
        {
            Function fnc = (Function)functionGridView.Rows[rowId].DataBoundItem;
            _presenter.FunctionSelected(fnc);
        }

        private void functionGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if ((functionGridView.SelectedRows.Count > 0) && (e.KeyCode == Keys.Up))
            {
                int fucusRow = functionGridView.SelectedRows[0].Index - 1;
                if (fucusRow >= 0)
                {
                    Function fnc = (Function)functionGridView.Rows[fucusRow].DataBoundItem;
                    _presenter.FunctionSelected(fnc);
                }
            }
            else if ((functionGridView.SelectedRows.Count > 0) && (e.KeyCode == Keys.Down))
            {
                int fucusRow = functionGridView.SelectedRows[0].Index + 1;
                if (fucusRow <= functionGridView.Rows.Count - 1)
                {
                    Function fnc = (Function)functionGridView.Rows[fucusRow].DataBoundItem;
                    _presenter.FunctionSelected(fnc);
                }
            }
        }

        private void functionGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
                SelectFunction(e.RowIndex);
        }
    }
}

