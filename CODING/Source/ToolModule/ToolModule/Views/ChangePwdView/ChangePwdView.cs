//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;
using System.Web.Security;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.ToolModule.Constants;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.ToolModule.Interface.Constants;
using System.Text.RegularExpressions;
using PEA.BPM.Architecture.ArchitectureTool;


namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class ChangePwdView : UserControl, IChangePwdView
    {
        enum ChangePwdState : int
        {
            NewOnChange = 5,
            OnChange = 1,
            OffChange = 0
        }

        public ChangePwdView()
        {
            InitializeComponent();
            userNameText.Text = string.Format("{0}: {1}", Session.User.Id, Session.User.Name);
            oldPwdText.Focus();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ChangePwdViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            lblPw.Text = "5. รหัสผ่านต้องมีความยาว ตั้งแต่ " + CodeTable.Instant.GetAppSettingValue("ISO_MAX_LENGTH") + " ตัวอักษรขึ้นไป";
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            //_presenter.OnCloseView();
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            if( string.IsNullOrEmpty(oldPwdText.Text.Trim()))
            {
                MessageBox.Show("กรุณาป้อนรหัสผ่านเก่า", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pwdText.ResetText();
                rePwdText.ResetText();
                oldPwdText.Focus();
                return;
            }

            if ((pwdText.Text.Trim() == String.Empty) || (rePwdText.Text.Trim() == String.Empty))
            {
                MessageBox.Show("กรุณาป้อนรหัสผ่านใหม่/รหัสผ่านใหม่(ทวน)", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pwdText.ResetText();
                rePwdText.ResetText();
                pwdText.Focus();
                return;
            }

            if (PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.checkISO(pwdText.Text.Trim(), Session.User.Id, Session.User.Name) != "SUCCESS")
            {
                MessageBox.Show(PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.checkISO(pwdText.Text.Trim(), Session.User.Id, Session.User.Name), "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pwdText.ResetText();
                rePwdText.ResetText();
                pwdText.Focus();
                return;
            }

            if (pwdText.Text != rePwdText.Text)
            {
                MessageBox.Show("รหัสผ่านใหม่และรหัสผ่านทวนไม่ถูกต้อง", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pwdText.ResetText();
                rePwdText.ResetText();
                pwdText.Focus();
                return;
            }

            User user = new User();
            user.UserId = Session.User.Id;
            user.FullName = Session.User.Name;

            //user.Password = FormsAuthentication.HashPasswordForStoringInConfigFile(oldPwdText.Text, "SHA1");
            user.NewPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(pwdText.Text, "SHA1");
            user.ModifiedBy = Session.User.Id;
            user.ChangerId = Session.User.Id;
            user.ChangerPwd = FormsAuthentication.HashPasswordForStoringInConfigFile(oldPwdText.Text, "SHA1");
            user.PwdState = (int)ChangePwdState.NewOnChange;

            UpdateUserStatus result = (UpdateUserStatus)_presenter.Save(user);

            if (result == UpdateUserStatus.SUCCESS)
            {
                try
                {
                    if (!Session.Branch.OnlineConnection && Session.IsNetworkConnectionAvailable) //has branch server
                        PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.SignalSyncup(LocalSettingNames.DL070_TECHNICAL_BATCH);  //syncdown
                }
                catch (Exception k)
                {
                    //ignored
                }

                MessageBox.Show("บันทึกข้อมูลเรียบร้อย", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Session.Work.OnCloseNotify = false; //not to notify
                Application.Exit();
            }
            else if (result == UpdateUserStatus.INCORRECTPWD)
            {                
                MessageBox.Show("รหัสผ่านเดิมไม่ถูกต้อง ", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Error);
                oldPwdText.ResetText();
                pwdText.ResetText();
                rePwdText.ResetText();
                oldPwdText.Focus();
            }
            else
            {
                MessageBox.Show("ไม่สามารถบันทึกข้อมูลได้ ", "ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Error);
                _presenter.OnCloseView();
            }
        }

        private void oldPwdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (string.IsNullOrEmpty(oldPwdText.Text.Trim()))
                {
                    MessageBox.Show("กรุณาป้อนรหัสผ่านเก่า", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pwdText.ResetText();
                    rePwdText.ResetText();
                    oldPwdText.Focus();
                }
                else
                    pwdText.Focus();
            }
        }

        private void pwdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (pwdText.Text.Trim() == String.Empty) 
                {
                    MessageBox.Show("กรุณาป้อนรหัสผ่านใหม่", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pwdText.Focus();
                }
                else
                    rePwdText.Focus();
            }
        }

        private void rePwdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if ((pwdText.Text.Trim() == String.Empty) || (rePwdText.Text.Trim() == String.Empty))
                {
                    MessageBox.Show("กรุณาป้อนรหัสผ่านใหม่(ทวน)", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    rePwdText.Focus();
                }

                if (pwdText.Text != rePwdText.Text)
                {
                    MessageBox.Show("รหัสผ่านใหม่และรหัสผ่านทวนไม่ถูกต้อง", "ข้อมูลไม่ครบถ้วน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pwdText.ResetText();
                    rePwdText.ResetText();
                    pwdText.Focus();
                }
                else 
                    okBt.Focus();
            }
                
        }

        private void pwdText_TextChanged(object sender, EventArgs e)
        {
            lblPasswordStrength.Text = PEA.BPM.Architecture.ArchitectureTool.Security.Authorization.GetPasswordStrength(pwdText.Text);
            switch (lblPasswordStrength.Text)
            {
                case "Strong":
                    lblPasswordStrength.BackColor = System.Drawing.Color.LightGreen;
                    break;
                case "Good":
                    lblPasswordStrength.BackColor = System.Drawing.Color.Yellow;
                    break;
                case "Medium":
                    lblPasswordStrength.BackColor = System.Drawing.Color.Orange;
                    break;
                default:
                    lblPasswordStrength.BackColor = System.Drawing.Color.Red;
                    break;
            }
        }
    }

        
}

