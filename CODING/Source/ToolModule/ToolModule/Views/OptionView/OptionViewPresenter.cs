//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.ToolModule.Interface.Constants;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.PrintUtilities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.BillPrintingModule.BillPrintingUtilities;

namespace PEA.BPM.ToolModule
{
    public class OptionViewPresenter : Presenter<IOptionView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventSubscription(EventTopicNames.OnCloseViewDisconnect, Thread = ThreadOption.UserInterface)]
        public void OnCloseViewDisconnectHandler(object sender, EventArgs e)
        {
            base.CloseView();
        }

        //--TEST PRINT --Start

        public void TestPrintBLAN(List<Bills> bills, string printType)
        {
            DoPrint(bills, printType);
        }

        private void DoPrint(List<Bills> _billTxt, string printType)
        {
            //string[] printerCode = GetPrinterConfig(printType);  
            //for (int i = 0; i < _billTxt.Count; i++)
            //{
            //    if (_billTxt[i].BillTxt.Contains("BLAN_Barcode") && printType != "A")
            //    {
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Start", BarcodeMapping(printerCode[1]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Stop", BarcodeMapping(printerCode[2]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Start", BarcodeMapping(printerCode[3]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Stop", BarcodeMapping(printerCode[4]));
            //    }
            //    else
            //    {
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Start", BarcodeMapping(printerCode[5]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Stop", BarcodeMapping(printerCode[6]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Start", BarcodeMapping(printerCode[5]));
            //        _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Stop", BarcodeMapping(printerCode[6]));
            //    }

            //    RawPrinterHelper.SendStringToPrinter(printerCode[0], _billTxt[i].BillTxt);
            //}


            string[] printerCode = GetPrinterConfig(printType);
            for (int i = 0; i < _billTxt.Count; i++)
            {
                if (_billTxt[i].BillTxt.Contains("BLAN_Barcode"))
                {
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Start", BarcodeMapping(printerCode[1]));
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_1_Stop", BarcodeMapping(printerCode[2]));
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Start", BarcodeMapping(printerCode[3]));
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_2_Stop", BarcodeMapping(printerCode[4]));

                    #region #ISSUE NEW FORM
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_3_Start", BarcodeMapping(printerCode[7]));
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_Barcode_3_Stop", BarcodeMapping(printerCode[8]));
                    #endregion

                }
                else if (_billTxt[i].BillTxt.Contains("BLAN_A4_Barcode"))
                {
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_A4_Barcode_Start", BarcodeMapping(printerCode[5]));
                    _billTxt[i].BillTxt = _billTxt[i].BillTxt.Replace("BLAN_A4_Barcode_Stop", BarcodeMapping(printerCode[6]));
                }

                LocalSettingHelper hp = LocalSettingHelper.Instance();
                string printTarget = hp.Read("PrintTarget").ToString();

                //send to printer
                if (printTarget == "A" || printTarget == "P")
                    //RawPrinterHelper.SendStringToPrinter(GetPrinterName(), _billTxt[i].BillTxt);
                    RawPrinterHelper.SendStringToPrinter(printerCode[0], _billTxt[i].BillTxt);

            }
        }


        private string[] GetPrinterConfig(string printType)
        {
            string[] printerCfg = new string[9];

            try
            {
                LocalSettingHelper hp = LocalSettingHelper.Instance();

                if (printType == "B")
                {
                    if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
                    else if (hp.Read(LocalSettingNames.PrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();


                    if (hp.Read(LocalSettingNames.BlueBillPrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            //CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
                            //printerCfg[1] = barcode.BarcodeTxt1Start;
                            //printerCfg[2] = barcode.BarcodeTxt1Stop;
                            //printerCfg[3] = barcode.BarcodeTxt2Start;
                            //printerCfg[4] = barcode.BarcodeTxt2Stop;
                            Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                            printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
                            printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
                            printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
                            printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];
                            #region #ISSUE NEW FORM
                            printerCfg[7] = cmdPrinter["BarcodeTxt3Start"];
                            printerCfg[8] = cmdPrinter["BarcodeTxt3Stop"];
                            #endregion
                        }
                        else
                        {
                            printerCfg[1] = hp.Read(LocalSettingNames.BlueBillBarcode1Start).ToString();
                            printerCfg[2] = hp.Read(LocalSettingNames.BlueBillBarcode1Stop).ToString();
                            printerCfg[3] = hp.Read(LocalSettingNames.BlueBillBarcode2Start).ToString();
                            printerCfg[4] = hp.Read(LocalSettingNames.BlueBillBarcode2Stop).ToString();

                            #region #ISSUE NEW FORM
                            printerCfg[7] = hp.Read(LocalSettingNames.BlueBillBarcode3Start).ToString();
                            printerCfg[8] = hp.Read(LocalSettingNames.BlueBillBarcode3Stop).ToString();
                            #endregion

                        }
                    }
                    else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                            printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
                            printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
                            printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
                            printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];
                            #region #ISSUE NEW FORM
                            printerCfg[7] = cmdPrinter["BarcodeTxt3Start"];
                            printerCfg[8] = cmdPrinter["BarcodeTxt3Stop"];
                            #endregion
                        }
                        else
                        {
                            printerCfg[1] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                            printerCfg[2] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
                            printerCfg[3] = hp.Read(LocalSettingNames.Barcode2Start).ToString();
                            printerCfg[4] = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
                            #region #ISSUE NEW FORM
                            printerCfg[7] = hp.Read(LocalSettingNames.BlueBillBarcode3Start).ToString();
                            printerCfg[8] = hp.Read(LocalSettingNames.BlueBillBarcode3Stop).ToString();
                            #endregion
                        }
                    }
                }

                if (printType == "A")
                {
                    if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
                    else if (hp.Read(LocalSettingNames.PrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();

                    if (hp.Read(LocalSettingNames.A4BillPrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
                        //CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
                        //printerCfg[5] = barcode.BarcodeA4Start;
                        //printerCfg[6] = barcode.BarcodeA4Stop;
                        Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                        printerCfg[5] = cmdPrinter["BarcodeA4Start"];
                        printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
                    }
                    else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
                    {
                        int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                        if (barcodeChoice != 7)
                        {
                            Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
                            printerCfg[5] = cmdPrinter["BarcodeA4Start"];
                            printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
                        }
                        else
                        {
                            printerCfg[5] = hp.Read(LocalSettingNames.BarcodeA4Start).ToString();
                            printerCfg[6] = hp.Read(LocalSettingNames.BarcodeA4Stop).ToString();
                        }
                    }
                }

                if (printType == "G")
                {
                    if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
                    else if (hp.Read(LocalSettingNames.PrinterName) != null)
                        printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();
                }
            }
            catch (Exception)
            {
                //do nothing, return empty arrays
            }


            return printerCfg;
        }

        //private string[] GetPrinterConfig(string printType)
        //{
        //    string[] printerCfg = new string[7];

        //    LocalSettingHelper hp = LocalSettingHelper.Instance();

        //    if (printType == "B")
        //    {
        //        if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
        //        else if (hp.Read(LocalSettingNames.PrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();


        //        if (hp.Read(LocalSettingNames.BlueBillPrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
        //            if (barcodeChoice != 7)
        //            {
        //                //CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
        //                //printerCfg[1] = barcode.BarcodeTxt1Start;
        //                //printerCfg[2] = barcode.BarcodeTxt1Stop;
        //                //printerCfg[3] = barcode.BarcodeTxt2Start;
        //                //printerCfg[4] = barcode.BarcodeTxt2Stop;
        //                Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
        //                printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
        //                printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
        //                printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
        //                printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];
        //            }
        //            else
        //            {
        //                printerCfg[1] = hp.Read(LocalSettingNames.BlueBillBarcode1Start).ToString();
        //                printerCfg[2] = hp.Read(LocalSettingNames.BlueBillBarcode1Stop).ToString();
        //                printerCfg[3] = hp.Read(LocalSettingNames.BlueBillBarcode2Start).ToString();
        //                printerCfg[4] = hp.Read(LocalSettingNames.BlueBillBarcode2Stop).ToString();
        //            }
        //        }
        //        else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
        //            if (barcodeChoice != 7)
        //            {
        //                Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
        //                printerCfg[1] = cmdPrinter["BarcodeTxt1Start"];
        //                printerCfg[2] = cmdPrinter["BarcodeTxt1Stop"];
        //                printerCfg[3] = cmdPrinter["BarcodeTxt2Start"];
        //                printerCfg[4] = cmdPrinter["BarcodeTxt2Stop"];
        //            }
        //            else
        //            {
        //                printerCfg[1] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
        //                printerCfg[2] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
        //                printerCfg[3] = hp.Read(LocalSettingNames.Barcode2Start).ToString();
        //                printerCfg[4] = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
        //            }
        //        }
        //    }

        //    if (printType == "A")
        //    {
        //        if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
        //        else if (hp.Read(LocalSettingNames.PrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();

        //        if (hp.Read(LocalSettingNames.A4BillPrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
        //            //CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
        //            //printerCfg[5] = barcode.BarcodeA4Start;
        //            //printerCfg[6] = barcode.BarcodeA4Stop;
        //            Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
        //            printerCfg[5] = cmdPrinter["BarcodeA4Start"];
        //            printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
        //        }
        //        else if (hp.Read(LocalSettingNames.PrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
        //            if (barcodeChoice != 7)
        //            {
        //                Dictionary<string, string> cmdPrinter = BlanLocalSettingHelper.GetCommandCode(barcodeChoice);
        //                printerCfg[5] = cmdPrinter["BarcodeA4Start"];
        //                printerCfg[6] = cmdPrinter["BarcodeA4Stop"];
        //            }
        //            else
        //            {
        //                printerCfg[5] = hp.Read(LocalSettingNames.BarcodeA4Start).ToString();
        //                printerCfg[6] = hp.Read(LocalSettingNames.BarcodeA4Stop).ToString();
        //            }
        //        }
        //    }

        //    if (printType == "G")
        //    {
        //        if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
        //        else if (hp.Read(LocalSettingNames.PrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();
        //    }


        //    return printerCfg;
        //}
//-------------------------------------------------------------
        //private string[] GetPrinterConfig(string printType)
        //{
        //    //string[] printerCfg = new string[5];

        //    //LocalSettingHelper hp = LocalSettingHelper.Instance();

        //    //if (hp.Read(LocalSettingNames.PrinterName) != null)
        //    //    printerCfg[0] = hp.Read(LocalSettingNames.PrinterName).ToString();
        //    //else
        //    //    printerCfg[0] = String.Empty;
        //    //if (hp.Read(LocalSettingNames.Barcode1Start) != null)
        //    //    printerCfg[1] = hp.Read(LocalSettingNames.Barcode1Start).ToString();
        //    //else
        //    //    printerCfg[1] = String.Empty;
        //    //if (hp.Read(LocalSettingNames.Barcode1Stop) != null)
        //    //    printerCfg[2] = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
        //    //else
        //    //    printerCfg[2] = String.Empty;
        //    //if (hp.Read(LocalSettingNames.Barcode2Start) != null)
        //    //    printerCfg[3] = hp.Read(LocalSettingNames.Barcode2Start).ToString();
        //    //else
        //    //    printerCfg[3] = String.Empty;
        //    //if (hp.Read(LocalSettingNames.Barcode2Stop) != null)
        //    //    printerCfg[4] = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
        //    //else
        //    //    printerCfg[4] = String.Empty;

        //    string[] printerCfg = new string[7];

        //    LocalSettingHelper hp = LocalSettingHelper.Instance();

        //    if (printType == "B")
        //    {
        //        if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();

        //        if (hp.Read(LocalSettingNames.BlueBillPrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
        //            CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
        //            printerCfg[1] = barcode.BarcodeTxt1Start;
        //            printerCfg[2] = barcode.BarcodeTxt1Stop;
        //            printerCfg[3] = barcode.BarcodeTxt2Start;
        //            printerCfg[4] = barcode.BarcodeTxt2Stop;
        //        }
        //    }

        //    if (printType == "A")
        //    {
        //        if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();

        //        if (hp.Read(LocalSettingNames.A4BillPrinterChoice) != null)
        //        {
        //            int barcodeChoice = Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
        //            CommandCodeForBarcode barcode = new CommandCodeForBarcode(barcodeChoice);
        //            printerCfg[5] = barcode.BarcodeA4Start;
        //            printerCfg[6] = barcode.BarcodeA4Stop;
        //        }
        //    }

        //    if (printType == "G")
        //    {
        //        if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
        //            printerCfg[0] = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
        //    }


        //    return printerCfg;


        //    //return printerCfg;
        //}

        private string BarcodeMapping(string bCode)
        {
            string realBarCode = string.Empty;

            if (bCode != null || bCode != string.Empty)
            {
                char[] seperator = new char[] { '#' };
                string[] p1 = bCode.Trim().Split(seperator, StringSplitOptions.RemoveEmptyEntries);

                for (int i = 0; i <= p1.Length - 1; i++)
                {
                    try
                    {
                        realBarCode = realBarCode + Ch(Convert.ToInt32(p1[i]));
                    }
                    catch
                    {
                        if (p1[i].Substring(0, 1) == "$")
                            p1[i] = p1[i].Replace("$", "");

                        realBarCode = realBarCode + p1[i];
                    }
                }
            }

            return realBarCode;
        }

        private string Ch(int value)
        {
            return ((char)value).ToString();
        }

        private string GetPrinterName()
        {
            string printerName = "";
            LocalSettingHelper hp = LocalSettingHelper.Instance();

            //if (hp.Read(LocalSettingNames.PrinterName) != null)
            //{
            //    printerName = hp.Read(LocalSettingNames.PrinterName).ToString();
            //}

            return printerName;
        }

        public void TestPrintReport(object value)
        { 
        
        }

        [EventPublication(EventTopicNames.TestPrintPOSReceipt, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<PrintingInfo>>> PrintingInfoHandler;
        public void TestPrintPOSReceipt(List<PrintingInfo> printingInfo)
        {
            if (PrintingInfoHandler != null)
                PrintingInfoHandler(this, new EventArgs<List<PrintingInfo>>(printingInfo));
        }

        [EventPublication(EventTopicNames.TestPrintPOSReport, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<CAC05Report>>> TestPrintPOSReportHandler;
        public void TestPrintPOSReport(List<CAC05Report> datasource)
        {

            if (TestPrintPOSReportHandler != null)
            {
                WorkItem.State["IReportContainerView"] = true;
                TestPrintPOSReportHandler(this, new EventArgs<List<CAC05Report>>(datasource));
            }

        }     

        [EventPublication(EventTopicNames.TestPrintAGENCYReport, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<BillBookInfoDetailReport>>> TestPrintAGENCYReportHandler;
        public void TestPrintAGENCYReport(List<BillBookInfoDetailReport> datasource)
        {

            if (TestPrintAGENCYReportHandler != null)
            {
                WorkItem.State["IReportContainerView"] = true;
                TestPrintAGENCYReportHandler(this, new EventArgs<List<BillBookInfoDetailReport>>(datasource));
            }
        }

        [EventPublication(EventTopicNames.TestPrintBLAN_F16, PublicationScope.Global)]
        public event EventHandler<EventArgs<List<ReportF16>>> TestPrintBLAN_F16Handler;
        public void TestPrintBLAN_F16Report(List<ReportF16> datasource)
        {

            if (TestPrintBLAN_F16Handler != null)
            {
                WorkItem.State["IReportContainerView"] = true;
                TestPrintBLAN_F16Handler(this, new EventArgs<List<ReportF16>>(datasource));
            }
        }   
        //--TEST PRINT --End
    }
}

