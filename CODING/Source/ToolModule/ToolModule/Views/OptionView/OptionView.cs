//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.CommonUtilities;
using System.Drawing.Printing;
using PEA.BPM.ToolModule.Interface.Constants;
using System.Data;
using System.Collections;
using System.Runtime.Serialization;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities;
using System.Collections.Generic;
using PEA.BPM.Architecture.ArchitectureInterface.Constants;
using PEA.BPM.BillPrintingModule.Interface.BusinessEntities;
using PEA.BPM.PaymentCollectionModule.Interface.BusinessEntities.Reports;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.ToolModule.Views.OptionView;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class OptionView : UserControl, IOptionView
    {
        #region "Variables"

        private string _blueBillPrinterName = "";
        private int _blueBillPrinterBarcode = 0;
        private string _greenBillPrinterName = "";
        private string _a4BillPrinterName = "";
        private int _a4BillPrinterBarcode = 0;

        private string _blueBillBarcodeTxt1Start = "";
        private string _blueBillBarcodeTxt1Stop = "";
        private string _blueBillBarcodeTxt2Start = "";
        private string _blueBillBarcodeTxt2Stop = "";

        #region #ISSUE NEW FORM
        private string _blueBillBarcodeTxt3Start = "";
        private string _blueBillBarcodeTxt3Stop = "";
        #endregion

        private string _a4BillBarcodeTxt1Start = "";
        private string _a4BillBarcodeTxt1Stop = "";
        private string _a4BillBarcodeTxt2Start = "";
        private string _a4BillBarcodeTxt2Stop = "";

        private string _slipPosPrinterName = "";
        private string _prePrintedPrinterName = "";
        private string _agencyPrinterName = "";

        private bool _isViewReady;
        private bool _isValueChanged;
        private int _choice;
        private int _selectedPrintType = -1;

        #endregion

        #region "Code Generated"

        public OptionView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public OptionViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            PopulateInstalledPrintersCombo();
            //Hide the first tab (Agency Printer Setting because we will use one setting for all module printing
            printerTab.TabPages.Remove(printerTab.TabPages[0]);
            LoadPrinterConfig();

            _isViewReady = true;

            StartPrintTestTab();
        }

        #endregion

        #region "Event Handling"

        private void SaveButtonClick(object sender, EventArgs e)
        {
            try
            {
                _blueBillPrinterName = blueBillPrinterComboBox.Text;
                _a4BillPrinterName = a4BillPrinterComboBox.Text;
                _greenBillPrinterName = greenBillPrinterComboBox.Text;

                _blueBillPrinterBarcode = blueBillPrinterBarcodeComboBox.SelectedIndex;
                _a4BillPrinterBarcode = a4BillPrinterBarcodeComboBox.SelectedIndex;

                _slipPosPrinterName = slipPOSInstalledPrintersComboBox.Text;
                _prePrintedPrinterName = prePrintedInstalledPrintersComboBox.Text;
                _agencyPrinterName = agencyPrintersComboBox.Text;

                LocalSettingHelper hp = LocalSettingHelper.Instance();

                hp.Add(LocalSettingNames.SlipPOSPrinterName, _slipPosPrinterName);
                hp.Add(LocalSettingNames.PrePrintedPrinterName, _prePrintedPrinterName);
                hp.Add(LocalSettingNames.AgencyPrinterName, _agencyPrinterName);

                hp.Add(LocalSettingNames.BlueBillPrinterName, _blueBillPrinterName);
                hp.Add(LocalSettingNames.BlueBillPrinterChoice, _blueBillPrinterBarcode);
                hp.Add(LocalSettingNames.GreenBillPrinterName, _greenBillPrinterName);
                hp.Add(LocalSettingNames.A4BillPrinterName, _a4BillPrinterName);
                hp.Add(LocalSettingNames.A4BillPrinterChoice, _a4BillPrinterBarcode);

                if (blueBillPrinterBarcodeComboBox.SelectedIndex == 7)
                {
                    hp.Add(LocalSettingNames.BlueBillBarcode1Start, _blueBillBarcodeTxt1Start);
                    hp.Add(LocalSettingNames.BlueBillBarcode2Start, _blueBillBarcodeTxt2Start);
                    hp.Add(LocalSettingNames.BlueBillBarcode1Stop, _blueBillBarcodeTxt1Stop);
                    hp.Add(LocalSettingNames.BlueBillBarcode2Stop, _blueBillBarcodeTxt2Stop);

                    #region #ISSUE NEW FORM
                    hp.Add(LocalSettingNames.BlueBillBarcode3Start, _blueBillBarcodeTxt3Start);
                    hp.Add(LocalSettingNames.BlueBillBarcode3Stop, _blueBillBarcodeTxt3Stop);
                    #endregion
                }

                if (a4BillPrinterBarcodeComboBox.SelectedIndex == 7)
                {
                    hp.Add(LocalSettingNames.A4BillBarcode1Start, _a4BillBarcodeTxt1Start);
                    hp.Add(LocalSettingNames.A4BillBarcode2Start, _a4BillBarcodeTxt2Start);
                    hp.Add(LocalSettingNames.A4BillBarcode1Stop, _a4BillBarcodeTxt1Stop);
                    hp.Add(LocalSettingNames.A4BillBarcode2Stop, _a4BillBarcodeTxt2Stop);
                }

                MessageBox.Show(@"ทำการบันทึกเรียบร้อยแล้ว", @"ผลการบันทึก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                
                _presenter.OnCloseView();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), @"ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void CancelButtonClick(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

        private void BlueBillPrinterBarcodeComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                if (blueBillPrinterBarcodeComboBox.SelectedIndex == 7)
                    ShowBlueBillBarcodeDialog();
                else
                    blueBillBarcodeStatusLabel.Visible = false;
            

                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void BlueBillPrinterComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void SlipPosInstalledPrintersComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void A4BillPrinterComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void A4BillPrinterBarcodeComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                if (a4BillPrinterBarcodeComboBox.SelectedIndex == 7)
                    ShowA4BarcodeDialog();
                else
                    a4BillBarcodeStatusLabel.Visible = false;

                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void GreenBillPrinterComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void AgencyPrintersComboBoxSelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isViewReady)
            {
                _isValueChanged = true;
                saveButton.Enabled = true;
            }
        }

        private void BlueBillBarcodeStatusLabelMouseClick(object sender, MouseEventArgs e)
        {
            ShowBlueBillBarcodeDialog();
        }

        private void A4BillBarcodeStatusLabelMouseClick(object sender, MouseEventArgs e)
        {
            ShowA4BarcodeDialog();
        }

        private void BlueBillBarcodeStatusLabelMouseEnter(object sender, EventArgs e)
        {
            blueBillBarcodeStatusLabel.Font = new Font(blueBillBarcodeStatusLabel.Font.FontFamily, blueBillBarcodeStatusLabel.Font.Size,
                              FontStyle.Underline);
        }

        private void BlueBillBarcodeStatusLabelMouseLeave(object sender, EventArgs e)
        {
            blueBillBarcodeStatusLabel.Font = new Font(blueBillBarcodeStatusLabel.Font.FontFamily, blueBillBarcodeStatusLabel.Font.Size,
                              FontStyle.Regular);
        }

        private void A4BillBarcodeStatusLabelMouseEnter(object sender, EventArgs e)
        {
            a4BillBarcodeStatusLabel.Font = new Font(a4BillBarcodeStatusLabel.Font.FontFamily,
                                                     a4BillBarcodeStatusLabel.Font.Size, FontStyle.Underline);
        }

        private void A4BillBarcodeStatusLabelMouseLeave(object sender, EventArgs e)
        {
            a4BillBarcodeStatusLabel.Font = new Font(a4BillBarcodeStatusLabel.Font.FontFamily,
                                                    a4BillBarcodeStatusLabel.Font.Size, FontStyle.Regular);
        }


        #endregion

        #region "Function"

        private void PopulateInstalledPrintersCombo()
        {
            for (int i = 0; i < PrinterSettings.InstalledPrinters.Count; i++)
            {
                string pkInstalledPrinters = PrinterSettings.InstalledPrinters[i];
                blueBillPrinterComboBox.Items.Add(pkInstalledPrinters);
                greenBillPrinterComboBox.Items.Add(pkInstalledPrinters);
                a4BillPrinterComboBox.Items.Add(pkInstalledPrinters);

                slipPOSInstalledPrintersComboBox.Items.Add(pkInstalledPrinters);
                prePrintedInstalledPrintersComboBox.Items.Add(pkInstalledPrinters);
                agencyPrintersComboBox.Items.Add(pkInstalledPrinters);
            }
        }

        private void LoadPrinterConfig()
        {
            LocalSettingHelper hp = LocalSettingHelper.Instance();

            if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
            {
                _blueBillPrinterName = hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
                blueBillPrinterComboBox.Text = _blueBillPrinterName; //hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
                _blueBillPrinterBarcode = Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
                blueBillPrinterBarcodeComboBox.SelectedIndex = _blueBillPrinterBarcode; //Convert.ToInt16(hp.Read(LocalSettingNames.BlueBillPrinterChoice));
            }
            else
            {
                if(hp.Read(LocalSettingNames.PrinterName) != null)
                {
                    _blueBillPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                    blueBillPrinterComboBox.Text = _blueBillPrinterName; //hp.Read(LocalSettingNames.BlueBillPrinterName).ToString();
                    _blueBillPrinterBarcode = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                    blueBillPrinterBarcodeComboBox.SelectedIndex = _blueBillPrinterBarcode;
                }
            }

            if (hp.Read(LocalSettingNames.GreenBillPrinterName) != null)
            {
                _greenBillPrinterName = hp.Read(LocalSettingNames.GreenBillPrinterName).ToString();
                greenBillPrinterComboBox.Text = _greenBillPrinterName; //hp.Read(LocalSettingNames.GreenBillPrinterName).ToString();
            }
            else
            {
                if (hp.Read(LocalSettingNames.PrinterName) != null)
                {
                    _greenBillPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                    greenBillPrinterComboBox.Text = _greenBillPrinterName;
                }
            }

            if (hp.Read(LocalSettingNames.A4BillPrinterName) != null)
            {
                _a4BillPrinterName = hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
                a4BillPrinterComboBox.Text = _a4BillPrinterName; //hp.Read(LocalSettingNames.A4BillPrinterName).ToString();
                _a4BillPrinterBarcode = Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
                a4BillPrinterBarcodeComboBox.SelectedIndex = _a4BillPrinterBarcode; //Convert.ToInt16(hp.Read(LocalSettingNames.A4BillPrinterChoice));
            }
            else
            {
                if (hp.Read(LocalSettingNames.PrinterName) != null)
                {
                    _a4BillPrinterName = hp.Read(LocalSettingNames.PrinterName).ToString();
                    a4BillPrinterComboBox.Text = _a4BillPrinterName;
                    _a4BillPrinterBarcode = Convert.ToInt16(hp.Read(LocalSettingNames.PrinterChoice));
                    a4BillPrinterBarcodeComboBox.SelectedIndex = _a4BillPrinterBarcode;
                }
            }

            if (_blueBillPrinterBarcode == 7)
            {
                if (hp.Read(LocalSettingNames.BlueBillBarcode1Start) != null)
                {
                    _blueBillBarcodeTxt1Start = hp.Read(LocalSettingNames.BlueBillBarcode1Start).ToString();
                    _blueBillBarcodeTxt2Start = hp.Read(LocalSettingNames.BlueBillBarcode2Start).ToString();
                    _blueBillBarcodeTxt1Stop = hp.Read(LocalSettingNames.BlueBillBarcode1Stop).ToString();
                    _blueBillBarcodeTxt2Stop = hp.Read(LocalSettingNames.BlueBillBarcode2Stop).ToString();

                    #region #ISSUE NEW FORM
                    _blueBillBarcodeTxt3Start = hp.Read(LocalSettingNames.BlueBillBarcode3Start).ToString();                   
                    _blueBillBarcodeTxt3Stop = hp.Read(LocalSettingNames.BlueBillBarcode3Stop).ToString();
                    #endregion
                    blueBillBarcodeStatusLabel.Visible = true;
                }
                else
                {
                    _blueBillBarcodeTxt1Start = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                    _blueBillBarcodeTxt2Start = hp.Read(LocalSettingNames.Barcode2Start).ToString();
                    _blueBillBarcodeTxt1Stop = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
                    _blueBillBarcodeTxt2Stop = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
                }
            }

            if (_a4BillPrinterBarcode == 7)
            {
                if (hp.Read(LocalSettingNames.A4BillBarcode1Start) != null)
                {
                    _a4BillBarcodeTxt1Start = hp.Read(LocalSettingNames.A4BillBarcode1Start).ToString();
                    _a4BillBarcodeTxt2Start = hp.Read(LocalSettingNames.A4BillBarcode2Start).ToString();
                    _a4BillBarcodeTxt1Stop = hp.Read(LocalSettingNames.A4BillBarcode1Stop).ToString();
                    _a4BillBarcodeTxt2Stop = hp.Read(LocalSettingNames.A4BillBarcode2Stop).ToString();
                    a4BillBarcodeStatusLabel.Visible = true;
                }
                else
                {
                    _a4BillBarcodeTxt1Start = hp.Read(LocalSettingNames.Barcode1Start).ToString();
                    _a4BillBarcodeTxt2Start = hp.Read(LocalSettingNames.Barcode2Start).ToString();
                    _a4BillBarcodeTxt1Stop = hp.Read(LocalSettingNames.Barcode1Stop).ToString();
                    _a4BillBarcodeTxt2Stop = hp.Read(LocalSettingNames.Barcode2Stop).ToString();
                }
            }
            
           
            if (hp.Read(LocalSettingNames.SlipPOSPrinterName) != null)
                slipPOSInstalledPrintersComboBox.Text = hp.Read(LocalSettingNames.SlipPOSPrinterName).ToString();
            if (hp.Read(LocalSettingNames.PrePrintedPrinterName) != null)
                prePrintedInstalledPrintersComboBox.Text = hp.Read(LocalSettingNames.PrePrintedPrinterName).ToString();
            if (hp.Read(LocalSettingNames.AgencyPrinterName) != null)
                agencyPrintersComboBox.Text = hp.Read(LocalSettingNames.AgencyPrinterName).ToString();
        }

        #endregion

        #region "Print Testing"

        private ListBox selectedList = new ListBox();
        private DataTable dtModuleRow = new DataTable("dtModuleRow");

        private void StartPrintTestTab()
        {
            dtModuleRow.Columns.Add("Module", System.Type.GetType("System.String"));
            dtModuleRow.Columns.Add("Object", System.Type.GetType("System.String"));
            dtModuleRow.Columns.Add("PrinterName", System.Type.GetType("System.String"));
            dtModuleRow.Rows.Add("AGENCY", "tlpPrintListBody0", "AgencyPrinterName");
            dtModuleRow.Rows.Add("BLAN", "tlpPrintListBody1", "BlueBillPrinterName");
            dtModuleRow.Rows.Add("BLAN", "tlpPrintListBody2", "A4BillPrinterName");
            dtModuleRow.Rows.Add("BLAN", "tlpPrintListBody3", "GreenBillPrinterName");
            dtModuleRow.Rows.Add("BLAN", "tlpPrintListBody4", "A4BillPrinterName");
            dtModuleRow.Rows.Add("POS", "tlpPrintListBody5", "PrePrintedPrinterName");
            dtModuleRow.Rows.Add("POS", "tlpPrintListBody6", "SlipPOSPrinterName");
            dtModuleRow.Rows.Add("POS", "tlpPrintListBody7", "PrePrintedPrinterName");
            dtModuleRow.Rows.Add("EPAY", "tlpPrintListBody3", "PrinterName");
            dtModuleRow.Rows.Add("EPAY", "tlpPrintListBody5", "PrePrintedPrinterName");

            chklstBoxModule.Items.Add("AGENCY", true);
            chklstBoxModule.Items.Add("BLAN", true);
            chklstBoxModule.Items.Add("EPAY", true);
            chklstBoxModule.Items.Add("POS", true);
            selectedList.Items.Add("AGENCY");
            selectedList.Items.Add("BLAN");
            selectedList.Items.Add("EPAY");
            selectedList.Items.Add("POS");

            SetEnableTestPrintBtnByPrinterConfig();
        }

        private void SetEnableTestPrintBtnByPrinterConfig()
        {
            SetEnableObject("All", false);

            LocalSettingHelper hp = LocalSettingHelper.Instance();
            if (hp.Read(LocalSettingNames.BlueBillPrinterName) != null)
            {
                //if ((String)hp.Read(LocalSettingNames.PrinterName) != String.Empty)
                //    SetEnableObject(LocalSettingNames.PrinterName, true);

                if((String)hp.Read(LocalSettingNames.BlueBillPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.BlueBillPrinterName, true);
                if ((String)hp.Read(LocalSettingNames.GreenBillPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.GreenBillPrinterName, true);
                if ((String)hp.Read(LocalSettingNames.A4BillPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.A4BillPrinterName, true);
                if ((String)hp.Read(LocalSettingNames.SlipPOSPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.SlipPOSPrinterName, true);
                if ((String)hp.Read(LocalSettingNames.PrePrintedPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.PrePrintedPrinterName, true);
                if ((String)hp.Read(LocalSettingNames.AgencyPrinterName) != String.Empty)
                    SetEnableObject(LocalSettingNames.AgencyPrinterName, true);
            }
        }

        private void SetEnableObject(string printerName, bool enableValue)
        {
            if (printerName == "All")
                printerName = "%";

            DataRow[] rowsOfObject = dtModuleRow.Select(string.Format("PrinterName like '{0}'", printerName));
            for (int i = 0; i < rowsOfObject.Length; i++)
            {
                this.Controls.Find((String) rowsOfObject[i]["Object"], true)[0].Enabled = enableValue;
            }
        }

        private void chklstBoxModule_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (chklstBoxModule.SelectedItems.Count > 0)
            {
                string aModule = chklstBoxModule.SelectedItem.ToString();
                if (e.NewValue == CheckState.Checked)
                {
                    selectedList.Items.Add(aModule);
                    SetVisibleRowByModule(aModule, true);
                }
                else
                {
                    selectedList.Items.Remove(aModule);
                    SetVisibleRowByModule(aModule, false);
                }

                //MessageBox.Show(this, "itemCheck: "+selectedList.Items.Count.ToString(), "ข้อความ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void SetVisibleRowByModule(string aModule, bool operatorFlag)
        {
            //set visible
            if (operatorFlag == true)
            {
                tlpPrintListBodyNone.Visible = false;

                DataRow[] currentRows = dtModuleRow.Select(string.Format("Module = '{0}'", aModule));
                for (int i = 0; i < currentRows.Length; i++)
                {
                    foreach (Control aControl in flpPrintListBody.Controls)
                    {
                        if (aControl is TableLayoutPanel)
                            if (aControl.Name == currentRows[i]["Object"].ToString())
                                aControl.Visible = true;
                    }
                }
            }
                //set invisible 
            else if (operatorFlag == false)
            {
                //get row name which is selected by module
                string strLineModule = "";
                if (selectedList.Items.Count > 0)
                {
                    for (int i = 0; i < selectedList.Items.Count; i++)
                    {
                        string strModule = selectedList.Items[i].ToString();
                        if (i == 0)
                            strLineModule = string.Format("'{0}'", strModule);
                        else
                            strLineModule += string.Format(",'{0}'", strModule);
                    }
                }
                DataRow[] selectedRows = null;
                if (selectedList.Items.Count > 0)
                    selectedRows = dtModuleRow.Select(string.Format("Module in ({0})", strLineModule));


                //get row name which is unchecked .
                DataRow[] currentRows = dtModuleRow.Select(string.Format("Module = '{0}'", aModule));


                for (int i = 0; i < currentRows.Length; i++)
                {
                    //do not set invisible some rows
                    if (selectedList.Items.Count > 0)
                    {
                        foreach (DataRow aSelectedRow in selectedRows)
                        {
                            if ((String) currentRows[i]["Object"] == (String) aSelectedRow["Object"])
                                goto NEXT_LOOP;
                        }
                    }
                    else
                    {
                        tlpPrintListBodyNone.Visible = true;
                    }

                    //set invisible row
                    foreach (Control aControl in flpPrintListBody.Controls)
                    {
                        if (aControl is TableLayoutPanel)
                        {
                            if (aControl.Name == (String) currentRows[i]["Object"])
                            {
                                aControl.Visible = false;
                                break;
                            }
                        }
                    }

                    NEXT_LOOP:
                    ;
                }
            }
        }

        private void btnTestPrint_Click(object sender, EventArgs e)
        {
            if (DialogResult.OK ==
                MessageBox.Show(
                    "คำยืนยัน: คุณต้องการทดสอบการพิมพ์นี้ ใช่หรือไม่\n\nกรุณาตรวจสอบกระดาษและเครื่องพิมพ์\nและโปรดกดปุ่ม 'OK' เพื่อยืนยันการพิมพ์",
                    "ข้อความยืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question,
                    MessageBoxDefaultButton.Button2))
            {
                Hashtable htbTestData = new Hashtable();
                htbTestData = ReadTestPrintData();

                Button btnClicked = new Button();
                btnClicked = ((Button) sender);

                if (btnClicked == btnTestAGENCY1_Report)
                {
                    _presenter.TestPrintAGENCYReport(
                        (List<BillBookInfoDetailReport>) htbTestData[DataTestPrintName.AGENCY_Report_PrintingInfo]);
                }
                else if (btnClicked == btnTestBLAN1_BlueBill)
                {
                    _presenter.TestPrintBLAN((List<Bills>) htbTestData[DataTestPrintName.BLAN_BlueBill_Bills], "B");
                }
                else if (btnClicked == btnTestBLAN2_A4)
                {
                    _presenter.TestPrintBLAN((List<Bills>) htbTestData[DataTestPrintName.BLAN_A4Bill_Bills], "A");
                }
                else if (btnClicked == btnTestBLAN3_GreenBill)
                {
                    _presenter.TestPrintBLAN((List<Bills>) htbTestData[DataTestPrintName.BLAN_GreenBill_Bills], "G");
                }
                else if (btnClicked == btnTestBLAN4_Report)
                {
                    _presenter.TestPrintBLAN_F16Report((List<ReportF16>) htbTestData[DataTestPrintName.BLAN_F16_Bills]);
                }
                else if (btnClicked == btnTestPOS1_prePrinted)
                {
                    _presenter.TestPrintPOSReceipt(
                        (List<PrintingInfo>) htbTestData[DataTestPrintName.POS_PrePrinted_PrintingInfo]);
                }
                else if (btnClicked == btnTestPOS2_PosSlip)
                {
                    _presenter.TestPrintPOSReceipt(
                        (List<PrintingInfo>) htbTestData[DataTestPrintName.POS_PosSlip_PrintingInfo]);
                }
                else if (btnClicked == btnTestPOS3_Report)
                {
                    _presenter.TestPrintPOSReport(
                        (List<CAC05Report>) htbTestData[DataTestPrintName.POS_Report_CAC05Report]);
                }
            }
        }

        private Hashtable ReadTestPrintData()
        {
            string testPrintFilePath = Path.GetDirectoryName(Application.ExecutablePath) + "\\" +
                                       BPMPath.TestPrintFileName;
            //MessageBox.Show(testPrintFilePath);

            ////--Save to text file--------------------
            //Hashtable htbForSave = new Hashtable();
            //htbForSave.Add("POS_PosSlip_PrintingInfo", receipts);

            //IFormatter serializer = new BinaryFormatter();
            //using (Stream writer = new FileStream("d:\\agencyReport.dat", FileMode.Create))
            //{
            //    //serializer.Serialize(writer, alForSave);
            //    serializer.Serialize(writer, htbForSave);
            //    writer.Close();
            //}

            //--Read text file--------------------------
            Hashtable htbTestData = new Hashtable();
            try
            {
                if (File.Exists(testPrintFilePath))
                {
                    FileStream fs = new FileStream(testPrintFilePath, FileMode.Open);
                    IFormatter formatter = new BinaryFormatter();
                    htbTestData = (Hashtable) formatter.Deserialize(fs);
                    fs.Close();
                }
            }
            catch (Exception ex)
            {
                string errStr = string.Format("สถานะ : ไม่พบข้อมูลสำหรับทดสอบการพิมพ์\n\nมีข้อผิดพลาดดังนี้\n{0}", ex.ToString());
                MessageBox.Show(this, errStr, @"ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return htbTestData;
        }

        private void ShowBlueBillBarcodeDialog()
        {
            var form = new BarcodesForm
            {
                Text = @"กำหนดค่าบาร์โค้ดของเครื่องพิมพ์สำหรับการพิมพ์บิลฟ้า",
                Barcode1Start = String.IsNullOrEmpty(_blueBillBarcodeTxt1Start) ? string.Empty : _blueBillBarcodeTxt1Start,
                Barcode1Stop = String.IsNullOrEmpty(_blueBillBarcodeTxt1Stop) ? string.Empty : _blueBillBarcodeTxt1Stop,
                Barcode2Start = String.IsNullOrEmpty(_blueBillBarcodeTxt2Start) ? string.Empty : _blueBillBarcodeTxt2Start,
                Barcode2Stop = String.IsNullOrEmpty(_blueBillBarcodeTxt2Stop) ? string.Empty : _blueBillBarcodeTxt2Stop
            };

            if (form.ShowDialog() == DialogResult.OK)
            {
                _blueBillBarcodeTxt1Start = form.Barcode1Start;
                _blueBillBarcodeTxt1Stop = form.Barcode1Stop;
                _blueBillBarcodeTxt2Start = form.Barcode2Start;
                _blueBillBarcodeTxt2Stop = form.Barcode2Stop;
            }

            if (!String.IsNullOrEmpty(_blueBillBarcodeTxt1Start))
                blueBillBarcodeStatusLabel.Visible = true;

            blueBillPrinterBarcodeComboBox.Focus();
        }

        private void ShowA4BarcodeDialog()
        {
            var form = new BarcodesForm
            {
                Text = @"กำหนดค่าบาร์โค้ดของเครื่องพิมพ์สำหรับการพิมพ์หนังสือแจ้งค่าไฟฟ้า",
                Barcode1Start = String.IsNullOrEmpty(_a4BillBarcodeTxt1Start) ? string.Empty : _a4BillBarcodeTxt1Start,
                Barcode1Stop = String.IsNullOrEmpty(_a4BillBarcodeTxt1Stop) ? string.Empty : _a4BillBarcodeTxt1Stop,
                Barcode2Start = String.IsNullOrEmpty(_a4BillBarcodeTxt2Start) ? string.Empty : _a4BillBarcodeTxt2Start,
                Barcode2Stop = String.IsNullOrEmpty(_a4BillBarcodeTxt2Stop) ? string.Empty : _a4BillBarcodeTxt2Stop
            };
            
            if (form.ShowDialog() == DialogResult.OK)
            {
                _a4BillBarcodeTxt1Start = form.Barcode1Start;
                _a4BillBarcodeTxt1Stop = form.Barcode1Stop;
                _a4BillBarcodeTxt2Start = form.Barcode2Start;
                _a4BillBarcodeTxt2Stop = form.Barcode2Stop;
            }

            if (!String.IsNullOrEmpty(_a4BillBarcodeTxt1Start))
                a4BillBarcodeStatusLabel.Visible = true;

            a4BillPrinterBarcodeComboBox.Focus();
        }

        private void LnklbPrinterConfigLinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            //--goto Printer Config Tab
            printerTab.SelectTab(0);
        }

        #endregion
       
    }

    public class DataTestPrintName
    {
        public const string POS_PosSlip_PrintingInfo = "POS_PosSlip_PrintingInfo";
        public const string POS_PrePrinted_PrintingInfo = "POS_PrePrinted_PrintingInfo";
        public const string BLAN_BlueBill_Bills = "BLAN_BlueBill_Bills";
        public const string BLAN_A4Bill_Bills = "BLAN_A4Bill_Bills";
        public const string BLAN_GreenBill_Bills = "BLAN_GreenBill_Bills";
        public const string BLAN_F16_Bills = "BLAN_F16_Bills";
        public const string POS_Report_CAC05Report = "POS_Report_CAC05Report";
        public const string POS_Report_ReportParameter = "POS_Report_ReportParameter";
        public const string AGENCY_Report_PrintingInfo = "AGENCY_Report_PrintingInfo";
    }

    
}

