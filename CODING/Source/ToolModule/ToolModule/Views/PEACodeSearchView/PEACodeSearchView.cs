//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.ToolModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.ToolModule
{
    [SmartPart]
    public partial class PEACodeSearchView : UserControl, IPEACodeSearchView
    {
        private List<PeaInfo> _peaList;

        public PEACodeSearchView()
        {
            InitializeComponent();
            peaDataGV.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PEACodeSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        public List<PeaInfo> PeaSearchResult
        {
            set
            {
                _peaList = value;
                LoadPeaListToGridView();
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            peaSearchText.Focus();
        }

        private void LoadPeaListToGridView()
        {
            List<PeaInfo> bindList = new List<PeaInfo>();
            foreach (PeaInfo pea in _peaList)
            {
                if (pea.BranchLevel != "4")
                    bindList.Add(pea);
            }

            peaDataGV.Enabled = false;
            peaDataGV.DataSource = bindList;
            peaDataGV.Enabled = true;
        }


        private void okBt_Click(object sender, EventArgs e)
        {
            if (peaDataGV.SelectedRows.Count > 0)
            {
                Terminal terminal = new Terminal();
                PeaInfo pea = (PeaInfo)peaDataGV.SelectedRows[0].DataBoundItem;                
                terminal.BranchId = pea.BranchId;
                terminal.BranchName = pea.BranchName;
                terminal.BranchName2 = pea.BranchName2;
                terminal.BranchLevel = pea.BranchLevel;
                terminal.BranchAddress = pea.Address;
                terminal.BranchNo = pea.BranchNo;
                terminal.BACode = pea.BACode;
                _presenter.PeaSearchRowSelectionClicked(terminal);               
            }
            else 
            {
                MessageBox.Show("ข้อผิดพลาด", "กรุณาระบุสาขา", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            
        }

        private void peaDataGV_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                Terminal terminal = new Terminal();
                terminal.BranchId = peaDataGV.Rows[e.RowIndex].Cells["PeaCode"].Value.ToString();
                terminal.BranchName = peaDataGV.Rows[e.RowIndex].Cells["PeaName"].Value.ToString();
                terminal.BranchAddress = peaDataGV.Rows[e.RowIndex].Cells["Address"].Value.ToString();
                terminal.BranchNo = peaDataGV.Rows[e.RowIndex].Cells["BranchNo"].Value.ToString();
                terminal.BranchLevel = peaDataGV.Rows[e.RowIndex].Cells["BranchLevel"].Value.ToString();
                terminal.BACode = peaDataGV.Rows[e.RowIndex].Cells["BACode"].Value.ToString();
                _presenter.PeaSearchRowSelectionClicked(terminal);
                this.ParentForm.Close();
            }
        }      

        private void peaDataGV_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            okBt.Enabled = true;
        }

        private void peaDataGV_RowLeave(object sender, DataGridViewCellEventArgs e)
        {
            okBt.Enabled = false;
        }

        //start search for pea 
        private void peaSearchBt_ButtonClick(object sender, EventArgs e)
        {
            _presenter.PeaSearchFindButtonClicked(peaSearchText.Text);
        }

        private void peaSearchText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                _presenter.PeaSearchFindButtonClicked(peaSearchText.Text);
            }
        }



    }
}

