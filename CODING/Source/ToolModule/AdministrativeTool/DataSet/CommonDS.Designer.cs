//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AdministrativeTool.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CommonDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CommonDS : global::System.Data.DataSet {
        
        private ActiveDataTable tableActive;
        
        private PaymentMethodsDataTable tablePaymentMethods;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CommonDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CommonDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Active"] != null)) {
                    base.Tables.Add(new ActiveDataTable(ds.Tables["Active"]));
                }
                if ((ds.Tables["PaymentMethods"] != null)) {
                    base.Tables.Add(new PaymentMethodsDataTable(ds.Tables["PaymentMethods"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActiveDataTable Active {
            get {
                return this.tableActive;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentMethodsDataTable PaymentMethods {
            get {
                return this.tablePaymentMethods;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CommonDS cln = ((CommonDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Active"] != null)) {
                    base.Tables.Add(new ActiveDataTable(ds.Tables["Active"]));
                }
                if ((ds.Tables["PaymentMethods"] != null)) {
                    base.Tables.Add(new PaymentMethodsDataTable(ds.Tables["PaymentMethods"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableActive = ((ActiveDataTable)(base.Tables["Active"]));
            if ((initTable == true)) {
                if ((this.tableActive != null)) {
                    this.tableActive.InitVars();
                }
            }
            this.tablePaymentMethods = ((PaymentMethodsDataTable)(base.Tables["PaymentMethods"]));
            if ((initTable == true)) {
                if ((this.tablePaymentMethods != null)) {
                    this.tablePaymentMethods.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CommonDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CommonDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableActive = new ActiveDataTable();
            base.Tables.Add(this.tableActive);
            this.tablePaymentMethods = new PaymentMethodsDataTable();
            base.Tables.Add(this.tablePaymentMethods);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActive() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentMethods() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CommonDS ds = new CommonDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ActiveRowChangeEventHandler(object sender, ActiveRowChangeEvent e);
        
        public delegate void PaymentMethodsRowChangeEventHandler(object sender, PaymentMethodsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActiveDataTable : global::System.Data.TypedTableBase<ActiveRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveDataTable() {
                this.TableName = "Active";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActiveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActiveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRow this[int index] {
                get {
                    return ((ActiveRow)(this.Rows[index]));
                }
            }
            
            public event ActiveRowChangeEventHandler ActiveRowChanging;
            
            public event ActiveRowChangeEventHandler ActiveRowChanged;
            
            public event ActiveRowChangeEventHandler ActiveRowDeleting;
            
            public event ActiveRowChangeEventHandler ActiveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActiveRow(ActiveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRow AddActiveRow(string Id, string Name) {
                ActiveRow rowActiveRow = ((ActiveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name};
                rowActiveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActiveRow);
                return rowActiveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRow FindById(string Id) {
                return ((ActiveRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActiveDataTable cln = ((ActiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActiveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRow NewActiveRow() {
                return ((ActiveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActiveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActiveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActiveRowChanged != null)) {
                    this.ActiveRowChanged(this, new ActiveRowChangeEvent(((ActiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActiveRowChanging != null)) {
                    this.ActiveRowChanging(this, new ActiveRowChangeEvent(((ActiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActiveRowDeleted != null)) {
                    this.ActiveRowDeleted(this, new ActiveRowChangeEvent(((ActiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActiveRowDeleting != null)) {
                    this.ActiveRowDeleting(this, new ActiveRowChangeEvent(((ActiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActiveRow(ActiveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CommonDS ds = new CommonDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentMethodsDataTable : global::System.Data.TypedTableBase<PaymentMethodsRow> {
            
            private global::System.Data.DataColumn columnUiRefId;
            
            private global::System.Data.DataColumn columnPtId;
            
            private global::System.Data.DataColumn columnPtName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnToPayAmount;
            
            private global::System.Data.DataColumn columnChangeAmount;
            
            private global::System.Data.DataColumn columnFeeAmount;
            
            private global::System.Data.DataColumn columnToPayAmountWithFee;
            
            private global::System.Data.DataColumn columnActualAmount;
            
            private global::System.Data.DataColumn columnBank;
            
            private global::System.Data.DataColumn columnBankId;
            
            private global::System.Data.DataColumn columnBankName;
            
            private global::System.Data.DataColumn columnChqNo;
            
            private global::System.Data.DataColumn columnChqAccNo;
            
            private global::System.Data.DataColumn columnChqDt;
            
            private global::System.Data.DataColumn columnDepositAccNo;
            
            private global::System.Data.DataColumn columnDepositDt;
            
            private global::System.Data.DataColumn columnIsAGPayment;
            
            private global::System.Data.DataColumn columnDraftFlag;
            
            private global::System.Data.DataColumn columnCashierChequeFlag;
            
            private global::System.Data.DataColumn columnARPtId;
            
            private global::System.Data.DataColumn columnTotalPayInvoiceAmount;
            
            private global::System.Data.DataColumn columnTotalRemainAmount;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsDataTable() {
                this.TableName = "PaymentMethods";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentMethodsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentMethodsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UiRefIdColumn {
                get {
                    return this.columnUiRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PtIdColumn {
                get {
                    return this.columnPtId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PtNameColumn {
                get {
                    return this.columnPtName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPayAmountColumn {
                get {
                    return this.columnToPayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChangeAmountColumn {
                get {
                    return this.columnChangeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeAmountColumn {
                get {
                    return this.columnFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPayAmountWithFeeColumn {
                get {
                    return this.columnToPayAmountWithFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualAmountColumn {
                get {
                    return this.columnActualAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankColumn {
                get {
                    return this.columnBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankIdColumn {
                get {
                    return this.columnBankId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChqNoColumn {
                get {
                    return this.columnChqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChqAccNoColumn {
                get {
                    return this.columnChqAccNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChqDtColumn {
                get {
                    return this.columnChqDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepositAccNoColumn {
                get {
                    return this.columnDepositAccNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepositDtColumn {
                get {
                    return this.columnDepositDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAGPaymentColumn {
                get {
                    return this.columnIsAGPayment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DraftFlagColumn {
                get {
                    return this.columnDraftFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashierChequeFlagColumn {
                get {
                    return this.columnCashierChequeFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ARPtIdColumn {
                get {
                    return this.columnARPtId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPayInvoiceAmountColumn {
                get {
                    return this.columnTotalPayInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalRemainAmountColumn {
                get {
                    return this.columnTotalRemainAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsRow this[int index] {
                get {
                    return ((PaymentMethodsRow)(this.Rows[index]));
                }
            }
            
            public event PaymentMethodsRowChangeEventHandler PaymentMethodsRowChanging;
            
            public event PaymentMethodsRowChangeEventHandler PaymentMethodsRowChanged;
            
            public event PaymentMethodsRowChangeEventHandler PaymentMethodsRowDeleting;
            
            public event PaymentMethodsRowChangeEventHandler PaymentMethodsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentMethodsRow(PaymentMethodsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsRow AddPaymentMethodsRow(
                        int UiRefId, 
                        string PtId, 
                        string PtName, 
                        string Description, 
                        decimal ToPayAmount, 
                        decimal ChangeAmount, 
                        decimal FeeAmount, 
                        decimal ToPayAmountWithFee, 
                        decimal ActualAmount, 
                        string Bank, 
                        string BankId, 
                        string BankName, 
                        string ChqNo, 
                        string ChqAccNo, 
                        System.DateTime ChqDt, 
                        string DepositAccNo, 
                        System.DateTime DepositDt, 
                        bool IsAGPayment, 
                        string DraftFlag, 
                        string CashierChequeFlag, 
                        string ARPtId, 
                        decimal TotalPayInvoiceAmount, 
                        decimal TotalRemainAmount, 
                        string Status, 
                        decimal Amount) {
                PaymentMethodsRow rowPaymentMethodsRow = ((PaymentMethodsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UiRefId,
                        PtId,
                        PtName,
                        Description,
                        ToPayAmount,
                        ChangeAmount,
                        FeeAmount,
                        ToPayAmountWithFee,
                        ActualAmount,
                        Bank,
                        BankId,
                        BankName,
                        ChqNo,
                        ChqAccNo,
                        ChqDt,
                        DepositAccNo,
                        DepositDt,
                        IsAGPayment,
                        DraftFlag,
                        CashierChequeFlag,
                        ARPtId,
                        TotalPayInvoiceAmount,
                        TotalRemainAmount,
                        Status,
                        Amount};
                rowPaymentMethodsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentMethodsRow);
                return rowPaymentMethodsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentMethodsDataTable cln = ((PaymentMethodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentMethodsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUiRefId = base.Columns["UiRefId"];
                this.columnPtId = base.Columns["PtId"];
                this.columnPtName = base.Columns["PtName"];
                this.columnDescription = base.Columns["Description"];
                this.columnToPayAmount = base.Columns["ToPayAmount"];
                this.columnChangeAmount = base.Columns["ChangeAmount"];
                this.columnFeeAmount = base.Columns["FeeAmount"];
                this.columnToPayAmountWithFee = base.Columns["ToPayAmountWithFee"];
                this.columnActualAmount = base.Columns["ActualAmount"];
                this.columnBank = base.Columns["Bank"];
                this.columnBankId = base.Columns["BankId"];
                this.columnBankName = base.Columns["BankName"];
                this.columnChqNo = base.Columns["ChqNo"];
                this.columnChqAccNo = base.Columns["ChqAccNo"];
                this.columnChqDt = base.Columns["ChqDt"];
                this.columnDepositAccNo = base.Columns["DepositAccNo"];
                this.columnDepositDt = base.Columns["DepositDt"];
                this.columnIsAGPayment = base.Columns["IsAGPayment"];
                this.columnDraftFlag = base.Columns["DraftFlag"];
                this.columnCashierChequeFlag = base.Columns["CashierChequeFlag"];
                this.columnARPtId = base.Columns["ARPtId"];
                this.columnTotalPayInvoiceAmount = base.Columns["TotalPayInvoiceAmount"];
                this.columnTotalRemainAmount = base.Columns["TotalRemainAmount"];
                this.columnStatus = base.Columns["Status"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUiRefId = new global::System.Data.DataColumn("UiRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUiRefId);
                this.columnPtId = new global::System.Data.DataColumn("PtId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPtId);
                this.columnPtName = new global::System.Data.DataColumn("PtName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPtName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnToPayAmount = new global::System.Data.DataColumn("ToPayAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPayAmount);
                this.columnChangeAmount = new global::System.Data.DataColumn("ChangeAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChangeAmount);
                this.columnFeeAmount = new global::System.Data.DataColumn("FeeAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeAmount);
                this.columnToPayAmountWithFee = new global::System.Data.DataColumn("ToPayAmountWithFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPayAmountWithFee);
                this.columnActualAmount = new global::System.Data.DataColumn("ActualAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualAmount);
                this.columnBank = new global::System.Data.DataColumn("Bank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank);
                this.columnBankId = new global::System.Data.DataColumn("BankId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankId);
                this.columnBankName = new global::System.Data.DataColumn("BankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnChqNo = new global::System.Data.DataColumn("ChqNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChqNo);
                this.columnChqAccNo = new global::System.Data.DataColumn("ChqAccNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChqAccNo);
                this.columnChqDt = new global::System.Data.DataColumn("ChqDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChqDt);
                this.columnDepositAccNo = new global::System.Data.DataColumn("DepositAccNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepositAccNo);
                this.columnDepositDt = new global::System.Data.DataColumn("DepositDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepositDt);
                this.columnIsAGPayment = new global::System.Data.DataColumn("IsAGPayment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAGPayment);
                this.columnDraftFlag = new global::System.Data.DataColumn("DraftFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDraftFlag);
                this.columnCashierChequeFlag = new global::System.Data.DataColumn("CashierChequeFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashierChequeFlag);
                this.columnARPtId = new global::System.Data.DataColumn("ARPtId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARPtId);
                this.columnTotalPayInvoiceAmount = new global::System.Data.DataColumn("TotalPayInvoiceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPayInvoiceAmount);
                this.columnTotalRemainAmount = new global::System.Data.DataColumn("TotalRemainAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalRemainAmount);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsRow NewPaymentMethodsRow() {
                return ((PaymentMethodsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentMethodsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentMethodsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentMethodsRowChanged != null)) {
                    this.PaymentMethodsRowChanged(this, new PaymentMethodsRowChangeEvent(((PaymentMethodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentMethodsRowChanging != null)) {
                    this.PaymentMethodsRowChanging(this, new PaymentMethodsRowChangeEvent(((PaymentMethodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentMethodsRowDeleted != null)) {
                    this.PaymentMethodsRowDeleted(this, new PaymentMethodsRowChangeEvent(((PaymentMethodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentMethodsRowDeleting != null)) {
                    this.PaymentMethodsRowDeleting(this, new PaymentMethodsRowChangeEvent(((PaymentMethodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentMethodsRow(PaymentMethodsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CommonDS ds = new CommonDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentMethodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActiveRow : global::System.Data.DataRow {
            
            private ActiveDataTable tableActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActiveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActive = ((ActiveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    return ((string)(this[this.tableActive.IdColumn]));
                }
                set {
                    this[this.tableActive.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableActive.NameColumn]));
                }
                set {
                    this[this.tableActive.NameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentMethodsRow : global::System.Data.DataRow {
            
            private PaymentMethodsDataTable tablePaymentMethods;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentMethodsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentMethods = ((PaymentMethodsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UiRefId {
                get {
                    try {
                        return ((int)(this[this.tablePaymentMethods.UiRefIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UiRefId\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.UiRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PtId {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.PtIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PtId\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.PtIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PtName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.PtNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PtName\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.PtNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ToPayAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.ToPayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPayAmount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ToPayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ChangeAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.ChangeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChangeAmount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ChangeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FeeAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.FeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeeAmount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.FeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ToPayAmountWithFee {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.ToPayAmountWithFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPayAmountWithFee\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ToPayAmountWithFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ActualAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.ActualAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualAmount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ActualAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bank {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.BankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.BankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankId {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.BankIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankId\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.BankIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.BankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankName\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.BankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChqNo {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.ChqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChqNo\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ChqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChqAccNo {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.ChqAccNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChqAccNo\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ChqAccNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ChqDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaymentMethods.ChqDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChqDt\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ChqDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepositAccNo {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.DepositAccNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepositAccNo\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.DepositAccNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DepositDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaymentMethods.DepositDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepositDt\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.DepositDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGPayment {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentMethods.IsAGPaymentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAGPayment\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.IsAGPaymentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DraftFlag {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.DraftFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DraftFlag\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.DraftFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CashierChequeFlag {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.CashierChequeFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashierChequeFlag\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.CashierChequeFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ARPtId {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.ARPtIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARPtId\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.ARPtIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalPayInvoiceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.TotalPayInvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPayInvoiceAmount\' in table \'PaymentMethods\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.TotalPayInvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalRemainAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.TotalRemainAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalRemainAmount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.TotalRemainAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tablePaymentMethods.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tablePaymentMethods.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'PaymentMethods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentMethods.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUiRefIdNull() {
                return this.IsNull(this.tablePaymentMethods.UiRefIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUiRefIdNull() {
                this[this.tablePaymentMethods.UiRefIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPtIdNull() {
                return this.IsNull(this.tablePaymentMethods.PtIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPtIdNull() {
                this[this.tablePaymentMethods.PtIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPtNameNull() {
                return this.IsNull(this.tablePaymentMethods.PtNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPtNameNull() {
                this[this.tablePaymentMethods.PtNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePaymentMethods.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePaymentMethods.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPayAmountNull() {
                return this.IsNull(this.tablePaymentMethods.ToPayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPayAmountNull() {
                this[this.tablePaymentMethods.ToPayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeAmountNull() {
                return this.IsNull(this.tablePaymentMethods.ChangeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeAmountNull() {
                this[this.tablePaymentMethods.ChangeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeAmountNull() {
                return this.IsNull(this.tablePaymentMethods.FeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeAmountNull() {
                this[this.tablePaymentMethods.FeeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPayAmountWithFeeNull() {
                return this.IsNull(this.tablePaymentMethods.ToPayAmountWithFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPayAmountWithFeeNull() {
                this[this.tablePaymentMethods.ToPayAmountWithFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualAmountNull() {
                return this.IsNull(this.tablePaymentMethods.ActualAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualAmountNull() {
                this[this.tablePaymentMethods.ActualAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNull() {
                return this.IsNull(this.tablePaymentMethods.BankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNull() {
                this[this.tablePaymentMethods.BankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankIdNull() {
                return this.IsNull(this.tablePaymentMethods.BankIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankIdNull() {
                this[this.tablePaymentMethods.BankIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tablePaymentMethods.BankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tablePaymentMethods.BankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChqNoNull() {
                return this.IsNull(this.tablePaymentMethods.ChqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChqNoNull() {
                this[this.tablePaymentMethods.ChqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChqAccNoNull() {
                return this.IsNull(this.tablePaymentMethods.ChqAccNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChqAccNoNull() {
                this[this.tablePaymentMethods.ChqAccNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChqDtNull() {
                return this.IsNull(this.tablePaymentMethods.ChqDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChqDtNull() {
                this[this.tablePaymentMethods.ChqDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositAccNoNull() {
                return this.IsNull(this.tablePaymentMethods.DepositAccNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositAccNoNull() {
                this[this.tablePaymentMethods.DepositAccNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositDtNull() {
                return this.IsNull(this.tablePaymentMethods.DepositDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositDtNull() {
                this[this.tablePaymentMethods.DepositDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAGPaymentNull() {
                return this.IsNull(this.tablePaymentMethods.IsAGPaymentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAGPaymentNull() {
                this[this.tablePaymentMethods.IsAGPaymentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDraftFlagNull() {
                return this.IsNull(this.tablePaymentMethods.DraftFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDraftFlagNull() {
                this[this.tablePaymentMethods.DraftFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashierChequeFlagNull() {
                return this.IsNull(this.tablePaymentMethods.CashierChequeFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashierChequeFlagNull() {
                this[this.tablePaymentMethods.CashierChequeFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsARPtIdNull() {
                return this.IsNull(this.tablePaymentMethods.ARPtIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetARPtIdNull() {
                this[this.tablePaymentMethods.ARPtIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPayInvoiceAmountNull() {
                return this.IsNull(this.tablePaymentMethods.TotalPayInvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPayInvoiceAmountNull() {
                this[this.tablePaymentMethods.TotalPayInvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalRemainAmountNull() {
                return this.IsNull(this.tablePaymentMethods.TotalRemainAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalRemainAmountNull() {
                this[this.tablePaymentMethods.TotalRemainAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tablePaymentMethods.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tablePaymentMethods.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tablePaymentMethods.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tablePaymentMethods.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActiveRowChangeEvent : global::System.EventArgs {
            
            private ActiveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRowChangeEvent(ActiveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentMethodsRowChangeEvent : global::System.EventArgs {
            
            private PaymentMethodsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsRowChangeEvent(PaymentMethodsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentMethodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591