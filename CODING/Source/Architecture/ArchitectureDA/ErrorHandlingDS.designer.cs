//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PEA.BPM.Architecture.ArchitectureDA {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ErrorHandlingDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ErrorHandlingDS : global::System.Data.DataSet {
        
        private mErrorGroupingDataTable tablemErrorGrouping;
        
        private mErrorMessageDataTable tablemErrorMessage;
        
        private tErrorMessageDataTable tabletErrorMessage;
        
        private mErrorMessageKeyDataTable tablemErrorMessageKey;
        
        private global::System.Data.DataRelation relationFK_tErrorMessage_mErrorMessage_MEMID;
        
        private global::System.Data.DataRelation relationFK_mErrorMessage_mErrorMessage_EMParentID;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ErrorHandlingDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ErrorHandlingDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["mErrorGrouping"] != null)) {
                    base.Tables.Add(new mErrorGroupingDataTable(ds.Tables["mErrorGrouping"]));
                }
                if ((ds.Tables["mErrorMessage"] != null)) {
                    base.Tables.Add(new mErrorMessageDataTable(ds.Tables["mErrorMessage"]));
                }
                if ((ds.Tables["tErrorMessage"] != null)) {
                    base.Tables.Add(new tErrorMessageDataTable(ds.Tables["tErrorMessage"]));
                }
                if ((ds.Tables["mErrorMessageKey"] != null)) {
                    base.Tables.Add(new mErrorMessageKeyDataTable(ds.Tables["mErrorMessageKey"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mErrorGroupingDataTable mErrorGrouping {
            get {
                return this.tablemErrorGrouping;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mErrorMessageDataTable mErrorMessage {
            get {
                return this.tablemErrorMessage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tErrorMessageDataTable tErrorMessage {
            get {
                return this.tabletErrorMessage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mErrorMessageKeyDataTable mErrorMessageKey {
            get {
                return this.tablemErrorMessageKey;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ErrorHandlingDS cln = ((ErrorHandlingDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["mErrorGrouping"] != null)) {
                    base.Tables.Add(new mErrorGroupingDataTable(ds.Tables["mErrorGrouping"]));
                }
                if ((ds.Tables["mErrorMessage"] != null)) {
                    base.Tables.Add(new mErrorMessageDataTable(ds.Tables["mErrorMessage"]));
                }
                if ((ds.Tables["tErrorMessage"] != null)) {
                    base.Tables.Add(new tErrorMessageDataTable(ds.Tables["tErrorMessage"]));
                }
                if ((ds.Tables["mErrorMessageKey"] != null)) {
                    base.Tables.Add(new mErrorMessageKeyDataTable(ds.Tables["mErrorMessageKey"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablemErrorGrouping = ((mErrorGroupingDataTable)(base.Tables["mErrorGrouping"]));
            if ((initTable == true)) {
                if ((this.tablemErrorGrouping != null)) {
                    this.tablemErrorGrouping.InitVars();
                }
            }
            this.tablemErrorMessage = ((mErrorMessageDataTable)(base.Tables["mErrorMessage"]));
            if ((initTable == true)) {
                if ((this.tablemErrorMessage != null)) {
                    this.tablemErrorMessage.InitVars();
                }
            }
            this.tabletErrorMessage = ((tErrorMessageDataTable)(base.Tables["tErrorMessage"]));
            if ((initTable == true)) {
                if ((this.tabletErrorMessage != null)) {
                    this.tabletErrorMessage.InitVars();
                }
            }
            this.tablemErrorMessageKey = ((mErrorMessageKeyDataTable)(base.Tables["mErrorMessageKey"]));
            if ((initTable == true)) {
                if ((this.tablemErrorMessageKey != null)) {
                    this.tablemErrorMessageKey.InitVars();
                }
            }
            this.relationFK_tErrorMessage_mErrorMessage_MEMID = this.Relations["FK_tErrorMessage_mErrorMessage_MEMID"];
            this.relationFK_mErrorMessage_mErrorMessage_EMParentID = this.Relations["FK_mErrorMessage_mErrorMessage_EMParentID"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ErrorHandlingDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ErrorHandlingDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablemErrorGrouping = new mErrorGroupingDataTable();
            base.Tables.Add(this.tablemErrorGrouping);
            this.tablemErrorMessage = new mErrorMessageDataTable();
            base.Tables.Add(this.tablemErrorMessage);
            this.tabletErrorMessage = new tErrorMessageDataTable();
            base.Tables.Add(this.tabletErrorMessage);
            this.tablemErrorMessageKey = new mErrorMessageKeyDataTable();
            base.Tables.Add(this.tablemErrorMessageKey);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_tErrorMessage_mErrorMessage_MEMID", new global::System.Data.DataColumn[] {
                        this.tablemErrorMessage.EMIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletErrorMessage.MEMIDColumn});
            this.tabletErrorMessage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_tErrorMessage_mErrorMessage_MEMID = new global::System.Data.DataRelation("FK_tErrorMessage_mErrorMessage_MEMID", new global::System.Data.DataColumn[] {
                        this.tablemErrorMessage.EMIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletErrorMessage.MEMIDColumn}, false);
            this.Relations.Add(this.relationFK_tErrorMessage_mErrorMessage_MEMID);
            this.relationFK_mErrorMessage_mErrorMessage_EMParentID = new global::System.Data.DataRelation("FK_mErrorMessage_mErrorMessage_EMParentID", new global::System.Data.DataColumn[] {
                        this.tablemErrorMessage.EMIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablemErrorMessage.EMParentIDColumn}, false);
            this.Relations.Add(this.relationFK_mErrorMessage_mErrorMessage_EMParentID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemErrorGrouping() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemErrorMessage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetErrorMessage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemErrorMessageKey() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ErrorHandlingDS ds = new ErrorHandlingDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void mErrorGroupingRowChangeEventHandler(object sender, mErrorGroupingRowChangeEvent e);
        
        public delegate void mErrorMessageRowChangeEventHandler(object sender, mErrorMessageRowChangeEvent e);
        
        public delegate void tErrorMessageRowChangeEventHandler(object sender, tErrorMessageRowChangeEvent e);
        
        public delegate void mErrorMessageKeyRowChangeEventHandler(object sender, mErrorMessageKeyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mErrorGroupingDataTable : global::System.Data.TypedTableBase<mErrorGroupingRow> {
            
            private global::System.Data.DataColumn columnEGID;
            
            private global::System.Data.DataColumn columnRegularExp;
            
            private global::System.Data.DataColumn columnGMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingDataTable() {
                this.TableName = "mErrorGrouping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorGroupingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mErrorGroupingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EGIDColumn {
                get {
                    return this.columnEGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegularExpColumn {
                get {
                    return this.columnRegularExp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GMessageColumn {
                get {
                    return this.columnGMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRow this[int index] {
                get {
                    return ((mErrorGroupingRow)(this.Rows[index]));
                }
            }
            
            public event mErrorGroupingRowChangeEventHandler mErrorGroupingRowChanging;
            
            public event mErrorGroupingRowChangeEventHandler mErrorGroupingRowChanged;
            
            public event mErrorGroupingRowChangeEventHandler mErrorGroupingRowDeleting;
            
            public event mErrorGroupingRowChangeEventHandler mErrorGroupingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmErrorGroupingRow(mErrorGroupingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRow AddmErrorGroupingRow(string RegularExp, string GMessage) {
                mErrorGroupingRow rowmErrorGroupingRow = ((mErrorGroupingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RegularExp,
                        GMessage};
                rowmErrorGroupingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmErrorGroupingRow);
                return rowmErrorGroupingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRow FindByEGID(int EGID) {
                return ((mErrorGroupingRow)(this.Rows.Find(new object[] {
                            EGID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mErrorGroupingDataTable cln = ((mErrorGroupingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mErrorGroupingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEGID = base.Columns["EGID"];
                this.columnRegularExp = base.Columns["RegularExp"];
                this.columnGMessage = base.Columns["GMessage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEGID = new global::System.Data.DataColumn("EGID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEGID);
                this.columnRegularExp = new global::System.Data.DataColumn("RegularExp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegularExp);
                this.columnGMessage = new global::System.Data.DataColumn("GMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGMessage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEGID}, true));
                this.columnEGID.AutoIncrement = true;
                this.columnEGID.AllowDBNull = false;
                this.columnEGID.ReadOnly = true;
                this.columnEGID.Unique = true;
                this.columnRegularExp.AllowDBNull = false;
                this.columnRegularExp.MaxLength = 1024;
                this.columnGMessage.AllowDBNull = false;
                this.columnGMessage.MaxLength = 1024;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRow NewmErrorGroupingRow() {
                return ((mErrorGroupingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mErrorGroupingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mErrorGroupingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mErrorGroupingRowChanged != null)) {
                    this.mErrorGroupingRowChanged(this, new mErrorGroupingRowChangeEvent(((mErrorGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mErrorGroupingRowChanging != null)) {
                    this.mErrorGroupingRowChanging(this, new mErrorGroupingRowChangeEvent(((mErrorGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mErrorGroupingRowDeleted != null)) {
                    this.mErrorGroupingRowDeleted(this, new mErrorGroupingRowChangeEvent(((mErrorGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mErrorGroupingRowDeleting != null)) {
                    this.mErrorGroupingRowDeleting(this, new mErrorGroupingRowChangeEvent(((mErrorGroupingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemErrorGroupingRow(mErrorGroupingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ErrorHandlingDS ds = new ErrorHandlingDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mErrorGroupingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mErrorMessageDataTable : global::System.Data.TypedTableBase<mErrorMessageRow> {
            
            private global::System.Data.DataColumn columnEMID;
            
            private global::System.Data.DataColumn columnEMParentID;
            
            private global::System.Data.DataColumn columnErrorCode;
            
            private global::System.Data.DataColumn columnOriginalType;
            
            private global::System.Data.DataColumn columnBMID;
            
            private global::System.Data.DataColumn columnBLID;
            
            private global::System.Data.DataColumn columnMessage;
            
            private global::System.Data.DataColumn columnStackTrace;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnTHMessage;
            
            private global::System.Data.DataColumn columnCause;
            
            private global::System.Data.DataColumn columnResolve;
            
            private global::System.Data.DataColumn columnHelpURL;
            
            private global::System.Data.DataColumn columnCanContinue;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnOccurCount;
            
            private global::System.Data.DataColumn columnLastOccur;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageDataTable() {
                this.TableName = "mErrorMessage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorMessageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mErrorMessageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMIDColumn {
                get {
                    return this.columnEMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMParentIDColumn {
                get {
                    return this.columnEMParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorCodeColumn {
                get {
                    return this.columnErrorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalTypeColumn {
                get {
                    return this.columnOriginalType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BMIDColumn {
                get {
                    return this.columnBMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLIDColumn {
                get {
                    return this.columnBLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StackTraceColumn {
                get {
                    return this.columnStackTrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn THMessageColumn {
                get {
                    return this.columnTHMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CauseColumn {
                get {
                    return this.columnCause;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResolveColumn {
                get {
                    return this.columnResolve;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HelpURLColumn {
                get {
                    return this.columnHelpURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CanContinueColumn {
                get {
                    return this.columnCanContinue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccurCountColumn {
                get {
                    return this.columnOccurCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastOccurColumn {
                get {
                    return this.columnLastOccur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow this[int index] {
                get {
                    return ((mErrorMessageRow)(this.Rows[index]));
                }
            }
            
            public event mErrorMessageRowChangeEventHandler mErrorMessageRowChanging;
            
            public event mErrorMessageRowChangeEventHandler mErrorMessageRowChanged;
            
            public event mErrorMessageRowChangeEventHandler mErrorMessageRowDeleting;
            
            public event mErrorMessageRowChangeEventHandler mErrorMessageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmErrorMessageRow(mErrorMessageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow AddmErrorMessageRow(
                        mErrorMessageRow parentmErrorMessageRowByFK_mErrorMessage_mErrorMessage_EMParentID, 
                        string ErrorCode, 
                        string OriginalType, 
                        int BMID, 
                        int BLID, 
                        string Message, 
                        string StackTrace, 
                        string Source, 
                        string THMessage, 
                        string Cause, 
                        string Resolve, 
                        string HelpURL, 
                        bool CanContinue, 
                        System.DateTime CreateDate, 
                        int OccurCount, 
                        System.DateTime LastOccur) {
                mErrorMessageRow rowmErrorMessageRow = ((mErrorMessageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ErrorCode,
                        OriginalType,
                        BMID,
                        BLID,
                        Message,
                        StackTrace,
                        Source,
                        THMessage,
                        Cause,
                        Resolve,
                        HelpURL,
                        CanContinue,
                        CreateDate,
                        OccurCount,
                        LastOccur};
                if ((parentmErrorMessageRowByFK_mErrorMessage_mErrorMessage_EMParentID != null)) {
                    columnValuesArray[1] = parentmErrorMessageRowByFK_mErrorMessage_mErrorMessage_EMParentID[0];
                }
                rowmErrorMessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmErrorMessageRow);
                return rowmErrorMessageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow FindByEMID(int EMID) {
                return ((mErrorMessageRow)(this.Rows.Find(new object[] {
                            EMID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mErrorMessageDataTable cln = ((mErrorMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mErrorMessageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMID = base.Columns["EMID"];
                this.columnEMParentID = base.Columns["EMParentID"];
                this.columnErrorCode = base.Columns["ErrorCode"];
                this.columnOriginalType = base.Columns["OriginalType"];
                this.columnBMID = base.Columns["BMID"];
                this.columnBLID = base.Columns["BLID"];
                this.columnMessage = base.Columns["Message"];
                this.columnStackTrace = base.Columns["StackTrace"];
                this.columnSource = base.Columns["Source"];
                this.columnTHMessage = base.Columns["THMessage"];
                this.columnCause = base.Columns["Cause"];
                this.columnResolve = base.Columns["Resolve"];
                this.columnHelpURL = base.Columns["HelpURL"];
                this.columnCanContinue = base.Columns["CanContinue"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnOccurCount = base.Columns["OccurCount"];
                this.columnLastOccur = base.Columns["LastOccur"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMID = new global::System.Data.DataColumn("EMID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMID);
                this.columnEMParentID = new global::System.Data.DataColumn("EMParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMParentID);
                this.columnErrorCode = new global::System.Data.DataColumn("ErrorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorCode);
                this.columnOriginalType = new global::System.Data.DataColumn("OriginalType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalType);
                this.columnBMID = new global::System.Data.DataColumn("BMID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBMID);
                this.columnBLID = new global::System.Data.DataColumn("BLID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLID);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnStackTrace = new global::System.Data.DataColumn("StackTrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStackTrace);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnTHMessage = new global::System.Data.DataColumn("THMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHMessage);
                this.columnCause = new global::System.Data.DataColumn("Cause", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCause);
                this.columnResolve = new global::System.Data.DataColumn("Resolve", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResolve);
                this.columnHelpURL = new global::System.Data.DataColumn("HelpURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHelpURL);
                this.columnCanContinue = new global::System.Data.DataColumn("CanContinue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanContinue);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnOccurCount = new global::System.Data.DataColumn("OccurCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccurCount);
                this.columnLastOccur = new global::System.Data.DataColumn("LastOccur", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastOccur);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEMID}, true));
                this.columnEMID.AutoIncrement = true;
                this.columnEMID.AllowDBNull = false;
                this.columnEMID.ReadOnly = true;
                this.columnEMID.Unique = true;
                this.columnErrorCode.AllowDBNull = false;
                this.columnErrorCode.MaxLength = 50;
                this.columnOriginalType.AllowDBNull = false;
                this.columnOriginalType.MaxLength = 255;
                this.columnBMID.AllowDBNull = false;
                this.columnBLID.AllowDBNull = false;
                this.columnMessage.AllowDBNull = false;
                this.columnMessage.MaxLength = 1024;
                this.columnStackTrace.AllowDBNull = false;
                this.columnStackTrace.MaxLength = 2147483647;
                this.columnSource.AllowDBNull = false;
                this.columnSource.MaxLength = 255;
                this.columnTHMessage.AllowDBNull = false;
                this.columnTHMessage.MaxLength = 1024;
                this.columnCause.AllowDBNull = false;
                this.columnCause.MaxLength = 1024;
                this.columnResolve.AllowDBNull = false;
                this.columnResolve.MaxLength = 1024;
                this.columnHelpURL.AllowDBNull = false;
                this.columnHelpURL.MaxLength = 512;
                this.columnCanContinue.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnOccurCount.AllowDBNull = false;
                this.columnLastOccur.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow NewmErrorMessageRow() {
                return ((mErrorMessageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mErrorMessageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mErrorMessageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mErrorMessageRowChanged != null)) {
                    this.mErrorMessageRowChanged(this, new mErrorMessageRowChangeEvent(((mErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mErrorMessageRowChanging != null)) {
                    this.mErrorMessageRowChanging(this, new mErrorMessageRowChangeEvent(((mErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mErrorMessageRowDeleted != null)) {
                    this.mErrorMessageRowDeleted(this, new mErrorMessageRowChangeEvent(((mErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mErrorMessageRowDeleting != null)) {
                    this.mErrorMessageRowDeleting(this, new mErrorMessageRowChangeEvent(((mErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemErrorMessageRow(mErrorMessageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ErrorHandlingDS ds = new ErrorHandlingDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mErrorMessageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tErrorMessageDataTable : global::System.Data.TypedTableBase<tErrorMessageRow> {
            
            private global::System.Data.DataColumn columnEMID;
            
            private global::System.Data.DataColumn columnMEMID;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnDebuggingId;
            
            private global::System.Data.DataColumn columnFullMessage;
            
            private global::System.Data.DataColumn columnFullStackTrace;
            
            private global::System.Data.DataColumn columnClientAck;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageDataTable() {
                this.TableName = "tErrorMessage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tErrorMessageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tErrorMessageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMIDColumn {
                get {
                    return this.columnEMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEMIDColumn {
                get {
                    return this.columnMEMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebuggingIdColumn {
                get {
                    return this.columnDebuggingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullMessageColumn {
                get {
                    return this.columnFullMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullStackTraceColumn {
                get {
                    return this.columnFullStackTrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientAckColumn {
                get {
                    return this.columnClientAck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow this[int index] {
                get {
                    return ((tErrorMessageRow)(this.Rows[index]));
                }
            }
            
            public event tErrorMessageRowChangeEventHandler tErrorMessageRowChanging;
            
            public event tErrorMessageRowChangeEventHandler tErrorMessageRowChanged;
            
            public event tErrorMessageRowChangeEventHandler tErrorMessageRowDeleting;
            
            public event tErrorMessageRowChangeEventHandler tErrorMessageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtErrorMessageRow(tErrorMessageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow AddtErrorMessageRow(mErrorMessageRow parentmErrorMessageRowByFK_tErrorMessage_mErrorMessage_MEMID, System.DateTime CreateDate, string UserId, string DebuggingId, string FullMessage, string FullStackTrace, bool ClientAck) {
                tErrorMessageRow rowtErrorMessageRow = ((tErrorMessageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        CreateDate,
                        UserId,
                        DebuggingId,
                        FullMessage,
                        FullStackTrace,
                        ClientAck};
                if ((parentmErrorMessageRowByFK_tErrorMessage_mErrorMessage_MEMID != null)) {
                    columnValuesArray[1] = parentmErrorMessageRowByFK_tErrorMessage_mErrorMessage_MEMID[0];
                }
                rowtErrorMessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtErrorMessageRow);
                return rowtErrorMessageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow FindByEMID(int EMID) {
                return ((tErrorMessageRow)(this.Rows.Find(new object[] {
                            EMID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tErrorMessageDataTable cln = ((tErrorMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tErrorMessageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMID = base.Columns["EMID"];
                this.columnMEMID = base.Columns["MEMID"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnUserId = base.Columns["UserId"];
                this.columnDebuggingId = base.Columns["DebuggingId"];
                this.columnFullMessage = base.Columns["FullMessage"];
                this.columnFullStackTrace = base.Columns["FullStackTrace"];
                this.columnClientAck = base.Columns["ClientAck"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMID = new global::System.Data.DataColumn("EMID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMID);
                this.columnMEMID = new global::System.Data.DataColumn("MEMID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMID);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnDebuggingId = new global::System.Data.DataColumn("DebuggingId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebuggingId);
                this.columnFullMessage = new global::System.Data.DataColumn("FullMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullMessage);
                this.columnFullStackTrace = new global::System.Data.DataColumn("FullStackTrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullStackTrace);
                this.columnClientAck = new global::System.Data.DataColumn("ClientAck", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientAck);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEMID}, true));
                this.columnEMID.AutoIncrement = true;
                this.columnEMID.AllowDBNull = false;
                this.columnEMID.ReadOnly = true;
                this.columnEMID.Unique = true;
                this.columnMEMID.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.MaxLength = 50;
                this.columnDebuggingId.AllowDBNull = false;
                this.columnDebuggingId.MaxLength = 50;
                this.columnFullMessage.AllowDBNull = false;
                this.columnFullMessage.MaxLength = 2147483647;
                this.columnFullStackTrace.AllowDBNull = false;
                this.columnFullStackTrace.MaxLength = 2147483647;
                this.columnClientAck.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow NewtErrorMessageRow() {
                return ((tErrorMessageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tErrorMessageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tErrorMessageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tErrorMessageRowChanged != null)) {
                    this.tErrorMessageRowChanged(this, new tErrorMessageRowChangeEvent(((tErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tErrorMessageRowChanging != null)) {
                    this.tErrorMessageRowChanging(this, new tErrorMessageRowChangeEvent(((tErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tErrorMessageRowDeleted != null)) {
                    this.tErrorMessageRowDeleted(this, new tErrorMessageRowChangeEvent(((tErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tErrorMessageRowDeleting != null)) {
                    this.tErrorMessageRowDeleting(this, new tErrorMessageRowChangeEvent(((tErrorMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetErrorMessageRow(tErrorMessageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ErrorHandlingDS ds = new ErrorHandlingDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tErrorMessageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mErrorMessageKeyDataTable : global::System.Data.TypedTableBase<mErrorMessageKeyRow> {
            
            private global::System.Data.DataColumn columnEMKID;
            
            private global::System.Data.DataColumn columnKName;
            
            private global::System.Data.DataColumn columnKCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyDataTable() {
                this.TableName = "mErrorMessageKey";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorMessageKeyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mErrorMessageKeyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMKIDColumn {
                get {
                    return this.columnEMKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNameColumn {
                get {
                    return this.columnKName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KCountColumn {
                get {
                    return this.columnKCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRow this[int index] {
                get {
                    return ((mErrorMessageKeyRow)(this.Rows[index]));
                }
            }
            
            public event mErrorMessageKeyRowChangeEventHandler mErrorMessageKeyRowChanging;
            
            public event mErrorMessageKeyRowChangeEventHandler mErrorMessageKeyRowChanged;
            
            public event mErrorMessageKeyRowChangeEventHandler mErrorMessageKeyRowDeleting;
            
            public event mErrorMessageKeyRowChangeEventHandler mErrorMessageKeyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmErrorMessageKeyRow(mErrorMessageKeyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRow AddmErrorMessageKeyRow(string KName, int KCount) {
                mErrorMessageKeyRow rowmErrorMessageKeyRow = ((mErrorMessageKeyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        KName,
                        KCount};
                rowmErrorMessageKeyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmErrorMessageKeyRow);
                return rowmErrorMessageKeyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRow FindByEMKID(int EMKID) {
                return ((mErrorMessageKeyRow)(this.Rows.Find(new object[] {
                            EMKID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mErrorMessageKeyDataTable cln = ((mErrorMessageKeyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mErrorMessageKeyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMKID = base.Columns["EMKID"];
                this.columnKName = base.Columns["KName"];
                this.columnKCount = base.Columns["KCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMKID = new global::System.Data.DataColumn("EMKID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMKID);
                this.columnKName = new global::System.Data.DataColumn("KName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKName);
                this.columnKCount = new global::System.Data.DataColumn("KCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEMKID}, true));
                this.columnEMKID.AutoIncrement = true;
                this.columnEMKID.AllowDBNull = false;
                this.columnEMKID.ReadOnly = true;
                this.columnEMKID.Unique = true;
                this.columnKName.AllowDBNull = false;
                this.columnKName.MaxLength = 50;
                this.columnKCount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRow NewmErrorMessageKeyRow() {
                return ((mErrorMessageKeyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mErrorMessageKeyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mErrorMessageKeyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mErrorMessageKeyRowChanged != null)) {
                    this.mErrorMessageKeyRowChanged(this, new mErrorMessageKeyRowChangeEvent(((mErrorMessageKeyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mErrorMessageKeyRowChanging != null)) {
                    this.mErrorMessageKeyRowChanging(this, new mErrorMessageKeyRowChangeEvent(((mErrorMessageKeyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mErrorMessageKeyRowDeleted != null)) {
                    this.mErrorMessageKeyRowDeleted(this, new mErrorMessageKeyRowChangeEvent(((mErrorMessageKeyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mErrorMessageKeyRowDeleting != null)) {
                    this.mErrorMessageKeyRowDeleting(this, new mErrorMessageKeyRowChangeEvent(((mErrorMessageKeyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemErrorMessageKeyRow(mErrorMessageKeyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ErrorHandlingDS ds = new ErrorHandlingDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mErrorMessageKeyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mErrorGroupingRow : global::System.Data.DataRow {
            
            private mErrorGroupingDataTable tablemErrorGrouping;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorGroupingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemErrorGrouping = ((mErrorGroupingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EGID {
                get {
                    return ((int)(this[this.tablemErrorGrouping.EGIDColumn]));
                }
                set {
                    this[this.tablemErrorGrouping.EGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegularExp {
                get {
                    return ((string)(this[this.tablemErrorGrouping.RegularExpColumn]));
                }
                set {
                    this[this.tablemErrorGrouping.RegularExpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GMessage {
                get {
                    return ((string)(this[this.tablemErrorGrouping.GMessageColumn]));
                }
                set {
                    this[this.tablemErrorGrouping.GMessageColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mErrorMessageRow : global::System.Data.DataRow {
            
            private mErrorMessageDataTable tablemErrorMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorMessageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemErrorMessage = ((mErrorMessageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMID {
                get {
                    return ((int)(this[this.tablemErrorMessage.EMIDColumn]));
                }
                set {
                    this[this.tablemErrorMessage.EMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMParentID {
                get {
                    try {
                        return ((int)(this[this.tablemErrorMessage.EMParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMParentID\' in table \'mErrorMessage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemErrorMessage.EMParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorCode {
                get {
                    return ((string)(this[this.tablemErrorMessage.ErrorCodeColumn]));
                }
                set {
                    this[this.tablemErrorMessage.ErrorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalType {
                get {
                    return ((string)(this[this.tablemErrorMessage.OriginalTypeColumn]));
                }
                set {
                    this[this.tablemErrorMessage.OriginalTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BMID {
                get {
                    return ((int)(this[this.tablemErrorMessage.BMIDColumn]));
                }
                set {
                    this[this.tablemErrorMessage.BMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLID {
                get {
                    return ((int)(this[this.tablemErrorMessage.BLIDColumn]));
                }
                set {
                    this[this.tablemErrorMessage.BLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    return ((string)(this[this.tablemErrorMessage.MessageColumn]));
                }
                set {
                    this[this.tablemErrorMessage.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StackTrace {
                get {
                    return ((string)(this[this.tablemErrorMessage.StackTraceColumn]));
                }
                set {
                    this[this.tablemErrorMessage.StackTraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    return ((string)(this[this.tablemErrorMessage.SourceColumn]));
                }
                set {
                    this[this.tablemErrorMessage.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THMessage {
                get {
                    return ((string)(this[this.tablemErrorMessage.THMessageColumn]));
                }
                set {
                    this[this.tablemErrorMessage.THMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cause {
                get {
                    return ((string)(this[this.tablemErrorMessage.CauseColumn]));
                }
                set {
                    this[this.tablemErrorMessage.CauseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Resolve {
                get {
                    return ((string)(this[this.tablemErrorMessage.ResolveColumn]));
                }
                set {
                    this[this.tablemErrorMessage.ResolveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HelpURL {
                get {
                    return ((string)(this[this.tablemErrorMessage.HelpURLColumn]));
                }
                set {
                    this[this.tablemErrorMessage.HelpURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanContinue {
                get {
                    return ((bool)(this[this.tablemErrorMessage.CanContinueColumn]));
                }
                set {
                    this[this.tablemErrorMessage.CanContinueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tablemErrorMessage.CreateDateColumn]));
                }
                set {
                    this[this.tablemErrorMessage.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OccurCount {
                get {
                    return ((int)(this[this.tablemErrorMessage.OccurCountColumn]));
                }
                set {
                    this[this.tablemErrorMessage.OccurCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastOccur {
                get {
                    return ((global::System.DateTime)(this[this.tablemErrorMessage.LastOccurColumn]));
                }
                set {
                    this[this.tablemErrorMessage.LastOccurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow mErrorMessageRowParent {
                get {
                    return ((mErrorMessageRow)(this.GetParentRow(this.Table.ParentRelations["FK_mErrorMessage_mErrorMessage_EMParentID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_mErrorMessage_mErrorMessage_EMParentID"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMParentIDNull() {
                return this.IsNull(this.tablemErrorMessage.EMParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMParentIDNull() {
                this[this.tablemErrorMessage.EMParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow[] GettErrorMessageRows() {
                if ((this.Table.ChildRelations["FK_tErrorMessage_mErrorMessage_MEMID"] == null)) {
                    return new tErrorMessageRow[0];
                }
                else {
                    return ((tErrorMessageRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tErrorMessage_mErrorMessage_MEMID"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow[] GetmErrorMessageRows() {
                if ((this.Table.ChildRelations["FK_mErrorMessage_mErrorMessage_EMParentID"] == null)) {
                    return new mErrorMessageRow[0];
                }
                else {
                    return ((mErrorMessageRow[])(base.GetChildRows(this.Table.ChildRelations["FK_mErrorMessage_mErrorMessage_EMParentID"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tErrorMessageRow : global::System.Data.DataRow {
            
            private tErrorMessageDataTable tabletErrorMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tErrorMessageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletErrorMessage = ((tErrorMessageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMID {
                get {
                    return ((int)(this[this.tabletErrorMessage.EMIDColumn]));
                }
                set {
                    this[this.tabletErrorMessage.EMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MEMID {
                get {
                    return ((int)(this[this.tabletErrorMessage.MEMIDColumn]));
                }
                set {
                    this[this.tabletErrorMessage.MEMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tabletErrorMessage.CreateDateColumn]));
                }
                set {
                    this[this.tabletErrorMessage.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tabletErrorMessage.UserIdColumn]));
                }
                set {
                    this[this.tabletErrorMessage.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebuggingId {
                get {
                    return ((string)(this[this.tabletErrorMessage.DebuggingIdColumn]));
                }
                set {
                    this[this.tabletErrorMessage.DebuggingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullMessage {
                get {
                    return ((string)(this[this.tabletErrorMessage.FullMessageColumn]));
                }
                set {
                    this[this.tabletErrorMessage.FullMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullStackTrace {
                get {
                    return ((string)(this[this.tabletErrorMessage.FullStackTraceColumn]));
                }
                set {
                    this[this.tabletErrorMessage.FullStackTraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ClientAck {
                get {
                    return ((bool)(this[this.tabletErrorMessage.ClientAckColumn]));
                }
                set {
                    this[this.tabletErrorMessage.ClientAckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow mErrorMessageRow {
                get {
                    return ((mErrorMessageRow)(this.GetParentRow(this.Table.ParentRelations["FK_tErrorMessage_mErrorMessage_MEMID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tErrorMessage_mErrorMessage_MEMID"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mErrorMessageKeyRow : global::System.Data.DataRow {
            
            private mErrorMessageKeyDataTable tablemErrorMessageKey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mErrorMessageKeyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemErrorMessageKey = ((mErrorMessageKeyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMKID {
                get {
                    return ((int)(this[this.tablemErrorMessageKey.EMKIDColumn]));
                }
                set {
                    this[this.tablemErrorMessageKey.EMKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KName {
                get {
                    return ((string)(this[this.tablemErrorMessageKey.KNameColumn]));
                }
                set {
                    this[this.tablemErrorMessageKey.KNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KCount {
                get {
                    return ((int)(this[this.tablemErrorMessageKey.KCountColumn]));
                }
                set {
                    this[this.tablemErrorMessageKey.KCountColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mErrorGroupingRowChangeEvent : global::System.EventArgs {
            
            private mErrorGroupingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRowChangeEvent(mErrorGroupingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorGroupingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mErrorMessageRowChangeEvent : global::System.EventArgs {
            
            private mErrorMessageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRowChangeEvent(mErrorMessageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tErrorMessageRowChangeEvent : global::System.EventArgs {
            
            private tErrorMessageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRowChangeEvent(tErrorMessageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tErrorMessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mErrorMessageKeyRowChangeEvent : global::System.EventArgs {
            
            private mErrorMessageKeyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRowChangeEvent(mErrorMessageKeyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mErrorMessageKeyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PEA.BPM.Architecture.ArchitectureDA.ErrorHandlingDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mErrorGroupingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mErrorGroupingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mErrorGrouping";
            tableMapping.ColumnMappings.Add("EGID", "EGID");
            tableMapping.ColumnMappings.Add("RegularExp", "RegularExp");
            tableMapping.ColumnMappings.Add("GMessage", "GMessage");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ta].[mErrorGrouping] WHERE (([EGID] = @Original_EGID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EGID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EGID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ta].[mErrorGrouping] ([RegularExp], [GMessage]) VALUES (@RegularExp," +
                " @GMessage);\r\nSELECT EGID, RegularExp, GMessage FROM ta.mErrorGrouping WHERE (EG" +
                "ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegularExp", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegularExp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GMessage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [ta].[mErrorGrouping] SET [RegularExp] = @RegularExp, [GMessage] = @GMessa" +
                "ge WHERE (([EGID] = @Original_EGID));\r\nSELECT EGID, RegularExp, GMessage FROM ta" +
                ".mErrorGrouping WHERE (EGID = @EGID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegularExp", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegularExp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GMessage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EGID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EGID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EGID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EGID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PEA.BPM.Architecture.ArchitectureDA.Properties.Settings.Default.AuditDatabase;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EGID, RegularExp, GMessage FROM ta.mErrorGrouping";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorHandlingDS.mErrorGroupingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorHandlingDS.mErrorGroupingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorHandlingDS.mErrorGroupingDataTable dataTable = new ErrorHandlingDS.mErrorGroupingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS.mErrorGroupingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS dataSet) {
            return this.Adapter.Update(dataSet, "mErrorGrouping");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mErrorMessageTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mErrorMessageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mErrorMessage";
            tableMapping.ColumnMappings.Add("EMID", "EMID");
            tableMapping.ColumnMappings.Add("EMParentID", "EMParentID");
            tableMapping.ColumnMappings.Add("ErrorCode", "ErrorCode");
            tableMapping.ColumnMappings.Add("OriginalType", "OriginalType");
            tableMapping.ColumnMappings.Add("BMID", "BMID");
            tableMapping.ColumnMappings.Add("BLID", "BLID");
            tableMapping.ColumnMappings.Add("Message", "Message");
            tableMapping.ColumnMappings.Add("StackTrace", "StackTrace");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("THMessage", "THMessage");
            tableMapping.ColumnMappings.Add("Cause", "Cause");
            tableMapping.ColumnMappings.Add("Resolve", "Resolve");
            tableMapping.ColumnMappings.Add("HelpURL", "HelpURL");
            tableMapping.ColumnMappings.Add("CanContinue", "CanContinue");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("OccurCount", "OccurCount");
            tableMapping.ColumnMappings.Add("LastOccur", "LastOccur");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ta].[mErrorMessage] WHERE (([EMID] = @Original_EMID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ta].[mErrorMessage] ([EMParentID], [ErrorCode], [OriginalType], [BMID], [BLID], [Message], [StackTrace], [Source], [THMessage], [Cause], [Resolve], [HelpURL], [CanContinue], [CreateDate], [OccurCount], [LastOccur]) VALUES (@EMParentID, @ErrorCode, @OriginalType, @BMID, @BLID, @Message, @StackTrace, @Source, @THMessage, @Cause, @Resolve, @HelpURL, @CanContinue, @CreateDate, @OccurCount, @LastOccur);
SELECT EMID, EMParentID, ErrorCode, OriginalType, BMID, BLID, Message, StackTrace, Source, THMessage, Cause, Resolve, HelpURL, CanContinue, CreateDate, OccurCount, LastOccur FROM ta.mErrorMessage WHERE (EMID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMParentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMParentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Message", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StackTrace", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@THMessage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cause", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cause", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Resolve", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Resolve", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HelpURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HelpURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CanContinue", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CanContinue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OccurCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OccurCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastOccur", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastOccur", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ta].[mErrorMessage] SET [EMParentID] = @EMParentID, [ErrorCode] = @ErrorCode, [OriginalType] = @OriginalType, [BMID] = @BMID, [BLID] = @BLID, [Message] = @Message, [StackTrace] = @StackTrace, [Source] = @Source, [THMessage] = @THMessage, [Cause] = @Cause, [Resolve] = @Resolve, [HelpURL] = @HelpURL, [CanContinue] = @CanContinue, [CreateDate] = @CreateDate, [OccurCount] = @OccurCount, [LastOccur] = @LastOccur WHERE (([EMID] = @Original_EMID));
SELECT EMID, EMParentID, ErrorCode, OriginalType, BMID, BLID, Message, StackTrace, Source, THMessage, Cause, Resolve, HelpURL, CanContinue, CreateDate, OccurCount, LastOccur FROM ta.mErrorMessage WHERE (EMID = @EMID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMParentID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMParentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Message", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StackTrace", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@THMessage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cause", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cause", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Resolve", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Resolve", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HelpURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HelpURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CanContinue", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CanContinue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OccurCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OccurCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastOccur", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastOccur", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PEA.BPM.Architecture.ArchitectureDA.Properties.Settings.Default.AuditDatabase;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM ta.mErrorMessage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO ta.mErrorMessage
                         (EMParentID, ErrorCode, OriginalType, BMID, BLID, Message, StackTrace, Source, THMessage, Cause, Resolve, HelpURL, CanContinue, CreateDate, OccurCount, 
                         LastOccur)
VALUES        (NULL,@ErrorCode,@OriginalType,@BMID,@BLID,@Message,@StackTrace,@Source, '', '', '', '',@CanContinue,@CreateDate, 0,@CreateDate);  
SELECT CAST(SCOPE_IDENTITY() AS INT)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorCode", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalType", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BMID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Message", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "Message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StackTrace", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "StackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CanContinue", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "CanContinue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LastOccur", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT        BLID, BMID, CanContinue, Cause, CreateDate, EMID, EMParentID, ErrorCode, HelpURL, LastOccur, Message, OccurCount, OriginalType, Resolve, Source, 
                         StackTrace, THMessage
FROM            ta.mErrorMessage
WHERE        (ErrorCode = @ErrorCode)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorCode", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        BLID, BMID, CanContinue, Cause, CreateDate, EMID, EMParentID, ErrorCode, HelpURL, LastOccur, Message, OccurCount, OriginalType, Resolve, Source, 
                         StackTrace, THMessage
FROM            ta.mErrorMessage
WHERE        (Message = @Message) AND (BMID = @BMID) AND (BLID = @BLID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Message", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "Message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BMID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BLID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE [ta].[mErrorMessage] SET [OccurCount] = OccurCount+1, [LastOccur] = @LastO" +
                "ccur WHERE (([EMID] = @EMID));\r\nSELECT * FROM ta.mErrorMessage WHERE (EMID = @EM" +
                "ID)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastOccur", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LastOccur", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorHandlingDS.mErrorMessageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorHandlingDS.mErrorMessageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorHandlingDS.mErrorMessageDataTable dataTable = new ErrorHandlingDS.mErrorMessageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByErrorCode(ErrorHandlingDS.mErrorMessageDataTable dataTable, string ErrorCode) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ErrorCode == null)) {
                throw new global::System.ArgumentNullException("ErrorCode");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ErrorCode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ErrorHandlingDS.mErrorMessageDataTable GetByErrorCode(string ErrorCode) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ErrorCode == null)) {
                throw new global::System.ArgumentNullException("ErrorCode");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ErrorCode));
            }
            ErrorHandlingDS.mErrorMessageDataTable dataTable = new ErrorHandlingDS.mErrorMessageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillOneByMessageModuleLayer(ErrorHandlingDS.mErrorMessageDataTable dataTable, string Message, int BMID, int BLID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Message));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(BMID));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(BLID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ErrorHandlingDS.mErrorMessageDataTable GetOneByMessageModuleLayer(string Message, int BMID, int BLID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Message));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(BMID));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(BLID));
            ErrorHandlingDS.mErrorMessageDataTable dataTable = new ErrorHandlingDS.mErrorMessageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS.mErrorMessageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS dataSet) {
            return this.Adapter.Update(dataSet, "mErrorMessage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EMID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EMID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> EMParentID, 
                    string ErrorCode, 
                    string OriginalType, 
                    int BMID, 
                    int BLID, 
                    string Message, 
                    string StackTrace, 
                    string Source, 
                    string THMessage, 
                    string Cause, 
                    string Resolve, 
                    string HelpURL, 
                    bool CanContinue, 
                    System.DateTime CreateDate, 
                    int OccurCount, 
                    System.DateTime LastOccur) {
            if ((EMParentID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EMParentID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ErrorCode == null)) {
                throw new global::System.ArgumentNullException("ErrorCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ErrorCode));
            }
            if ((OriginalType == null)) {
                throw new global::System.ArgumentNullException("OriginalType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(OriginalType));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(BMID));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(BLID));
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Message));
            }
            if ((StackTrace == null)) {
                throw new global::System.ArgumentNullException("StackTrace");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(StackTrace));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Source));
            }
            if ((THMessage == null)) {
                throw new global::System.ArgumentNullException("THMessage");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(THMessage));
            }
            if ((Cause == null)) {
                throw new global::System.ArgumentNullException("Cause");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Cause));
            }
            if ((Resolve == null)) {
                throw new global::System.ArgumentNullException("Resolve");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Resolve));
            }
            if ((HelpURL == null)) {
                throw new global::System.ArgumentNullException("HelpURL");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(HelpURL));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(CanContinue));
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(CreateDate));
            this.Adapter.InsertCommand.Parameters[14].Value = ((int)(OccurCount));
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(LastOccur));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> EMParentID, 
                    string ErrorCode, 
                    string OriginalType, 
                    int BMID, 
                    int BLID, 
                    string Message, 
                    string StackTrace, 
                    string Source, 
                    string THMessage, 
                    string Cause, 
                    string Resolve, 
                    string HelpURL, 
                    bool CanContinue, 
                    System.DateTime CreateDate, 
                    int OccurCount, 
                    System.DateTime LastOccur, 
                    int Original_EMID, 
                    int EMID) {
            if ((EMParentID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EMParentID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ErrorCode == null)) {
                throw new global::System.ArgumentNullException("ErrorCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ErrorCode));
            }
            if ((OriginalType == null)) {
                throw new global::System.ArgumentNullException("OriginalType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(OriginalType));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(BMID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(BLID));
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Message));
            }
            if ((StackTrace == null)) {
                throw new global::System.ArgumentNullException("StackTrace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(StackTrace));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Source));
            }
            if ((THMessage == null)) {
                throw new global::System.ArgumentNullException("THMessage");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(THMessage));
            }
            if ((Cause == null)) {
                throw new global::System.ArgumentNullException("Cause");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Cause));
            }
            if ((Resolve == null)) {
                throw new global::System.ArgumentNullException("Resolve");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Resolve));
            }
            if ((HelpURL == null)) {
                throw new global::System.ArgumentNullException("HelpURL");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(HelpURL));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(CanContinue));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(CreateDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(OccurCount));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(LastOccur));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_EMID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(EMID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> EMParentID, 
                    string ErrorCode, 
                    string OriginalType, 
                    int BMID, 
                    int BLID, 
                    string Message, 
                    string StackTrace, 
                    string Source, 
                    string THMessage, 
                    string Cause, 
                    string Resolve, 
                    string HelpURL, 
                    bool CanContinue, 
                    System.DateTime CreateDate, 
                    int OccurCount, 
                    System.DateTime LastOccur, 
                    int Original_EMID) {
            return this.Update(EMParentID, ErrorCode, OriginalType, BMID, BLID, Message, StackTrace, Source, THMessage, Cause, Resolve, HelpURL, CanContinue, CreateDate, OccurCount, LastOccur, Original_EMID, Original_EMID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object CreateOne(string ErrorCode, string OriginalType, int BMID, int BLID, string Message, string StackTrace, string Source, bool CanContinue, System.DateTime CreateDate) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((ErrorCode == null)) {
                throw new global::System.ArgumentNullException("ErrorCode");
            }
            else {
                command.Parameters[0].Value = ((string)(ErrorCode));
            }
            if ((OriginalType == null)) {
                throw new global::System.ArgumentNullException("OriginalType");
            }
            else {
                command.Parameters[1].Value = ((string)(OriginalType));
            }
            command.Parameters[2].Value = ((int)(BMID));
            command.Parameters[3].Value = ((int)(BLID));
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                command.Parameters[4].Value = ((string)(Message));
            }
            if ((StackTrace == null)) {
                throw new global::System.ArgumentNullException("StackTrace");
            }
            else {
                command.Parameters[5].Value = ((string)(StackTrace));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                command.Parameters[6].Value = ((string)(Source));
            }
            command.Parameters[7].Value = ((bool)(CanContinue));
            command.Parameters[8].Value = ((System.DateTime)(CreateDate));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOccur(System.DateTime LastOccur, int EMID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            command.Parameters[0].Value = ((System.DateTime)(LastOccur));
            command.Parameters[1].Value = ((int)(EMID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tErrorMessageTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tErrorMessageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tErrorMessage";
            tableMapping.ColumnMappings.Add("EMID", "EMID");
            tableMapping.ColumnMappings.Add("MEMID", "MEMID");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("DebuggingId", "DebuggingId");
            tableMapping.ColumnMappings.Add("FullMessage", "FullMessage");
            tableMapping.ColumnMappings.Add("FullStackTrace", "FullStackTrace");
            tableMapping.ColumnMappings.Add("ClientAck", "ClientAck");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ta].[tErrorMessage] WHERE (([EMID] = @Original_EMID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ta].[tErrorMessage] ([MEMID], [CreateDate], [UserId], [DebuggingId], [FullMessage], [FullStackTrace], [ClientAck]) VALUES (@MEMID, @CreateDate, @UserId, @DebuggingId, @FullMessage, @FullStackTrace, @ClientAck);
SELECT EMID, MEMID, CreateDate, UserId, DebuggingId, FullMessage, FullStackTrace, ClientAck FROM ta.tErrorMessage WHERE (EMID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DebuggingId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DebuggingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullMessage", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullStackTrace", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullStackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientAck", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientAck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ta].[tErrorMessage] SET [MEMID] = @MEMID, [CreateDate] = @CreateDate, [UserId] = @UserId, [DebuggingId] = @DebuggingId, [FullMessage] = @FullMessage, [FullStackTrace] = @FullStackTrace, [ClientAck] = @ClientAck WHERE (([EMID] = @Original_EMID));
SELECT EMID, MEMID, CreateDate, UserId, DebuggingId, FullMessage, FullStackTrace, ClientAck FROM ta.tErrorMessage WHERE (EMID = @EMID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DebuggingId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DebuggingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullMessage", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullStackTrace", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullStackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientAck", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientAck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EMID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PEA.BPM.Architecture.ArchitectureDA.Properties.Settings.Default.AuditDatabase;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM ta.tErrorMessage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE [ta].[tErrorMessage] SET [FullStackTrace] = @FullStackTrace, [ClientAck] =" +
                " 1 WHERE [DebuggingID] = @DebuggingID;";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullStackTrace", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "FullStackTrace", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DebuggingID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "DebuggingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorHandlingDS.tErrorMessageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorHandlingDS.tErrorMessageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorHandlingDS.tErrorMessageDataTable dataTable = new ErrorHandlingDS.tErrorMessageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS.tErrorMessageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS dataSet) {
            return this.Adapter.Update(dataSet, "tErrorMessage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EMID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EMID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MEMID, System.DateTime CreateDate, string UserId, string DebuggingId, string FullMessage, string FullStackTrace, bool ClientAck) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MEMID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(CreateDate));
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(UserId));
            }
            if ((DebuggingId == null)) {
                throw new global::System.ArgumentNullException("DebuggingId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DebuggingId));
            }
            if ((FullMessage == null)) {
                throw new global::System.ArgumentNullException("FullMessage");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FullMessage));
            }
            if ((FullStackTrace == null)) {
                throw new global::System.ArgumentNullException("FullStackTrace");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FullStackTrace));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(ClientAck));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MEMID, System.DateTime CreateDate, string UserId, string DebuggingId, string FullMessage, string FullStackTrace, bool ClientAck, int Original_EMID, int EMID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MEMID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(CreateDate));
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(UserId));
            }
            if ((DebuggingId == null)) {
                throw new global::System.ArgumentNullException("DebuggingId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DebuggingId));
            }
            if ((FullMessage == null)) {
                throw new global::System.ArgumentNullException("FullMessage");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FullMessage));
            }
            if ((FullStackTrace == null)) {
                throw new global::System.ArgumentNullException("FullStackTrace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FullStackTrace));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(ClientAck));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_EMID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(EMID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MEMID, System.DateTime CreateDate, string UserId, string DebuggingId, string FullMessage, string FullStackTrace, bool ClientAck, int Original_EMID) {
            return this.Update(MEMID, CreateDate, UserId, DebuggingId, FullMessage, FullStackTrace, ClientAck, Original_EMID, Original_EMID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOneStackAndClientAck(string FullStackTrace, string DebuggingID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((FullStackTrace == null)) {
                throw new global::System.ArgumentNullException("FullStackTrace");
            }
            else {
                command.Parameters[0].Value = ((string)(FullStackTrace));
            }
            if ((DebuggingID == null)) {
                throw new global::System.ArgumentNullException("DebuggingID");
            }
            else {
                command.Parameters[1].Value = ((string)(DebuggingID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mErrorMessageKeyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mErrorMessageKeyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mErrorMessageKey";
            tableMapping.ColumnMappings.Add("EMKID", "EMKID");
            tableMapping.ColumnMappings.Add("KName", "KName");
            tableMapping.ColumnMappings.Add("KCount", "KCount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ta].[mErrorMessageKey] WHERE (([EMKID] = @Original_EMKID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMKID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMKID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ta].[mErrorMessageKey] ([KName], [KCount]) VALUES (@KName, @KCount);" +
                "\r\nSELECT EMKID, KName, KCount FROM ta.mErrorMessageKey WHERE (EMKID = SCOPE_IDEN" +
                "TITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [ta].[mErrorMessageKey] SET [KName] = @KName, [KCount] = @KCount WHERE (([" +
                "EMKID] = @Original_EMKID));\r\nSELECT EMKID, KName, KCount FROM ta.mErrorMessageKe" +
                "y WHERE (EMKID = @EMKID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMKID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMKID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMKID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EMKID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PEA.BPM.Architecture.ArchitectureDA.Properties.Settings.Default.AuditDatabase;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EMKID, KName, KCount FROM ta.mErrorMessageKey";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"IF EXISTS (SELECT KName FROM ta.mErrorMessageKey WHERE KName = @KName) 
BEGIN 
	UPDATE ta.mErrorMessageKey SET KCount = KCount + 1 WHERE KName = @KName;
	SELECT KCount FROM ta.mErrorMessageKey WHERE KName = @KName
END 
ELSE 
BEGIN 
	INSERT INTO ta.mErrorMessageKey (KName, KCount) VALUES (@KName, 1);
	SELECT 1 AS KCount
END";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "KName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ErrorHandlingDS.mErrorMessageKeyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ErrorHandlingDS.mErrorMessageKeyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ErrorHandlingDS.mErrorMessageKeyDataTable dataTable = new ErrorHandlingDS.mErrorMessageKeyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS.mErrorMessageKeyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ErrorHandlingDS dataSet) {
            return this.Adapter.Update(dataSet, "mErrorMessageKey");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetNextKeyByKeyName(string KName) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((KName == null)) {
                throw new global::System.ArgumentNullException("KName");
            }
            else {
                command.Parameters[0].Value = ((string)(KName));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}

#pragma warning restore 1591