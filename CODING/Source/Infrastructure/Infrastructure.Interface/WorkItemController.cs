//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The WorkItemController is an abstract base class that contains a WorkItem. 
// This class contains logic that would otherwise exist in the WorkItem. 
// You can use this class to partition your code between a class that derives from WorkItemController and a WorkItem.
// 
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-210-Creating%20a%20Smart%20Client%20Solution.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System.Drawing;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface.Services;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.Infrastructure.Interface.Constants;

using System;
using System.Collections.Generic;
using System.Collections;


namespace PEA.BPM.Infrastructure.Interface
{
    /// <summary>
    /// Base class for a WorkItem controller.
    /// </summary>
    public abstract class WorkItemController : IWorkItemController
    {
        private List<WorkItem> _useCaseController;
        private WorkItem _workItem;

        /// <summary>
        /// Gets or sets the work item.
        /// </summary>
        /// <value>The work item.</value>
        [ServiceDependency]
        public WorkItem WorkItem
        {
            get { return _workItem; }
            set { _workItem = value; }
        }

        public IActionCatalogService ActionCatalogService
        {
            get { return _workItem.Services.Get<IActionCatalogService>(); }
        }

        public virtual void Run()
        {
            _useCaseController = new List<WorkItem>();
        }

        protected ControlledWorkItem<UseCaseController> LoadUseCase<UseCaseController>(bool clearExistingUsecase)
        {
            if (clearExistingUsecase)
            {
                ClearExistingUseCase();
            }

            ControlledWorkItem<UseCaseController> useCaseCtrl =
                WorkItem.WorkItems.AddNew<ControlledWorkItem<UseCaseController>>();
            _useCaseController.Add(useCaseCtrl);

            return useCaseCtrl;
        }

        protected ControlledWorkItem<UseCaseController> LoadUseCase<UseCaseController>()
        {
            return LoadUseCase<UseCaseController>(true);
        }

        protected void ClearExistingUseCase()
        {
            foreach (WorkItem workItem in _useCaseController)
            {
                workItem.Terminate();
                workItem.Dispose();
            }

            _useCaseController.Clear();
        }

        protected ToolStripMenuItem AddGroupMenu(ToolStripMenuItem parent, string text)
        {
            ToolStripMenuItem gm = new ToolStripMenuItem(text);
            parent.DropDownItems.Add(gm);

            return gm;
        }

        private static Dictionary<string, ToolStripMenuItem> menu = new Dictionary<string, ToolStripMenuItem>();
        private static Dictionary<string, ToolStripButton> tsButton = new Dictionary<string, ToolStripButton>();   
        
        protected void DisableMenuItem(string command)
        {
            if (menu.ContainsKey(command))
            {
                menu[command].Enabled = false;
            }
            if (tsButton.ContainsKey(command))
            {
                tsButton[command].Enabled = false;
            }
        }

        protected void SetVisible(string command, bool visible)
        {
            if (menu.ContainsKey(command))
            {
                menu[command].Visible = visible;
            }
        }

        protected void EnableMenuItem(string command)
        {
            if (menu.ContainsKey(command))
            {
                menu[command].Enabled = true;
            }
            if (tsButton.ContainsKey(command))
            {
                tsButton[command].Enabled = true;
            }
        }

        protected void AddMenuItem(ToolStripMenuItem parent, string text, string command, Keys shortcutKeys)
        {
            AddMenuItem(parent, text, command, shortcutKeys, true);
        }

        protected void AddMenuItem(ToolStripMenuItem parent, string text, string command, Keys shortcutKeys, bool enable)
        {
            ToolStripMenuItem item = new ToolStripMenuItem(text);
            //item.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            item.ShortcutKeys = shortcutKeys;
            parent.DropDownItems.Add(item);
            item.Enabled = enable;

            menu.Add(command, item);
            
            WorkItem.Commands[command].AddInvoker(item, "Click");
        }


        protected void AddMenuSeparator(ToolStripMenuItem parent)
        {
            ToolStripSeparator separator = new ToolStripSeparator();
            parent.DropDownItems.Add(separator);
        }

        protected void AddToolStripButton(UIExtensionSite toolstrip, string text, Image image, string command)
        {
            AddToolStripButton(toolstrip, text, image, command, true);
        }


        protected ToolStripButton AddToolStripButton(UIExtensionSite toolstrip, string text, Image image, string captionTxt, string command)
        {
            return AddToolStripButton(toolstrip, text, image, captionTxt, command, true);
        }

        protected void RemoveToolStripButton(UIExtensionSite toolstrip, ToolStripButton button, string command)
        {
            toolstrip.Remove(button);
            WorkItem.Commands[command].RemoveInvoker(button, "Click");
        }

        protected ToolStripButton AddToolStripButton(UIExtensionSite toolstrip, string text, Image image, string captionTxt, string command, bool enable)
        {
            ToolStripButton button = new ToolStripButton();
            button.ToolTipText = text;
            button.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText;
            button.Image = image;
            button.Text = captionTxt;
            button.Enabled = enable;
            toolstrip.Add(button);

            tsButton.Add(command, button);

            WorkItem.Commands[command].AddInvoker(button, "Click");
            return button;
        }

        protected void AddToolStripButton(UIExtensionSite toolstrip, string text, Image image, string command, bool enable)
        {
            ToolStripButton button = new ToolStripButton();
            button.ToolTipText = text;
            button.Image = image;
            button.Enabled = enable;
            toolstrip.Add(button);

            tsButton.Add(command, button);

            WorkItem.Commands[command].AddInvoker(button, "Click");
        }


        [EventPublication(EventTopicNames.WindowsTitleUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> WindowsTitleUpdate;
        protected void SetWindowsTitle(string useCaseName)
        {
            if (WindowsTitleUpdate != null)
            {
                WindowsTitleUpdate(this, new EventArgs<string>(useCaseName));
            }
        }

        [EventSubscription(EventTopicNames.EnableMenuItem, Thread = ThreadOption.UserInterface)]
        public void EnableMenuItemHandler(object sender, EventArgs<string> e)
        {
            EnableMenuItem(e.Data);
        }

        [EventSubscription(EventTopicNames.DisableMenuItem, Thread = ThreadOption.UserInterface)]
        public void DisableMenuItemHandler(object sender, EventArgs<string> e)
        {
            DisableMenuItem(e.Data);
        }

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> StatusUpdate;
        public void SetStatusText(string value)
        {
            if (StatusUpdate != null)
            {
                StatusUpdate(this, new EventArgs<string>(value));
            }
        }

        [EventPublication(EventTopicNames.FinishOfflineUpload, PublicationScope.Global)]
        public event EventHandler<EventArgs> FinishOfflineUploadHandler;
        public void SignalFinishOfflineUpload()
        {
            if (FinishOfflineUploadHandler != null)
                FinishOfflineUploadHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.OnCloseAllViews, PublicationScope.Global)]
        public event EventHandler<EventArgs> OnCloseAllViewsHandler;
        public void CloseAllViews()
        {
            if (OnCloseAllViewsHandler != null)
                OnCloseAllViewsHandler(this, new EventArgs());
        }

    }
}
