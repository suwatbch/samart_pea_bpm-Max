//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.PaymentManagementModule
{
    [SmartPart]
    public partial class PaymentVoucherSearchView : UserControl, IPaymentVoucherSearchView
    {
        public PaymentVoucherSearchView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PaymentVoucherSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            paymentVoucherIDMaskedTextBox.Focus();
            _presenter.OnViewReady();
        }

        private void voucherPaymentSearchButton_Click(object sender, EventArgs e)
        {
            SearchByPaymentVoucher();
        }

        private void voucherPaymentIDMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByPaymentVoucher();
            }
        }

        private void customerSearchButton_Click(object sender, EventArgs e)
        {
            SearchByCustomer();
        }

        private void customerIdMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByCustomer();
            }
        }

        private void voucherPaymentClearButton_Click(object sender, EventArgs e)
        {
            ClearSearchByVoucherPayment();
        }

        private void CustClearButton_Click(object sender, EventArgs e)
        {
            ClearSearchByCustomer();

        }

        #region +++ Custom Function +++

        public void InitSearchForm()
        {
            ClearSearchByVoucherPayment();
            ClearSearchByCustomer();
            paymentVoucherIDMaskedTextBox.Focus();
        }

        private void ClearSearchByVoucherPayment()
        {
            paymentVoucherIDMaskedTextBox.Text = String.Empty;
            cashierNameMaskedTextBox.Text = String.Empty;
        }

        private void ClearSearchByCustomer()
        {
            customerIdMaskedTextBox.Text = String.Empty;
            customerNameMaskedTextBox.Text = String.Empty;
        }

        private void SearchByPaymentVoucher()
        {
            PaymentVoucherSearchParam param = new PaymentVoucherSearchParam();
            param.PaymentVoucherId = StringConvert.ToString(paymentVoucherIDMaskedTextBox.Text.Trim());
            param.CashierName = StringConvert.ToString(cashierNameMaskedTextBox.Text.Trim());
            param.BranchId = Session.Branch.Id;

            if (param.PaymentVoucherId == null && param.CashierName == null)
            {
                MessageBox.Show("โปรดระบุเงื่อนไข 'เลขใบสำคัญจ่าย' หรือ 'ผู้จ่ายเงิน' ที่ต้องการค้นหา",
                    "ค้นหาข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                _presenter.OnPaymentVoucherSearch(param);
            }
        }

        private void SearchByCustomer()
        {
            customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.Trim().Replace(" ","");
            customerNameMaskedTextBox.Text = customerNameMaskedTextBox.Text.Trim().Replace(" ","");
            
            PaymentVoucherSearchParam param = new PaymentVoucherSearchParam();
            param.CustomerId = StringConvert.ToString(customerIdMaskedTextBox.Text);
            param.CustomerName = StringConvert.ToString(customerNameMaskedTextBox.Text);
            param.BranchId = Session.Branch.Id;

            if (param.CustomerId == null && param.CustomerName == null)
            {
                MessageBox.Show("โปรดระบุเงื่อนไข 'รหัสผู้เบิก' หรือ 'ชื่อ-นามสกุล' ที่ต้องการค้นหา",
                    "ค้นหาข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                if (param.CustomerId != null)
                {
                    customerIdMaskedTextBox.Text = customerIdMaskedTextBox.Text.PadLeft(12, '0');
                    param.CustomerId = param.CustomerId.PadLeft(12, '0');
                }
                _presenter.OnPaymentVoucherSearch(param);
            }
        }
        #endregion

        private void cashierNameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByPaymentVoucher();
            }
        }

        private void customerNameMaskedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                SearchByCustomer();
            }
        }

        private void maskedTextBox_Enter(object sender, EventArgs e)
        {
            this.BeginInvoke((MethodInvoker)delegate()
            {
                MaskedTextBox mTb = (sender as MaskedTextBox);
                if (mTb.Text == string.Empty || mTb.Text == null)
                    mTb.Select(0, 0);
                else
                    mTb.SelectAll();
            });
        }


    }
}

