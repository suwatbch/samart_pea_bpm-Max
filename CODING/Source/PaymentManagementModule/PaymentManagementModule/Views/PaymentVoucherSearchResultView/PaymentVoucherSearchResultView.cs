//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using PEA.BPM.PaymentManagementModule.Interface.BusinessEntities;

namespace PEA.BPM.PaymentManagementModule
{
    [SmartPart]
    public partial class PaymentVoucherSearchResultView : UserControl, IPaymentVoucherSearchResultView
    {
        private List<APEntity> _repayment;

        public PaymentVoucherSearchResultView()
        {
            InitializeComponent();
            searchResultDataGridView.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PaymentVoucherSearchResultViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #region IPaymentVoucherSearchResultView Members

        public List<APEntity> APEntities
        {
            set
            {
                this._repayment = value;
                LoadRepyamentToGrid();
            }
        }

        public Button OkButton
        {
            get { return addButton; }
        }

        public Button CancelButton
        {
            get { return cancelButton; }
        }

        #endregion

        #region Event Handlering

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            chkAllCheckBox.Checked = false;
        }

        #endregion

        #region Private Functions

        private void LoadRepyamentToGrid()
        {
            searchResultDataGridView.Enabled = false;
            searchResultDataGridView.DataSource = _repayment.ToArray();
            searchResultDataGridView.Enabled = true;
        }

        #endregion

        private void chkAllCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            bool isChecked = chkAllCheckBox.Checked;

            for (int i = 0; i < searchResultDataGridView.Rows.Count; i++)
            {
                searchResultDataGridView.Rows[i].Cells["checkedDgColumn"].Value = isChecked;
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }

        private void addButton_Click(object sender, EventArgs e)
        {
            AddSelectedItems();
        }

        private void AddSelectedItems()
        {
            List<APEntity> apEntitiesResult = new List<APEntity>();
            List<APEntity> apEntitiesDatasource = new List<APEntity>();
            int numOfAppmId = 0;
            int numOfChecked = 0;

            apEntitiesDatasource.AddRange(searchResultDataGridView.DataSource as APEntity[]);

            for (int i = 0; i < searchResultDataGridView.Rows.Count; i++)
            {
                object isChecked = searchResultDataGridView.Rows[i].Cells["checkedDgColumn"].Value;
                if (null != isChecked && true == (bool)isChecked)
                {
                    ++numOfChecked;
                    string appmId = searchResultDataGridView.Rows[i].Cells["APPmIdDgColumn"].Value as string;

                    //check repeat appemId
                    if( !apEntitiesResult.Exists(new RepaymentPredicate(appmId).SearchAPPmId ) )
                    {
                        ++numOfAppmId;
                        RepaymentPredicate predicate = new RepaymentPredicate();
                        predicate.APPmId = appmId;
                        List<APEntity> filteredList = apEntitiesDatasource.FindAll(predicate.SearchAPPmId);

                        apEntitiesResult.AddRange(filteredList);
                    }
                }
            }

            //MessageBox.Show("count: " + repaymentsResult.Count, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);


            if (apEntitiesResult.Count > 0)
            {
                if (numOfAppmId > 1)
                    MessageBox.Show("ใบสำคัญจ่ายที่เลือกจะต้องอยู่ในการจ่ายครั้งเดียวกัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                else if (numOfAppmId == 1)
                {
                    if (numOfChecked == apEntitiesResult[0].APQty)
                    { }
                    else
                    { 
                        MessageBox.Show("ใบสำคัญจ่ายที่เลือกมีรายการใบสำคัญจ่ายอื่นที่เกี่ยวเนื่องกัน และจะต้องถูกยกเลิกพร้อมกัน", "ยกเลิกใบสำคัญจ่าย",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        apEntitiesResult = _presenter.SearchPaymentVoucherByAPPmId(apEntitiesResult[0].APPmId);
                    }
                    _presenter.OnPaymentVoucherItemAdd(apEntitiesResult);
                }
            }
            else
            {
                MessageBox.Show("กรุณาเลือกรายการที่ต้องการ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }
        /*
        
        private void AddSelectedItems()
        {
            List<APEntity> apEntitiesResult = new List<APEntity>();
            List<APEntity> apEntitiesDatasource = new List<APEntity>();
            int numOfAppmId = 0;

            apEntitiesDatasource.AddRange(searchResultDataGridView.DataSource as APEntity[]);
            searchResultDataGridView.
            for (int i = 0; i < searchResultDataGridView.Rows.Count; i++)
            {
                object isChecked = searchResultDataGridView.Rows[i].Cells["checkedDgColumn"].Value;
                if (null != isChecked && true == (bool)isChecked)
                {
                    string appmId = searchResultDataGridView.Rows[i].Cells["APPmIdDgColumn"].Value as string;

                    //check repeat appemId
                    if( !apEntitiesResult.Exists(new RepaymentPredicate(appmId).SearchAPPmId ) )
                    {
                        ++numOfAppmId;
                        RepaymentPredicate predicate = new RepaymentPredicate();
                        predicate.APPmId = appmId;
                        List<APEntity> filteredList = apEntitiesDatasource.FindAll(predicate.SearchAPPmId);

                        apEntitiesResult.AddRange(filteredList);
                    }
                }
            }

            //MessageBox.Show("count: " + repaymentsResult.Count, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);


            if (apEntitiesResult.Count > 0)
            {
                if (numOfAppmId > 1)
                    MessageBox.Show("ใบสำคัญจ่ายที่เลือกจะต้องอยู่ในการจ่ายครั้งเดียวกัน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                else
                    _presenter.OnPaymentVoucherItemAdd(apEntitiesResult);
            }
            else
            {
                MessageBox.Show("กรุณาเลือกรายการที่ต้องการ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }
        */

    }


    public class RepaymentPredicate
    {
        private string _APPmId;

        public string APPmId
        {
            get { return _APPmId; }
            set { _APPmId = value; }
        }

        public RepaymentPredicate(){}

        public RepaymentPredicate(string APPmId)
        {
            this.APPmId = APPmId; 
        }

        // Predicate
        public bool SearchAPPmId(APEntity repayment)
        {
            return repayment.APPmId.ToUpper().Equals(this._APPmId.ToUpper());
        }

    }


}

