//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentManagementModule.Interface.Services;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentManagementModule.Interface.Constants;
using PEA.BPM.PaymentManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.Windows.Forms;
using System.Collections.Generic;
using PEA.BPM.Infrastructure.Library.UI;

namespace PEA.BPM.PaymentManagementModule
{
    public class PaymentVoucherSearchResultViewPresenter : Presenter<IPaymentVoucherSearchResultView>
    {
        private IPaymentMntService _PaymentMntService;

        [InjectionConstructor]
        public PaymentVoucherSearchResultViewPresenter([ServiceDependency] IPaymentMntService PaymentMntService)
        {
            _PaymentMntService = PaymentMntService;
        }


        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        

        [EventSubscription(EventTopicNames.PaymentVoucherSearch, Thread = ThreadOption.UserInterface)]
        public void PaymentVoucherSearchHandler(object sender, EventArgs<PaymentVoucherSearchParam> e)
        {

            try
            {
                WaitingFormHelper.ShowWaitingForm();

                List<APEntity> apEntities = _PaymentMntService.SearchPaymentVoucher(e.Data);

                if (apEntities.Count == 0)
                {
                    WaitingFormHelper.HideWaitingForm();
                    MessageBox.Show("ไม่พบข้อมูลใบสำคัญจ่ายที่ค้นหา\n\n*หมายเหตุ - สำหรับการค้นหาโดย 'เลขที่ใบสำคัญจ่าย' หรือ 'รหัสผู้เบิก' ต้องกรอกข้อมูลให้ครบทุกหลัก",
                        "ค้นหาข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    View.APEntities = apEntities;
                    WaitingFormHelper.HideWaitingForm();
                    ShowView();
                }
            }
            catch (Exception ex)
            {
                WaitingFormHelper.HideWaitingForm();
                Logger.WriteError(Logger.Module.POS, "ค้นหาข้อมูลใบสำคัญจ่าย", ex.ToString());
                MessageBox.Show("ไม่สามารถติดต่อกับเครื่องแม่ข่ายได้\nโปรดตรวจสอบการเชื่อมโยงของระบบเครือข่าย หรือติดต่อผู้ดูแลระบบ",
                    "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public List<APEntity> SearchPaymentVoucherByAPPmId(string appmId)
        {
            PaymentVoucherSearchParam param = new PaymentVoucherSearchParam();
            param.APPmId = appmId;
            param.BranchId = Session.Branch.Id;
            return _PaymentMntService.SearchPaymentVoucher(param);
        }

        private void ShowView()
        {
            WindowSmartPartInfo info = new WindowSmartPartInfo();
            info.Modal = true;
            info.Keys.Add(WindowWorkspaceSetting.StartPosition, FormStartPosition.CenterParent);
            info.Keys.Add(WindowWorkspaceSetting.FormBorderStyle, FormBorderStyle.FixedToolWindow);
            info.Keys.Add(WindowWorkspaceSetting.AcceptButton, View.OkButton);
            info.Keys.Add(WindowWorkspaceSetting.CancelButton, View.CancelButton);
            info.MaximizeBox = false;
            info.MinimizeBox = false;
            info.Title = " ผลการค้นหาใบสำคัญจ่าย";
            WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(View, info);
        }

        [EventPublication(EventTopicNames.PaymentVoucherItemAdd, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs<List<APEntity>>> PaymentVoucherItemAdd;
        internal void OnPaymentVoucherItemAdd(List<APEntity> apEntity)
        {
            if (PaymentVoucherItemAdd != null)
                PaymentVoucherItemAdd(this, new EventArgs<List<APEntity>>(apEntity));
        }


        [EventSubscription(EventTopicNames.ActionSuccess, Thread = ThreadOption.UserInterface)]
        public void ActionSuccessHandler(object sender, EventArgs e)
        {
            if (WorkItem.Workspaces[WorkspaceNames.ModalWindows].ActiveSmartPart == View)
            {
                ((UserControl)View).ParentForm.Close();
            }
        }

        [EventSubscription(EventTopicNames.OnCloseAllViews, Thread = ThreadOption.UserInterface)]
        public void OnCloseAllViewsHandler(object sender, EventArgs e)
        {
            OnCloseView();
        }
    }
}

