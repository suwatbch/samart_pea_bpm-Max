//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using System.Collections.Generic;
using PEA.BPM.PaymentManagementModule.Interface.BusinessEntities;
using System.ComponentModel;
using System.Drawing;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.CashManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.ArchitectureInterface.BusinessEntities;

namespace PEA.BPM.PaymentManagementModule
{
    [SmartPart]
    public partial class ToBePaidAPView : UserControl, IToBePaidAPView
    {
        /// <summary>
        /// ถ้าเป็นบวก หมายถึง เงินทอนมากกว่า 12 สตางค์ แล้วปัดขึ้นเป็น 25
        /// </summary>
        private decimal _adjAmount = 0;
        private decimal _gAmount = 0;
        private System.Timers.Timer _timer;

        private decimal? _leftAmount = 0;
        public decimal? LeftAmount
        {
            get { return _leftAmount; }
            set { 
                _leftAmount = value;
                leftAmountLabel.Text = "(เงินสดคงเหลือ : " + Convert.ToDecimal(_leftAmount).ToString("#,##0.00") + " )";
            }
        }


        public ToBePaidAPView()
        {
            InitializeComponent();
            transactionDataGridView.AutoGenerateColumns = false;
            _timer = new System.Timers.Timer();
            _timer.Interval = 400;
            _timer.Elapsed += new System.Timers.ElapsedEventHandler(OnLoadTicker);
            _timer.Start();

            if (Session.Work.Id == null)
            {
                leftAmountLabel.Text = "";
                okButton.Enabled = false;
            }
            else
                okButton.Enabled = true;           
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public ToBePaidAPViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }                    


        private void okButton_Click(object sender, EventArgs e)
        {
            if (!ValidateCloseWorkOfCashier())
                return;

            PayItems();
        }

        private void OnLoadTicker(object sender, System.Timers.ElapsedEventArgs e)
        {
            _timer.Stop();
            _presenter.GetLeftAmount(Session.Work.Id);
        }

        private void transactionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                transactionDataGridView.EndEdit();
                ReCalculateSummations();
            }
            if (e.RowIndex > -1)
            {
                transactionDataGridView.EndEdit();

                if (e.ColumnIndex == 0)
                {
                    ReCalculateSummations();
                    if (_gAmount > _leftAmount)
                    {
                        transactionDataGridView.Rows[e.RowIndex].Cells[0].Value = false;
                        ReCalculateSummations();
                        MessageBox.Show("จำนวนเงินคงเหลือไม่พอที่จะทำการจ่ายเงิน", "ข้อผิดพลาด",
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            ClearData();
        }

        #region +++ Custom Function +++
        public bool AddItems(APInfo ap)
        {
            if (ap != null)
            {
                List<ToBePaidAP> toBePaidAP = (List<ToBePaidAP>)_presenter.WorkItem.State["ToBePaidAP"];

                if (!ModuleHelper.CheckDuplicateAPItem(toBePaidAP, ap))
                {
                    MessageBox.Show("เลขที่ใบสำคัญจ่ายดังกล่าวมีอยู่ในรายการที่ต้องการจ่ายเงินแล้ว", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }
                else if ((ap.GAmount + _gAmount) > _leftAmount)
                {
                    MessageBox.Show("จำนวนเงินคงเหลือไม่พอที่จะทำการจ่ายเงิน", "ข้อผิดพลาด",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return false;
                }

                ToBePaidAP tbbAP = new ToBePaidAP(ap);
                toBePaidAP.Add(tbbAP);

                _presenter.WorkItem.State["ToBePaidAP"] = toBePaidAP;

                RedrawScreen();
            }

            return true;
        }

        private void RedrawScreen()
        {
            List<ToBePaidAP> toBePaidAP = (List<ToBePaidAP>)_presenter.WorkItem.State["ToBePaidAP"];
            transactionDataGridView.Enabled = false;
            transactionDataGridView.DataSource = new BindingList<ToBePaidAP>(toBePaidAP);
            transactionDataGridView.Enabled = true;
            ReCalculateSummations();
        }

        private void ReCalculateSummations()
        {
            int nbAll = 0;
            decimal amAll = 0;
            int nbSelect = 0;
            decimal amSelect = 0;
            int nbToPay = 0;
            decimal amToPay = 0;

            for (int i = 0; i < transactionDataGridView.Rows.Count; i++)
            {
                if ((bool)transactionDataGridView.Rows[i].Cells[0].Value == true)
                {
                    nbSelect = nbSelect + 1;
                    amSelect = amSelect + (decimal)transactionDataGridView.Rows[i].Cells[4].Value;
                    nbToPay = nbToPay + 1;
                    amToPay = amToPay + (decimal)transactionDataGridView.Rows[i].Cells[4].Value;
                }

                nbAll = nbAll + 1;
                amAll = amAll + (decimal)transactionDataGridView.Rows[i].Cells[4].Value;
            }

            totalTransactionTextBox.Text = transactionDataGridView.Rows.Count.ToString();
            totalAmountTransactionTextBox.Text = amAll.ToString("#,##0.00");
            _gAmount = amToPay;
            selectTransactionTextBox.Text = nbSelect.ToString();
            selectAmountTransactionTextBox.Text = amSelect.ToString("#,##0.00");
            totalAmountTextBox.Text = amToPay.ToString("#,##0.00");
            grandTotalLabel.Text = "จ่ายเงิน";
            grandTotalLabel.ForeColor = Color.MediumBlue;
            totalAmountTextBox.ForeColor = Color.MediumBlue;
            leftAmountLabel.Text = "(เงินสดคงเหลือ " + Convert.ToDecimal(_leftAmount - _gAmount).ToString("#,##0.00") + " )";
        }

        public void ClearData()
        {
            _presenter.WorkItem.State["ToBePaidAP"] = new List<ToBePaidAP>();
            transactionDataGridView.DataSource = new List<ToBePaidAP>();
            _gAmount = 0;
            _adjAmount = 0;
            ReCalculateSummations();
        }

        public void PayItems()
        {
            List<ToBePaidAP> paidAP = (List<ToBePaidAP>)_presenter.WorkItem.State["ToBePaidAP"];

            if (paidAP.Count > 0)
            {
                List<APInfo> selectedItems = GetSelectedItems(paidAP);
                if (selectedItems.Count > 0)
                {
                    if (DialogResult.Yes == MessageBox.Show("ต้องการจ่ายเงินตามใบสำคัญจ่ายดังกล่าวหรือไม่\n\nโปรดกดปุ่ม 'Yes' เพื่อยืนยันการจ่ายเงิน",
                                "ข้อความยืนยัน", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1))
                    {
                        SetAPQty(selectedItems);
                        CalculateAdjustAmount(selectedItems);
                        if (_presenter.PayAP(selectedItems) == true)
                        {
                            using (PaymentSummaryForm psForm = new PaymentSummaryForm())
                            {
                                psForm.SetPaymentAmount(_gAmount, _adjAmount, (_gAmount + _adjAmount));
                                LeftAmount = LeftAmount - (_gAmount + _adjAmount);
                                ClearData();

                                //_presenter.GetLeftAmount(Session.Work.Id);

                                psForm.ShowDialog();
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("กรุณาเลือกรายการที่ต้องการจ่ายเงิน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                MessageBox.Show("ไม่มีรายการที่ต้องการจ่ายเงิน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void SetAPQty(List<APInfo> apInfo)
        {
            apInfo.ForEach(delegate(APInfo ap)
            {
                ap.APQty = apInfo.Count;
            }
            );
        }

        private List<APInfo> GetSelectedItems(List<ToBePaidAP> paidAP)
        {
            List<APInfo> selectedItems = new List<APInfo>();

            foreach (ToBePaidAP ap in paidAP)
            {
                if (ap.IsChecked)
                {
                    selectedItems.Add(ap.ToAP());
                }
            }

            return selectedItems;
        }

        private void CalculateAdjustAmount(List<APInfo> ap)
        {
            decimal xchange = (Convert.ToDecimal(totalAmountTextBox.Text.Trim()) * 100) % 25;

            if (xchange > 0)
            {
                if (xchange > 12)
                {
                    _adjAmount = (decimal)0.25 - xchange / 100;
                }
                else
                {
                    _adjAmount = -xchange / 100;
                }
            }

            ap.ForEach(new Action<APInfo>(delegate(APInfo a)
                    {
                        a.AdjAmount = 0;
                    }
                )
            );

            if (_adjAmount != 0)
            {
                ap[ap.Count - 1].AdjAmount = _adjAmount;
            }
        }

         #endregion


        #region +++ Cash Management +++

        private bool ValidateCloseWorkOfCashier()
        {
            if ((Session.IsNetworkConnectionAvailable == true ? ((((WorkStatus)IsClosedWork()).CloseWorkBy == null) ? true : false) : false))
                return true;
            else
            {
                string cashierTxt = string.Format("({0}) - {1}", ((WorkStatus)IsClosedWork()).CloseWorkBy, ((WorkStatus)IsClosedWork()).CashierName);
                MessageBox.Show("ระบบได้ทำการปิดกะนี้ไปแล้ว \n\nผู้ปิดกะ: " + cashierTxt, "สถานะปิดกะ", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                _presenter.OnCashierOpenWork("tmp");
                _presenter.OnClosePaymentView();
                //_presenter.OnCloseView();
                return false;
            }
        }

        private WorkStatus IsClosedWork()
        {
            return Authorization.IsForcedToCloseWork(Session.Work.Id);
        }

        #endregion
    }
}

