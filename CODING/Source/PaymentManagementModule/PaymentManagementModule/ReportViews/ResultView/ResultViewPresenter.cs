//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.PaymentManagementModule.Interface.Services;
using PEA.BPM.PaymentManagementModule.Interface.BusinessEntities.Reports;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.PaymentManagementModule.Interface.Constants;
using Microsoft.Reporting.WinForms;
using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Architecture.ArchitectureTool;
using System.Globalization;

namespace PEA.BPM.PaymentManagementModule
{

    public class ResultViewPresenter : Presenter<IResultView>
    {
        private IReportService _reportService;

        [InjectionConstructor]
        public ResultViewPresenter([ServiceDependency] IReportService reportService)
        {
            _reportService = reportService;
        }

        [EventSubscription(EventTopicNames.ShowReportClick, Thread = ThreadOption.UserInterface)]
        public void ShowReportClickHandler(object sender, EventArgs<ReportParam> e)
        {
            switch (e.Data.Report)
            {
                case ReportName.AP:

                    try
                    {

                        APParam param = (APParam)e.Data;
                        DateTime fromDate = param.TransFromDate.Value;
                        param.TransToDate = param.TransToDate == null ? param.TransFromDate.Value : param.TransToDate.Value;
                        DateTime toDate = param.TransToDate.Value;

                        List<APReport> reportAPData = _reportService.GetReportAP(param);

                        for (int i = 0; i < reportAPData.Count; i++)
                        {
                            if (reportAPData[i].CancelDt == null)
                            {
                                reportAPData[i].GAmount1 = reportAPData[i].GAmount;
                                reportAPData[i].AdjAmount1 = reportAPData[i].AdjAmount;
                            }
                            else if (reportAPData[i].CancelDt != null)
                            {
                                reportAPData[i].GAmount2 = reportAPData[i].GAmount;
                                reportAPData[i].AdjAmount2 = reportAPData[i].AdjAmount;
                            }
                        }

                        ReportDataSource dataSource = new ReportDataSource();
                        dataSource.Name = "PEA_BPM_PaymentManagementModule_Interface_BusinessEntities_Reports_APReport";
                        dataSource.Value = reportAPData;

                        ReportParameter[] rParam = new ReportParameter[3];

                        string strSearchBy = "";
                        if (param.BranchId != null)
                        {
                            strSearchBy = "รหัส กฟฟ.: " + param.BranchId;
                        }
                        if (param.posId != null)
                        {
                            strSearchBy += " / รหัส เครื่อง: " + param.posId;
                        }
                        if (param.cashierId != null)
                        {
                            strSearchBy += " / รหัส พบช.คุมใบเสร็จ: " + param.cashierId;
                        }
                        strSearchBy += GetPaymentDate(fromDate, toDate)[1];

                        rParam[0] = new ReportParameter("parTransDate", GetPaymentDate(fromDate, toDate)[0]);
                        rParam[1] = new ReportParameter("parSearchBy", "*** ค้นหาโดย " + strSearchBy + " ***");

                        Branch branch = CodeTable.Instant.ListBranches(param.BranchId);
                        rParam[2] = new ReportParameter("parBranchDetail", branch.BranchName + " : " + branch.BranchId);

                        View.ShowReport("PEA.BPM.PaymentManagementModule.Reports.AP_1Report.rdlc", dataSource, rParam);
                        //View.ShowReport(@"D:\Project\PeaBpm\Source\PaymentManagementModule\PaymentManagementModule\Reports\AP_1Report.rdlc", dataSource, rParam);
                        //View.ShowReport("PEA.BPM.PaymentCollectionModule.Reports.AP_1Report.rdlc", dataSource, rParam);



                        //CAC14Param param = (CAC14Param)e.Data;
                        //List<CAC14Report> reportCAC14Data = _reportService.GetReportCAC14(param);
                        //ReportDataSource dataSource = new ReportDataSource();
                        //dataSource.Name = "PEA_BPM_PaymentManagementModule_Interface_BusinessEntities_Reports_CAC14Report";
                        //dataSource.Value = reportCAC14Data;

                        //ReportParameter[] rParam = new ReportParameter[4];
                        //rParam[0] = new ReportParameter("parCashierId", reportCAC14Data[0].CashierId);
                        //rParam[1] = new ReportParameter("parPaymentDt", reportCAC14Data[0].PaymentDt.Value.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        //rParam[2] = new ReportParameter("parReceiptId", reportCAC14Data[0].ReceiptId);

                        //Branch branch = CodeTable.Instant.ListBranches(Session.Branch.Id);
                        //rParam[3] = new ReportParameter("parBranchDetail", branch.BranchName);

                        //View.ShowReport("PEA.BPM.PaymentManagementModule.Reports.CAC14Report.rdlc", dataSource, rParam);
                    }
                    catch (Exception ex)
                    {
                        System.Windows.Forms.MessageBox.Show(ex.ToString());
                    }

                    break;
                default:
                    break;
            }
        }

        private List<string> GetPaymentDate(DateTime fromDate, DateTime toDate)
        {
            List<string> strResult = new List<string>();

            if (fromDate.ToString("yyyy") == toDate.ToString("yyyy"))
            {
                if (fromDate.ToString("MM") == toDate.ToString("MM"))
                {
                    if (fromDate.ToString("dd") == toDate.ToString("dd"))
                    {
                        strResult.Add(fromDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                    }
                    else
                    {
                        strResult.Add(fromDate.Day.ToString() + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                        strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                    }
                }
                else
                {
                    strResult.Add(fromDate.ToString("d MMMM", new CultureInfo("th-TH")) + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                    strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
                }
            }
            else
            {
                strResult.Add(fromDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("d MMMM yyyy", new CultureInfo("th-TH")));
                strResult.Add(" / วันที่รับชำระ: " + fromDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")) + " - " + toDate.ToString("dd/MM/yyyy", new CultureInfo("th-TH")));
            }

            return strResult;
        }

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
    /*
    public class ResultViewPresenter : Presenter<IResultView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
    */
}

