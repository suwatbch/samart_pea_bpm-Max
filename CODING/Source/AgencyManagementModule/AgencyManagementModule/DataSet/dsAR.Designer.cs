//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PEA.BPM.AgencyManagementModule.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsAR")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsAR : global::System.Data.DataSet {
        
        private tblARNotPaidByItemDataTable tabletblARNotPaidByItem;
        
        private tblARNotPaidByGroupDataTable tabletblARNotPaidByGroup;
        
        private tblARNotPaidByDetailGroupDataTable tabletblARNotPaidByDetailGroup;
        
        private global::System.Data.DataRelation relationtblARNotPaidByDetailGroup_tblARNotPaidByGroup;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsAR() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsAR(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblARNotPaidByItem"] != null)) {
                    base.Tables.Add(new tblARNotPaidByItemDataTable(ds.Tables["tblARNotPaidByItem"]));
                }
                if ((ds.Tables["tblARNotPaidByGroup"] != null)) {
                    base.Tables.Add(new tblARNotPaidByGroupDataTable(ds.Tables["tblARNotPaidByGroup"]));
                }
                if ((ds.Tables["tblARNotPaidByDetailGroup"] != null)) {
                    base.Tables.Add(new tblARNotPaidByDetailGroupDataTable(ds.Tables["tblARNotPaidByDetailGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblARNotPaidByItemDataTable tblARNotPaidByItem {
            get {
                return this.tabletblARNotPaidByItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblARNotPaidByGroupDataTable tblARNotPaidByGroup {
            get {
                return this.tabletblARNotPaidByGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblARNotPaidByDetailGroupDataTable tblARNotPaidByDetailGroup {
            get {
                return this.tabletblARNotPaidByDetailGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsAR cln = ((dsAR)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblARNotPaidByItem"] != null)) {
                    base.Tables.Add(new tblARNotPaidByItemDataTable(ds.Tables["tblARNotPaidByItem"]));
                }
                if ((ds.Tables["tblARNotPaidByGroup"] != null)) {
                    base.Tables.Add(new tblARNotPaidByGroupDataTable(ds.Tables["tblARNotPaidByGroup"]));
                }
                if ((ds.Tables["tblARNotPaidByDetailGroup"] != null)) {
                    base.Tables.Add(new tblARNotPaidByDetailGroupDataTable(ds.Tables["tblARNotPaidByDetailGroup"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblARNotPaidByItem = ((tblARNotPaidByItemDataTable)(base.Tables["tblARNotPaidByItem"]));
            if ((initTable == true)) {
                if ((this.tabletblARNotPaidByItem != null)) {
                    this.tabletblARNotPaidByItem.InitVars();
                }
            }
            this.tabletblARNotPaidByGroup = ((tblARNotPaidByGroupDataTable)(base.Tables["tblARNotPaidByGroup"]));
            if ((initTable == true)) {
                if ((this.tabletblARNotPaidByGroup != null)) {
                    this.tabletblARNotPaidByGroup.InitVars();
                }
            }
            this.tabletblARNotPaidByDetailGroup = ((tblARNotPaidByDetailGroupDataTable)(base.Tables["tblARNotPaidByDetailGroup"]));
            if ((initTable == true)) {
                if ((this.tabletblARNotPaidByDetailGroup != null)) {
                    this.tabletblARNotPaidByDetailGroup.InitVars();
                }
            }
            this.relationtblARNotPaidByDetailGroup_tblARNotPaidByGroup = this.Relations["tblARNotPaidByDetailGroup_tblARNotPaidByGroup"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsAR";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsAR.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblARNotPaidByItem = new tblARNotPaidByItemDataTable();
            base.Tables.Add(this.tabletblARNotPaidByItem);
            this.tabletblARNotPaidByGroup = new tblARNotPaidByGroupDataTable();
            base.Tables.Add(this.tabletblARNotPaidByGroup);
            this.tabletblARNotPaidByDetailGroup = new tblARNotPaidByDetailGroupDataTable();
            base.Tables.Add(this.tabletblARNotPaidByDetailGroup);
            this.relationtblARNotPaidByDetailGroup_tblARNotPaidByGroup = new global::System.Data.DataRelation("tblARNotPaidByDetailGroup_tblARNotPaidByGroup", new global::System.Data.DataColumn[] {
                        this.tabletblARNotPaidByDetailGroup.BillBookRefColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblARNotPaidByGroup.BillBookRefColumn}, false);
            this.Relations.Add(this.relationtblARNotPaidByDetailGroup_tblARNotPaidByGroup);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblARNotPaidByItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblARNotPaidByGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblARNotPaidByDetailGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsAR ds = new dsAR();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblARNotPaidByItemRowChangeEventHandler(object sender, tblARNotPaidByItemRowChangeEvent e);
        
        public delegate void tblARNotPaidByGroupRowChangeEventHandler(object sender, tblARNotPaidByGroupRowChangeEvent e);
        
        public delegate void tblARNotPaidByDetailGroupRowChangeEventHandler(object sender, tblARNotPaidByDetailGroupRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblARNotPaidByItemDataTable : global::System.Data.TypedTableBase<tblARNotPaidByItemRow> {
            
            private global::System.Data.DataColumn columnPEACode;
            
            private global::System.Data.DataColumn columnPEAName;
            
            private global::System.Data.DataColumn columnAgencyCode;
            
            private global::System.Data.DataColumn columnAgencyName;
            
            private global::System.Data.DataColumn columnAgencyTaxNo;
            
            private global::System.Data.DataColumn columnPEA12FlCode;
            
            private global::System.Data.DataColumn columnPEA12FlName;
            
            private global::System.Data.DataColumn columnBillPrintDate;
            
            private global::System.Data.DataColumn columnBillBookRef;
            
            private global::System.Data.DataColumn columnUserNo;
            
            private global::System.Data.DataColumn columnBillMonth;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnFTPrice;
            
            private global::System.Data.DataColumn columnBaseAmount;
            
            private global::System.Data.DataColumn columnVatValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemDataTable() {
                this.TableName = "tblARNotPaidByItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblARNotPaidByItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEACodeColumn {
                get {
                    return this.columnPEACode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEANameColumn {
                get {
                    return this.columnPEAName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyCodeColumn {
                get {
                    return this.columnAgencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyNameColumn {
                get {
                    return this.columnAgencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyTaxNoColumn {
                get {
                    return this.columnAgencyTaxNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEA12FlCodeColumn {
                get {
                    return this.columnPEA12FlCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEA12FlNameColumn {
                get {
                    return this.columnPEA12FlName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillPrintDateColumn {
                get {
                    return this.columnBillPrintDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillBookRefColumn {
                get {
                    return this.columnBillBookRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNoColumn {
                get {
                    return this.columnUserNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillMonthColumn {
                get {
                    return this.columnBillMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FTPriceColumn {
                get {
                    return this.columnFTPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAmountColumn {
                get {
                    return this.columnBaseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VatValueColumn {
                get {
                    return this.columnVatValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemRow this[int index] {
                get {
                    return ((tblARNotPaidByItemRow)(this.Rows[index]));
                }
            }
            
            public event tblARNotPaidByItemRowChangeEventHandler tblARNotPaidByItemRowChanging;
            
            public event tblARNotPaidByItemRowChangeEventHandler tblARNotPaidByItemRowChanged;
            
            public event tblARNotPaidByItemRowChangeEventHandler tblARNotPaidByItemRowDeleting;
            
            public event tblARNotPaidByItemRowChangeEventHandler tblARNotPaidByItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblARNotPaidByItemRow(tblARNotPaidByItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemRow AddtblARNotPaidByItemRow(string PEACode, string PEAName, string AgencyCode, string AgencyName, string AgencyTaxNo, string PEA12FlCode, string PEA12FlName, string BillPrintDate, string BillBookRef, string UserNo, string BillMonth, decimal Amount, decimal FTPrice, decimal BaseAmount, decimal VatValue) {
                tblARNotPaidByItemRow rowtblARNotPaidByItemRow = ((tblARNotPaidByItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PEACode,
                        PEAName,
                        AgencyCode,
                        AgencyName,
                        AgencyTaxNo,
                        PEA12FlCode,
                        PEA12FlName,
                        BillPrintDate,
                        BillBookRef,
                        UserNo,
                        BillMonth,
                        Amount,
                        FTPrice,
                        BaseAmount,
                        VatValue};
                rowtblARNotPaidByItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblARNotPaidByItemRow);
                return rowtblARNotPaidByItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblARNotPaidByItemDataTable cln = ((tblARNotPaidByItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblARNotPaidByItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPEACode = base.Columns["PEACode"];
                this.columnPEAName = base.Columns["PEAName"];
                this.columnAgencyCode = base.Columns["AgencyCode"];
                this.columnAgencyName = base.Columns["AgencyName"];
                this.columnAgencyTaxNo = base.Columns["AgencyTaxNo"];
                this.columnPEA12FlCode = base.Columns["PEA12FlCode"];
                this.columnPEA12FlName = base.Columns["PEA12FlName"];
                this.columnBillPrintDate = base.Columns["BillPrintDate"];
                this.columnBillBookRef = base.Columns["BillBookRef"];
                this.columnUserNo = base.Columns["UserNo"];
                this.columnBillMonth = base.Columns["BillMonth"];
                this.columnAmount = base.Columns["Amount"];
                this.columnFTPrice = base.Columns["FTPrice"];
                this.columnBaseAmount = base.Columns["BaseAmount"];
                this.columnVatValue = base.Columns["VatValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPEACode = new global::System.Data.DataColumn("PEACode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEACode);
                this.columnPEAName = new global::System.Data.DataColumn("PEAName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEAName);
                this.columnAgencyCode = new global::System.Data.DataColumn("AgencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyCode);
                this.columnAgencyName = new global::System.Data.DataColumn("AgencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyName);
                this.columnAgencyTaxNo = new global::System.Data.DataColumn("AgencyTaxNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyTaxNo);
                this.columnPEA12FlCode = new global::System.Data.DataColumn("PEA12FlCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEA12FlCode);
                this.columnPEA12FlName = new global::System.Data.DataColumn("PEA12FlName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEA12FlName);
                this.columnBillPrintDate = new global::System.Data.DataColumn("BillPrintDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillPrintDate);
                this.columnBillBookRef = new global::System.Data.DataColumn("BillBookRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillBookRef);
                this.columnUserNo = new global::System.Data.DataColumn("UserNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserNo);
                this.columnBillMonth = new global::System.Data.DataColumn("BillMonth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillMonth);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnFTPrice = new global::System.Data.DataColumn("FTPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTPrice);
                this.columnBaseAmount = new global::System.Data.DataColumn("BaseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAmount);
                this.columnVatValue = new global::System.Data.DataColumn("VatValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVatValue);
                this.columnBaseAmount.Caption = "VatValue";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemRow NewtblARNotPaidByItemRow() {
                return ((tblARNotPaidByItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblARNotPaidByItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblARNotPaidByItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblARNotPaidByItemRowChanged != null)) {
                    this.tblARNotPaidByItemRowChanged(this, new tblARNotPaidByItemRowChangeEvent(((tblARNotPaidByItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblARNotPaidByItemRowChanging != null)) {
                    this.tblARNotPaidByItemRowChanging(this, new tblARNotPaidByItemRowChangeEvent(((tblARNotPaidByItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblARNotPaidByItemRowDeleted != null)) {
                    this.tblARNotPaidByItemRowDeleted(this, new tblARNotPaidByItemRowChangeEvent(((tblARNotPaidByItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblARNotPaidByItemRowDeleting != null)) {
                    this.tblARNotPaidByItemRowDeleting(this, new tblARNotPaidByItemRowChangeEvent(((tblARNotPaidByItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblARNotPaidByItemRow(tblARNotPaidByItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAR ds = new dsAR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblARNotPaidByItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblARNotPaidByGroupDataTable : global::System.Data.TypedTableBase<tblARNotPaidByGroupRow> {
            
            private global::System.Data.DataColumn columnPEACode;
            
            private global::System.Data.DataColumn columnPEASectionName;
            
            private global::System.Data.DataColumn columnAgencyCode;
            
            private global::System.Data.DataColumn columnAgencyName;
            
            private global::System.Data.DataColumn columnBillPrintDate;
            
            private global::System.Data.DataColumn columnBillBookRef;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnTotalAmountTxt;
            
            private global::System.Data.DataColumn columnAgentTaxNo;
            
            private global::System.Data.DataColumn columnPrePaid;
            
            private global::System.Data.DataColumn columnCashPaid;
            
            private global::System.Data.DataColumn columnChequePaid;
            
            private global::System.Data.DataColumn columnReportDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupDataTable() {
                this.TableName = "tblARNotPaidByGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblARNotPaidByGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEACodeColumn {
                get {
                    return this.columnPEACode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEASectionNameColumn {
                get {
                    return this.columnPEASectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyCodeColumn {
                get {
                    return this.columnAgencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyNameColumn {
                get {
                    return this.columnAgencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillPrintDateColumn {
                get {
                    return this.columnBillPrintDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillBookRefColumn {
                get {
                    return this.columnBillBookRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountTxtColumn {
                get {
                    return this.columnTotalAmountTxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentTaxNoColumn {
                get {
                    return this.columnAgentTaxNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrePaidColumn {
                get {
                    return this.columnPrePaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashPaidColumn {
                get {
                    return this.columnCashPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChequePaidColumn {
                get {
                    return this.columnChequePaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportDateColumn {
                get {
                    return this.columnReportDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRow this[int index] {
                get {
                    return ((tblARNotPaidByGroupRow)(this.Rows[index]));
                }
            }
            
            public event tblARNotPaidByGroupRowChangeEventHandler tblARNotPaidByGroupRowChanging;
            
            public event tblARNotPaidByGroupRowChangeEventHandler tblARNotPaidByGroupRowChanged;
            
            public event tblARNotPaidByGroupRowChangeEventHandler tblARNotPaidByGroupRowDeleting;
            
            public event tblARNotPaidByGroupRowChangeEventHandler tblARNotPaidByGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblARNotPaidByGroupRow(tblARNotPaidByGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRow AddtblARNotPaidByGroupRow(string PEACode, string PEASectionName, string AgencyCode, string AgencyName, string BillPrintDate, tblARNotPaidByDetailGroupRow parenttblARNotPaidByDetailGroupRowBytblARNotPaidByDetailGroup_tblARNotPaidByGroup, decimal TotalAmount, string TotalAmountTxt, string AgentTaxNo, decimal PrePaid, decimal CashPaid, decimal ChequePaid, string ReportDate) {
                tblARNotPaidByGroupRow rowtblARNotPaidByGroupRow = ((tblARNotPaidByGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PEACode,
                        PEASectionName,
                        AgencyCode,
                        AgencyName,
                        BillPrintDate,
                        null,
                        TotalAmount,
                        TotalAmountTxt,
                        AgentTaxNo,
                        PrePaid,
                        CashPaid,
                        ChequePaid,
                        ReportDate};
                if ((parenttblARNotPaidByDetailGroupRowBytblARNotPaidByDetailGroup_tblARNotPaidByGroup != null)) {
                    columnValuesArray[5] = parenttblARNotPaidByDetailGroupRowBytblARNotPaidByDetailGroup_tblARNotPaidByGroup[5];
                }
                rowtblARNotPaidByGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblARNotPaidByGroupRow);
                return rowtblARNotPaidByGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblARNotPaidByGroupDataTable cln = ((tblARNotPaidByGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblARNotPaidByGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPEACode = base.Columns["PEACode"];
                this.columnPEASectionName = base.Columns["PEASectionName"];
                this.columnAgencyCode = base.Columns["AgencyCode"];
                this.columnAgencyName = base.Columns["AgencyName"];
                this.columnBillPrintDate = base.Columns["BillPrintDate"];
                this.columnBillBookRef = base.Columns["BillBookRef"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnTotalAmountTxt = base.Columns["TotalAmountTxt"];
                this.columnAgentTaxNo = base.Columns["AgentTaxNo"];
                this.columnPrePaid = base.Columns["PrePaid"];
                this.columnCashPaid = base.Columns["CashPaid"];
                this.columnChequePaid = base.Columns["ChequePaid"];
                this.columnReportDate = base.Columns["ReportDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPEACode = new global::System.Data.DataColumn("PEACode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEACode);
                this.columnPEASectionName = new global::System.Data.DataColumn("PEASectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEASectionName);
                this.columnAgencyCode = new global::System.Data.DataColumn("AgencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyCode);
                this.columnAgencyName = new global::System.Data.DataColumn("AgencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyName);
                this.columnBillPrintDate = new global::System.Data.DataColumn("BillPrintDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillPrintDate);
                this.columnBillBookRef = new global::System.Data.DataColumn("BillBookRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillBookRef);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnTotalAmountTxt = new global::System.Data.DataColumn("TotalAmountTxt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountTxt);
                this.columnAgentTaxNo = new global::System.Data.DataColumn("AgentTaxNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentTaxNo);
                this.columnPrePaid = new global::System.Data.DataColumn("PrePaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrePaid);
                this.columnCashPaid = new global::System.Data.DataColumn("CashPaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashPaid);
                this.columnChequePaid = new global::System.Data.DataColumn("ChequePaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChequePaid);
                this.columnReportDate = new global::System.Data.DataColumn("ReportDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRow NewtblARNotPaidByGroupRow() {
                return ((tblARNotPaidByGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblARNotPaidByGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblARNotPaidByGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblARNotPaidByGroupRowChanged != null)) {
                    this.tblARNotPaidByGroupRowChanged(this, new tblARNotPaidByGroupRowChangeEvent(((tblARNotPaidByGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblARNotPaidByGroupRowChanging != null)) {
                    this.tblARNotPaidByGroupRowChanging(this, new tblARNotPaidByGroupRowChangeEvent(((tblARNotPaidByGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblARNotPaidByGroupRowDeleted != null)) {
                    this.tblARNotPaidByGroupRowDeleted(this, new tblARNotPaidByGroupRowChangeEvent(((tblARNotPaidByGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblARNotPaidByGroupRowDeleting != null)) {
                    this.tblARNotPaidByGroupRowDeleting(this, new tblARNotPaidByGroupRowChangeEvent(((tblARNotPaidByGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblARNotPaidByGroupRow(tblARNotPaidByGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAR ds = new dsAR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblARNotPaidByGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblARNotPaidByDetailGroupDataTable : global::System.Data.TypedTableBase<tblARNotPaidByDetailGroupRow> {
            
            private global::System.Data.DataColumn columnLineNo;
            
            private global::System.Data.DataColumn columnInvoiceNo;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnFTPrice;
            
            private global::System.Data.DataColumn columnVatPrice;
            
            private global::System.Data.DataColumn columnBillBookRef;
            
            private global::System.Data.DataColumn columnItemType;
            
            private global::System.Data.DataColumn columnBaseAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupDataTable() {
                this.TableName = "tblARNotPaidByDetailGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByDetailGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblARNotPaidByDetailGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineNoColumn {
                get {
                    return this.columnLineNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNoColumn {
                get {
                    return this.columnInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FTPriceColumn {
                get {
                    return this.columnFTPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VatPriceColumn {
                get {
                    return this.columnVatPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillBookRefColumn {
                get {
                    return this.columnBillBookRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAmountColumn {
                get {
                    return this.columnBaseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRow this[int index] {
                get {
                    return ((tblARNotPaidByDetailGroupRow)(this.Rows[index]));
                }
            }
            
            public event tblARNotPaidByDetailGroupRowChangeEventHandler tblARNotPaidByDetailGroupRowChanging;
            
            public event tblARNotPaidByDetailGroupRowChangeEventHandler tblARNotPaidByDetailGroupRowChanged;
            
            public event tblARNotPaidByDetailGroupRowChangeEventHandler tblARNotPaidByDetailGroupRowDeleting;
            
            public event tblARNotPaidByDetailGroupRowChangeEventHandler tblARNotPaidByDetailGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblARNotPaidByDetailGroupRow(tblARNotPaidByDetailGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRow AddtblARNotPaidByDetailGroupRow(string LineNo, string InvoiceNo, string Amount, string FTPrice, string VatPrice, string BillBookRef, string ItemType, string BaseAmount) {
                tblARNotPaidByDetailGroupRow rowtblARNotPaidByDetailGroupRow = ((tblARNotPaidByDetailGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LineNo,
                        InvoiceNo,
                        Amount,
                        FTPrice,
                        VatPrice,
                        BillBookRef,
                        ItemType,
                        BaseAmount};
                rowtblARNotPaidByDetailGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblARNotPaidByDetailGroupRow);
                return rowtblARNotPaidByDetailGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblARNotPaidByDetailGroupDataTable cln = ((tblARNotPaidByDetailGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblARNotPaidByDetailGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineNo = base.Columns["LineNo"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnAmount = base.Columns["Amount"];
                this.columnFTPrice = base.Columns["FTPrice"];
                this.columnVatPrice = base.Columns["VatPrice"];
                this.columnBillBookRef = base.Columns["BillBookRef"];
                this.columnItemType = base.Columns["ItemType"];
                this.columnBaseAmount = base.Columns["BaseAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineNo = new global::System.Data.DataColumn("LineNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineNo);
                this.columnInvoiceNo = new global::System.Data.DataColumn("InvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnFTPrice = new global::System.Data.DataColumn("FTPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTPrice);
                this.columnVatPrice = new global::System.Data.DataColumn("VatPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVatPrice);
                this.columnBillBookRef = new global::System.Data.DataColumn("BillBookRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillBookRef);
                this.columnItemType = new global::System.Data.DataColumn("ItemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemType);
                this.columnBaseAmount = new global::System.Data.DataColumn("BaseAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRow NewtblARNotPaidByDetailGroupRow() {
                return ((tblARNotPaidByDetailGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblARNotPaidByDetailGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblARNotPaidByDetailGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblARNotPaidByDetailGroupRowChanged != null)) {
                    this.tblARNotPaidByDetailGroupRowChanged(this, new tblARNotPaidByDetailGroupRowChangeEvent(((tblARNotPaidByDetailGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblARNotPaidByDetailGroupRowChanging != null)) {
                    this.tblARNotPaidByDetailGroupRowChanging(this, new tblARNotPaidByDetailGroupRowChangeEvent(((tblARNotPaidByDetailGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblARNotPaidByDetailGroupRowDeleted != null)) {
                    this.tblARNotPaidByDetailGroupRowDeleted(this, new tblARNotPaidByDetailGroupRowChangeEvent(((tblARNotPaidByDetailGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblARNotPaidByDetailGroupRowDeleting != null)) {
                    this.tblARNotPaidByDetailGroupRowDeleting(this, new tblARNotPaidByDetailGroupRowChangeEvent(((tblARNotPaidByDetailGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblARNotPaidByDetailGroupRow(tblARNotPaidByDetailGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAR ds = new dsAR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblARNotPaidByDetailGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblARNotPaidByItemRow : global::System.Data.DataRow {
            
            private tblARNotPaidByItemDataTable tabletblARNotPaidByItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblARNotPaidByItem = ((tblARNotPaidByItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEACode {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.PEACodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEACode\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.PEACodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEAName {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.PEANameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEAName\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.PEANameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyCode {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.AgencyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyCode\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.AgencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyName {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.AgencyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyName\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.AgencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyTaxNo {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.AgencyTaxNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyTaxNo\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.AgencyTaxNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEA12FlCode {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.PEA12FlCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEA12FlCode\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.PEA12FlCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEA12FlName {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.PEA12FlNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEA12FlName\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.PEA12FlNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillPrintDate {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.BillPrintDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillPrintDate\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.BillPrintDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillBookRef {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.BillBookRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillBookRef\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.BillBookRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserNo {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.UserNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserNo\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.UserNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillMonth {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByItem.BillMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillMonth\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.BillMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByItem.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FTPrice {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByItem.FTPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTPrice\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.FTPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByItem.BaseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAmount\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.BaseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VatValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByItem.VatValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VatValue\' in table \'tblARNotPaidByItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByItem.VatValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEACodeNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.PEACodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEACodeNull() {
                this[this.tabletblARNotPaidByItem.PEACodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEANameNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.PEANameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEANameNull() {
                this[this.tabletblARNotPaidByItem.PEANameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyCodeNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.AgencyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyCodeNull() {
                this[this.tabletblARNotPaidByItem.AgencyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNameNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.AgencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNameNull() {
                this[this.tabletblARNotPaidByItem.AgencyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyTaxNoNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.AgencyTaxNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyTaxNoNull() {
                this[this.tabletblARNotPaidByItem.AgencyTaxNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEA12FlCodeNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.PEA12FlCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEA12FlCodeNull() {
                this[this.tabletblARNotPaidByItem.PEA12FlCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEA12FlNameNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.PEA12FlNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEA12FlNameNull() {
                this[this.tabletblARNotPaidByItem.PEA12FlNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillPrintDateNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.BillPrintDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillPrintDateNull() {
                this[this.tabletblARNotPaidByItem.BillPrintDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillBookRefNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.BillBookRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillBookRefNull() {
                this[this.tabletblARNotPaidByItem.BillBookRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNoNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.UserNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNoNull() {
                this[this.tabletblARNotPaidByItem.UserNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillMonthNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.BillMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillMonthNull() {
                this[this.tabletblARNotPaidByItem.BillMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tabletblARNotPaidByItem.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFTPriceNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.FTPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFTPriceNull() {
                this[this.tabletblARNotPaidByItem.FTPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAmountNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.BaseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAmountNull() {
                this[this.tabletblARNotPaidByItem.BaseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVatValueNull() {
                return this.IsNull(this.tabletblARNotPaidByItem.VatValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVatValueNull() {
                this[this.tabletblARNotPaidByItem.VatValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblARNotPaidByGroupRow : global::System.Data.DataRow {
            
            private tblARNotPaidByGroupDataTable tabletblARNotPaidByGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblARNotPaidByGroup = ((tblARNotPaidByGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEACode {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.PEACodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEACode\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.PEACodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEASectionName {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.PEASectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEASectionName\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.PEASectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyCode {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.AgencyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyCode\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.AgencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyName {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.AgencyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyName\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.AgencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillPrintDate {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.BillPrintDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillPrintDate\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.BillPrintDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillBookRef {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.BillBookRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillBookRef\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.BillBookRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByGroup.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmountTxt {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.TotalAmountTxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountTxt\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.TotalAmountTxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentTaxNo {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.AgentTaxNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentTaxNo\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.AgentTaxNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PrePaid {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByGroup.PrePaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrePaid\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.PrePaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CashPaid {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByGroup.CashPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashPaid\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.CashPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ChequePaid {
                get {
                    try {
                        return ((decimal)(this[this.tabletblARNotPaidByGroup.ChequePaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChequePaid\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.ChequePaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportDate {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByGroup.ReportDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportDate\' in table \'tblARNotPaidByGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByGroup.ReportDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRow tblARNotPaidByDetailGroupRow {
                get {
                    return ((tblARNotPaidByDetailGroupRow)(this.GetParentRow(this.Table.ParentRelations["tblARNotPaidByDetailGroup_tblARNotPaidByGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tblARNotPaidByDetailGroup_tblARNotPaidByGroup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEACodeNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.PEACodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEACodeNull() {
                this[this.tabletblARNotPaidByGroup.PEACodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEASectionNameNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.PEASectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEASectionNameNull() {
                this[this.tabletblARNotPaidByGroup.PEASectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyCodeNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.AgencyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyCodeNull() {
                this[this.tabletblARNotPaidByGroup.AgencyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNameNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.AgencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNameNull() {
                this[this.tabletblARNotPaidByGroup.AgencyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillPrintDateNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.BillPrintDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillPrintDateNull() {
                this[this.tabletblARNotPaidByGroup.BillPrintDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillBookRefNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.BillBookRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillBookRefNull() {
                this[this.tabletblARNotPaidByGroup.BillBookRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tabletblARNotPaidByGroup.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountTxtNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.TotalAmountTxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountTxtNull() {
                this[this.tabletblARNotPaidByGroup.TotalAmountTxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentTaxNoNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.AgentTaxNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentTaxNoNull() {
                this[this.tabletblARNotPaidByGroup.AgentTaxNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrePaidNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.PrePaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrePaidNull() {
                this[this.tabletblARNotPaidByGroup.PrePaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashPaidNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.CashPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashPaidNull() {
                this[this.tabletblARNotPaidByGroup.CashPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChequePaidNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.ChequePaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChequePaidNull() {
                this[this.tabletblARNotPaidByGroup.ChequePaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportDateNull() {
                return this.IsNull(this.tabletblARNotPaidByGroup.ReportDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportDateNull() {
                this[this.tabletblARNotPaidByGroup.ReportDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblARNotPaidByDetailGroupRow : global::System.Data.DataRow {
            
            private tblARNotPaidByDetailGroupDataTable tabletblARNotPaidByDetailGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblARNotPaidByDetailGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblARNotPaidByDetailGroup = ((tblARNotPaidByDetailGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineNo {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.LineNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineNo\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.LineNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.InvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNo\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.InvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Amount {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FTPrice {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.FTPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTPrice\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.FTPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VatPrice {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.VatPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VatPrice\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.VatPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillBookRef {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.BillBookRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillBookRef\' in table \'tblARNotPaidByDetailGroup\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.BillBookRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemType {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.ItemTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemType\' in table \'tblARNotPaidByDetailGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.ItemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseAmount {
                get {
                    try {
                        return ((string)(this[this.tabletblARNotPaidByDetailGroup.BaseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAmount\' in table \'tblARNotPaidByDetailGroup\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblARNotPaidByDetailGroup.BaseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNoNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.LineNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNoNull() {
                this[this.tabletblARNotPaidByDetailGroup.LineNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNoNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.InvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNoNull() {
                this[this.tabletblARNotPaidByDetailGroup.InvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tabletblARNotPaidByDetailGroup.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFTPriceNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.FTPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFTPriceNull() {
                this[this.tabletblARNotPaidByDetailGroup.FTPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVatPriceNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.VatPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVatPriceNull() {
                this[this.tabletblARNotPaidByDetailGroup.VatPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillBookRefNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.BillBookRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillBookRefNull() {
                this[this.tabletblARNotPaidByDetailGroup.BillBookRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.ItemTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeNull() {
                this[this.tabletblARNotPaidByDetailGroup.ItemTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAmountNull() {
                return this.IsNull(this.tabletblARNotPaidByDetailGroup.BaseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAmountNull() {
                this[this.tabletblARNotPaidByDetailGroup.BaseAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRow[] GettblARNotPaidByGroupRows() {
                if ((this.Table.ChildRelations["tblARNotPaidByDetailGroup_tblARNotPaidByGroup"] == null)) {
                    return new tblARNotPaidByGroupRow[0];
                }
                else {
                    return ((tblARNotPaidByGroupRow[])(base.GetChildRows(this.Table.ChildRelations["tblARNotPaidByDetailGroup_tblARNotPaidByGroup"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblARNotPaidByItemRowChangeEvent : global::System.EventArgs {
            
            private tblARNotPaidByItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemRowChangeEvent(tblARNotPaidByItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblARNotPaidByGroupRowChangeEvent : global::System.EventArgs {
            
            private tblARNotPaidByGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRowChangeEvent(tblARNotPaidByGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblARNotPaidByDetailGroupRowChangeEvent : global::System.EventArgs {
            
            private tblARNotPaidByDetailGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRowChangeEvent(tblARNotPaidByDetailGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblARNotPaidByDetailGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591