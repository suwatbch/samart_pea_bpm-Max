//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PEA.BPM.AgencyManagementModule.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsEvaluateAgenct")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsEvaluateAgenct : global::System.Data.DataSet {
        
        private tblEvaluateReportHeaderDataTable tabletblEvaluateReportHeader;
        
        private tblEvaluateReportDetailDataTable tabletblEvaluateReportDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsEvaluateAgenct() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsEvaluateAgenct(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblEvaluateReportHeader"] != null)) {
                    base.Tables.Add(new tblEvaluateReportHeaderDataTable(ds.Tables["tblEvaluateReportHeader"]));
                }
                if ((ds.Tables["tblEvaluateReportDetail"] != null)) {
                    base.Tables.Add(new tblEvaluateReportDetailDataTable(ds.Tables["tblEvaluateReportDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblEvaluateReportHeaderDataTable tblEvaluateReportHeader {
            get {
                return this.tabletblEvaluateReportHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblEvaluateReportDetailDataTable tblEvaluateReportDetail {
            get {
                return this.tabletblEvaluateReportDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsEvaluateAgenct cln = ((dsEvaluateAgenct)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblEvaluateReportHeader"] != null)) {
                    base.Tables.Add(new tblEvaluateReportHeaderDataTable(ds.Tables["tblEvaluateReportHeader"]));
                }
                if ((ds.Tables["tblEvaluateReportDetail"] != null)) {
                    base.Tables.Add(new tblEvaluateReportDetailDataTable(ds.Tables["tblEvaluateReportDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblEvaluateReportHeader = ((tblEvaluateReportHeaderDataTable)(base.Tables["tblEvaluateReportHeader"]));
            if ((initTable == true)) {
                if ((this.tabletblEvaluateReportHeader != null)) {
                    this.tabletblEvaluateReportHeader.InitVars();
                }
            }
            this.tabletblEvaluateReportDetail = ((tblEvaluateReportDetailDataTable)(base.Tables["tblEvaluateReportDetail"]));
            if ((initTable == true)) {
                if ((this.tabletblEvaluateReportDetail != null)) {
                    this.tabletblEvaluateReportDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsEvaluateAgenct";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsEvaluateAgenct.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblEvaluateReportHeader = new tblEvaluateReportHeaderDataTable();
            base.Tables.Add(this.tabletblEvaluateReportHeader);
            this.tabletblEvaluateReportDetail = new tblEvaluateReportDetailDataTable();
            base.Tables.Add(this.tabletblEvaluateReportDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblEvaluateReportHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblEvaluateReportDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsEvaluateAgenct ds = new dsEvaluateAgenct();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblEvaluateReportHeaderRowChangeEventHandler(object sender, tblEvaluateReportHeaderRowChangeEvent e);
        
        public delegate void tblEvaluateReportDetailRowChangeEventHandler(object sender, tblEvaluateReportDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblEvaluateReportHeaderDataTable : global::System.Data.TypedTableBase<tblEvaluateReportHeaderRow> {
            
            private global::System.Data.DataColumn columnPeriodStartMonth;
            
            private global::System.Data.DataColumn columnPeriodYear;
            
            private global::System.Data.DataColumn columnPeriodEndMonth;
            
            private global::System.Data.DataColumn columnStartBranchId;
            
            private global::System.Data.DataColumn columnStartBranchName;
            
            private global::System.Data.DataColumn columnEndBranchId;
            
            private global::System.Data.DataColumn columnEndBranchName;
            
            private global::System.Data.DataColumn columnTotalBillCollected;
            
            private global::System.Data.DataColumn columnTotalCommission;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderDataTable() {
                this.TableName = "tblEvaluateReportHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEvaluateReportHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblEvaluateReportHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodStartMonthColumn {
                get {
                    return this.columnPeriodStartMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodYearColumn {
                get {
                    return this.columnPeriodYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodEndMonthColumn {
                get {
                    return this.columnPeriodEndMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartBranchIdColumn {
                get {
                    return this.columnStartBranchId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartBranchNameColumn {
                get {
                    return this.columnStartBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndBranchIdColumn {
                get {
                    return this.columnEndBranchId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndBranchNameColumn {
                get {
                    return this.columnEndBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBillCollectedColumn {
                get {
                    return this.columnTotalBillCollected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCommissionColumn {
                get {
                    return this.columnTotalCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderRow this[int index] {
                get {
                    return ((tblEvaluateReportHeaderRow)(this.Rows[index]));
                }
            }
            
            public event tblEvaluateReportHeaderRowChangeEventHandler tblEvaluateReportHeaderRowChanging;
            
            public event tblEvaluateReportHeaderRowChangeEventHandler tblEvaluateReportHeaderRowChanged;
            
            public event tblEvaluateReportHeaderRowChangeEventHandler tblEvaluateReportHeaderRowDeleting;
            
            public event tblEvaluateReportHeaderRowChangeEventHandler tblEvaluateReportHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblEvaluateReportHeaderRow(tblEvaluateReportHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderRow AddtblEvaluateReportHeaderRow(string PeriodStartMonth, string PeriodYear, string PeriodEndMonth, string StartBranchId, string StartBranchName, string EndBranchId, string EndBranchName, int TotalBillCollected, decimal TotalCommission) {
                tblEvaluateReportHeaderRow rowtblEvaluateReportHeaderRow = ((tblEvaluateReportHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PeriodStartMonth,
                        PeriodYear,
                        PeriodEndMonth,
                        StartBranchId,
                        StartBranchName,
                        EndBranchId,
                        EndBranchName,
                        TotalBillCollected,
                        TotalCommission};
                rowtblEvaluateReportHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblEvaluateReportHeaderRow);
                return rowtblEvaluateReportHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblEvaluateReportHeaderDataTable cln = ((tblEvaluateReportHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblEvaluateReportHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPeriodStartMonth = base.Columns["PeriodStartMonth"];
                this.columnPeriodYear = base.Columns["PeriodYear"];
                this.columnPeriodEndMonth = base.Columns["PeriodEndMonth"];
                this.columnStartBranchId = base.Columns["StartBranchId"];
                this.columnStartBranchName = base.Columns["StartBranchName"];
                this.columnEndBranchId = base.Columns["EndBranchId"];
                this.columnEndBranchName = base.Columns["EndBranchName"];
                this.columnTotalBillCollected = base.Columns["TotalBillCollected"];
                this.columnTotalCommission = base.Columns["TotalCommission"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPeriodStartMonth = new global::System.Data.DataColumn("PeriodStartMonth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodStartMonth);
                this.columnPeriodYear = new global::System.Data.DataColumn("PeriodYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodYear);
                this.columnPeriodEndMonth = new global::System.Data.DataColumn("PeriodEndMonth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodEndMonth);
                this.columnStartBranchId = new global::System.Data.DataColumn("StartBranchId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartBranchId);
                this.columnStartBranchName = new global::System.Data.DataColumn("StartBranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartBranchName);
                this.columnEndBranchId = new global::System.Data.DataColumn("EndBranchId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndBranchId);
                this.columnEndBranchName = new global::System.Data.DataColumn("EndBranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndBranchName);
                this.columnTotalBillCollected = new global::System.Data.DataColumn("TotalBillCollected", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBillCollected);
                this.columnTotalCommission = new global::System.Data.DataColumn("TotalCommission", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCommission);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderRow NewtblEvaluateReportHeaderRow() {
                return ((tblEvaluateReportHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblEvaluateReportHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblEvaluateReportHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblEvaluateReportHeaderRowChanged != null)) {
                    this.tblEvaluateReportHeaderRowChanged(this, new tblEvaluateReportHeaderRowChangeEvent(((tblEvaluateReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblEvaluateReportHeaderRowChanging != null)) {
                    this.tblEvaluateReportHeaderRowChanging(this, new tblEvaluateReportHeaderRowChangeEvent(((tblEvaluateReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblEvaluateReportHeaderRowDeleted != null)) {
                    this.tblEvaluateReportHeaderRowDeleted(this, new tblEvaluateReportHeaderRowChangeEvent(((tblEvaluateReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblEvaluateReportHeaderRowDeleting != null)) {
                    this.tblEvaluateReportHeaderRowDeleting(this, new tblEvaluateReportHeaderRowChangeEvent(((tblEvaluateReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblEvaluateReportHeaderRow(tblEvaluateReportHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsEvaluateAgenct ds = new dsEvaluateAgenct();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblEvaluateReportHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblEvaluateReportDetailDataTable : global::System.Data.TypedTableBase<tblEvaluateReportDetailRow> {
            
            private global::System.Data.DataColumn columnArea;
            
            private global::System.Data.DataColumn columnPeaCode;
            
            private global::System.Data.DataColumn columnPeaName;
            
            private global::System.Data.DataColumn columnAgentPersonType;
            
            private global::System.Data.DataColumn columnAgentCompanyType;
            
            private global::System.Data.DataColumn columnTotalAgent;
            
            private global::System.Data.DataColumn columnKeepMore90Percent;
            
            private global::System.Data.DataColumn columnCalculatePercent;
            
            private global::System.Data.DataColumn columnBillOut;
            
            private global::System.Data.DataColumn columnAmountBillOut;
            
            private global::System.Data.DataColumn columnCanKeepBill;
            
            private global::System.Data.DataColumn columnCanKeepPercent;
            
            private global::System.Data.DataColumn columnTotalMoney;
            
            private global::System.Data.DataColumn columnTotalMoneyPercent;
            
            private global::System.Data.DataColumn columnBaseCommission;
            
            private global::System.Data.DataColumn columnSpacialCommission;
            
            private global::System.Data.DataColumn columnSendInvoice;
            
            private global::System.Data.DataColumn columnExtraMoney;
            
            private global::System.Data.DataColumn columnAllTotalPaid;
            
            private global::System.Data.DataColumn columnAllCanKeep;
            
            private global::System.Data.DataColumn columnFirstBranch;
            
            private global::System.Data.DataColumn columnLastBranch;
            
            private global::System.Data.DataColumn columnAmountCollectedPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailDataTable() {
                this.TableName = "tblEvaluateReportDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEvaluateReportDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblEvaluateReportDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaColumn {
                get {
                    return this.columnArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeaCodeColumn {
                get {
                    return this.columnPeaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeaNameColumn {
                get {
                    return this.columnPeaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentPersonTypeColumn {
                get {
                    return this.columnAgentPersonType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentCompanyTypeColumn {
                get {
                    return this.columnAgentCompanyType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAgentColumn {
                get {
                    return this.columnTotalAgent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeepMore90PercentColumn {
                get {
                    return this.columnKeepMore90Percent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalculatePercentColumn {
                get {
                    return this.columnCalculatePercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillOutColumn {
                get {
                    return this.columnBillOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountBillOutColumn {
                get {
                    return this.columnAmountBillOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CanKeepBillColumn {
                get {
                    return this.columnCanKeepBill;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CanKeepPercentColumn {
                get {
                    return this.columnCanKeepPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoneyColumn {
                get {
                    return this.columnTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoneyPercentColumn {
                get {
                    return this.columnTotalMoneyPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseCommissionColumn {
                get {
                    return this.columnBaseCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpacialCommissionColumn {
                get {
                    return this.columnSpacialCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendInvoiceColumn {
                get {
                    return this.columnSendInvoice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraMoneyColumn {
                get {
                    return this.columnExtraMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllTotalPaidColumn {
                get {
                    return this.columnAllTotalPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllCanKeepColumn {
                get {
                    return this.columnAllCanKeep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstBranchColumn {
                get {
                    return this.columnFirstBranch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastBranchColumn {
                get {
                    return this.columnLastBranch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountCollectedPercentColumn {
                get {
                    return this.columnAmountCollectedPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailRow this[int index] {
                get {
                    return ((tblEvaluateReportDetailRow)(this.Rows[index]));
                }
            }
            
            public event tblEvaluateReportDetailRowChangeEventHandler tblEvaluateReportDetailRowChanging;
            
            public event tblEvaluateReportDetailRowChangeEventHandler tblEvaluateReportDetailRowChanged;
            
            public event tblEvaluateReportDetailRowChangeEventHandler tblEvaluateReportDetailRowDeleting;
            
            public event tblEvaluateReportDetailRowChangeEventHandler tblEvaluateReportDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblEvaluateReportDetailRow(tblEvaluateReportDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailRow AddtblEvaluateReportDetailRow(
                        string Area, 
                        string PeaCode, 
                        string PeaName, 
                        int AgentPersonType, 
                        int AgentCompanyType, 
                        int TotalAgent, 
                        int KeepMore90Percent, 
                        decimal CalculatePercent, 
                        int BillOut, 
                        decimal AmountBillOut, 
                        int CanKeepBill, 
                        decimal CanKeepPercent, 
                        decimal TotalMoney, 
                        decimal TotalMoneyPercent, 
                        decimal BaseCommission, 
                        decimal SpacialCommission, 
                        decimal SendInvoice, 
                        decimal ExtraMoney, 
                        decimal AllTotalPaid, 
                        int AllCanKeep, 
                        string FirstBranch, 
                        string LastBranch, 
                        string AmountCollectedPercent) {
                tblEvaluateReportDetailRow rowtblEvaluateReportDetailRow = ((tblEvaluateReportDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Area,
                        PeaCode,
                        PeaName,
                        AgentPersonType,
                        AgentCompanyType,
                        TotalAgent,
                        KeepMore90Percent,
                        CalculatePercent,
                        BillOut,
                        AmountBillOut,
                        CanKeepBill,
                        CanKeepPercent,
                        TotalMoney,
                        TotalMoneyPercent,
                        BaseCommission,
                        SpacialCommission,
                        SendInvoice,
                        ExtraMoney,
                        AllTotalPaid,
                        AllCanKeep,
                        FirstBranch,
                        LastBranch,
                        AmountCollectedPercent};
                rowtblEvaluateReportDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblEvaluateReportDetailRow);
                return rowtblEvaluateReportDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblEvaluateReportDetailDataTable cln = ((tblEvaluateReportDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblEvaluateReportDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArea = base.Columns["Area"];
                this.columnPeaCode = base.Columns["PeaCode"];
                this.columnPeaName = base.Columns["PeaName"];
                this.columnAgentPersonType = base.Columns["AgentPersonType"];
                this.columnAgentCompanyType = base.Columns["AgentCompanyType"];
                this.columnTotalAgent = base.Columns["TotalAgent"];
                this.columnKeepMore90Percent = base.Columns["KeepMore90Percent"];
                this.columnCalculatePercent = base.Columns["CalculatePercent"];
                this.columnBillOut = base.Columns["BillOut"];
                this.columnAmountBillOut = base.Columns["AmountBillOut"];
                this.columnCanKeepBill = base.Columns["CanKeepBill"];
                this.columnCanKeepPercent = base.Columns["CanKeepPercent"];
                this.columnTotalMoney = base.Columns["TotalMoney"];
                this.columnTotalMoneyPercent = base.Columns["TotalMoneyPercent"];
                this.columnBaseCommission = base.Columns["BaseCommission"];
                this.columnSpacialCommission = base.Columns["SpacialCommission"];
                this.columnSendInvoice = base.Columns["SendInvoice"];
                this.columnExtraMoney = base.Columns["ExtraMoney"];
                this.columnAllTotalPaid = base.Columns["AllTotalPaid"];
                this.columnAllCanKeep = base.Columns["AllCanKeep"];
                this.columnFirstBranch = base.Columns["FirstBranch"];
                this.columnLastBranch = base.Columns["LastBranch"];
                this.columnAmountCollectedPercent = base.Columns["AmountCollectedPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArea = new global::System.Data.DataColumn("Area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArea);
                this.columnPeaCode = new global::System.Data.DataColumn("PeaCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeaCode);
                this.columnPeaName = new global::System.Data.DataColumn("PeaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeaName);
                this.columnAgentPersonType = new global::System.Data.DataColumn("AgentPersonType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentPersonType);
                this.columnAgentCompanyType = new global::System.Data.DataColumn("AgentCompanyType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentCompanyType);
                this.columnTotalAgent = new global::System.Data.DataColumn("TotalAgent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAgent);
                this.columnKeepMore90Percent = new global::System.Data.DataColumn("KeepMore90Percent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeepMore90Percent);
                this.columnCalculatePercent = new global::System.Data.DataColumn("CalculatePercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalculatePercent);
                this.columnBillOut = new global::System.Data.DataColumn("BillOut", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillOut);
                this.columnAmountBillOut = new global::System.Data.DataColumn("AmountBillOut", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountBillOut);
                this.columnCanKeepBill = new global::System.Data.DataColumn("CanKeepBill", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanKeepBill);
                this.columnCanKeepPercent = new global::System.Data.DataColumn("CanKeepPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanKeepPercent);
                this.columnTotalMoney = new global::System.Data.DataColumn("TotalMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney);
                this.columnTotalMoneyPercent = new global::System.Data.DataColumn("TotalMoneyPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoneyPercent);
                this.columnBaseCommission = new global::System.Data.DataColumn("BaseCommission", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseCommission);
                this.columnSpacialCommission = new global::System.Data.DataColumn("SpacialCommission", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpacialCommission);
                this.columnSendInvoice = new global::System.Data.DataColumn("SendInvoice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendInvoice);
                this.columnExtraMoney = new global::System.Data.DataColumn("ExtraMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraMoney);
                this.columnAllTotalPaid = new global::System.Data.DataColumn("AllTotalPaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllTotalPaid);
                this.columnAllCanKeep = new global::System.Data.DataColumn("AllCanKeep", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllCanKeep);
                this.columnFirstBranch = new global::System.Data.DataColumn("FirstBranch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstBranch);
                this.columnLastBranch = new global::System.Data.DataColumn("LastBranch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastBranch);
                this.columnAmountCollectedPercent = new global::System.Data.DataColumn("AmountCollectedPercent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountCollectedPercent);
                this.columnArea.Caption = "PeaCode";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailRow NewtblEvaluateReportDetailRow() {
                return ((tblEvaluateReportDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblEvaluateReportDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblEvaluateReportDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblEvaluateReportDetailRowChanged != null)) {
                    this.tblEvaluateReportDetailRowChanged(this, new tblEvaluateReportDetailRowChangeEvent(((tblEvaluateReportDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblEvaluateReportDetailRowChanging != null)) {
                    this.tblEvaluateReportDetailRowChanging(this, new tblEvaluateReportDetailRowChangeEvent(((tblEvaluateReportDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblEvaluateReportDetailRowDeleted != null)) {
                    this.tblEvaluateReportDetailRowDeleted(this, new tblEvaluateReportDetailRowChangeEvent(((tblEvaluateReportDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblEvaluateReportDetailRowDeleting != null)) {
                    this.tblEvaluateReportDetailRowDeleting(this, new tblEvaluateReportDetailRowChangeEvent(((tblEvaluateReportDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblEvaluateReportDetailRow(tblEvaluateReportDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsEvaluateAgenct ds = new dsEvaluateAgenct();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblEvaluateReportDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblEvaluateReportHeaderRow : global::System.Data.DataRow {
            
            private tblEvaluateReportHeaderDataTable tabletblEvaluateReportHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEvaluateReportHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblEvaluateReportHeader = ((tblEvaluateReportHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PeriodStartMonth {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.PeriodStartMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodStartMonth\' in table \'tblEvaluateReportHeader\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.PeriodStartMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PeriodYear {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.PeriodYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodYear\' in table \'tblEvaluateReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.PeriodYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PeriodEndMonth {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.PeriodEndMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodEndMonth\' in table \'tblEvaluateReportHeader\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.PeriodEndMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartBranchId {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.StartBranchIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartBranchId\' in table \'tblEvaluateReportHeader\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.StartBranchIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartBranchName {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.StartBranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartBranchName\' in table \'tblEvaluateReportHeader\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.StartBranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndBranchId {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.EndBranchIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndBranchId\' in table \'tblEvaluateReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.EndBranchIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndBranchName {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportHeader.EndBranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndBranchName\' in table \'tblEvaluateReportHeader\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.EndBranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalBillCollected {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportHeader.TotalBillCollectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBillCollected\' in table \'tblEvaluateReportHeader\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.TotalBillCollectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCommission {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportHeader.TotalCommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCommission\' in table \'tblEvaluateReportHeader\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportHeader.TotalCommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodStartMonthNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.PeriodStartMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodStartMonthNull() {
                this[this.tabletblEvaluateReportHeader.PeriodStartMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodYearNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.PeriodYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodYearNull() {
                this[this.tabletblEvaluateReportHeader.PeriodYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodEndMonthNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.PeriodEndMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodEndMonthNull() {
                this[this.tabletblEvaluateReportHeader.PeriodEndMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartBranchIdNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.StartBranchIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartBranchIdNull() {
                this[this.tabletblEvaluateReportHeader.StartBranchIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartBranchNameNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.StartBranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartBranchNameNull() {
                this[this.tabletblEvaluateReportHeader.StartBranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndBranchIdNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.EndBranchIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndBranchIdNull() {
                this[this.tabletblEvaluateReportHeader.EndBranchIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndBranchNameNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.EndBranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndBranchNameNull() {
                this[this.tabletblEvaluateReportHeader.EndBranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBillCollectedNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.TotalBillCollectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBillCollectedNull() {
                this[this.tabletblEvaluateReportHeader.TotalBillCollectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCommissionNull() {
                return this.IsNull(this.tabletblEvaluateReportHeader.TotalCommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCommissionNull() {
                this[this.tabletblEvaluateReportHeader.TotalCommissionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblEvaluateReportDetailRow : global::System.Data.DataRow {
            
            private tblEvaluateReportDetailDataTable tabletblEvaluateReportDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEvaluateReportDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblEvaluateReportDetail = ((tblEvaluateReportDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Area {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Area\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PeaCode {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.PeaCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeaCode\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.PeaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PeaName {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.PeaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeaName\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.PeaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgentPersonType {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.AgentPersonTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentPersonType\' in table \'tblEvaluateReportDetail\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AgentPersonTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgentCompanyType {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.AgentCompanyTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentCompanyType\' in table \'tblEvaluateReportDetail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AgentCompanyTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalAgent {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.TotalAgentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAgent\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.TotalAgentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeepMore90Percent {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.KeepMore90PercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeepMore90Percent\' in table \'tblEvaluateReportDetail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.KeepMore90PercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CalculatePercent {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.CalculatePercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CalculatePercent\' in table \'tblEvaluateReportDetail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.CalculatePercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BillOut {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.BillOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillOut\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.BillOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AmountBillOut {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.AmountBillOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountBillOut\' in table \'tblEvaluateReportDetail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AmountBillOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CanKeepBill {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.CanKeepBillColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CanKeepBill\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.CanKeepBillColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CanKeepPercent {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.CanKeepPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CanKeepPercent\' in table \'tblEvaluateReportDetail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.CanKeepPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMoney {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.TotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMoney\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.TotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMoneyPercent {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.TotalMoneyPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMoneyPercent\' in table \'tblEvaluateReportDetail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.TotalMoneyPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseCommission {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.BaseCommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseCommission\' in table \'tblEvaluateReportDetail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.BaseCommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SpacialCommission {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.SpacialCommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpacialCommission\' in table \'tblEvaluateReportDetail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.SpacialCommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SendInvoice {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.SendInvoiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SendInvoice\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.SendInvoiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExtraMoney {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.ExtraMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraMoney\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.ExtraMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AllTotalPaid {
                get {
                    try {
                        return ((decimal)(this[this.tabletblEvaluateReportDetail.AllTotalPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllTotalPaid\' in table \'tblEvaluateReportDetail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AllTotalPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllCanKeep {
                get {
                    try {
                        return ((int)(this[this.tabletblEvaluateReportDetail.AllCanKeepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllCanKeep\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AllCanKeepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstBranch {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.FirstBranchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstBranch\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.FirstBranchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastBranch {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.LastBranchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastBranch\' in table \'tblEvaluateReportDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.LastBranchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmountCollectedPercent {
                get {
                    try {
                        return ((string)(this[this.tabletblEvaluateReportDetail.AmountCollectedPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountCollectedPercent\' in table \'tblEvaluateReportDetail\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvaluateReportDetail.AmountCollectedPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaNull() {
                this[this.tabletblEvaluateReportDetail.AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeaCodeNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.PeaCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeaCodeNull() {
                this[this.tabletblEvaluateReportDetail.PeaCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeaNameNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.PeaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeaNameNull() {
                this[this.tabletblEvaluateReportDetail.PeaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentPersonTypeNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AgentPersonTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentPersonTypeNull() {
                this[this.tabletblEvaluateReportDetail.AgentPersonTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentCompanyTypeNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AgentCompanyTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentCompanyTypeNull() {
                this[this.tabletblEvaluateReportDetail.AgentCompanyTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAgentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.TotalAgentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAgentNull() {
                this[this.tabletblEvaluateReportDetail.TotalAgentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeepMore90PercentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.KeepMore90PercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeepMore90PercentNull() {
                this[this.tabletblEvaluateReportDetail.KeepMore90PercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalculatePercentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.CalculatePercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalculatePercentNull() {
                this[this.tabletblEvaluateReportDetail.CalculatePercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillOutNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.BillOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillOutNull() {
                this[this.tabletblEvaluateReportDetail.BillOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountBillOutNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AmountBillOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountBillOutNull() {
                this[this.tabletblEvaluateReportDetail.AmountBillOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanKeepBillNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.CanKeepBillColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanKeepBillNull() {
                this[this.tabletblEvaluateReportDetail.CanKeepBillColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanKeepPercentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.CanKeepPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanKeepPercentNull() {
                this[this.tabletblEvaluateReportDetail.CanKeepPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoneyNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.TotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoneyNull() {
                this[this.tabletblEvaluateReportDetail.TotalMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoneyPercentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.TotalMoneyPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoneyPercentNull() {
                this[this.tabletblEvaluateReportDetail.TotalMoneyPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseCommissionNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.BaseCommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseCommissionNull() {
                this[this.tabletblEvaluateReportDetail.BaseCommissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpacialCommissionNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.SpacialCommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpacialCommissionNull() {
                this[this.tabletblEvaluateReportDetail.SpacialCommissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendInvoiceNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.SendInvoiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendInvoiceNull() {
                this[this.tabletblEvaluateReportDetail.SendInvoiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraMoneyNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.ExtraMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraMoneyNull() {
                this[this.tabletblEvaluateReportDetail.ExtraMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllTotalPaidNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AllTotalPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllTotalPaidNull() {
                this[this.tabletblEvaluateReportDetail.AllTotalPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllCanKeepNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AllCanKeepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllCanKeepNull() {
                this[this.tabletblEvaluateReportDetail.AllCanKeepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstBranchNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.FirstBranchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstBranchNull() {
                this[this.tabletblEvaluateReportDetail.FirstBranchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastBranchNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.LastBranchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastBranchNull() {
                this[this.tabletblEvaluateReportDetail.LastBranchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountCollectedPercentNull() {
                return this.IsNull(this.tabletblEvaluateReportDetail.AmountCollectedPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountCollectedPercentNull() {
                this[this.tabletblEvaluateReportDetail.AmountCollectedPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblEvaluateReportHeaderRowChangeEvent : global::System.EventArgs {
            
            private tblEvaluateReportHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderRowChangeEvent(tblEvaluateReportHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblEvaluateReportDetailRowChangeEvent : global::System.EventArgs {
            
            private tblEvaluateReportDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailRowChangeEvent(tblEvaluateReportDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEvaluateReportDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591