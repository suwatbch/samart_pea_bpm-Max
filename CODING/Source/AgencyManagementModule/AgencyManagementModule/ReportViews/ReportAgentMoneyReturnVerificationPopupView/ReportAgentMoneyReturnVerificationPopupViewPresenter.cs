//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule.ReportViews
{
    public class ReportAgentMoneyReturnVerificationPopupViewPresenter : Presenter<IReportAgentMoneyReturnVerificationPopupView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }


        [EventPublication(EventTopicNames.ShowCAB02_01Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB02_01ReportHandler;
        public void LoadCAB02_01ReportClicked(string agencyIdFrom, string agencyIdTo,
                                                    string periodFrom, string periodTo)
        {
            try
            {
                string[] _params = new string[5];
                _params[0] = agencyIdFrom == String.Empty ? String.Empty : agencyIdFrom.PadLeft(12, '0');
                _params[1] = agencyIdTo == String.Empty ? _params[0] : agencyIdTo.PadLeft(12, '0');
                _params[2] = periodFrom;
                _params[3] = periodTo.Replace("/", "").Trim() == String.Empty ? periodFrom : periodTo ;
                _params[4] = Session.Branch.Id;                

                ReportParameterInfo _p = new ReportParameterInfo();
                _p.ParameterValue = _params;
                _p.PrintPreview = true;

                if (LoadCAB02_01ReportHandler != null)
                    LoadCAB02_01ReportHandler(this, new EventArgs<ReportParameterInfo>(_p));
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}

