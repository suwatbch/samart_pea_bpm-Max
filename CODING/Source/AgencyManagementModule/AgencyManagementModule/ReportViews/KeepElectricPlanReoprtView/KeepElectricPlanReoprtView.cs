//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule.ReportViews
{
    [SmartPart]
    public partial class KeepElectricPlanReoprtView : UserControl, IKeepElectricPlanReoprtView
    {
        private DateTimeFormatInfo _th_dt;

        public KeepElectricPlanReoprtView()
        {
            InitializeComponent();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;

            branchIdTb.Text = Session.Branch.Id;
            periodTxt.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public KeepElectricPlanReoprtViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
       
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();           
        }

        private void printbt_Click(object sender, EventArgs e)
        {
            if (this.periodTxt.Text.Replace("/", "").Trim() != "")
            {
                KeepMoneyPlaneOfAgencyConditionInfoReport myCndition = new KeepMoneyPlaneOfAgencyConditionInfoReport();
                myCndition.BranchCon = branchIdTb.Text.Trim();
                myCndition.PEACode = Session.Branch.Id;
                myCndition.PEAName = Session.Branch.Name;
                myCndition.BaCode = Session.Branch.BACode;
                myCndition.Period = this.periodTxt.Text.Substring(3, 4) + this.periodTxt.Text.Substring(0, 2);
                myCndition.ModifiedBy = Session.User.Id;
                myCndition.PrintPreview = previewCb.Checked;

                if (this.keepMoneyHistoryReport.Checked)
                {
                    _presenter.PrintCAB07_01ReportClicked(myCndition);
                }
                else if (this.detailKeepMoneyPlanreport.Checked == true)
                {
                    _presenter.PrintCAB08_01ReportClicked(myCndition);
                }
                else if (this.issueKeepMoneyReport.Checked == true)
                {
                    _presenter.PrintCAB09_01ReportClicked(myCndition);
                }
                else if (this.issueByPaidReport.Checked == true)
                {
                    _presenter.PrintCAB08_02ReportClicked(myCndition);
                }
                else if (this.issueARPeriodReport.Checked == true)
                {
                    _presenter.PrintCAB10_01ReportClicked(myCndition);
                }               

            }
            else
            {
                MessageBox.Show(null, "โปรดใส่ Period ที่ต้องการพิมพ์ด้วย", "รายงานแผนการเก็บเงินของตัวแทนเก็บเงิน", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                periodTxt.Focus();
            }
        }

        private void periodBillBook_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                this.keepMoneyHistoryReport.Focus();
            }
        }       

        private void periodTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                periodTxt.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", _th_dt);
                printbt.Focus();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                string[] sp = periodTxt.Text.Split('/');
                int month = Convert.ToInt32(sp[0]);
                int year = Convert.ToInt32(sp[1]);
                if (month <= 0 || month > 12 || year < 1000)
                {
                    MessageBox.Show(null, "กำหนดค่ารอบเดือนไม่ถูกต้อง", "ป้อนค่าผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    periodTxt.Focus();
                    periodTxt.SelectAll();
                }
                else
                {
                    printbt.Focus();
                }                    
            }
        }

        private void branchIdTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (branchIdTb.Text.Trim() != String.Empty)
                {
                    periodTxt.Focus();
                }
                else
                {
                    MessageBox.Show("กรุณาระบุสาขาการไฟฟ้า", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }   

    }
}

