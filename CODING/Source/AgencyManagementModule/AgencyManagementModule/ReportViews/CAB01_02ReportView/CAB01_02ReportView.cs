//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.IO;
using System.Text;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Reporting.WinForms;

using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.Architecture.PrintUtilities;
using PEA.BPM.Infrastructure.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CAB01_02ReportView : UserControl, ICAB01_02ReportView
    {


        public CAB01_02ReportView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CAB01_02ReportViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        /// <summary>
        /// 
        /// </summary>
        public void ShowReport(List<BillBookInfoDetailReport> DetailReport, BillBookHeaderInfo header)
        {
            if (DetailReport.Count > 0)
            {
                try
                {
                    _detailReport = new List<BillBookInfoDetailReport>();
                    _detailReport = DetailReport;
                    this.rptViewer.LocalReport.ReportEmbeddedResource = "PEA.BPM.AgencyManagementModule.Reports.CAB01_02.rdlc";
                    ReportDataSource sReportDataSourceDetail = new ReportDataSource();
                    sReportDataSourceDetail.Name = "PEA_BPM_AgencyManagementModule_Interface_BusinessEntities_BillBookInfoDetailReport";
                    sReportDataSourceDetail.Value = _detailReport;
                    ReportParameter pBillBookId = new ReportParameter("BillBookId", _detailReport[0].BookBillId);
                    ReportParameter pPrintDate = new ReportParameter("PrintDate", header.PrintDate);
                    ReportParameter pBranchName = new ReportParameter("BranchName", header.BranchName);

                    ReportParameter[] ps = new ReportParameter[] { pBillBookId, pPrintDate, pBranchName };
                    this.rptViewer.LocalReport.SetParameters(ps);
                    this.rptViewer.LocalReport.DataSources.Add(sReportDataSourceDetail);

                    if (header.IsPrintPreview)
                    {
                        this.rptViewer.RefreshReport();
                    }
                    else
                    {
                        PrintUtility _printer = new PrintUtility(LocalSettingNames.AgencyPrinterName , ModuleConfigurationNames.ReportWidth, ModuleConfigurationNames.ReportHeight);
                        _printer.Export(this.rptViewer.LocalReport);
                        _printer.CurrentPageIndex = 0;
                        _printer.Print();
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            else
            {
                MessageBox.Show("ไม่พบข้อมูลในการออกรายงาน");
            }
        }
    }
}


