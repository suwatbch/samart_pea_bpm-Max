//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule.ReportViews
{
    [SmartPart]
    public partial class EvaluateAgencyAboutKeepElectricView : UserControl, IEvaluateAgencyAboutKeepElectricView
    {

        private DateTimeFormatInfo _th_dt;
        private DateTimeFormatInfo _us_dt;
       
        public EvaluateAgencyAboutKeepElectricView()
        {
            InitializeComponent();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public EvaluateAgencyAboutKeepElectricViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            DateTime strCurrDate = Session.BpmDateTime.Now;
            billPeriodText.Text = strCurrDate.ToString("MM/yyyy", _th_dt);
            branchIdText.Text = Session.Branch.Id;
        }

        public void EvaluateAgencyAboutKeepElectricView_Load(object sender, EventArgs e)
        {
            if (billPeriod.Checked == true)
            {
                this.billPeriodText.Enabled = true;
                DateTime strCurrDate = Session.BpmDateTime.Now;
                billPeriodText.Text = strCurrDate.ToString("MM/yyyy", _th_dt);
            }
            else
            {
                this.billPeriodText.Enabled = false;
            }
        }

        private void billTrimas_CheckedChanged(object sender, EventArgs e)
        {
            if (this.billTrimas.Checked == true)
            {
                this.billYearText.Enabled = true;
                this.billYearText.Text = Session.BpmDateTime.Now.ToString("yyyy", _th_dt);
                this.billStartTrimasNo.Enabled = true;
                this.billStartTrimasNo.SelectedIndex = 0;
                this.billEndTrimasNo.Enabled = true;
                this.billEndTrimasNo.SelectedIndex = 0;
                this.billPeriodText.Text = "";
                this.billPeriodText.Enabled = false;

            }
            else
            {
                this.billYearText.Enabled = false;
                this.billYearText.Text = "";
                this.billStartTrimasNo.Enabled = false;
                this.billEndTrimasNo.Enabled = false;
                this.billPeriodText.Enabled = true;
                DateTime strCurrDate = Session.BpmDateTime.Now;
                this.billPeriodText.Text = strCurrDate.ToString("MM/yyyy", _th_dt);
            }
        }

        private void billPeriod_CheckedChanged(object sender, EventArgs e)
        {
            if (this.billPeriod.Checked == true)
            {
                this.billPeriodText.Enabled = true;
                this.billPeriodText.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", _th_dt);
                this.billYearText.Enabled = false;
                this.billYearText.Text = "";
                this.billStartTrimasNo.Enabled = false;
                this.billEndTrimasNo.Enabled = false;
            }
        }

        private void printBt_Click(object sender, EventArgs e)
        {
            try
            {
                EvaluateAgencyReportCondition rptCondition = new EvaluateAgencyReportCondition();
                rptCondition.PrintPreview = previewCb.Checked;
                rptCondition.BranchId = Session.Branch.Id;
                
                // Branch type
                if (branchIdCb.Checked)
                {
                    if (branchIdText.Text.Trim() != String.Empty)
                    {
                        rptCondition.BranchType = 1;
                        rptCondition.BranchFrom = Session.Branch.Id;
                        rptCondition.BranchTo = Session.Branch.Id;
                        rptCondition.BaCode = branchIdText.Text;
                    }
                    else 
                    {
                        MessageBox.Show(null, "โปรดระบุช่วงสาขาให้ถูกต้อง", "รายงานประเมินตัวแทน", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                }              
                else
                {
                    
                    rptCondition.BranchType = 2;
                    rptCondition.BranchFrom = peaStartCode.Text.Trim();
                    rptCondition.BranchTo = peaEndCode.Text.Trim();

                    if ((peaStartCode.Text.Trim() == String.Empty) || (peaEndCode.Text.Trim() == String.Empty))
                    {
                        MessageBox.Show(null, "โปรดระบุช่วงสาขาให้ถูกต้อง", "รายงานประเมินตัวแทน", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                }

                // Period
                if (billPeriod.Checked)
                {
                    rptCondition.PeriodFrom =  String.Format("{0}{1}", billPeriodText.Text.Replace("/", String.Empty).Substring(2,4),billPeriodText.Text.Replace("/", String.Empty).Substring(0,2)) ;
                    rptCondition.PeriodTo = rptCondition.PeriodFrom;
                }
                else
                {
                    int sTriMas = Convert.ToInt32(this.billStartTrimasNo.Text);
                    int eTriMas = Convert.ToInt32(this.billEndTrimasNo.Text);
                    if (sTriMas > eTriMas)
                    {
                        MessageBox.Show(null, "โปรดระบุไตรมาสให้ถูกต้อง", "รายงานประเมินตัวแทน", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                    else
                    {
                        rptCondition.PeriodFrom = GetPeriodFrom(true, billYearText.Text.Trim(), Convert.ToInt16(billStartTrimasNo.Text.Trim()));
                        rptCondition.PeriodTo = GetPeriodFrom(false, billYearText.Text.Trim(), Convert.ToInt16(billEndTrimasNo.Text.Trim()));
                    }
                }

                _presenter.ShowCAB06_01ReportClicked(rptCondition);         

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }       

        private string GetPeriodFrom(bool periodFrom,string billYear, int  trimasNo)
        {
            string retVal = "{0}{1}";
            int temp = 0;
            if (periodFrom)
            {
                temp = 1 + (3 * (trimasNo - 1));
                retVal = String.Format(retVal, billYear, temp.ToString().PadLeft(2, '0'));
            }
            else 
            {
                temp = 3 * trimasNo;
                retVal = String.Format(retVal, billYear, temp.ToString().PadLeft(2, '0'));
            }
            return retVal;
        }       

        private void anyPea_CheckedChanged(object sender, EventArgs e)
        {
            if (anyPea.Checked)
            {
                peaStartCode.Enabled = true;
                peaEndCode.Enabled = true;
                branchIdText.Enabled = false;
            }
            else
            {
                branchIdText.Enabled = true;
                peaStartCode.Enabled = false;
                peaStartCode.Clear();
                peaEndCode.Enabled = false;
                peaEndCode.Clear();
            }
        }

        private void secondFloorradio_CheckedChanged(object sender, EventArgs e)
        {
            peaStartCode.Enabled = false;
            peaEndCode.Enabled = false;
            branchIdText.Enabled = true;
        }

        private void mainBranchradio_CheckedChanged(object sender, EventArgs e)
        {
            peaStartCode.Enabled = false;
            peaEndCode.Enabled = false;
        }

        private void allPea_CheckedChanged(object sender, EventArgs e)
        {
            peaStartCode.Enabled = false;
            peaEndCode.Enabled = false;
        }

        private void peaStartCode_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) || (peaStartCode.Text.Length == ModuleConfigurationNames.BranchCodeLength))
            {
                peaEndCode.Focus();
            }
        }       
    }
}

