//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using System.Windows.Forms;

namespace PEA.BPM.AgencyManagementModule
{
    public class PA_7034ReportPopupViewPresenter : Presenter<IPA_7034ReportPopupView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventPublication(EventTopicNames.AgencySearchReportPopUp, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgencySearchReportPopUpHandler;
        public void AgencySearchShowPopupClicked(int sendType)
        {
            if (AgencySearchReportPopUpHandler != null)
            {
                WorkItem.State["IAgentSearchReportPopupView"] = true;
                AgencySearchReportPopUpHandler(this, new EventArgs<int>(sendType));
            }
        }

        [EventSubscription(EventTopicNames.AgentSearchRowSelectionPopup, Thread = ThreadOption.UserInterface)]
        public void AgentSearchRowSelectionClickedHandler(object sender, EventArgs<AgentInfo> e)
        {
            try
            {
                AgentInfo agency = (AgentInfo)e.Data;
                if (agency.SendType == 1)
                {
                    View.SetStartAgencyId = agency.Id ;
                }
                else if (agency.SendType == 2)
                {
                    View.SetEndAgencyId = agency.Id;
                }
            }
            catch (Exception ie)
            {
                //debug
                MessageBox.Show(ie.ToString());
            }
        }

        [EventPublication(EventTopicNames.ShowPA_7034Report, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> LoadPA_7034ReportHandler;
        public void ShowPA_7034Clicked(PA_7034ConditionReportInfo conn)
        {
            if (LoadPA_7034ReportHandler != null)
                LoadPA_7034ReportHandler(this, new EventArgs<PA_7034ConditionReportInfo>(conn));
        }
    }
}

