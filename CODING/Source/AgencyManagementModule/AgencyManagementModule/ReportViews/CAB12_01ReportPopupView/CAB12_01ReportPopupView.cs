//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CAB12_01ReportPopupView : UserControl, ICAB12_01ReportPopupView
    {
        public CAB12_01ReportPopupView()
        {
            InitializeComponent();
        }

        #region "Properites"
        public string SetStartAgencyId
        {
            set
            {
                startAgencyIdTb.Text = value;
            }
        }

        public string SetEndAgencyId
        {
            set
            {

                endAgencyIdTb.Text = value;
            }
        }

        #endregion

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CAB12_01ReportPopupViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            //lengthCb.SelectedIndex = 0;
            SetDefaultView();
            

        }

        private void Closebt_Click(object sender, EventArgs e)
        {
            ParentForm.Close();
        }

        private void startAgencyIdBt_Click(object sender, EventArgs e)
        {
            _presenter.AgencySearchShowPopupClicked(1);
        }

        private void endAgencyIdBt_Click(object sender, EventArgs e)
        {
            _presenter.AgencySearchShowPopupClicked(2);
        }

        private void printbt_Click(object sender, EventArgs e)
        {
            if (IsValidForm())
            {
                CAB12_01ConditionReportInfo conn = new CAB12_01ConditionReportInfo();
                conn.BranchId = Session.Branch.Id;
                conn.AgencyIdFrom = startAgencyIdTb.Text;
                conn.AgencyIdTo = endAgencyIdTb.Text;
                conn.PrintPreview = previewCb.Checked;               
                conn.CurrPeriod = GetCurrentPeriod();
                conn.StartPeriod = DateFormatter.PeriodToDateTime(periodFromText.Text.Trim());
                conn.EndPeriod = DateFormatter.PeriodToDateTime(periodToText.Text.Trim());
                //switch (lengthCb.SelectedIndex)
                //{
                //    case 0:
                //        conn.EndPeriod = new DateTime(Session.BpmDateTime.Now.Month == 12 ? Session.BpmDateTime.Now.Year + 1 : Session.BpmDateTime.Now.Year, Session.BpmDateTime.Now.AddMonths(1).Month, 1);                        
                //        conn.EndPeriod = conn.EndPeriod.Value.AddDays(-1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddMonths(-1);
                //        conn.StartPeriod = conn.EndPeriod.Value.AddMonths(-3);
                //        break;
                //    case 1:
                //        conn.EndPeriod = new DateTime(Session.BpmDateTime.Now.Month == 12 ? Session.BpmDateTime.Now.Year + 1 : Session.BpmDateTime.Now.Year, Session.BpmDateTime.Now.AddMonths(1).Month, 1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddDays(-1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddMonths(-4);
                //        conn.StartPeriod = conn.EndPeriod.Value.AddMonths(-6);
                //        break;
                //    case 2:
                //        conn.EndPeriod = new DateTime(Session.BpmDateTime.Now.Month == 12 ? Session.BpmDateTime.Now.Year + 1 : Session.BpmDateTime.Now.Year, Session.BpmDateTime.Now.AddMonths(1).Month, 1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddDays(-1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddMonths(-7);
                //        conn.StartPeriod = conn.EndPeriod.Value.AddMonths(-12);
                //        break;
                //    case 3:
                //        conn.EndPeriod = new DateTime(Session.BpmDateTime.Now.Month == 12 ? Session.BpmDateTime.Now.Year + 1 : Session.BpmDateTime.Now.Year, Session.BpmDateTime.Now.AddMonths(1).Month, 1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddDays(-1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddMonths(-3);
                //        conn.StartPeriod = conn.EndPeriod.Value.AddMonths(-60);
                //        break;
                //    case 4:
                //        conn.EndPeriod = new DateTime(Session.BpmDateTime.Now.Month == 12 ? Session.BpmDateTime.Now.Year + 1 : Session.BpmDateTime.Now.Year, Session.BpmDateTime.Now.AddMonths(1).Month, 1);
                //        conn.EndPeriod = conn.EndPeriod.Value.AddDays(-1);
                //        conn.StartPeriod = conn.EndPeriod.Value.AddMonths(-60);
                //        break;
                //}

                _presenter.ShowCAB12_01Clicked(conn);
            }
        }

        #region "Helper"

        private string GetCurrentPeriod()
        {
            DateTimeFormatInfo _th_dt;
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
            string p = Session.BpmDateTime.Now.ToString("yyyyMMdd", _th_dt);
            string curPer = string.Format("{0}{1}", p.Substring(0, 4), p.Substring(4, 2) );
            return curPer;
        }

        private bool IsValidForm()
        {
            bool retVal = false;
            if (printByAgencyrb.Checked)
            {
                if (startAgencyIdTb.Text.Trim() == string.Empty)
                {
                    MessageBox.Show("กรุณาระบุรหัสตัวแทนเก็บเงินเริ่มต้นเพื่อออกรายงาน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);                  
                }
                else if (endAgencyIdTb.Text.Trim() == String.Empty)
                {
                    MessageBox.Show("กรุณาระบุรหัสตัวแทนเก็บเงินสิ้นสุดเพื่อออกรายงาน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);                  
                }
                else
                    retVal = true;

            }
            else
            {
                if ((periodFromText.Text.Replace("/", String.Empty).Trim() == String.Empty))
                {
                    MessageBox.Show(null, "กรุณาระบุรหัสตัวแทนหรือบิลประจำเดือน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                    retVal = true;
            }
            return retVal;
        }

        #endregion

        private void printAllrb_Click(object sender, EventArgs e)
        {
            if (printAllrb.Checked)
            {
                startAgencyIdTb.Text = String.Empty;
                endAgencyIdTb.Text = String.Empty;
                startAgencyIdTb.Enabled = false;
                endAgencyIdTb.Enabled = false;
                startAgencyIdBt.Enabled = false;
                endAgencyIdBt.Enabled = false;
            }
        }

        private void printByAgencyrb_Click(object sender, EventArgs e)
        {
            if (printByAgencyrb.Checked)
            {
                startAgencyIdBt.Enabled = true;
                endAgencyIdBt.Enabled = true;
            }
        }

        private void SetDefaultView()
        {
            startAgencyIdTb.Clear();
            endAgencyIdTb.Clear();
            startAgencyIdTb.Enabled = false;
            endAgencyIdTb.Enabled = false;
            startAgencyIdBt.Enabled = false;
            endAgencyIdBt.Enabled = false;
            previewCb.Checked = true;
            periodFromText.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
            periodToText.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
            previewCb.Checked = true;
        }



    }
}

