//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CAB13_01ReportPopupView : UserControl, ICAB13_01ReportPopupView
    {
        private DateTimeFormatInfo _th_dt;

        public CAB13_01ReportPopupView()
        {
            InitializeComponent();                                               
        }



        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CAB13_01ReportPopupViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
            SetDefaultView();                       
        }

        private void printbt_Click(object sender, EventArgs e)
        {
            if (IsFormValide())
            {
                CAB13_01ConditionRptInfo conn = new CAB13_01ConditionRptInfo();
                conn.RunningBranchId = txtBranchId.Text.Trim();
                conn.BranchId = Session.Branch.Id;
                conn.Period = DaHelper.SetBillPeriod(periodTb.Text);
                conn.PrintPreview = previewCb.Checked;

                _presenter.ShowCAB13_01Clicked(conn);
            }
        }

        private void Closebt_Click(object sender, EventArgs e)
        {
            this.ParentForm.Close();
        }


        private void previewCb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                previewCb.Focus();
            }
            else if (e.KeyCode == Keys.N)
            {
                string p = Session.BpmDateTime.Now.ToString("yyyyMMdd", _th_dt);
                string curPer = string.Format("{0}/{1}", p.Substring(4, 2), p.Substring(0, 4));
                periodTb.Text = curPer;

                previewCb.Focus();
            }
        }


        private bool IsFormValide()
        {
            bool retVal = false;
            if (txtBranchId.Text.Trim() == String.Empty)
            {
                MessageBox.Show("กรุณากรอกข้อมูลสาขาการไฟฟ้าก่อนออกรายงาน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if(txtBranchId.Text.Trim().Length != 6)
            {
                 MessageBox.Show("ข้อมูลสาขาการไฟฟ้ามีรูปแบบไม่ถูกต้อง", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if (periodTb.Text.Trim() == String.Empty)
            {
                MessageBox.Show("กรุณากรอกข้อมูลบิลเดือนก่อนออกรายงาน", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if (periodTb.Text.Trim().Length != ModuleConfigurationNames.PeriodUseLength)
            {
                MessageBox.Show("ข้อมูลบิลเดือนมีรูปแบบไม่ถูกต้อง", "คำเตือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                retVal = true;
            }
            return retVal;
        }


        private void SetDefaultView()
        {        
            previewCb.Checked = true;
            txtBranchId.Text = Session.Branch.Id;
            periodTb.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
        }
    }
}

