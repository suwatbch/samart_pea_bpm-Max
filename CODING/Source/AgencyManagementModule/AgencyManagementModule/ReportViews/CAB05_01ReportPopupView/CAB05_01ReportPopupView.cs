//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;

using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CAB05_01ReportPopupView : UserControl, ICAB05_01ReportPopupView
    {
        private DateTimeFormatInfo _th_dt;

        public CAB05_01ReportPopupView()
        {
            InitializeComponent();
        }

        #region "Properites"
        public string SetStartAgencyId
        {
            set
            {
                startAgencyIdTb.Text = value;
            }
        }

        public string SetEndAgencyId
        {
            set
            {

                endAgencyIdTb.Text = value;
            }
        }
        #endregion

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CAB05_01ReportPopupViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
            periodFromTb.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
            periodToTb.Text = Session.BpmDateTime.Now.ToString("MM/yyyy", new CultureInfo("th-TH"));
        }

        private void findAgencyIdBt_Click(object sender, EventArgs e)
        {
            _presenter.AgencySearchShowPopupClicked(1);
        }


        private void printbt_Click(object sender, EventArgs e)
        {
            if (IsFormValid())
            {
                if (printAllrb.Checked)
                {
                    CAB05_01ConditionReportInfo conn = new CAB05_01ConditionReportInfo();
                    conn.StartAgencyId = null;
                    conn.EndAgencyId = null;
                    conn.StartPeriod = DaHelper.SetBillPeriod(periodFromTb.Text.Trim());
                    conn.EndPeriod = DaHelper.SetBillPeriod(periodToTb.Text.Trim());
                    conn.PrintPreview = previewCb.Checked;
                    conn.BranchId = Session.Branch.Id;
                    _presenter.ShowCAB05_01Clicked(conn);
                }
                else
                {
                    CAB05_01ConditionReportInfo conn = new CAB05_01ConditionReportInfo();
                    conn.StartAgencyId = startAgencyIdTb.Text.Trim().PadLeft(12, '0');
                    conn.EndAgencyId = endAgencyIdTb.Text.Trim().PadLeft(12, '0');
                    conn.StartPeriod = DaHelper.SetBillPeriod(periodFromTb.Text.Trim());
                    conn.EndPeriod = DaHelper.SetBillPeriod(periodToTb.Text.Trim());
                    conn.PrintPreview = previewCb.Checked;
                    conn.BranchId = Session.Branch.Id;
                    _presenter.ShowCAB05_01Clicked(conn);
                }
            }
        }

        private bool IsFormValid()
        {
            bool retVal = false;
            if (!printAllrb.Checked)
            {
                if (startAgencyIdTb.Text.Trim() == string.Empty)
                {
                    MessageBox.Show("กรุณาระบุรหัสตัวแทนเก็บเงินเริ่มต้นเพื่อออกรายงาน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else if (endAgencyIdTb.Text.Trim() == String.Empty)
                {
                    MessageBox.Show("กรุณาระบุรหัสตัวแทนเก็บเงินสิ้นสุดเพื่อออกรายงาน", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    retVal = true;
                }
            }
            else if (periodFromTb.Text.Trim() == string.Empty || periodFromTb.Text.Trim().Length != ModuleConfigurationNames.PeriodUseLength)
            {
                MessageBox.Show("ช่วงบิลเดือนเริ่มต้นไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (periodToTb.Text.Trim() == string.Empty || periodToTb.Text.Trim().Length != ModuleConfigurationNames.PeriodUseLength)
            {
                MessageBox.Show("ช่วงบิลเดือนสุดท้ายไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                retVal = true;
            }
            return retVal;                
        }
    

        private void periodFromTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                periodToTb.Focus();
            }
            else if (e.KeyCode == Keys.N)
            {
                string p = Session.BpmDateTime.Now.ToString("yyyyMMdd", _th_dt);
                string curPer = string.Format("{0}/{1}", p.Substring(4, 2), p.Substring(0, 4));
                periodFromTb.Text = curPer;

                periodToTb.Focus();
                periodToTb.SelectAll();
            }
        }

        private void periodToTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                previewCb.Focus();
            }
            else if (e.KeyCode == Keys.N)
            {
                string p = Session.BpmDateTime.Now.ToString("yyyyMMdd", _th_dt);
                string curPer = string.Format("{0}/{1}", p.Substring(4, 2), p.Substring(0, 4));
                periodToTb.Text = curPer;
                previewCb.Focus();                
            }
        }

        private void startAgencyIdBt_Click(object sender, EventArgs e)
        {
            _presenter.AgencySearchShowPopupClicked(1);
        }

        private void endAgencyIdBt_Click(object sender, EventArgs e)
        {
            _presenter.AgencySearchShowPopupClicked(2);
        }

        private void printAllrb_Click(object sender, EventArgs e)
        {
            if (printAllrb.Checked)
            {
                startAgencyIdTb.Text = String.Empty;
                endAgencyIdTb.Text = String.Empty;
                startAgencyIdTb.Enabled = false;
                endAgencyIdTb.Enabled = false;
                startAgencyIdBt.Enabled = false;
                endAgencyIdBt.Enabled = false;
            }
        }

        private void printByAgencyrb_Click(object sender, EventArgs e)
        {
            if (printByAgencyrb.Checked)
            {
                startAgencyIdBt.Enabled = true;
                endAgencyIdBt.Enabled = true;
            }
        }

        private void Closebt_Click(object sender, EventArgs e)
        {
            ParentForm.Close();
        } 
    }
}

