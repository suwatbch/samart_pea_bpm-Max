//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class SpecialHelpConfigView : UserControl, ISpecialHelpConfigView
    {

        public LineInfo _lineInfo;
        //TravelHelpEnum _travelHelp;
        DateTime? _validFrom = null;
        DateTime? _validTo = null;
        string _errorMsg;

        public SpecialHelpConfigView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public SpecialHelpConfigViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
        }

        public void SetData(LineInfo lineInfo)
        {
            if (lineInfo != null)
            {
                _lineInfo = lineInfo;
                branchLabel.Text = lineInfo.BranchId;
                mruLabel.Text = lineInfo.LineId;
                if (lineInfo.TravelHelp == (int)TravelHelpEnum.WATERTRAVELHELP)
                {
                    waterTravelHelpRb.Checked = true;
                }
                else if (lineInfo.TravelHelp == (int)TravelHelpEnum.FARLANDHELP)
                {
                    farLanHelpRb.Checked = true;
                }
                else
                {
                    transportHelpRb.Checked = true;
                }
                //validFromTb.Text = lineInfo.ValidFrom == null ? String.Empty : lineInfo.ValidFrom.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                //validToTb.Text = lineInfo.ValidTo == null ? String.Empty : lineInfo.ValidTo.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
            }
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            if (waterTravelHelpRb.Checked)
            {
                _lineInfo.TravelHelp = (int)TravelHelpEnum.WATERTRAVELHELP;
            }
            else if (farLanHelpRb.Checked)
            {
                _lineInfo.TravelHelp = (int)TravelHelpEnum.FARLANDHELP;
            }
            else
            {
                _lineInfo.TravelHelp = (int)TravelHelpEnum.NORMALTRAVELHELP;
            }
            _presenter.SetSpeicalHelpConfigClicked(_lineInfo);         
        }

        private bool IsValidData()
        {
            bool retVal = true;
            string errorMsg = string.Empty;
            _validFrom = StringConvert.ToDateTime(validFromTb.Text);
            _validTo = StringConvert.ToDateTime(validToTb.Text);

            if (_validFrom == null)
            {
                retVal = false;
                _errorMsg += "วันที่เริ่มใช้ไม่ถูกต้อง/กรุณาระบุวันเริ่มต้นใช้งาน \n";
            }
            if (_validTo == null)
            {
                retVal = false;
                _errorMsg += "วันที่สิ้นสุดไม่ถูกต้อง/กรุณาระบุวันสิ้นสุด \n";
            }

            if (_validFrom != null && _validTo != null)
            {
                if (_validFrom > _validTo)
                {
                    retVal = false;
                    _errorMsg += "วันเริ่มต้นต้องน้อยกว่าหรือเท่ากับวันสิ้นสุด \n";
                }
            }
            return retVal;
        }

        private void validFromTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Down)
            {
                validToTb.Focus();
                validToTb.SelectAll();
            }
        }

        private void validToTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Down)
            {
                okBt.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                validFromTb.Focus();
                validFromTb.SelectAll();
            }
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            
        }
    }
}

