//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.WinForms;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using System.Collections;
using System.Windows.Forms;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule
{
    public class BillBookSearchViewPresenter : Presenter<IBillBookSearchView>
    {
        //private ICreateBillbookService _createBillbookService;

        //[InjectionConstructor]
        //public BillBookSearchViewPresenter([ServiceDependency] ICreateBillbookService createBillbookService)
        //{
        //    _createBillbookService = createBillbookService;
        //}

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();

            //load book manager tab view
            this.BookGeneratorTabActived();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        [EventPublication(EventTopicNames.BookGeneratorTabActive, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BookGeneratorTabActiveHandler;
        public void BookGeneratorTabActived()
        {
            if (BookGeneratorTabActiveHandler != null)
                BookGeneratorTabActiveHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.CallingBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CallingBillButtonClickedHandler;
        public void CallingBillButtonClicked()
        {
            if (CallingBillButtonClickedHandler != null)
                CallingBillButtonClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.RetrieveBookDetail, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> RetrieveBookDetailHandler;
        public void RetreiveOldBookDetail()
        {
            if (RetrieveBookDetailHandler != null)
                RetrieveBookDetailHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.NoneCallingBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> NoneCallingBillButtonClickedHandler;
        public void NoneCallingBillButtonClicked()
        {
            if (NoneCallingBillButtonClickedHandler != null)
                NoneCallingBillButtonClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.SummarizeCallingBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> SummarizeCallingBillButtonClickedHandler;
        public void SummarizeCallingBillButtonClicked()
        {
            if (SummarizeCallingBillButtonClickedHandler != null)
                SummarizeCallingBillButtonClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.RetrieveBookSummary, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> RetrieveBookSummaryHandler;
        public void RetrieveOldBookSummary()
        {
            if (RetrieveBookSummaryHandler != null)
                RetrieveBookSummaryHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.PortionBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> PortionBillButtonClickedHandler;
        public void PortionBillButtonClicked(LineSearchInfo focusedLine)
        {
            if (PortionBillButtonClickedHandler != null)
                PortionBillButtonClickedHandler(this, new EventArgs<LineSearchInfo>(focusedLine));
        }

        [EventPublication(EventTopicNames.RetrieveBookLine, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> RetrieveBookLineHandler;
        public void RetreiveOldBookLine(LineSearchInfo focusedLine)
        {
            if (RetrieveBookLineHandler != null)
                RetrieveBookLineHandler(this, new EventArgs<LineSearchInfo>(focusedLine));
        }

        [EventPublication(EventTopicNames.PortionNoCallBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> PortionNoCallBillButtonClickedHandler;
        public void PortionNoCallBillButtonClicked(LineSearchInfo focusedLine)
        {
            if (PortionNoCallBillButtonClickedHandler != null)
                PortionNoCallBillButtonClickedHandler(this, new EventArgs<LineSearchInfo>(focusedLine));
        }

        //[EventPublication(EventTopicNames.CancelBillBook, PublicationScope.WorkItem)]
        //public event EventHandler<EventArgs> PastBillBookQueryHandler;
        //public void PastBillBookQueryActivated(string pastBillBookId)
        //{
        //    if (PastBillBookQueryHandler != null)
        //        PastBillBookQueryHandler(this, new EventArgs<string>(pastBillBookId));
        //}

        [EventPublication(EventTopicNames.BillBookAgentIdSearchText, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BillBookAgentIdSearchTextCommittedHandler;
        public void BillBookAgentIdSearchTextCommitted(string agentId)
        {            
            if (BillBookAgentIdSearchTextCommittedHandler != null)
                BillBookAgentIdSearchTextCommittedHandler(this, new EventArgs<string>(agentId));
        }

        [EventPublication(EventTopicNames.AvailableDeposit, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AvailableDepositRequestHandler;
        public void GetAvailableDeposit(string agentId)
        {
            if (AvailableDepositRequestHandler != null)
                AvailableDepositRequestHandler(this, new EventArgs<string>(agentId));
        }

        //[EventPublication(EventTopicNames.GetNewReceiveCount, PublicationScope.WorkItem)]
        //public event EventHandler<EventArgs> GetNewReceiveCountRequestedHandler;
        //public void GetNewReceiveCountRequested(string agentId, string period, string bookHolder)
        //{
        //    List<string> parem = new List<string>();
        //    parem.Add(agentId);
        //    parem.Add(period);
        //    parem.Add(bookHolder);
        //    if (GetNewReceiveCountRequestedHandler != null)
        //        GetNewReceiveCountRequestedHandler(this, new EventArgs<List<string>>(parem));
        //}

        [EventPublication(EventTopicNames.JumpToStartCallingBillCursor, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> JumpToStartCallingBillCursorActivatedHandler;
        public void JumpToStartCallingBillCursorActivated()
        {
            if (JumpToStartCallingBillCursorActivatedHandler != null)
                JumpToStartCallingBillCursorActivatedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.BillBookLoadValidationData, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BillBookLoadValidationDataActivedHandler;
        public void BillBookLoadValidationDataActived(List<string> searchConn)
        {
            if (BillBookLoadValidationDataActivedHandler != null)
                BillBookLoadValidationDataActivedHandler(this, new EventArgs<List<string>>(searchConn));
        }

        [EventPublication(EventTopicNames.CheckAndLoadExistingReceiveCount, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CheckAndLoadExistingReceiveCountHandler;
        public void CheckForExistingReceiveCount(BillBookItemListInputInfo itemInputInfo)
        {
            if (CheckAndLoadExistingReceiveCountHandler != null)
                CheckAndLoadExistingReceiveCountHandler(this, new EventArgs<BillBookItemListInputInfo>(itemInputInfo));
        }

        [EventPublication(EventTopicNames.MoveCursorToTheLastRow, PublicationScope.Global)]
        public event EventHandler<EventArgs> MoveCursorToTheLastRowHandler;
        public void StartNextInput()
        {
            if (MoveCursorToTheLastRowHandler != null)
                MoveCursorToTheLastRowHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.CheckEmployeeNo, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CheckEmployeeNoHandler;
        public void CheckEmployeeNo(string empId)
        {
            if (CheckEmployeeNoHandler != null)
                CheckEmployeeNoHandler(this, new EventArgs<string>(empId));
        }

        [EventPublication(EventTopicNames.CheckAndLoadExistingBillBook, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CheckAndLoadExistingBillBookHandler;
        public void CheckAndLoadExistingBillBook(string billBookId)
        {
            if (CheckAndLoadExistingBillBookHandler != null)
                CheckAndLoadExistingBillBookHandler(this, new EventArgs<string>(billBookId));
        }

        #region subscription

        [EventSubscription(EventTopicNames.StartInput, Thread = ThreadOption.UserInterface)]
        public void StartInputRequestHandler(object sender, EventArgs e)
        {
            //activate tab and intiate view
            //View.ActivateFindResultPanel(2);
            View.StartInput();
        }

        [EventSubscription(EventTopicNames.ClearBookScreenHeader, Thread = ThreadOption.UserInterface)]
        public void ClearBookScreenHeaderHandler(object sender, EventArgs e)
        {
            //activate tab and intiate view
            View.ClearHeader();
        }

        [EventSubscription(EventTopicNames.EnableBookCreationInput, Thread = ThreadOption.UserInterface)]
        public void EnableBookCreationInputHandler(object sender, EventArgs<bool> e)
        {
            //activate tab and intiate view
            View.BillbookHeaderEnable(e.Data);
        }

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdateHandler;
        public void ShowStatusText(string statusText)
        {
            if (StatusUpdateHandler != null)
                StatusUpdateHandler(this, new EventArgs<string>(statusText));
        }


        [EventPublication(EventTopicNames.BackToBookManagementView, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BackToBookManagementViewActivatedHandler;
        public void BackToBookManagementViewActivated()
        {
            if (BackToBookManagementViewActivatedHandler != null)
                BackToBookManagementViewActivatedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.PrintBillBook, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> PrintBillBookHandler;
        public void BillBookSaveRequestClicked()
        {
            if (PrintBillBookHandler != null)
                PrintBillBookHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.ShowHintEvent, PublicationScope.Global)]
        public event EventHandler<EventArgs> ShowHintHandler;
        public void ShowHint(ArrayList parem)
        {
            if (ShowHintHandler != null)
                ShowHintHandler(this, new EventArgs<ArrayList>(parem));
        }

        //[EventPublication(EventTopicNames.SetCancelBillBook, PublicationScope.WorkItem)]
        //public event EventHandler<EventArgs> SetCancelBillBookHandler;
        //public void SetCancelBillBook(bool enable)
        //{
        //    if (SetCancelBillBookHandler != null)
        //        SetCancelBillBookHandler(this, new EventArgs<bool>(enable));
        //}

        [EventPublication(EventTopicNames.DisableSaveButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> DisableSaveButtonHandler;
        public void SaveEnable(bool enable)
        {
            View.BillbookHeaderEnable(enable);
            if (DisableSaveButtonHandler != null)
                DisableSaveButtonHandler(this, new EventArgs<bool>(enable));
        }

        [EventSubscription(EventTopicNames.SetCancelBillBook, Thread = ThreadOption.UserInterface)]
        public void SetCancelBillBookHandler(object sender, EventArgs<bool> e)
        {
            View.SetCancelBillBook(e.Data);
        }
        #endregion



    }
}

