//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Utilities;

using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool;

using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface;
using System.ComponentModel;
using System.Globalization;
using PEA.BPM.AgencyManagementModule.View.PaymentMethodView;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class PaymentMethodView : UserControl, IPaymentMethodView
    {
        #region "Declare"
        private BillBookCheckInInfo _bookInfo;
        private List<ChequeInfo> _chequeList;
        private string _errorMsg = String.Empty;
        #endregion

        #region "Properties"
        private List<ChequeInfo> ChequeList
        {
            get
            {
                return this._chequeList;
            }
            set
            {
                this._chequeList = value;
            }
        }
        #endregion

        #region "Auto gen"
        public PaymentMethodView()
        {
            InitializeComponent();
            chequeGV.AutoGenerateColumns = false;
        }
        public void SetData(BillBookCheckInInfo bookInfo)
        {
            if (bookInfo != null)
            {
                _bookInfo = bookInfo;
                BindData();

                if (_bookInfo.BsId == "C" || _bookInfo.BsId == "T")
                {
                    ControlChequeUI(false);
                }
                else
                {
                    ControlChequeUI(true);
                }
            }
        }
        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public PaymentMethodViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        protected override void OnLoad(EventArgs e)
        {       
            _presenter.OnViewReady();
        }
        #endregion

        #region "Function"
       
        private void ClearForm()
        {
            chequeNoText.Clear();
            chequeAmountText.Clear();
            paidAmountText.Clear();
            chequeAccountText.Clear();
            periodText.Clear();
            chequeDateText.Clear();
            paidAmountText.Text = String.Format("{0:#,##0.00}", NetPaidAmount());            
        }
        public decimal NetPaidAmount()
        {
            decimal? totalPaid = 0;
            decimal? retVal = 0;
            decimal? totalAmount = StringConvert.ToDecimal(totalAmountText.Text);
            foreach (ChequeInfo c in ChequeList)
            {
                totalPaid = totalPaid + c.ChequeAmount;
            }
            retVal = totalAmount - totalPaid;
            return retVal.Value < 0 ? 0 : retVal.Value;
        }
        private bool IsValidData()
        {
            bool retVal = true;
            string chqNo = chequeNoText.Text.Trim();
            decimal? chqAmount = StringConvert.ToDecimal(chequeAmountText.Text);
            decimal? paidAmount = StringConvert.ToDecimal(paidAmountText.Text);
            string chequeAccount = chequeAccountText.Text.Trim();
            DateTime? chequeDate = StringConvert.ToDateTime(chequeDateText.Text);

            if (chqNo == String.Empty)
            {
                retVal = false;
                _errorMsg += "กรุณาระบุเลขที่เช็ค \n";
                chequeNoText.Focus();
            }
            if (chequeAmountText.Text.Trim() == String.Empty)
            {
                retVal = false;
                _errorMsg += "กรุณาระบุจำนวนเงินในเช็ค\n";
                chequeAmountText.Focus();
                chequeAmountText.SelectAll();
            }
            else if ((chqAmount == null) || (chqAmount == 0))
            {
                retVal = false;
                _errorMsg += "จำนวนเงินในเช็คไม่ถูกต้อง \n";
                chequeAmountText.Focus();
                chequeAmountText.SelectAll();
            }

            if ((paidAmountText == null) || (paidAmount == 0))
            {
                retVal = false;
                _errorMsg += "จำนวนเงินที่ชำระไม่ถูกต้อง\n";
                paidAmountText.Focus();
                paidAmountText.SelectAll();
            }

            if (chqAmount > paidAmount)
            {
                retVal = false;
                _errorMsg += "จำนวนเงินในเช็คต้องไม่มากกว่าจำนวนเงินที่รับ\n";
                chequeAmountText.Focus();
                chequeAmountText.SelectAll();
            }

            if (chequeAccount == String.Empty)
            {
                retVal = false;
                _errorMsg += "กรุณาระบุเลขที่บัญชีเช็ค\n";
                chequeAccountText.Focus();
                chequeAccountText.SelectAll();
            }

            foreach (DataGridViewRow row in chequeGV.Rows)
            {
                string chequeNo = row.Cells["ChequeNo"].Value.ToString();
                string bankName = row.Cells["BankId"].Value.ToString();
                if (bankName.CompareTo(chequeBankComboBox.Text) == 0 && chequeNo.CompareTo(chequeNoText.Text) == 0)
                {
                    retVal = false;
                    _errorMsg += "เลขที่เช็คซ้ำซ้อน \n";
                    chequeNoText.Focus();
                    chequeNoText.SelectAll();
                    break;
                }
            }

            if (chequeBankComboBox.Items.Count == 0)
            {
                retVal = false;
                _errorMsg += "กรุณาระบุธนาคาร \n";
                bankSearchBt.Focus();               
            }


            if (retVal)
            {
                //check money in chq 
                foreach (BillBookCheckinDetailInfo b in _bookInfo.BillBookCheckInDetail)
                {
                    if (b.PaidType == (int)PaidTypeEnum.CHEQUE)
                    {
                        foreach (ChequeInfo c in b.ChequeList)
                        {
                            if (chqNo == c.ChequeNo)
                            {
                                paidAmount += c.ActualAmount;
                            }
                        }
                    }
                }

                //if (paidAmount > chqAmount)
                //{
                //    retVal = false;
                //    _errorMsg += "จำนวนเงินที่ระบุในเช็คไม่พอต่อการชำระค่าไฟ\n";
                //    paidAmountText.Focus();
                //    paidAmountText.SelectAll();
                //}


                DateTime strCurrentDate = Convert.ToDateTime(Session.BpmDateTime.Now.Date, new CultureInfo("th-TH", true));
                DateTime strSubSixMonthDate = Convert.ToDateTime(Session.BpmDateTime.Now.AddMonths(-6).Date, new CultureInfo("th-TH", true));
                DateTime strChequeDates = Convert.ToDateTime(chequeDate, new CultureInfo("th-TH", true));

                
                if (chequeDate == null || strChequeDates.CompareTo(strCurrentDate) > 0 || strChequeDates.CompareTo(strSubSixMonthDate) < 0)
                {
                    retVal = false;
                    _errorMsg += "วันที่เช็คไม่ถูกต้อง\n";
                    chequeDateText.SelectAll();
                    chequeDateText.Focus();
                }
            }
            return retVal;
        }
        private void BindData()
        {
            if (_bookInfo.BookId.Length == ModuleConfigurationNames.BillBookIdLength)
            {
                bookIdText.Text = _bookInfo.BookId.Substring(ModuleConfigurationNames.BranchCodeLength, ModuleConfigurationNames.BillBookLengthOnly);
            }
            else
            {
                bookIdText.Text = _bookInfo.BookId;
            }

            periodText.Text = _bookInfo.BookPeriod;

            foreach (BillBookCheckinDetailInfo _detail in _bookInfo.BillBookCheckInDetail)
            {
                if (_bookInfo.ActiveItem == _detail.InvoiceNo)
                {
                    caIdText.Text = _detail.CaId;
                    caNameText.Text = _detail.CaName;
                    totalAmountText.Text = String.Format("{0:#,##0.00}", _detail.TotalAmount);
                    ChequeList = _detail.ChequeList;
                    
                    if (ChequeList != null && ChequeList.Count > 0)
                    {
                        chequeGV.DataSource = ChequeList;
                        chequeAmountText.Text = String.Format("{0:#,##0.00}", NetPaidAmount());
                        paidAmountText.Text = String.Format("{0:#,##0.00}", NetPaidAmount());
                    }
                  
                    else 
                    {
                        chequeAmountText.Text = String.Format("{0:#,##0.00}", _detail.TotalAmount);
                        paidAmountText.Text = String.Format("{0:#,##0.00}", _detail.TotalAmount);
                    }
                    break;
                }
            }
        }
        private void ControlChequeUI(bool controlValue)
        {
            chequeGV.Enabled = controlValue;
            saveBt.Enabled = controlValue;
            deleteBt.Enabled = controlValue;
            chequeBankComboBox.Enabled = controlValue;
            bankSearchBt.Enabled = controlValue;
            chequeNoText.Enabled = controlValue;
            if (!controlValue) chequeAmountText.Clear();
            chequeAmountText.Enabled = controlValue;
            if (!controlValue) paidAmountText.Clear();
            paidAmountText.Enabled = controlValue;
            chequeAccountText.Enabled = controlValue;
            chequeDateText.Enabled = controlValue;
        }
        private void FindChequeBank()
        {
            FindBank(chequeBankComboBox, false);
        }
        private void FindBank(ComboBox bankComboBox, bool isDeposit)
        {
            using (BankSearchForm bsForm = new BankSearchForm(isDeposit))
            {
                if (bsForm.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    SetBankDataSource(bankComboBox, bsForm.SelectedBank, isDeposit);
                }
            }
        }
        private void SetBankDataSource(ComboBox bankComboBox, Bank bank, bool isDeposit)
        {
            List<Bank> banks = new List<Bank>();
            banks.Add(bank);
            bankComboBox.ValueMember = "BankKey";
            bankComboBox.DisplayMember = "BankName";
            bankComboBox.DataSource = banks;
            bankComboBox.SelectedIndex = 0;

            //if (isDeposit == true)
            //{
            //    List<BankAccount> ba = new List<BankAccount>(CodeTable.Instant.ListBankAccounts(((Bank)bankComboBox.SelectedItem).BankKey));
            //    depositBankAccNoComboBox.SelectedIndex = depositBankAccNoComboBox.FindString(ba[0].AccountNo);
            //}
        }
        #endregion

        #region "Event"

        private void chequeDateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (this.IsValidData())
                {
                    ChequeInfo cheque = new ChequeInfo();
                    cheque.BookId = bookIdText.Text;
                    cheque.Period = periodText.Text;
                    cheque.CaId = caIdText.Text;
                    Bank selectedBank = new Bank(chequeBankComboBox.SelectedValue.ToString(), chequeBankComboBox.Text);
                    cheque.BankKey = selectedBank.BankKey;
                    cheque.BankName = selectedBank.BankName;
                    cheque.ChequeNo = chequeNoText.Text.Trim();
                    cheque.ChequeAmount = StringConvert.ToDecimal(chequeAmountText.Text);
                    cheque.ActualAmount = StringConvert.ToDecimal(paidAmountText.Text);
                    cheque.ChequeAccountNo = chequeAccountText.Text.Trim();
                    cheque.ChequeDt = StringConvert.ToDateTime(chequeDateText.Text);

                    if (ChequeList == null) ChequeList = new List<ChequeInfo>();
                    ChequeList.Add(cheque);
                    chequeGV.DataSource = null;
                    chequeGV.DataSource = ChequeList;
                    ClearForm();
                }
                else
                {
                    MessageBox.Show(_errorMsg, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    _errorMsg = String.Empty;
                }
            }
        }
        private void deleteBt_Click(object sender, EventArgs e)
        {
            bool deleteFlag = false;
            if (chequeGV.Rows.Count > 0)
            {
                foreach (DataGridViewRow row in chequeGV.Rows)
                {
                    bool isDeleted = Convert.ToBoolean(row.Cells["checkedDgColumn"].Value);
                    if (isDeleted)
                    {
                        deleteFlag = true;
                        break;
                    }
                }

                if (deleteFlag)
                {

                    DialogResult result = MessageBox.Show("คุณต้องการลบข้อมูลเช็คหรือไม่", "ยืนยันการลบข้อมูลเช็ค", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                    if (result == DialogResult.OK)
                    {
                        List<string> deleteList = new List<string>();
                        foreach (DataGridViewRow row in chequeGV.Rows)
                        {
                            bool _delete = Convert.ToBoolean(row.Cells["checkedDgColumn"].Value);
                            if (_delete)
                            {
                                deleteList.Add(row.Cells["chequeNo"].Value.ToString());
                            }
                        }

                        for (int i = 0; i < ChequeList.Count; i++)
                        {
                            foreach (string chqNo in deleteList)
                            {
                                if (ChequeList[i].ChequeNo == chqNo)
                                {
                                    ChequeList.RemoveAt(i);
                                }
                            }
                        }

                        chequeGV.DataSource = null;
                        chequeGV.DataSource = ChequeList;
                        paidAmountText.Text = String.Format("{0:#,##0.00}", NetPaidAmount());
                    }
                }
                else 
                {
                    DialogResult result = MessageBox.Show("ไม่พบรายการข้อมูลเช็คที่ต้องการลบ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        private void chequeNoText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) && (chequeNoText.Text != String.Empty))
            {
                chequeAmountText.Focus();
            }
        }
        private void chequeAmountText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) && (chequeAmountText.Text != String.Empty))
            {
                chequeAccountText.Focus();
            }
        }
        private void paidAmountText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) && (paidAmountText.Text != String.Empty))
            {
                chequeAccountText.Focus();
            }
        }
        private void saveBt_Click(object sender, EventArgs e)
        {
            if (_bookInfo != null)
            {
                if (ValidToSave())
                {
                    // update data and sentback to parent                
                    foreach (BillBookCheckinDetailInfo _detail in _bookInfo.BillBookCheckInDetail)
                    {
                        if (_bookInfo.ActiveItem == _detail.InvoiceNo)
                        {
                            if (ChequeList != null && ChequeList.Count > 0)
                            {
                                _detail.ChequeList = ChequeList;
                                _detail.PaidType = (int)PaidTypeEnum.CHEQUE;
                            }
                            else
                            {
                                _detail.ChequeList = null;
                                _detail.PaidType = (int)PaidTypeEnum.CASH;
                            }
                        }
                    }                    
                    _presenter.BackToBillBookCheckInViewActivated(_bookInfo);
                    this.ParentForm.Close();
                }
                else 
                {
                    MessageBox.Show(_errorMsg, "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    _errorMsg = String.Empty;
                }
            }           
        }

        private void chequeGV_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if (chequeGV.Rows[e.RowIndex].Cells["chequeDt"].Value == null)
                {
                    ChequeInfo chq = (ChequeInfo)chequeGV.Rows[e.RowIndex].DataBoundItem;
                    chequeGV.Rows[e.RowIndex].Cells["chequeDt"].Value = chq.ChequeDt == null ? String.Empty : chq.ChequeDt.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH")); ;
                }
            }
        }
        private void bankComboBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                chequeNoText.Focus();
            }
        }
        
        private void chequeAccountText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) && (chequeAmountText.Text != String.Empty))
            {
                chequeDateText.Focus();
            }
        }
        private bool ValidToSave()
        {
            bool retVal = true;            
            decimal? paidAmount = 0;
            decimal? chqAmount = 0;
            paidAmount = StringConvert.ToDecimal(totalAmountText.Text);
            //check money in chq 

            if (ChequeList != null)
            {
                foreach (ChequeInfo c in ChequeList)
                {
                    chqAmount += c.ChequeAmount;
                }

                if (paidAmount > chqAmount)
                {
                    retVal = false;
                    _errorMsg = "จำนวนเงินที่ระบุในเช็คไม่พอต่อการชำระค่าไฟ\n";
                }
            }
            else
            {
                retVal = false;
                _errorMsg = "ไม่สามารถบันทึกข้อมูลได้เนื่องจากไม่พบข้อมูลเช็ค\n";
            }
            return retVal;
        }
        private void bankSearchBt_Click(object sender, EventArgs e)
        {
            FindChequeBank();
        }
        #endregion        

    }
}

