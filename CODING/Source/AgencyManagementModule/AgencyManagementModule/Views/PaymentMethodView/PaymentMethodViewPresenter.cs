//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;


using PEA.BPM.Architecture.ArchitectureTool;

using PEA.BPM.Infrastructure.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.AgencyManagementModule.Interface.Constants;


namespace PEA.BPM.AgencyManagementModule
{
    public class PaymentMethodViewPresenter : Presenter<IPaymentMethodView>
    {
        IBillbookCheckInService _billBookCheckInService;             

        [InjectionConstructor]
        public PaymentMethodViewPresenter([ServiceDependency] IBillbookCheckInService billBookCheckInService)
		{            
            _billBookCheckInService = billBookCheckInService;            
		}

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {            
            base.CloseView();
        }    

        [EventPublication(EventTopicNames.BackToBillBookCheckInView, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BackToBillBookCheckInViewActivatedHandler;
        public void BackToBillBookCheckInViewActivated(BillBookCheckInInfo billBookInfo)
        {           
            if (BackToBillBookCheckInViewActivatedHandler != null)
                BackToBillBookCheckInViewActivatedHandler(this, new EventArgs<BillBookCheckInInfo>(billBookInfo));

        }

        public List<ChequeInfo> GetChequeList(string billBookId, string invId)
        {
            return _billBookCheckInService.GetChequeList(billBookId, invId);
        }       
    }
}

