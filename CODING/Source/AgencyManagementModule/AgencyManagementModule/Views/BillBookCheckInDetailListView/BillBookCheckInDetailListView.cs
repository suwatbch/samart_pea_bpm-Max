//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookCheckInDetailListView : UserControl, IBillBookCheckInDetailListView
    {
        #region "Properties"
        BillBookCheckInInfo _billBookCheckIn;
        HashInfoCollection _pmList = new HashInfoCollection();
        HashInfoCollection _absList = new HashInfoCollection();

        public HashInfoCollection AbsList
        {
            get
            {
                return this._absList;
            }
            set
            {
                this._absList = value;
            }
        }

        public HashInfoCollection PmList
        {
            get
            {
                return this._pmList;
            }
            set
            {
                this._pmList = value;
            }
        }

        #endregion

        #region "Constructor"
        public BillBookCheckInDetailListView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookCheckInDetailListViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        #endregion

        #region "Event"

        protected override void OnLoad(EventArgs e)
        {
            string[] collectStatus = { "ทั้งหมด", "เก็บเงินได้", "เก็บเงินไม่ได้" };
            collectStatusCb.DataSource = collectStatus;
            BindFooterData();
            collectStatusCb.SelectedIndex = 0;
            _presenter.OnViewReady();
            paymentStatusGV.AutoGenerateColumns = false;
            cancelBt.Focus();
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            this.ClearScreen();
        }

        private void paymentStatusGV_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if ((paymentStatusGV.Rows[e.RowIndex].Cells["PmId"].Value != null) && (PmList != null))
                {
                    string _pmId = (string)paymentStatusGV.Rows[e.RowIndex].Cells["PmId"].Value;
                    string _pmName = PmList.GetHashValueById(_pmId);
                    paymentStatusGV.Rows[e.RowIndex].Cells["PmName"].Value = _pmName;
                }
                if ((paymentStatusGV.Rows[e.RowIndex].Cells["AbsId"].Value != null) && (AbsList != null))
                {
                    string _absId = (string)paymentStatusGV.Rows[e.RowIndex].Cells["AbsId"].Value;
                    string _absName = AbsList.GetHashValueById(_absId);
                    paymentStatusGV.Rows[e.RowIndex].Cells["AbsName"].Value = _absName;
                }
            }
        }
        private void paymentStatusGV_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {

            if (e.RowIndex >= 0)
            {
                if (paymentStatusGV.Rows[e.RowIndex].Cells["LastPaidDt"].Value == null)
                {
                    BillBookCheckinDetailInfo bill = (BillBookCheckinDetailInfo)paymentStatusGV.Rows[e.RowIndex].DataBoundItem;
                    paymentStatusGV.Rows[e.RowIndex].Cells["LastPaidDt"].Value = bill.LastPaidDt == null ? String.Empty : bill.LastPaidDt.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                }
            }
        }

        private void collectStatusCb_SelectedIndexChanged(object sender, EventArgs e)
        {
            int index = collectStatusCb.SelectedIndex;
            switch (index)
            {
                case 1:
                    paymentStatusGV.DataSource = _billBookCheckIn.BillBookCheckInDetail.FindAll(delegate(BillBookCheckinDetailInfo b) { return (b.AbsId == AbsIdEnum.COLLECTED); });
                    break;
                case 2:
                    paymentStatusGV.DataSource = _billBookCheckIn.BillBookCheckInDetail.FindAll(delegate(BillBookCheckinDetailInfo b) { return (b.AbsId == AbsIdEnum.PAST || b.AbsId == AbsIdEnum.UNCOLLECTED || b.AbsId == AbsIdEnum.UNDEFINE); });
                    break;
                default:
                    paymentStatusGV.DataSource = _billBookCheckIn.BillBookCheckInDetail;
                    break;                  
            }
            BindFooterData();
        }

        #endregion

        #region "Helper"
        public void SetData(BillBookCheckInInfo billBookCheckIn)
        {
            _billBookCheckIn = billBookCheckIn;
            BindData();
        }

        public void BindData()
        {
            paymentStatusGV.AutoGenerateColumns = false;
            if (_billBookCheckIn.BookId.Length == ModuleConfigurationNames.BillBookIdLength)
                BillBookIdText.Text = _billBookCheckIn.BookId.Substring(ModuleConfigurationNames.BranchCodeLength, ModuleConfigurationNames.BillBookLengthOnly);
            else
                BillBookIdText.Text = _billBookCheckIn.BookId;

            if (_billBookCheckIn.BillBookCheckInDetail.Count > 0)
            {
                BranchIdText.Text = _billBookCheckIn.BillBookCheckInDetail[0].BranchId;
                mruIdText.Text = _billBookCheckIn.BillBookCheckInDetail[0].MruId;

                paymentStatusGV.DataSource = new List<BillBookCheckinDetailInfo>();
                paymentStatusGV.DataSource = _billBookCheckIn.BillBookCheckInDetail;
            }
            else
            {
                BranchIdText.Text = String.Empty; ;
                mruIdText.Text = String.Empty;
                paymentStatusGV.DataSource = new List<BillBookCheckinDetailInfo>();
            }


            // check show colum billbook/groupinvoice
            if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
            {
                paymentStatusGV.Columns["TotalAmount"].Visible = true;
                paymentStatusGV.Columns["TotalDebt"].Visible = false;
            }
            else
            {
                paymentStatusGV.Columns["TotalAmount"].Visible = false;
                paymentStatusGV.Columns["TotalDebt"].Visible = true;
            }
        }

        private void ClearScreen()
        {
            BillBookIdText.Clear();
            BranchIdText.Clear();
            mruIdText.Clear();
            paymentStatusGV.DataSource = null;
        }

        private void BindFooterData()
        {
            summaryGv.AutoGenerateColumns = false;
            List<BillBookCheckInDetailSummaryInfo> sumList = new List<BillBookCheckInDetailSummaryInfo>();
            BillBookCheckInDetailSummaryInfo sum = new BillBookCheckInDetailSummaryInfo();
            decimal? totalAmount = 0;
            foreach (DataGridViewRow r in paymentStatusGV.Rows)
            {
                if(_billBookCheckIn.BookType == 1)
                    totalAmount += (decimal?)r.Cells["TotalAmount"].Value;
                else
                    totalAmount += (decimal?)r.Cells["TotalDebt"].Value;         
            }
            sum.CaCount = paymentStatusGV.Rows.Count;
            sum.TotalAmount = totalAmount;
            sumList.Add(sum);
            summaryGv.DataSource = sumList; 
        }
        #endregion
    }
}

