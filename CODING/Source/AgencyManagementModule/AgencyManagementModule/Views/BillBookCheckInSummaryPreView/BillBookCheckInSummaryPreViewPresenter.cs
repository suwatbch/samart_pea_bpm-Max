//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Windows.Forms;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.AgencyManagementModule.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using System.Globalization;


namespace PEA.BPM.AgencyManagementModule
{
    public class BillBookCheckInSummaryPreViewPresenter : Presenter<IBillBookCheckInSummaryPreView>
    {
        #region "Properties"
        IBillbookCheckInService _billBookCheckInService;
        private System.Threading.Mutex _mutex;
        #endregion

        #region "Constructor"
        
        [InjectionConstructor]
        public BillBookCheckInSummaryPreViewPresenter([ServiceDependency] IBillbookCheckInService billBookCheckInService)
		{
            _mutex = new System.Threading.Mutex(false);
            _billBookCheckInService = billBookCheckInService;
        }

        #endregion

        #region "Publication"
        [EventPublication(EventTopicNames.AgencyBillBookCheckInClearForm, PublicationScope.Global)]
        public event EventHandler<EventArgs> ClearBillBookCheckInFormHandler;
        public void ClearBillBookCheckInForm()
        {
            if (ClearBillBookCheckInFormHandler != null)
                ClearBillBookCheckInFormHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.BillBookCheckInFinishButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BillBookCheckInInputButtonClickedHandler;
        public void BillBookCheckInFinishButtonClicked(BillBookCheckInInfo billBookCheckIn)
        {
            if (BillBookCheckInInputButtonClickedHandler != null)
                BillBookCheckInInputButtonClickedHandler(this, new EventArgs<BillBookCheckInInfo>(billBookCheckIn));            
        }

        [EventPublication(EventTopicNames.BillBookCheckInFirstButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BillBookCheckInFirstButtonClickedHandler;
        public void BillBookCheckInFirstButtonClicked(BillBookCheckInInfo billBookCheckIn)
        {            
            if (BillBookCheckInFirstButtonClickedHandler != null)
                BillBookCheckInFirstButtonClickedHandler(this, new EventArgs<BillBookCheckInInfo>(billBookCheckIn));
        }

        [EventPublication(EventTopicNames.BillBookCheckInDetailList, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ShowBillBookDetailButtonClickedHandler;
        public void ShowBillBookDetailButtonClicked(BillBookCheckInInfo billBookCheckIn, string branchId, string mruId)
        {
            try
            {                
                BillBookCheckInInfo _billBookcheckIn = new BillBookCheckInInfo();
                List<BillBookCheckinDetailInfo> _billSelectedDetail = new List<BillBookCheckinDetailInfo>();
                foreach (BillBookCheckinDetailInfo b in billBookCheckIn.BillBookCheckInDetail)
                {
                    if ((b.BranchId == branchId) && (b.MruId == mruId))
                    {
                        _billSelectedDetail.Add(b);
                    }
                }
                _billBookcheckIn.BookType = billBookCheckIn.BookType;
                _billBookcheckIn.BookId = billBookCheckIn.BookId;
                _billBookcheckIn.BillBookCheckInDetail = _billSelectedDetail;

                if (ShowBillBookDetailButtonClickedHandler != null)
                {
                    WorkItem.State["IBillBookCheckInDetailListView"] = true;
                    ShowBillBookDetailButtonClickedHandler(this, new EventArgs<BillBookCheckInInfo>(_billBookcheckIn));
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        [EventPublication(EventTopicNames.ConfirmStatusBillBookIdTextCommitted, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ConfirmStatusBillBookIdTextCommitteHandler;
        public void ConfirmStatusBillBookIdTextCommitted(string billBookId)
        {
            if (ConfirmStatusBillBookIdTextCommitteHandler != null)
                ConfirmStatusBillBookIdTextCommitteHandler(this, new EventArgs<string>(billBookId));
        }


        //This Event use for Load Customer that receive Bill From Agency but don't paid Money 
        //Create By Chettha Pattananitisak Date 24/04/2007 Time 11:40
        [EventPublication(EventTopicNames.ShowCAB03_01Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB03_01ReportHandler;
        public void LoadCAB03_01Clicked(CheckInBillBookConditionInfoReport printCondition)
        {
            if (LoadCAB03_01ReportHandler != null)
                LoadCAB03_01ReportHandler(this, new EventArgs<CheckInBillBookConditionInfoReport>(printCondition));
        }

                   
        [EventPublication(EventTopicNames.ShowCAB03_03Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB03_03ReportHandler;
        public void LoadCAB03_03Clicked(CheckInBillBookConditionInfoReport printCondition)
        {
            if (LoadCAB03_03ReportHandler != null)
                LoadCAB03_03ReportHandler(this, new EventArgs<CheckInBillBookConditionInfoReport>(printCondition));
        }

        [EventPublication(EventTopicNames.ShowCAB03_04Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB03_04ReportHandler;
        public void LoadCAB03_04Clicked(CheckInBillBookConditionInfoReport printCondition)
        {
            if (LoadCAB03_04ReportHandler != null)
                LoadCAB03_04ReportHandler(this, new EventArgs<CheckInBillBookConditionInfoReport>(printCondition));
        }

        //This Event use for Load Issue Bill and Group by Status and Line Of Agency 
        //Create By Chettha Pattananitisak Date 24/04/2007 Time 11:55
        [EventPublication(EventTopicNames.ShowCAB03_02Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadIssueOfBillByBillTypeAndLineOfAgentDataToReportEnitiesHandler;
        public void LoadCAB03_02Clicked(CheckInBillBookConditionInfoReport printCondition)
        {
            if (LoadIssueOfBillByBillTypeAndLineOfAgentDataToReportEnitiesHandler != null)
                LoadIssueOfBillByBillTypeAndLineOfAgentDataToReportEnitiesHandler(this, new EventArgs<CheckInBillBookConditionInfoReport>(printCondition));
        }

        #endregion

        #region "Event"
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
            ((UserControl)View).ParentForm.Text = "สถานะการชำระเงินก่อนบันทึก";
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        #endregion

        #region "Helper"

        public decimal GetAdvPaidFromPOS(string billBookId)
        {
            decimal retVal = 0;
            retVal = _billBookCheckInService.GetAdvPaidFromPOS(billBookId);
            return retVal;
        }

        public List<BillBookLineCheckInInfo> GetBillBookLineCheckIn(BillBookCheckInInfo billBookCheckIn)
        {
            List<BillBookLineCheckInInfo> _lineCheckIn = new List<BillBookLineCheckInInfo>();
            foreach (BillBookCheckinDetailInfo b in billBookCheckIn.BillBookCheckInDetail)
            {
                bool isFound = false;
                foreach (BillBookLineCheckInInfo l in _lineCheckIn)
                {
                    if (l.MruId == b.MruId)
                    {
                        isFound = true;
                        if (b.AbsId == AbsIdEnum.COLLECTED)
                        {
                            l.CollectBillCount += 1;
                            if (billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                            {
                                l.CollectBillAmount += b.TotalAmount;
                            }
                            else 
                            {
                                l.CollectBillAmount += b.PaidAmount;
                                l.NotCollectBillAmount += b.TotalDebtAmount;
                            }
                        }
                        else 
                        {
                            if (b.AbsId == AbsIdEnum.PAST)
                            {
                                string _billMonth = b.Period.Substring(0, 2);
                                string _billYear = b.Period.Substring(3, 4);
                                string _currentDate = Session.BpmDateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                                DateTime _billDate = new DateTime(Convert.ToInt32(_billYear), Convert.ToInt32(_billMonth), 1);
                                string _currMonth = _currentDate.Substring(3, 2);
                                string _currYear = _currentDate.Substring(6, 4);
                                DateTime _currDate = new DateTime(Convert.ToInt32(_currYear), Convert.ToInt32(_currMonth), 1);
                                
                                TimeSpan _ts = new TimeSpan(90, 0, 0, 0);
                                
                                if (_currDate - _billDate > _ts)
                                {
                                    l.ThreeMonthBillCount += 1;
                                    l.ThreeMonthAmount += b.TotalAmount;
                                }
                                else 
                                {
                                    l.NotCollectBillCount += 1;
                                    l.NotCollectBillAmount += b.TotalAmount;
                                }
                            }
                            else
                            {
                                l.NotCollectBillCount += 1;
                                if (billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                                {
                                    l.NotCollectBillAmount += b.TotalAmount;
                                }
                                else 
                                {
                                    l.NotCollectBillAmount += b.TotalDebtAmount;
                                }
                            }
                        }
                    }
                }
                if (!isFound)
                {
                    //TO DO: find submitdate
                    
                    BillBookLineCheckInInfo _lineItem = new BillBookLineCheckInInfo();
                    _lineItem.BranchId = b.BranchId;
                    _lineItem.MruId = b.MruId;
                    _lineItem.SubmitDate = Session.BpmDateTime.Now;


                    if (b.AbsId == AbsIdEnum.COLLECTED)
                    {
                        _lineItem.CollectBillCount = 1;
                        if (billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                        {
                            _lineItem.CollectBillAmount = b.TotalAmount;
                        }
                        else 
                        {
                            _lineItem.CollectBillAmount = b.PaidAmount;
                            _lineItem.NotCollectBillAmount = b.TotalDebtAmount;
                        }
                    }
                    else
                    {
                        if (b.AbsId == AbsIdEnum.PAST)
                        {
                            string _billMonth = b.Period.Substring(0, 2);
                            string _billYear = b.Period.Substring(3, 4);
                            string _currentDate = Session.BpmDateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                            DateTime _billDate = new DateTime(Convert.ToInt32(_billYear), Convert.ToInt32(_billMonth), 1);
                            string _currMonth = _currentDate.Substring(3, 2);
                            string _currYear = _currentDate.Substring(6, 4);
                            DateTime _currDate = new DateTime(Convert.ToInt32(_currYear), Convert.ToInt32(_currMonth), 1);

                            TimeSpan _ts = new TimeSpan(90, 0, 0, 0);

                            if (_currDate - _billDate > _ts)
                            {
                                _lineItem.ThreeMonthBillCount = 1;
                                _lineItem.ThreeMonthAmount = b.TotalAmount;
                            }
                            else
                            {
                                _lineItem.NotCollectBillCount = 1;
                                _lineItem.NotCollectBillAmount = b.TotalAmount;
                            }
                        }
                        else
                        {
                            _lineItem.NotCollectBillCount = 1;
                            if (billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                            {
                                _lineItem.NotCollectBillAmount = b.TotalAmount;
                            }
                            else 
                            {
                                _lineItem.NotCollectBillAmount = b.TotalDebtAmount;
                            }
                        }                        
                    }

                    _lineCheckIn.Add(_lineItem);
                }
            }
            return _lineCheckIn;
        }


        public bool CreateBillBookCheckIn(BillBookCheckInInfo billBookCheckIn)
        {
            return _billBookCheckInService.CreateBillBookCheckIn(billBookCheckIn, Session.Branch.Id, Session.Terminal.Id);
        }

        public bool CheckIsFullyPaid(BillBookCheckInInfo billBookCheckIn)
        {
            return _billBookCheckInService.CheckIsFullyPaid(billBookCheckIn);
        }

        public bool CheckIsSubmitGroupSameDay(BillBookCheckInInfo billBookCheckIn)
        {
            return _billBookCheckInService.CheckIsSubmitGroupSameDay(billBookCheckIn);
        }
        #endregion
    }
}

