//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections.Generic;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookCheckInSummaryPreView : UserControl, IBillBookCheckInSummaryPreView
    {
        BillBookCheckInInfo _billBookCheckIn;
        public void SetData(BillBookCheckInInfo billBookCheckIn)
        {
            try
            {
                WaitingFormHelper.ShowWaitingForm();
                this._billBookCheckIn = billBookCheckIn;
                _presenter.WorkItem.State["BillBookCheckIn"] = billBookCheckIn;
                billBookIdText.Text = billBookCheckIn.BookId;
                BindData();
                WaitingFormHelper.HideWaitingForm();
                saveBt.Enabled = true;
                saveBt.Focus();

            }
            catch (Exception ex)
            {
                WaitingFormHelper.HideWaitingForm();
                throw ex;
            }
        }

        public BillBookCheckInSummaryPreView()
        {
            InitializeComponent();
            billBookSavedDetailGV.AutoGenerateColumns = false;
            summaryGv.AutoGenerateColumns = false;
        }


        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookCheckInSummaryPreViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            billBookSavedDetailGV.AutoGenerateColumns = false;
            summaryGv.AutoGenerateColumns = false;
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            _billBookCheckIn = new BillBookCheckInInfo();
        }

        private void BindData()
        {

            if (_billBookCheckIn.BookId.Length == ModuleConfigurationNames.BillBookIdLength)
                billBookIdText.Text = _billBookCheckIn.BookId.Substring(ModuleConfigurationNames.BranchCodeLength, ModuleConfigurationNames.BillBookLengthOnly);
            else
                billBookIdText.Text = _billBookCheckIn.BookId;

            branchIdText.Text = Session.Branch.Id;
            branchNameText.Text = Session.Branch.Name;
            receiveCountText.Text = _billBookCheckIn.ReceiveCount.ToString().PadLeft(2, '0');
            billBookTypeText.Text = _billBookCheckIn.BookOutType;
            agentIdText.Text = _billBookCheckIn.BillAgentId.Substring(_billBookCheckIn.BillAgentId.Length - ModuleConfigurationNames.AgentIdLength, ModuleConfigurationNames.AgentIdLength);
            agentNameText.Text = _billBookCheckIn.BillAgentName;
            billPaymentDateText.Text = _billBookCheckIn.BillPaymentDate == null ? String.Empty : _billBookCheckIn.BillPaymentDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
            returnedDateText.Text = _billBookCheckIn.ReturnDueDate == null ? String.Empty : _billBookCheckIn.ReturnDueDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
            paidDateText.Text = _billBookCheckIn.PaidDate == null ? String.Empty : _billBookCheckIn.PaidDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));

            //set data to grid
            List<BillBookLineCheckInInfo> _lineCheckIn = _presenter.GetBillBookLineCheckIn(_billBookCheckIn);
            billBookSavedDetailGV.DataSource = new List<BillBookLineCheckInInfo>();
            billBookSavedDetailGV.DataSource = _lineCheckIn;

            BindFooterData();

            // load summary data
            CalculateTotalCheckIn();
        }


        private void ClearData()
        {
            billBookIdText.Text = String.Empty;
            branchIdText.Text = String.Empty;
            branchNameText.Text = String.Empty;
            receiveCountText.Text = String.Empty;
            billBookTypeText.Text = String.Empty;
            agentIdText.Text = String.Empty;
            agentNameText.Text = String.Empty;
            billPaymentDateText.Text = String.Empty;
            returnedDateText.Text = String.Empty;
            paidDateText.Text = String.Empty;
            billBookSavedDetailGV.DataSource = new List<BillBookLineCheckInInfo>();

            billCollectCount.Text = String.Empty;
            collectAmount.Text = String.Empty;
            billCannotCollectCount.Text = String.Empty;
            cannotCollectAmount.Text = String.Empty;
        }

        private void SaveCheckIn()
        {
            DialogResult result = new DialogResult();
            if (ClearDebt())
            {
                result = MessageBox.Show("เนื่องจากเงินนำส่ง 30% มากกว่ายอดหนี้ที่เก็บได้ \nระบบจะทำการล้างหนี้ของลูกหนี้ทันที และจะไม่สามารถยกเลิกการตัดชำระสมุดจ่ายบิลได้ \nคุณต้องการบันทึกข้อมูลการตัดชำระสมุดจ่ายบิลใช่หรือไม่", "ยืนยันการตัดชำระสมุดจ่ายบิล/Group Invoicing", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            }
            else
            {
                result = MessageBox.Show("คุณต้องการบันทึกข้อมูลการตัดชำระสมุดจ่ายบิล/Group Invoicing ใช่หรือไม่", "ยืนยันการตัดชำระสมุดจ่ายบิล/Group Invoicing", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            }
            if (result == DialogResult.OK)
            {
                try
                {
                    //201802201353 Kanokwan.L 
                    //เช็คเพื่อป้องกันการตัดชำระมากกว่า 1 ครั้งในวันเดียวกัน เพราะหากตัดได้จะมีผลกระทบตอนยกเลิกจะไม่สามารถยกเลิกได้
                    bool isSubmitGroupInvoiceSameDay = _presenter.CheckIsSubmitGroupSameDay(_billBookCheckIn);
                    //เช็คเพื่อป้องกันกรณีที่ Cashier ตัดชำระซ้ำซ้อน
                    //bool isFullyPaid = _presenter.CheckIsFullyPaid(_billBookCheckIn);
                    if (isSubmitGroupInvoiceSameDay)
                    {
                        MessageBox.Show("ไม่สามารถตัดชำระสมุดจ่ายบิล/Group Invoicing ซ้ำภายในวันเดียวกันได้ กรุณายกเลิกการรับชำระก่อนหน้านี้ก่อนตัดชำระอีกครั้ง", "ผลการตัดชำระ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        _presenter.ClearBillBookCheckInForm();
                    }
                    //else if (isFullyPaid)
                    //{
                    //    MessageBox.Show("ไม่สามารถตัดชำระสมุดจ่ายบิล/Group Invoicing ได้ เนื่องจากมีรายการที่ผ่านการรับชำระไปเรียบร้อยแล้ว", "ผลการตัดชำระ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //    _presenter.ClearBillBookCheckInForm();
                    //}
                    else
                    {
                        WaitingFormHelper.ShowWaitingForm();
                        bool success = _presenter.CreateBillBookCheckIn(_billBookCheckIn);
                        WaitingFormHelper.HideWaitingForm();
                        if (success)
                        {
                            if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                            {
                                CheckInBillBookConditionInfoReport myConditionReport = new CheckInBillBookConditionInfoReport();
                                myConditionReport.AgentId = _billBookCheckIn.BillAgentId;
                                myConditionReport.Period = _billBookCheckIn.BookPeriod;
                                myConditionReport.BillBookId = _billBookCheckIn.BookId;
                                myConditionReport.PrintPreview = _billBookCheckIn.PrintPreview;
                                _presenter.LoadCAB03_01Clicked(myConditionReport);
                                _presenter.LoadCAB03_03Clicked(myConditionReport);
                                _presenter.LoadCAB03_04Clicked(myConditionReport);
                                _presenter.LoadCAB03_02Clicked(myConditionReport);
                            }

                            MessageBox.Show("บันทึกการตัดชำระสมุดจ่ายบิล /Group Invoicingเรียบร้อย", "ผลการตัดชำระ", MessageBoxButtons.OK, MessageBoxIcon.Question);
                            _presenter.ClearBillBookCheckInForm();
                        }
                    }

                }
                catch (Exception ex)
                {
                    WaitingFormHelper.HideWaitingForm();
                    Logger.WriteError(Logger.Module.AGENCY, "ตัดชำระสมุดจ่ายบิล /Group Invoicing ", ex.ToString());
                    ClientExceptionController.ShowExceptionDialog(EErrorInModule.Agency, ex);
                }
            }
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            SaveCheckIn();
        }

        private bool ClearDebt()
        {
            bool retVal = false;
            try
            {
                if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                {
                    decimal? totalNet = StringConvert.ToDecimal(collectAmount.Text);
                    decimal? advPaid = StringConvert.ToDecimal(money30Text.Text);
                    if (totalNet <= advPaid && (totalNet + advPaid) > 0)
                    {
                        retVal = true;
                    }
                }
            }
            catch (Exception ex)
            {
                WaitingFormHelper.HideWaitingForm();
                Logger.WriteError(Logger.Module.AGENCY, "ตัดชำระสมุดจ่ายบิล /Group Invoicing ", ex.ToString());
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Agency, ex);
            }
            return retVal;
        }
        private void CalculateTotalCheckIn()
        {
            try
            {
                int collectionCount = 0;
                decimal collectionAmount = 0;
                int cannotCollectionCount = 0;
                decimal cannotCollectionAmount = 0;
                decimal totalCash = 0;
                decimal totalCheque = 0;

                foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                {
                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                    {
                        if (b.AbsId == AbsIdEnum.COLLECTED)
                        {
                            collectionAmount += b.TotalAmount == null ? 0 : (decimal)b.TotalAmount;
                            collectionCount += 1;

                            if (b.PaidType == (int)PaidTypeEnum.CHEQUE)
                            {
                                totalCheque += b.TotalAmount == null ? 0 : (decimal)b.TotalAmount;
                            }
                            else
                            {
                                totalCash += b.TotalAmount == null ? 0 : (decimal)b.TotalAmount;
                            }
                        }
                        else
                        {
                            cannotCollectionAmount += b.TotalAmount == null ? 0 : (decimal)b.TotalAmount;
                            cannotCollectionCount += 1;
                        }
                    }
                    else  // Group invoice
                    {
                        cannotCollectionAmount += b.TotalDebtAmount.Value;
                        totalCash += b.PaidAmount.Value;
                        collectionAmount += b.PaidAmount.Value;

                        if (b.AbsId == AbsIdEnum.COLLECTED)
                        {
                            collectionCount += 1;
                        }
                        else
                        {
                            cannotCollectionCount += 1;
                        }
                    }
                }

                billCollectCount.Text = collectionCount.ToString();
                collectAmount.Text = collectionAmount.ToString("#,##0.00");

                billCannotCollectCount.Text = cannotCollectionCount.ToString();
                cannotCollectAmount.Text = cannotCollectionAmount.ToString("#,##0.00");

                decimal advPaid = _presenter.GetAdvPaidFromPOS(_billBookCheckIn.BookId);
                money30Text.Text = advPaid.ToString("#,##0.00");

                decimal totalNet = collectionAmount - advPaid > 0 ? collectionAmount - advPaid : 0;
                cashAmountText.Text = totalCash.ToString("#,##0.00");
                chequeAmountText.Text = totalCheque.ToString("#,##0.00");
                totalNetText.Text = totalNet.ToString("#,##0.00");
            }
            catch (Exception ex)
            {
                WaitingFormHelper.HideWaitingForm();
                Logger.WriteError(Logger.Module.AGENCY, "ตัดชำระสมุดจ่ายบิล /Group Invoicing", ex.ToString());
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Agency, ex);               
            }
        }

        private void ProcessEditButton()
        {
            this.ParentForm.Close();
            if ((billCannotCollectCount.Text == "0") || (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE))
            {
                _presenter.BillBookCheckInFirstButtonClicked(_billBookCheckIn);
            }
            else
            {
                _presenter.BillBookCheckInFinishButtonClicked(_billBookCheckIn);
            }
        }

        private void EditBotton_Click(object sender, EventArgs e)
        {
            ProcessEditButton();
        }

        private void billBookSavedDetailGV_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                string _branchId = Convert.ToString(billBookSavedDetailGV["BranchId", e.RowIndex].Value);
                string _mruId = Convert.ToString(billBookSavedDetailGV["MruId", e.RowIndex].Value);
                _presenter.ShowBillBookDetailButtonClicked(_billBookCheckIn, _branchId, _mruId);
            }
        }

        private void BindFooterData()
        {
            int? _sumCollectBillCount = 0;
            decimal? _sumCollectBillAmount = 0;
            int? _sumNotCollectBillCount = 0;
            decimal? _sumNotCollectBillAmount = 0;
            int? _sumThreeMonthBillCount = 0;
            int? _sumTotalCount = 0;
            decimal? _sumTotalAmount = 0;

            foreach (DataGridViewRow r in billBookSavedDetailGV.Rows)
            {
                _sumCollectBillCount += (int)r.Cells["CanCollect"].Value;
                _sumCollectBillAmount += (decimal)r.Cells["PaymentCanCollect"].Value;
                _sumNotCollectBillCount += (int)r.Cells["CannotCollect"].Value;
                _sumNotCollectBillAmount += (decimal)r.Cells["PaymentCannotCollect"].Value;
                _sumThreeMonthBillCount += (int)r.Cells["ThreeMonths"].Value;
                _sumTotalCount += (int)r.Cells["BillTotal"].Value;
                _sumTotalAmount += (decimal)r.Cells["PaymentTotal"].Value;

            }
            List<BillBookLineSummaryInfo> list = new List<BillBookLineSummaryInfo>();
            BillBookLineSummaryInfo row = new BillBookLineSummaryInfo();
            row.CountLineNo = billBookSavedDetailGV.Rows.Count;
            row.SumCollectBillCount = _sumCollectBillCount;
            row.SumCollectBillAmount = _sumCollectBillAmount;
            row.SumNotCollectBillCount = _sumNotCollectBillCount;
            row.SumNotCollectBillAmount = _sumNotCollectBillAmount;
            row.SumThreeMonthBillCount = _sumThreeMonthBillCount;
            row.SumTotalCount = _sumTotalCount;
            row.SumTotalAmount = _sumTotalAmount;
            list.Add(row);

            summaryGv.DataSource = list;
        }
    }
}

