//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Utilities;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookSlipPosingCheckInView : UserControl, IBillBookSlipPosingCheckInView
    {
     
        #region "Declare"
        private BillBookCheckInInfo _billBookCheckIn;
        private BindingList<BillBookCheckinDetailInfo> _billBookSelected;
        #endregion

        #region "Properties"
        #endregion

        #region "Auto Gen"
        public BillBookSlipPosingCheckInView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookSlipPosingCheckInViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        #endregion

        #region "Function"

        private void FillGVLineCount()
        {
            int i = 1;
            foreach (DataGridViewRow r in invoiceGV.Rows)
            {
                r.Cells[0].Value = i.ToString();
                i++;
            }
        }

        public void SetData(BillBookCheckInInfo billBookCheckIn)
        {
            _billBookCheckIn = new BillBookCheckInInfo();
            _billBookCheckIn = billBookCheckIn;
            ResetForm();
            BindData();
            _billBookSelected = new BindingList<BillBookCheckinDetailInfo>();
            //_presenter.WorkItem.State["BillBookDetailUpdate"] = _billBookCheckInDetail;
            UpdateCustomerPaidList(_billBookCheckIn.BillBookCheckInDetail);
            branchIdText.Focus();
        }

        public void BindData()
        {
            if (_billBookCheckIn.BookId != String.Empty)
            {
                if (_billBookCheckIn.BookId.Length == ModuleConfigurationNames.BillBookIdLength)
                    BillBookIdText.Text = _billBookCheckIn.BookId.Substring(ModuleConfigurationNames.BranchCodeLength, ModuleConfigurationNames.BillBookLengthOnly);
                else
                    BillBookIdText.Text = _billBookCheckIn.BookId;
                caIdText.Focus();
            }
        }

        public bool IsAlreadyExsit(string invId)
        {
            bool retVal = false;
            foreach (BillBookCheckinDetailInfo b in _billBookSelected)
            {
                if (b.InvoiceNo == invId)
                {
                    retVal = true;
                    break;
                }
            }
            return retVal;
        }

        public void AddDataToGridView(BillBookCheckinDetailInfo billBookDetail)
        {
            _billBookSelected.Add(billBookDetail);

            //update grid view
            invoiceGV.AutoGenerateColumns = false;
            invoiceGV.DataSource = _billBookSelected;
        }

        public void RemoveDataFromGridView(DataGridViewRow deleteRow)
        {
            invoiceGV.Rows.Remove(deleteRow);
        }

        private List<BillBookCheckinDetailInfo> UpdateBillBookDetail(List<BillBookCheckinDetailInfo> billBookDetail)
        {
            BindingList<BillBookCheckinDetailInfo> _billBookUpdate = _billBookSelected;
            foreach (BillBookCheckinDetailInfo b in billBookDetail)
            {
                if (b.AbsId != AbsIdEnum.COLLECTED) // เก็บเงินได้
                {
                    b.AbsId = AbsIdEnum.UNCOLLECTED; // default วางไม่ได้
                    if (notCollectrdo.Checked)
                    {
                        if (HaveInList(b.InvoiceNo, _billBookUpdate))
                        {
                            b.AbsId = AbsIdEnum.UNCOLLECTED; // วางบิลไม่ได้                          
                        }
                        else
                        {
                            b.AbsId = AbsIdEnum.PAST; // วางบิลได้
                            b.PmId = PmIdEnum.AGENCY; // ตัวแทนเก็บเงิน: ฝากวางบิล
                        }
                    }
                    else
                    {
                        if (HaveInList(b.InvoiceNo, _billBookUpdate))
                        {
                            b.AbsId = AbsIdEnum.PAST; // วางบิลได้
                            b.PmId = PmIdEnum.AGENCY; // ตัวแทนเก็บเงิน: ฝากวางบิล
                        }
                        else
                        {
                            b.AbsId = AbsIdEnum.UNCOLLECTED; // วางบิลไม่ได้                            
                        }
                    }
                }
            }
            return billBookDetail;
        }

        private void UpdateCustomerPaidList(List<BillBookCheckinDetailInfo> billBookCheckInDetail)
        {
            foreach (BillBookCheckinDetailInfo b in billBookCheckInDetail)
            {
                if (notCollectrdo.Checked)
                {
                    if (b.AbsId ==  AbsIdEnum.UNCOLLECTED)
                    {
                        AddDataToGridView(b);
                    }
                }
                else
                {
                    if (b.AbsId == AbsIdEnum.PAST)
                    {
                        AddDataToGridView(b);
                    }
                }
            }
        }

        private void UpdateDataGridView(bool canCollect)
        {
            if (canCollect)
            {
                foreach (DataGridViewRow row in invoiceGV.Rows)
                {
                    if (row.Cells["PmId"].Value.ToString() == "C")
                    {
                        invoiceGV.Rows.Remove(row);
                    }
                }
            }
            else
            {
                foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                {
                    if ((!_billBookSelected.Contains(b)) && (b.PmId == "C"))
                        _billBookSelected.Add(b);
                }
            }
        }

        private static void FreezeBand(DataGridViewBand band)
        {
            band.Frozen = true;
            DataGridViewCellStyle style = new DataGridViewCellStyle();
            style.BackColor = System.Drawing.Color.Gray;
            band.DefaultCellStyle = style;
            band.ReadOnly = true;
        }

        private void RemoveDataFromDataGridView(DataGridViewRow row)
        {
            if (row != null)
            {
                invoiceGV.Rows.Remove(row);
            }
            else if (invoiceGV.Rows.Count > 0)
            {
                MessageBox.Show("ไม่สามารถลบข้อมูลได้", "ผลการลบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ResetForm()
        {
            BillBookIdText.Clear();
            invoiceGV.DataSource = null;
            notCollectrdo.Checked = true;
            branchIdText.Clear();
            mruIdText.Clear();
            caIdText.Clear();
            billPeriodText.Clear();
        }

        private bool HaveInList(string invId, BindingList<BillBookCheckinDetailInfo> billBookDetailList)
        {
            bool retVal = false;
            foreach (BillBookCheckinDetailInfo bUpdate in billBookDetailList)
            {
                if (invId == bUpdate.InvoiceNo)
                {
                    retVal = true;
                    break;
                }
            }
            return retVal;
        }

        private void Finished()
        {
            //update all data 
            _billBookCheckIn.BillBookCheckInDetail = UpdateBillBookDetail(_billBookCheckIn.BillBookCheckInDetail);
            _presenter.BillBookSlipPosingRecordButtonClicked(_billBookCheckIn);
            this.ParentForm.Close();
        }
        #endregion        

        #region "Event"
        protected override void OnLoad(EventArgs e)
        {
            foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
            {
                if (b.AbsId != AbsIdEnum.COLLECTED)
                {
                    if (!IsAlreadyExsit(b.InvoiceNo))
                    {
                        branchIdText.Text = b.BranchId;
                        branchIdText.SelectAll();
                        break;
                    }
                }
            }
            branchIdText.SelectAll();
            branchIdText.Focus();

        }     

        private void recordBt_Click(object sender, EventArgs e)
        {
            Finished();
        }

        private void billPeriodText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string _branchId = branchIdText.Text;
                string _mruId = mruIdText.Text;
                string _caId = caIdText.Text;
                string _billPeriod = billPeriodText.Text;
                bool _isValid = false;

                foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                {
                    if ((b.BranchId == _branchId) && (b.MruId == _mruId) && (b.CaId == _caId) &&
                            (b.Period == _billPeriod) && (b.AbsId != AbsIdEnum.COLLECTED))
                    {
                        if (!IsAlreadyExsit(b.InvoiceNo))
                        {
                            AddDataToGridView(b);
                            _isValid = true;
                            break;
                        }
                    }
                }
                if (!_isValid)
                {
                    MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                //caIdText.Text = String.Empty;
                caIdText.Focus();
                caIdText.SelectAll();
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }

        private void invoiceGV_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                if (invoiceGV.Rows.Count == 0) return;
                IEnumerator ie = invoiceGV.SelectedRows.GetEnumerator();
                while (ie.MoveNext())
                {
                    DataGridViewRow r = (DataGridViewRow)ie.Current;
                    invoiceGV.Rows.Remove(r);
                }
                FillGVLineCount();
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }
        private void ClearButton_Click(object sender, EventArgs e)
        {
            RemoveDataFromDataGridView(invoiceGV.CurrentRow);
        }

        private void branchIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((branchIdText.Text.Length == ModuleConfigurationNames.BranchCodeLength) && (e.KeyCode == Keys.Enter))
            {
                mruIdText.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }

        private void mruIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((mruIdText.Text.Length == ModuleConfigurationNames.LineIdLength) && (e.KeyCode == Keys.Enter))
            {
                caIdText.Focus();
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }

        private void caIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (((caIdText.Text.Trim().Length == ModuleConfigurationNames.CustomerNoLength) || caIdText.Text.Length == (ModuleConfigurationNames.CustomerNoLength - 1)) 
                        && (e.KeyCode == Keys.Enter))
            {
                if (caIdText.Text.Trim().Length == (ModuleConfigurationNames.CustomerNoLength - 1))
                {
                    caIdText.Text = String.Format("0{0}", caIdText.Text.Trim());
                }
                billPeriodText.Focus();
            }
            else  if (e.KeyCode == Keys.Enter)
            {
                bool _isFound = false;                
                if (caIdText.Text.Length == ModuleConfigurationNames.CustomerBarCodeLength)
                {
                    string input = caIdText.Text.Trim();
                    BarcodeHelper bar = new BarcodeHelper(input);

                    //extract bracnhId and caId 
                    string branchId = bar.BranchId;
                    string caId = bar.CaId;
                    string mruId = bar.Mru[1];
                    string period = bar.Period;

                    foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                    {
                        if ((b.BranchId == branchId) && (b.MruId == mruId) && (b.CaId == caId) &&
                                (b.Period == period) && (b.AbsId != AbsIdEnum.COLLECTED))
                        {
                            _isFound = true;
                            if (!IsAlreadyExsit(b.InvoiceNo))
                            {
                                AddDataToGridView(b);
                            }
                            else
                            {
                                MessageBox.Show("มีการระบุข้อมูลผู้ใช้ไฟฟ้านี้แล้ว", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                caIdText.Clear();
                            }
                            break;
                        }
                    }
                    if (!_isFound)
                    {
                        MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    caIdText.Clear();
                    caIdText.Focus();                   
                }
                else if ((branchIdText.Text.Trim() != String.Empty) && (mruIdText.Text.Trim() != String.Empty) && (caIdText.Text.Trim() != String.Empty) && (billPeriodText.Text.Trim() != String.Empty))
                {
                    string branchId = branchIdText.Text.Trim();
                    string caId = caIdText.Text.Trim() ;
                    string mruId = mruIdText.Text.Trim();
                    string period = billPeriodText.Text.Trim();

                    foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                    {
                        if ((b.BranchId == branchId) && (b.MruId == mruId) && (b.CaId == caId) &&
                                (b.Period == period) && (b.AbsId != AbsIdEnum.COLLECTED))
                        {
                            _isFound = true;
                            if (!IsAlreadyExsit(b.InvoiceNo))
                            {
                                AddDataToGridView(b);
                            }
                            else
                            {
                                MessageBox.Show("มีการระบุข้อมูลผู้ใช้ไฟฟ้านี้แล้ว", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                caIdText.Clear();
                            }
                            break;
                        }
                    }
                    if (!_isFound)
                    {
                        MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    caIdText.Clear();
                    caIdText.Focus();          
                }
                else
                {
                    MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    caIdText.Clear();
                }
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }       

        private void BillBookIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                branchIdText.Focus();
                branchIdText.SelectAll();
            }
            else if (e.KeyCode == Keys.F12)
            {
                //next
                Finished();
            }
        }

        #endregion     
    }
}

