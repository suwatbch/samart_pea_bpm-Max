//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using System.Collections;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookStatusView : UserControl, IBillBookStatusView
    {
        private List<BillbookInfoReprint> _billBookList;
        private List<string> _selectedBillbook;

        public BillBookStatusView()
        {
            InitializeComponent();
            billbookGv.AutoGenerateColumns = false;
            _selectedBillbook = new List<string>();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookStatusViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            //start loading billbook with status not cut and not cancel            
            _presenter.LoadBillBookList(BookSearchStatusEnum.NORMAL);
        }

        public List<BillbookInfoReprint> BillBookList
        {
            set {
                _billBookList = value;
                FillBillBookList();             
            }
        }

        private void FillBillBookList()
        {
            if (_billBookList.Count > 0)
            {
                billbookGv.DataSource = _billBookList;
            }
            else 
            {
                WaitingFormHelper.HideWaitingForm();
                MessageBox.Show(null, "ไม่พบสมุดจ่ายบิล", "การค้นหา", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                billbookGv.DataSource = new List<BillbookInfoReprint>();
            }
        }

        private void DisableBillCollectReprintReports(bool all)
        {
            cantCollectRep.Enabled = false;
            cantCollectRep.Checked = false;
            sumCollectRep.Enabled = false;
            sumCollectRep.Checked = false;

            if (all)
            {
                billBookDetailRep.Enabled = false;
                billBookDetailRep.Checked = false;
                billBookRep.Enabled = false;
                billBookRep.Checked = false;
            }
            else
            {
                billBookDetailRep.Enabled = true;
                billBookRep.Enabled = true;
            }
        }

        private void viewAll_CheckedChanged(object sender, EventArgs e)
        {
            _selectedBillbook.Clear();
            if (viewAll.Checked)
            {                
                _presenter.LoadBillBookList(BookSearchStatusEnum.ALL);
                DisableBillCollectReprintReports(true);
                printBt.Enabled = false;
            }
        }

        private void viewCut_CheckedChanged(object sender, EventArgs e)
        {
            _selectedBillbook.Clear();
            if (viewCut.Checked)
            {                
                _presenter.LoadBillBookList(BookSearchStatusEnum.CUT);
                billBookRep.Enabled = true;
                billBookDetailRep.Enabled = true;
                cantCollectRep.Enabled = true;
                sumCollectRep.Enabled = true;
                if (billBookRep.Checked || billBookDetailRep.Checked || cantCollectRep.Checked || sumCollectRep.Checked)
                    printBt.Enabled = true;
                else
                    printBt.Enabled = false;

            }
        }

        //normal
        private void viewNotCut_CheckedChanged(object sender, EventArgs e)
        {
            _selectedBillbook.Clear();
            if (viewNotCut.Checked)
            {               
                _presenter.LoadBillBookList(BookSearchStatusEnum.NORMAL);
                DisableBillCollectReprintReports(false);
                if (billBookRep.Checked || billBookDetailRep.Checked)
                    printBt.Enabled = true;
                else
                    printBt.Enabled = false;
            }
        }

        private void viewCancel_CheckedChanged(object sender, EventArgs e)
        {
            _selectedBillbook.Clear();
            if (viewCancel.Checked)
            {                
                _presenter.LoadBillBookList(BookSearchStatusEnum.CANCEL);
                DisableBillCollectReprintReports(true);
                printBt.Enabled = false;
            }
        }

        private void billbookIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (billbookIdText.Text != "")
                {
                    BillbookInfoReprint searchCondition = new BillbookInfoReprint() ;
                    if (viewCut.Checked)
                    {
                        searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.CUT;
                    }
                    else if (viewNotCut.Checked)
                    {
                        searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.NORMAL;
                    }
                    else if (viewCancel.Checked)
                    {
                        searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.CANCEL;
                    }
                    else
                    {
                        searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.ALL;
                    }

                    searchCondition.BillBookId = billbookIdText.Text;                    
                    _presenter.LoadBillBookListByKeyword(searchCondition);
                }
            }
        }

        private void findBt_Click(object sender, EventArgs e)
        {
            if (billbookIdText.Text != "")
            {
                BillbookInfoReprint searchCondition = new BillbookInfoReprint();
                if (viewCut.Checked)
                {
                    searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.CUT;
                }
                else if (viewNotCut.Checked)
                {
                    searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.NORMAL;
                }
                else if (viewCancel.Checked)
                {
                    searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.CANCEL;
                }
                else 
                {
                    searchCondition.BookSearchStatus = (int)BookSearchStatusEnum.ALL;
                }

                searchCondition.BillBookId = billbookIdText.Text.Trim();
                _presenter.LoadBillBookListByKeyword(searchCondition);
            }
        }

        private void printBt_Click(object sender, EventArgs e)
        {
            if (_selectedBillbook.Count == 0)
            {
                MessageBox.Show(null, "กรุณาเลือกรายการสมุดจ่ายบิลที่จะพิมพ์ซ่อม", "เลือกรายการ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (Authorization.IsAuthorized(SecurityNames.ReprintBillbookReport, true))
            {
                bool[] printFlag = new bool[5];
                ArrayList parem = new ArrayList();

                if (billBookRep.Checked && billBookRep.Enabled)
                    printFlag[0] = true;
                else
                    printFlag[0] = false;

                if (billBookDetailRep.Checked && billBookDetailRep.Enabled)
                    printFlag[1] = true;
                else
                    printFlag[1] = false;

                if (cantCollectRep.Checked && cantCollectRep.Enabled)
                    printFlag[2] = true;
                else
                    printFlag[2] = false;

                if (sumCollectRep.Checked && sumCollectRep.Enabled)
                    printFlag[3] = true;
                else
                    printFlag[3] = false;

                if (preview.Checked && preview.Enabled)
                    printFlag[4] = true;
                else
                    printFlag[4] = false;

                parem.Add(_selectedBillbook);
                parem.Add(printFlag);
                _presenter.Reprint(parem);
            }
        }

        private void billbookGv_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                billbookGv.EndEdit();
                bool check = Convert.ToBoolean(billbookGv["Rs", e.RowIndex].Value);
                string bookId =  billbookGv["BookId", e.RowIndex].Value.ToString();
                if (check)
                {
                    if (!_selectedBillbook.Contains(bookId))
                        _selectedBillbook.Add(bookId);
                }
                else
                {
                    if (_selectedBillbook.Contains(bookId))
                        _selectedBillbook.Remove(bookId);
                }
            }
        }       

        private bool IsNoChcked()
        {
            return !billBookRep.Checked && !billBookDetailRep.Checked && !cantCollectRep.Checked && !sumCollectRep.Checked;
        }

        private void billBookRep_CheckedChanged(object sender, EventArgs e)
        {
            if (billBookRep.Checked)
                printBt.Enabled = true;
            else if (IsNoChcked())
                printBt.Enabled = false;
        }

        private void billBookDetailRep_CheckedChanged(object sender, EventArgs e)
        {
            if (billBookDetailRep.Checked)
                printBt.Enabled = true;
            else if (IsNoChcked())
                printBt.Enabled = false;
        }

        private void cantCollectRep_CheckedChanged(object sender, EventArgs e)
        {
            if (cantCollectRep.Checked)
                printBt.Enabled = true;
            else if (IsNoChcked())
                printBt.Enabled = false;
        }

        private void sumCollectRep_CheckedChanged(object sender, EventArgs e)
        {
            if (sumCollectRep.Checked)
                printBt.Enabled = true;
            else if (IsNoChcked())
                printBt.Enabled = false;
        }


    }
}

