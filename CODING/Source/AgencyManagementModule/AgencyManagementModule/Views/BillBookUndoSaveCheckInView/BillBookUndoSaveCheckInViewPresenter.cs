//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;

using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;

using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    public class BillBookUndoSaveCheckInViewPresenter : Presenter<IBillBookUndoSaveCheckInView>    
    {
        IAgencyCommonService _agencyCommonService;
        IBillbookCheckInService _billBookCheckInService;
        ICommissionMgtService _commissionMgtService;

        [InjectionConstructor]
        public BillBookUndoSaveCheckInViewPresenter([ServiceDependency] IBillbookCheckInService billBookCheckInService, IAgencyCommonService agencyCommonService,
                        ICommissionMgtService commissionMgtService)
		{
            _agencyCommonService = agencyCommonService;
            _billBookCheckInService = billBookCheckInService;
            _commissionMgtService = commissionMgtService;
		}

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
            ((UserControl)View).ParentForm.Text = "ยกเลิกการตัดชำระสมุดจ่ายบิล";
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {           
            base.CloseView();
        }

        [EventPublication(EventTopicNames.AgencyBillBookCheckInClearForm, PublicationScope.Global)]
        public event EventHandler<EventArgs> ClearBillBookCheckInFormHandler;
        public void ClearBillBookCheckInForm()
        {
            if (ClearBillBookCheckInFormHandler != null)
                ClearBillBookCheckInFormHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.SavedBillBookIdTextCommitted, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> SavedBillBookIdTextChangeCommittedHandler;
        public void SavedBillBookIdTextChangeCommitted(string billBookId)
        {
            if (SavedBillBookIdTextChangeCommittedHandler != null)
                SavedBillBookIdTextChangeCommittedHandler(this, new EventArgs<string>(billBookId));
        }

        public BillBookCheckInInfo BillBookIdTextChangeCommitted(string billBookId)
        {           
            BillBookCheckInInfo _billbook = _billBookCheckInService.GetBillBookCheckInCancel(billBookId);
            return _billbook;
        }

        public List<BillBookLineCheckInInfo> GetBillBookLineCheckIn(BillBookCheckInInfo biilBookCheckIn)
        {
            List<BillBookLineCheckInInfo> _lineCheckIn = new List<BillBookLineCheckInInfo>();
            foreach (BillBookCheckinDetailInfo b in biilBookCheckIn.BillBookCheckInDetail)
            {
                bool isFound = false;
                foreach (BillBookLineCheckInInfo l in _lineCheckIn)
                {
                    if (l.MruId == b.MruId)
                    {
                        isFound = true;
                        if (b.AbsId == AbsIdEnum.COLLECTED)
                        {
                            l.CollectBillCount += 1;
                            l.CollectBillAmount += b.TotalAmount;
                        }
                        else
                        {
                            if (b.AbsId == AbsIdEnum.PAST)
                            {
                                string _billMonth = b.Period.Substring(0, 2);
                                string _billYear = b.Period.Substring(3, 4);
                                string _currentDate = Session.BpmDateTime.Now.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                                DateTime _billDate = new DateTime(Convert.ToInt32(_billYear), Convert.ToInt32(_billMonth), 1);
                                string _currMonth = _currentDate.Substring(3, 2);
                                string _currYear = _currentDate.Substring(6, 4);
                                DateTime _currDate = new DateTime(Convert.ToInt32(_currYear), Convert.ToInt32(_currMonth), 1);
                                
                                TimeSpan _ts = new TimeSpan(90, 0, 0, 0);
                                
                                if (_currDate - _billDate > _ts)
                                {
                                    l.ThreeMonthBillCount += 1;
                                    l.ThreeMonthAmount += b.TotalAmount;
                                }
                                else
                                {
                                    l.NotCollectBillCount += 1;
                                    l.NotCollectBillAmount += b.TotalAmount;
                                }
                            }
                            else
                            {
                                l.NotCollectBillCount += 1;
                                l.NotCollectBillAmount += b.TotalAmount;
                            }
                        }
                    }
                }
                if (!isFound)
                {
                    //TO DO: find submitdate

                    BillBookLineCheckInInfo _lineItem = new BillBookLineCheckInInfo();
                    _lineItem.BranchId = b.BranchId;
                    _lineItem.MruId = b.MruId;
                    _lineItem.SubmitDate = Session.BpmDateTime.Now;


                    if (b.AbsId == AbsIdEnum.COLLECTED)
                    {
                        _lineItem.CollectBillCount = 1;
                        _lineItem.CollectBillAmount = b.TotalAmount;
                    }
                    else
                    {
                        _lineItem.NotCollectBillCount = 1;
                        _lineItem.NotCollectBillAmount = b.TotalAmount;
                    }
                    _lineCheckIn.Add(_lineItem);
                }
            }
            return _lineCheckIn;
        }

        public bool CancelBillBookCheckIn(BillBookCheckInInfo billBookCheckIn)
        {
           return _billBookCheckInService.CancelBillBookCheckIn(billBookCheckIn);
        }

        public bool IsBillBookCalculated(string billbookId)
        {
            return _commissionMgtService.IsBillBookCalculated(billbookId);
        }

        public string GetContractType(string ctId)
        {
            try
            {
                return _agencyCommonService.GetContractTypeList(ctId);
            }
              catch (Exception ex)
            {
                return "ไม่พบข้อมูล";
            }
        }        
    }
}

