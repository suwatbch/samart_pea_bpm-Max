//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.ComponentModel;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Utilities;
using System.Globalization;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookManagementView : UserControl, IBillBookManagementView
    {
        private string _agentId;
        private IBillBookSearchView _parentView;
        private string _bookValidPeaCode;
        private List<HashInfo> _bookValidLineList;
        private Hashtable _bookValidBranchList;
        private List<PeaInfo> _branchList;
        private bool _allowToLoadChild;
        private string[] _bookCreationDefaultRow = { "", "A00000", "9999", "1", "1" };
        private string [] _bookExtraDefaultRow = { "", "------", "----", "000000000000" };
        private BillBookItemListInputInfo _bookInputList;
        private string _latestPeaCode;
        private string _latestLineId;
        private bool _rmExtInputLine = false;
        private bool _isAgencyBillbook = true;
        private DateTimeFormatInfo _th_dt;
        private bool _billCreationOnEdit = false;
        private bool _billExtraOnEdit = false;
        private int _creationIndex;
        private int _extraIndex;
        private bool _isEditBillBook = false;

        public BillBookItemListInputInfo BookInputList
        {
            get { return _bookInputList; }
            set { _bookInputList = value; }
        }

        public void ClearInput()
        {
            _bookInputList.HeaderInfo.Clear();
            _bookInputList.CreationItemList.Clear();
            _bookInputList.ExtraItemExp.Clear();
            _bookInputList.ExtraItemPlus.Clear();
            _bookInputList.ExtraItemCurExp.Clear();
            _bookInputList.ExtraItemCurPlus.Clear();


            if (_bookValidLineList != null)
                _bookValidLineList.Clear();

            _bookInputList.IsEditBillBook = false;
            _isEditBillBook = false;

        }

        public IBillBookSearchView ParentView
        {
            set { _parentView = value; }
        }

        public string BookValidPeaCode 
        {
            set { 
                _bookValidPeaCode = value;
            }

            get { return _bookValidPeaCode; }
        }

        public bool IsAgencyBillBook
        {
            set { _isAgencyBillbook = value; }
        }

        public List<HashInfo> BookValidLineList 
        {
            set {
                _bookValidLineList = value;                
            }
            get { return _bookValidLineList; }
        }

        public List<PeaInfo> BookValidBranchList
        {
            set { 
                _branchList = value;
                foreach (PeaInfo p in _branchList)
                    _bookValidBranchList.Add(p.Id.ToUpper(), null);
            }

            get { return _branchList; }
        }

        public Cursor MgtViewCursor
        {
            set { this.Cursor = value; }  
        }

        public void SetCancelBillBook(bool enable)
        {
            addNewBillLineBt.Enabled = !enable;
            
            deleteBt.Enabled = !enable;
            printBt.Enabled = !enable;
            billBookCreationGV.ReadOnly = enable;
            billExceptionGV.ReadOnly = enable;
            _isEditBillBook = enable;

            if (!enable)
            {
                if (billExceptionGV.DataSource == null)
                    addNewLineUserNoBt.Enabled = false;
                else
                    addNewLineUserNoBt.Enabled = true;
            }
            else
            {
                addNewLineUserNoBt.Enabled = false;
            }
        }
        
        public void PrintBt(bool enable)
        {
            printBt.Enabled = enable;
        }

        //For Period Validation
        public void SaveEnable(bool enable)
        {
            addNewBillLineBt.Enabled = enable;
            deleteBt.Enabled = enable;
            findBt.Enabled = enable;
            printBt.Enabled = enable;
        }

        public BillBookManagementView()
        {
            InitializeComponent();

            _bookInputList = new BillBookItemListInputInfo();
            billBookCreationGV.ChildGridView = billExceptionGV;
            billBookCreationGV.GridViewRowFormat = _bookCreationDefaultRow;
            billBookCreationGV.BillBookItems = _bookInputList.CreationItemList;
            billBookCreationGV.ExtraItemExp = _bookInputList.ExtraItemExp;
            billBookCreationGV.ExtraItemPlus = _bookInputList.ExtraItemPlus;
            billBookCreationGV.ExtraItemCExp = _bookInputList.ExtraItemCurExp;
            billBookCreationGV.ExtraItemCPlus = _bookInputList.ExtraItemCurPlus;
            billBookCreationGV.IsParent = true;
            billBookCreationGV.ParentControl = this;
            
            billExceptionGV.ParentGridView = billBookCreationGV;
            billExceptionGV.GridViewRowFormat = _bookExtraDefaultRow;            
            billExceptionGV.IsParent = false;
            billExceptionGV.ParentControl = this;

            billBookCreationGV.AutoGenerateColumns = false;
            billExceptionGV.AutoGenerateColumns = false;

            _bookValidBranchList = new Hashtable();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
            _isEditBillBook = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookManagementViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        public bool AllowToLoadChild
        {
            set { _allowToLoadChild = value; }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.LoadBranches();
        }

        public bool IsValidBookHeader(BillBookHeaderInfo header)
        {
            string validPeriod1 = "";
            string validPeriod2 = "";
            string validPeriod3 = "";
            if (_th_dt.NativeCalendarName != "พุทธศักราช")
            {
                validPeriod1 = Session.BpmDateTime.Now.AddYears(543).ToString("MM/yyyy", _th_dt);
                validPeriod2 = Session.BpmDateTime.Now.AddYears(543).AddMonths(-1).ToString("MM/yyyy", _th_dt);
                validPeriod3 = Session.BpmDateTime.Now.AddYears(543).AddMonths(-2).ToString("MM/yyyy", _th_dt);
            }
            else
            {
                validPeriod1 = Session.BpmDateTime.Now.ToString("MM/yyyy", _th_dt);
                validPeriod2 = Session.BpmDateTime.Now.AddMonths(-1).ToString("MM/yyyy", _th_dt);
                validPeriod3 = Session.BpmDateTime.Now.AddMonths(-2).ToString("MM/yyyy", _th_dt);
            }
            //WaitingFormHelper.HideWaitingForm();

            if (header.AgentId == null || header.Period == null)
            {
                _parentView.StartInput();
                MessageBox.Show(null, "กรุณาป้อนข้อมูลส่วนหัวของสมุดให้ครบ ", "ข้อมูลไม่ครบ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else if ((header.Period != validPeriod1) && (header.Period != validPeriod2) && (header.Period != validPeriod3))
            {
                _parentView.StartInput();
                MessageBox.Show(null, "ระบบสามารถออกสมุดจ่ายบิลได้เฉพาะเดือนปัจจุบันเท่านั้น ", "ข้อมูลไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            //WaitingFormHelper.ShowWaitingForm();
            return true;
        }

        private void findBt_Click(object sender, EventArgs e)
        {
            if (billBookCreationGV.Rows.Count > 0)
            {
                _presenter.FineButtonClicked();
            }
        }

        private void RefreshRowCount()
        {
            for (int i = 0; i < billBookCreationGV.Rows.Count; i++)
            {
                int seq = i + 1;
                billBookCreationGV.Rows[i].Cells["Sequence"].Value = seq.ToString();
            }
        }

        private void billBookCreationGV_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            RefreshRowCount();
            //check calling bill and clear child
            billBookCreationGV.CleanupUnusedChild();
        }

        private void billBookCreationGV_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            RefreshRowCount();
        }

        private void RefreshExtraGvRowCount()
        {
            for (int i = 0; i < billExceptionGV.Rows.Count; i++)
            {
                int seq = i + 1;
                billExceptionGV.Rows[i].Cells["SeqNo"].Value = seq.ToString();
            }
        }

        private void billExceptionGV_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            RefreshExtraGvRowCount();            
        }

        private void billExceptionGV_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            RefreshExtraGvRowCount();
            _rmExtInputLine = false;
            addNewLineUserNoBt.Enabled = true;
        }

        public void MoveCursorToEnd()
        {
            if (billBookCreationGV.RowCount > 0)
            {
                billBookCreationGV.CurrentCell = billBookCreationGV.Rows[billBookCreationGV.RowCount - 1].Cells["PeaCode"];
                billBookCreationGV.BeginEdit(true);
            }
        }

        public void MoveCursorToStart()
        {
            billBookCreationGV.Focus();

            if (billBookCreationGV.Rows.Count == 0)
                billBookCreationGV.NewRow();

            billBookCreationGV.CurrentCell = billBookCreationGV.Rows[0].Cells["PeaCode"];
            billBookCreationGV.BeginEdit(true);
        }

        private void CreateBillCreationRow()
        {
            billBookCreationGV.NewRow();
            billBookCreationGV.CurrentCell = billBookCreationGV.Rows[billBookCreationGV.RowCount - 1].Cells["PeaCode"];
            billBookCreationGV.BeginEdit(true);
        }

        private void CreateBillExtraRow()
        {
            if (billExceptionGV.Rows.Count == 0)
                billBookCreationGV.NewChildRow();
            else 
            {
                string branchId = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["NPeaCode"].Value.ToString();
                string lineId = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["NLineId"].Value.ToString();
                string number = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["Number"].Value.ToString();
                string caId = null;
                if (ValidateInput(number, ref caId, ref branchId, ref lineId))
                    billBookCreationGV.NewChildRow();
                else
                {
                    billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Selected = true;
                    billExceptionGV.CurrentCell = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["Number"];
                    billExceptionGV.BeginEdit(true);
                }
            }

            billExceptionGV.Rows[billExceptionGV.RowCount - 1].Cells["NPeaCode"].ReadOnly = true;
            billExceptionGV.Rows[billExceptionGV.RowCount - 1].Cells["NLineId"].ReadOnly = true;

        }

        private void addNewBillLineBt_Click(object sender, EventArgs e)
        {
            //remove the last row of billExceptionalGv
            if (!_rmExtInputLine && billExceptionGV.Rows.Count > 0)
            {
                if (billExceptionGV[1, billExceptionGV.Rows.Count - 1].ToString().Contains("--"))
                {
                    billExceptionGV.Rows.RemoveAt(billExceptionGV.Rows.Count - 1);
                    _rmExtInputLine = true;
                }
            }

            if (billBookCreationGV.CurrentRow == null)
            {
                CreateBillCreationRow();
                return;
            }

            string branchId = billBookCreationGV.CurrentRow.Cells["PeaCode"].Value.ToString();
            string lineId = billBookCreationGV.CurrentRow.Cells["LineId"].Value.ToString();

            //check for duplicated row 
            bool found = false;
            for(int i=0; i< billBookCreationGV.BillBookItems.Count; i++)
            {
                if (i == billBookCreationGV.CurrentRow.Index) continue;  //ignore current row
                if (string.Equals(billBookCreationGV.BillBookItems[i].PeaCode, branchId, StringComparison.CurrentCultureIgnoreCase)
                                    && billBookCreationGV.BillBookItems[i].LineId == lineId)
                {
                    MessageBox.Show(null, "การไฟฟ้าหรือสายการเก็บเงินที่ป้อนซ้ำ  ", "ป้อนค่าซ้ำ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    billBookCreationGV.CurrentCell = billBookCreationGV.CurrentRow.Cells["PeaCode"];
                    billBookCreationGV.BeginEdit(true);
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                //add default and intiate cursor
                CreateBillCreationRow();
            }
        }

        public string[] FindBranchMruOfCA(string caId)
        {
            return _presenter.GetMruId(caId);
        }

        public bool IsDuplicatedCa(string caId, int index)
        {
            //if (count == 1) means itselft
            int count = 0;
            foreach (BillBookCreationExtraInfo extra in _bookInputList.BookExtraItems)
            {
                if (extra.Number == caId)
                    count++;                
            }

            if (count > 1) return true;
            else return false;
        }

        public bool ValidateInput(string input, ref string cId, ref string bId, ref string mId )
        {
            bool ret = false;

            if (input != null && input.Length == 32) //barcode
            {
                //extract bracnhId and caId 
                string front = input.Substring(0, 3);
                string branchId = string.Format("{0}{1}", Utilities.TextUtility.MapBranch(front), input.Substring(3, 5));

                string caId = input.Substring(8, 12);
                string[] bret = _presenter.GetMruId(caId); //get mruId from database

                //if (! string.Equals(branchId, bret[0], StringComparison.CurrentCultureIgnoreCase))
                //{
                //    MessageBox.Show(null, "ข้อมูลบิลมีสาขาไม่ตรงกับสาขาที่ป้อนไว้", "บิลไม่ตรง", MessageBoxButtons.OK, MessageBoxIcon.Error);
                //    return false;
                //}

                bId = bret[0];
                mId = bret[1];
                cId = caId;
                ret = true;
            }
            else if (input != null && input.Length == 12) //caId
            {
                cId = input; 
                ret = true;
            }
            else 
            {
                MessageBox.Show(null, "ป้อนข้อมูลรหัสผู้ใช้ไฟฟ้าไม่ถูกต้อง", "ป้อนผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            return ret;
        }

        public void ShowBillInputStatus(int filterType)
        {
            if (filterType == 1)
                _presenter.ShowStatusText("Ready");
            else if (filterType == 2)
                _presenter.ShowStatusText("รายการขวามือ - กำลังป้อน 'ยกเว้น'");
            else if (filterType == 3)
                _presenter.ShowStatusText("รายการขวามือ - กำลังป้อน 'ออกเก็บ'");
            else if (filterType == 4)
                _presenter.ShowStatusText("รายการขวามือ - กำลังป้อน 'บิลเดือนปัจจุบัน + เดือนเก่าป้อนยกเว้น'");
            else if (filterType == 5)
                _presenter.ShowStatusText("รายการขวามือ - กำลังป้อน 'บิลเดือนปัจจุบัน + เดือนเก่าป้อนออกเก็บ'");
            else
                _presenter.ShowStatusText("Ready");
        }


        private void addNewLineUserNoBt_Click(object sender, EventArgs e)
        {
            if (billBookCreationGV.Rows.Count > 0)
            {
                CreateBillExtraRow();
                _allowToLoadChild = true;
            }
        }


        public void EnableBillBookCreating(string agentId)
        {
            addNewBillLineBt.Enabled = true;
            addNewLineUserNoBt.Enabled = true;
            _agentId = agentId;
            
            //deleteBt.Enabled = false;
            //findBt.Enabled = false;
            //printBt.Enabled = false;
        }

        private void clearBt_Click(object sender, EventArgs e)
        {
            _presenter.ResetBillBook();
            addNewLineUserNoBt.Enabled = false;
            //deleteBt.Enabled = false;
            //printBt.Enabled = false;

            //if (_bookValidLineList != null)
            //    _bookValidLineList.Clear();

            //_bookInputList.HeaderInfo.Clear();
            //_bookInputList.CreationItemList.Clear();
            //_presenter.ClearBookScreenHeaderClicked();
            //_presenter.ClearExceptionalBills();
        }

        public void PrintBook()
        {
            try
            {
                if (!_parentView.CheckAdvPaymentDt() || !_parentView.CheckReturnDt())
                {
                    return;
                }


                if (_bookInputList.CreationItemList.Count == 0)
                {
                    MessageBox.Show(null, "กรุณาป้อนข้อมูลบิลที่จะจัดทำสมุด", "ไม่พบบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    _presenter.FocusBillPeriod();
                    return;
                }

                BillBookHeaderInfo bookHeader = _parentView.GetBillBookHeader();
                if (!IsValidBookHeader(bookHeader))
                    return;

                _bookInputList.HeaderInfo = bookHeader;
                _presenter.BillBookSaveRequestClicked(_bookInputList);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ข้อผิดพลาด");
            }
        }

        private void printBt_Click(object sender, EventArgs e)
        {
            PrintBook();
        }

        public void FillPastBillBookInputSet(BillBookItemListInputInfo bookItemList, bool freeze)
        {
            _bookInputList = bookItemList;
            billBookCreationGV.BillBookItems = bookItemList.CreationItemList;
            addNewBillLineBt.Enabled = false;
            addNewLineUserNoBt.Enabled = false;
            deleteBt.Enabled = false;
            findBt.Enabled = true;
            _isEditBillBook = freeze;

            if (bookItemList.EnableSavePrint)
                printBt.Enabled = true;
            else
                printBt.Enabled = false;

        }


        private void deleteBt_Click(object sender, EventArgs e)
        {
            //remove last row b/c it is prompt input row
            if (_billExtraOnEdit)
            {
                billExceptionGV.EndEdit();
                //don't remove last row
                if (billExceptionGV.RowCount == 0 || _extraIndex == billExceptionGV.Rows.Count - 1) return;

                billExceptionGV.Rows.RemoveAt(_extraIndex);
                RefreshExtraGvRowCount();

                if (billExceptionGV.Rows.Count > 0)
                {
                    billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Selected = true;
                    billExceptionGV.CurrentCell = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["Number"];
                    billExceptionGV.BeginEdit(true);
                }
            }
            else if (_billCreationOnEdit)
            {
                billBookCreationGV.EndEdit();
                if (billBookCreationGV.Rows.Count == 0) return;

                billBookCreationGV.Rows.RemoveAt(_creationIndex);
                RefreshRowCount();

                if (billBookCreationGV.Rows.Count > 0)
                {
                    billBookCreationGV.Rows[billBookCreationGV.Rows.Count - 1].Selected = true;
                    billBookCreationGV.CurrentCell = billBookCreationGV.Rows[billBookCreationGV.Rows.Count - 1].Cells["PeaCode"];
                    billBookCreationGV.BeginEdit(true);
                }
            }
        }

        public bool IsValidBranch(string branchId)
        {
            if (_bookValidBranchList.Contains(branchId.ToUpper()))
                return true;
            else
            {
                MessageBox.Show(null, "ไม่พบสาขาการไฟฟ้าที่กำหนด", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
        }


        public bool IsLineAssignedToAgent(string branchId, string lineId)
        {
            if (_bookValidLineList != null && _agentId != null)
            {
                bool found = false;
                foreach (HashInfo h in _bookValidLineList)
                {
                    if (string.Equals(h.Id, branchId, StringComparison.CurrentCultureIgnoreCase) && h.Value == lineId)
                    {
                        found = true;
                        break;
                    }
                }

                if (found || !_isAgencyBillbook)
                    return true;
                else
                {
                    DialogResult dlg = MessageBox.Show(null, "สายการเก็บเงินนี้ไม่ได้ถูกกำหนดให้กับตัวแทนหรือไม่ได้อยู่ภายใต้ พบช. ที่ระบุ \nกดปุ่ม Yes เพื่อกำหนดสายให้กับตัวแทนนี้ชั่วคราว", "ไม่พบสาย", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.Yes)
                        return true;
                    else 
                        return false;
                }
            }

            //if agent has not been searched yet, we still allow user to input book detail anyway
            return true;
            
        }

        private void billBookCreationGV_CellValidated(object sender, DataGridViewCellEventArgs e)
        {
            if (billExceptionGV.DataSource == null)
                addNewLineUserNoBt.Enabled = false;
            else
                addNewLineUserNoBt.Enabled = true;

        }

        private void billBookCreationGV_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            DescriptionText.Text = String.Empty;

            if (e.RowIndex < 0 || e.ColumnIndex < 0) return;

            if (billBookCreationGV.Columns[e.ColumnIndex].Name == "BillPeriodType")
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("ค่าที่สามารถป้อนได้: ");
                sb.Append("[1]. ทุกบิลเดือน  ");
                sb.Append("[2]. เดือนปัจจุบัน  ");
                sb.Append("[3]. บิลเดือนเก่า  ");
                //DescriptionText.Text = sb.ToString();
                //panel1.Show();
                _presenter.ShowStatusText(sb.ToString());
            }
            else if (billBookCreationGV.Columns[e.ColumnIndex].Name == "CollectionType")
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("ค่าที่สามารถป้อนได้: ");
                sb.Append("[1]. จ่ายทุกใบ  [2]. ป้อนยกเว้น  ");
                sb.Append("[3]. ป้อนออกเก็บ  ");
                sb.Append("[4]. เดือนปัจจุบัน + เดือนเก่าป้อนยกเว้น  ");
                sb.Append("[5]. เดือนปัจจุบัน + เดือนเก่าป้อนออกเก็บ  ");
                //DescriptionText.Text = sb.ToString();
                _presenter.ShowStatusText(sb.ToString());
            }            
            else
            {
                _presenter.ShowStatusText("Ready");
            }

            //detect parent peacode or lineId changes
            if (billBookCreationGV.Columns[e.ColumnIndex].Name == "PeaCode")
                _latestPeaCode = (string)billBookCreationGV.CurrentCell.Value;
            else
                _latestPeaCode = null;

            if (billBookCreationGV.Columns[e.ColumnIndex].Name == "LineId")
            {
                billBookCreationGV.CurrentCell.Value = ((string)billBookCreationGV.CurrentCell.Value).PadLeft(ModuleConfigurationNames.MRUCodeLength, '0');
                _latestLineId = (string)billBookCreationGV.CurrentCell.Value;
            }
            else
                _latestLineId = null;

        }

        private void billBookCreationGV_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (billBookCreationGV.Rows[e.RowIndex].Cells["CollectionType"].Value.ToString() == "1")
            {
                billExceptionGV.DataSource = null;
                addNewLineUserNoBt.Enabled = false;
            }
            else if (billBookCreationGV.Rows[e.RowIndex].Cells["CollectionType"].Value.ToString() == "2")
                billExceptionGV.DataSource = _bookInputList.ExtraItemExp;
            else if (billBookCreationGV.Rows[e.RowIndex].Cells["CollectionType"].Value.ToString() == "3")
                billExceptionGV.DataSource = _bookInputList.ExtraItemPlus;
            else if (billBookCreationGV.Rows[e.RowIndex].Cells["CollectionType"].Value.ToString() == "4")
                billExceptionGV.DataSource = _bookInputList.ExtraItemCurExp;
            else if (billBookCreationGV.Rows[e.RowIndex].Cells["CollectionType"].Value.ToString() == "5")
                billExceptionGV.DataSource = _bookInputList.ExtraItemCurPlus;

            _billExtraOnEdit = false;
            extraOnEditImg.Visible = false;
            _billCreationOnEdit = true;
            creationOnEditImg.Visible = true;
            _creationIndex = e.RowIndex;
        }

        //remove all invalid bills
        private void billExceptionGV_Leave(object sender, EventArgs e)
        {
            List<int> toRemove = new List<int>();
            if (billExceptionGV.DataSource != null)
            {
                BindingList<BillBookCreationExtraInfo> extraList = (BindingList<BillBookCreationExtraInfo>)billExceptionGV.DataSource;
                for (int i = extraList.Count - 1; i >= 0; i--)
                {
                    if (extraList[i].NPeaCode.Contains("-") || extraList[i].NLineId.Contains("-"))
                    {
                        toRemove.Add(i);
                    }
                }

                foreach (int r in toRemove)
                {
                    extraList.RemoveAt(r);
                }

                if (billExceptionGV.Rows.Count > 0)
                {
                    billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Selected = true;
                    billExceptionGV.CurrentCell = billExceptionGV.Rows[billExceptionGV.Rows.Count - 1].Cells["Number"];
                    billExceptionGV.BeginEdit(true);
                }
            }
        }

        private void billBookCreationGV_Enter(object sender, EventArgs e)
        {
            _billExtraOnEdit = false;
            extraOnEditImg.Visible = false;
            _billCreationOnEdit = true;
            creationOnEditImg.Visible = true;
        }

        private void billExceptionGV_Enter(object sender, EventArgs e)
        {
            _billExtraOnEdit = true;
            extraOnEditImg.Visible = true;
            _billCreationOnEdit = false;
            creationOnEditImg.Visible = false;

        }

        private void billExceptionGV_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            _billExtraOnEdit = true;
            extraOnEditImg.Visible = true;
            _extraIndex = e.RowIndex;
            _billCreationOnEdit = false;
            creationOnEditImg.Visible = false;
        }

  

    }
}

