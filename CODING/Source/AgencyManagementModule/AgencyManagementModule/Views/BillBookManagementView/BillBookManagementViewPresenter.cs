//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI;

using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.Infrastructure.Interface;
using System.Windows.Forms;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.AgencyManagementModule
{
    public class BillBookManagementViewPresenter : Presenter<IBillBookManagementView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        /// 

        IReportMgtService _reportMgrService;
        ICreateBillbookService _createBillBookService;

        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
       
        [InjectionConstructor]
        public BillBookManagementViewPresenter([ServiceDependency] IReportMgtService reportMgrService, ICreateBillbookService createBillbookService)
		{
            _reportMgrService = reportMgrService;
            _createBillBookService = createBillbookService;
		}

        [EventPublication(EventTopicNames.ShowCAB01_01Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB01_01ReportHandler;
        public void LoadCAB01_01Clicked(BillBookHeaderInfo headerInfo)
        {
            if (LoadCAB01_01ReportHandler != null)
                LoadCAB01_01ReportHandler(this, new EventArgs<BillBookHeaderInfo>(headerInfo));
        }

        [EventPublication(EventTopicNames.ShowCAB01_02Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCAB01_02ReportHandler;
        public void LoadCAB01_02ReportClicked(BillBookHeaderInfo headerInfo)
        {
            if (LoadCAB01_02ReportHandler != null)
                LoadCAB01_02ReportHandler(this, new EventArgs<BillBookHeaderInfo>(headerInfo));
        }
     
        [EventPublication(EventTopicNames.BillBookSaveRequest, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BillBookSaveRequestClickedHandler;
        public void BillBookSaveRequestClicked(BillBookItemListInputInfo bbItemList)
        {
            if (BillBookSaveRequestClickedHandler != null)
                BillBookSaveRequestClickedHandler(this, new EventArgs<BillBookItemListInputInfo>(bbItemList));
        }

        [EventPublication(EventTopicNames.ClearBookScreenHeader, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ClearBookScreenHeaderHandler;
        public void ClearBookScreenHeaderClicked()
        {
            if (ClearBookScreenHeaderHandler != null)
                ClearBookScreenHeaderHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.NewBillBook, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> NewBillBookHandler;
        public void ResetBillBook()
        {
            if (NewBillBookHandler != null)
                NewBillBookHandler(this, new EventArgs());
        }       

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdateHandler;
        public void ShowStatusText(string statusText)
        {
            if (StatusUpdateHandler != null)
                StatusUpdateHandler(this, new EventArgs<string>(statusText));
        }

        public string[] GetMruId(string caId)
        {
            return _createBillBookService.GetMruByCaId(caId);
        }

        //
        [EventPublication(EventTopicNames.ClearExceptionalBillList, PublicationScope.Global)]
        public event EventHandler<EventArgs> ClearExceptionalBillListHandler;
        public void ClearExceptionalBills()
        {
            if (ClearExceptionalBillListHandler != null)
                ClearExceptionalBillListHandler(this, new EventArgs());
        }

        [EventSubscription(EventTopicNames.MoveCursorToTheLastRow, Thread = ThreadOption.UserInterface)]
        public void MoveCursorToTheLastRowHandler(object sender, EventArgs e)
        {
            View.MoveCursorToEnd();
        }

        //find Button
        [EventPublication(EventTopicNames.SummarizeCallingBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> SummarizeCallingBillButtonClickedHandler;
        public void FineButtonClicked()
        {
            if (SummarizeCallingBillButtonClickedHandler != null)
                SummarizeCallingBillButtonClickedHandler(this, new EventArgs());
        }


        [EventPublication(EventTopicNames.CallingBillButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CallingBillButtonClickedHandler;
        public void CallingBillButtonClicked()
        {
            if (CallingBillButtonClickedHandler != null)
                CallingBillButtonClickedHandler(this, new EventArgs());
        }


        [EventPublication(EventTopicNames.StartInput, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> StartInputRequestHandler;
        public void FocusBillPeriod()
        {
            if (StartInputRequestHandler != null)
                StartInputRequestHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.LoadBranchValidation, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> LoadBranchValidationHandler;
        public void LoadBranches()
        {
            if (LoadBranchValidationHandler != null)
                LoadBranchValidationHandler(this, new EventArgs());
        }

        [EventSubscription(EventTopicNames.DisableSaveButton, Thread = ThreadOption.UserInterface)]
        public void DisableSaveButtonHandler(object sender, EventArgs<bool> e)
        {
            View.SaveEnable(e.Data);
        }



        #region Subscription
        [EventSubscription(EventTopicNames.BillBookSaveAndPrint, Thread = ThreadOption.UserInterface)]
        public void PrintBillBookReportHandler(object sender, EventArgs<BillBookHeaderInfo> e)
        {
            
            BillBookHeaderInfo _bookHeader = e.Data;                
            if (_bookHeader.IsPrintBillbook)
                this.LoadCAB01_01Clicked(_bookHeader);


            if (_bookHeader.IsPrintDetail)
                this.LoadCAB01_02ReportClicked(_bookHeader);
          
        }

        [EventSubscription(EventTopicNames.PrintBillBook, Thread = ThreadOption.UserInterface)]
        public void PrintBillBookHandler(object sender, EventArgs e)
        {
            View.PrintBook();
        }

        [EventSubscription(EventTopicNames.SetCancelBillBook, Thread = ThreadOption.UserInterface)]
        public void SetCancelBillBookHandler(object sender, EventArgs<bool> e)
        {
            View.SetCancelBillBook(e.Data);
        }

        #endregion
    }
}

