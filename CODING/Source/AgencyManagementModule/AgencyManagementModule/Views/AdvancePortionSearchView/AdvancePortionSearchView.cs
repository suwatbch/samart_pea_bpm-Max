//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using System.ComponentModel;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class AdvancePortionSearchView : UserControl, IAdvancePortionSearchView
    {
        private BindingList<LineInfo> _portionList;
        private BindingList<LineInfo> _selectedList;
        private Hashtable _portionHt;
        private Hashtable _selectedHt;        
        private string _branchId;

        public string BranchId
        {
            set { _branchId = value; }
        }

        //verify - this is workaround. input binding list is readOnly and its electment cannot be removed
        private BindingList<LineInfo> CloneBindingList(BindingList<LineInfo> lnList)
        {
            BindingList<LineInfo> that = new BindingList<LineInfo>();
            foreach (LineInfo ln in lnList)
            {               
                that.Add(ln.Clone());
            }
            return that;
        }

        public BindingList<LineInfo> PortionSearchResult
        {
            set
            {
                if (value == null || value.Count == 0)
                    MessageBox.Show(null, "ไม่พบข้อมูลสายการเก็บเงิน กรุณาระบุคีย์เวิร์ดใหม่ \nระบบสามารถค้นหาด้วย\n - รหัสสายการเก็บเงิน", "ไม่พบข้อมูลสายการเก็บเงิน", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                _portionList = CloneBindingList(value);
                _portionList.AllowRemove = true;
                _portionList.AllowNew = true;
                _portionHt.Clear();
                //_selectedList.Clear();
                //_selectedHt.Clear();
                LoadPortionInformationToGridView();
            }
        }

        public AdvancePortionSearchView()
        {
            InitializeComponent();
            portionSearchGV.AutoGenerateColumns = false;
            selectedGv.AutoGenerateColumns = false;            
            _selectedHt = new Hashtable();
            _selectedList = new BindingList<LineInfo>();
            _portionHt = new Hashtable();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public AdvancePortionSearchViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            lineSearchText.Focus();
        }      

        private void LoadPortionInformationToGridView()
        {
            portionSearchGV.Enabled = false;
            portionSearchGV.DataSource = _portionList;
            selectedGv.DataSource = _selectedList;

            foreach (LineInfo ln in _portionList)
            {
                if(!_portionHt.Contains(ln.LineId))
                    _portionHt.Add(ln.LineId, null);
            }

            portionSearchGV.Enabled = true;
            this.Cursor = Cursors.Default;
        }

        private void addBt_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow r in portionSearchGV.SelectedRows)
            {
                LineInfo lineInfo = _portionList[r.Index].Clone();
                _portionHt.Remove(lineInfo.LineId);
                _portionList.RemoveAt(r.Index);                

                if (!_selectedHt.Contains(lineInfo.LineId))
                {
                    _selectedList.Add(lineInfo);
                    _selectedHt.Add(lineInfo.LineId, null);
                }
            }
        }


        private void removeBt_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow r in selectedGv.SelectedRows)
            {
                LineInfo lineInfo = _selectedList[r.Index].Clone();
                _selectedHt.Remove(lineInfo.LineId);
                _selectedList.RemoveAt(r.Index);                

                if (!_portionHt.Contains(lineInfo.LineId))
                {
                    _portionList.Add(lineInfo);
                    _portionHt.Add(lineInfo.LineId, null);
                }
            }
        }

        private void okBt_Click(object sender, EventArgs e)
        {
            ArrayList parem = new ArrayList();            
            parem.Add(_selectedList);
            parem.Add(_branchId);
            _presenter.AdvancePortionSearchOkButtonClicked(parem);
        }

        private void lineSearchText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                
                LineSearchBoxInfo lineInfo = new LineSearchBoxInfo();
                lineInfo.MruId = lineSearchText.Text;
                lineInfo.BranchId = _branchId;              
                _presenter.AdvancePortionFindButtonClicked(lineInfo);
            }
        }

        private void searchBt_ButtonClick(object sender, EventArgs e)
        {            
            LineSearchBoxInfo lineInfo = new LineSearchBoxInfo();
            lineInfo.MruId = lineSearchText.Text;
            lineInfo.BranchId = _branchId;
            _presenter.AdvancePortionFindButtonClicked(lineInfo);
        }

        //private void lineIdTSItem_Click(object sender, EventArgs e)
        //{
        //    _searchType = LineSearchBoxInfo.LineSearchType.Id;
        //    searchBt.Text = "รหัสสายการเก็บเงิน";
        //}

        //private void areaCodeTSItem_Click(object sender, EventArgs e)
        //{
        //    _searchType = LineSearchBoxInfo.LineSearchType.AreaCode;
        //    searchBt.Text = "รหัสพื้นที่สายการเก็บเงิน";
        //}

        //private void allTSItem_Click(object sender, EventArgs e)
        //{
        //    _searchType = LineSearchBoxInfo.LineSearchType.All;
        //    searchBt.Text = "ทั้งหมด";
        //}

        private void portionSearchGV_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                try
                {
                    LineInfo lineInfo = _portionList[e.RowIndex].Clone();
                    _portionHt.Remove(lineInfo.LineId);
                    _portionList.RemoveAt(e.RowIndex);

                    if (!_selectedHt.Contains(lineInfo.LineId))
                    {
                        _selectedList.Add(lineInfo);
                        _selectedHt.Add(lineInfo.LineId, null);
                    }
                }
                catch (Exception ei)
                {
                }
            }
        }

        private void selectedGv_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                LineInfo lineInfo = (LineInfo)selectedGv.Rows[e.RowIndex].DataBoundItem;
                _selectedList.RemoveAt(e.RowIndex);
                _selectedHt.Remove(lineInfo.LineId);

                if (!_portionHt.Contains(lineInfo.LineId))
                {
                    _portionList.Add(lineInfo);
                    _portionHt.Add(lineInfo.LineId, null);
                }
            }
        }

 
 
       
    }
}

