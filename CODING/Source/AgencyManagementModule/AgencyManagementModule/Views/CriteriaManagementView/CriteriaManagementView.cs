//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CriteriaManagementView : UserControl, ICriteriaManagementView
    {
        private FeeBaseElement _feeBase;
        private bool _saved;

        public FeeBaseElement FeeBase
        {
            set
            {
                this._feeBase = value;
                SetCommissionRate();
            }
        }

        public CriteriaManagementView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CriteriaManagementViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();            
            _presenter.FeeBaseGridViewLoaded();
        }

        private void SetCommissionRate()
        {
            try
            {
                //fill all commission rates
                houseGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.HouseGrpRate);
                houseRegText.Text = DaHelper.ToMoneyFormat(_feeBase.HouseRegRate);
                corpGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.CorpGrpRate);
                corpRegText.Text = DaHelper.ToMoneyFormat(_feeBase.CorpRegRate);
                govGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.GovGrpRate);
                govRegText.Text = DaHelper.ToMoneyFormat(_feeBase.GovRegRate);

                maxInvPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.MaxInvoicePercent);
                invRate.Text = DaHelper.ToMoneyFormat(_feeBase.InvoiceRate);
                pastThreeMonthText.Text = DaHelper.ToMoneyFormat(_feeBase.InvoicePastThreeMonthRate);
                ninetyPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingNinetyPercent);
                ninetyNinePercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingNinetyNinePercent);
                hundredPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingHundredPercent);

                calCountCheck.Checked = _feeBase.HasCommissionCalLimit;
                PenaltyWaiveFlagCb.Checked = _feeBase.PenaltyWaive;
                calCountText.Text = _feeBase.MaxCommissionCalCount.ToString();                
                vatRateText.Text = _feeBase.VatRate.ToString();
                //taxRateText.Text = _feeBase.TaxRate.ToString();
                fineRateText.Text = DaHelper.ToMoneyFormat(_feeBase.FineRatePerBill);

                collectedPercentTb.Text = DaHelper.ToMoneyFormat(_feeBase.CollectedPercent);
                caCountTb.Text = _feeBase.CaCount == null ? "0" : _feeBase.CaCount.ToString();
                upperRateTb.Text = DaHelper.ToMoneyFormat(_feeBase.UpperRate);
                lowerRateTb.Text = DaHelper.ToMoneyFormat(_feeBase.LowerRate);                
            }
            catch (Exception ex)
            {
                Logger.WriteError(Logger.Module.AGENCY, "คำนวณค่าตอบแทน", ex.ToString());
                ClientExceptionController.ShowExceptionDialog(EErrorInModule.Agency, ex);
            }
        }

        private void SaveCommission()
        {          
            DialogResult dlg = MessageBox.Show(null, "กรุณายืนยันการแก้ไขค่าระบบตัวแทน \nคำเตือน: มีผลกระทบกับระบบตัวแทนทั้งระบบ", "กรุณายืนยัน", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            if (dlg == DialogResult.OK)
            {
                FeeBaseElement comRate = new FeeBaseElement();
                comRate.BranchId = Session.Branch.Id.Trim();
                comRate.HouseGrpRate = Convert.ToDecimal(houseGrpText.Text);
                comRate.HouseRegRate = Convert.ToDecimal(houseRegText.Text);
                comRate.CorpGrpRate = Convert.ToDecimal(corpGrpText.Text);
                comRate.CorpRegRate = Convert.ToDecimal(corpRegText.Text);
                comRate.GovGrpRate = Convert.ToDecimal(govGrpText.Text);
                comRate.GovRegRate = Convert.ToDecimal(govRegText.Text);
                comRate.MaxInvoicePercent = Convert.ToDecimal(maxInvPercentText.Text);
                comRate.InvoiceRate = Convert.ToDecimal(invRate.Text);
                comRate.InvoicePastThreeMonthRate = Convert.ToDecimal(pastThreeMonthText.Text);
                comRate.BillingNinetyPercent = Convert.ToDecimal(ninetyPercentText.Text);
                comRate.BillingNinetyNinePercent = Convert.ToDecimal(ninetyNinePercentText.Text);
                comRate.BillingHundredPercent = Convert.ToDecimal(hundredPercentText.Text);
                comRate.HasCommissionCalLimit = calCountCheck.Checked;
                comRate.MaxCommissionCalCount = Convert.ToInt32(calCountText.Text);
                comRate.PenaltyWaive = PenaltyWaiveFlagCb.Checked;                
                comRate.FineRatePerBill = Convert.ToDecimal(fineRateText.Text);
                comRate.VatRate = Convert.ToDecimal(vatRateText.Text);
                //comRate.TaxRate = Convert.ToDecimal(taxRateText.Text);
                
                comRate.CollectedPercent = Convert.ToDecimal(collectedPercentTb.Text);
                comRate.CaCount = Convert.ToInt32(caCountTb.Text);
                comRate.UpperRate = Convert.ToDecimal(upperRateTb.Text);
                comRate.LowerRate = Convert.ToDecimal(lowerRateTb.Text);

                _presenter.SaveCommissionRateClicked(comRate);
                saveBt.Enabled = false;
            }
        }

        private void saveBt_Click(object sender, EventArgs e)
        {
            SaveCommission();
        }
      
        private bool InputHasChanged()
        {
            bool changed = false;
            decimal houseGrp = Convert.ToDecimal(houseGrpText.Text);
            decimal houseReg = Convert.ToDecimal(houseRegText.Text);
            decimal govGrp = Convert.ToDecimal(govGrpText.Text);
            decimal govReg = Convert.ToDecimal(govRegText.Text);
            decimal corpGrp = Convert.ToDecimal(corpGrpText.Text);
            decimal corpReg = Convert.ToDecimal(corpRegText.Text);
            decimal maxInvPercent = Convert.ToDecimal(maxInvPercentText.Text);
            decimal invRt = Convert.ToDecimal(invRate.Text);
            decimal pastThreeInv = Convert.ToDecimal(pastThreeMonthText.Text);
            decimal ninetyPercent = Convert.ToDecimal(ninetyPercentText.Text);
            decimal ninetyNinePercent = Convert.ToDecimal(ninetyNinePercentText.Text);
            decimal hundreadPercent = Convert.ToDecimal(hundredPercentText.Text);            
            string tempVatRate = vatRateText.Text.Trim() == String.Empty ? "0.00" : vatRateText.Text.Trim();
            string tempTaxRate = taxRateText.Text.Trim() == String.Empty ? "0.00" : taxRateText.Text.Trim();
            decimal vatRate = Convert.ToDecimal(tempVatRate);
            decimal taxRate = Convert.ToDecimal(tempTaxRate);
            int calCount = Convert.ToInt32(calCountText.Text);
            bool calCountChecked = calCountCheck.Checked;
            decimal fineRate = Convert.ToDecimal(fineRateText.Text);
            bool penaltyWaiveFlag = PenaltyWaiveFlagCb.Checked;

            decimal collectedPercent = Convert.ToDecimal(collectedPercentTb.Text);
            int caCount = Convert.ToInt32(caCountTb.Text);
            decimal upperRate = Convert.ToDecimal(upperRateTb.Text);
            decimal lowerRate = Convert.ToDecimal(lowerRateTb.Text);

            if (_feeBase.HouseGrpRate.Value != houseGrp)
                changed = true;
            else if (_feeBase.HouseRegRate.Value != houseReg)
                changed = true;
            else if (_feeBase.GovGrpRate.Value != govGrp)
                changed = true;
            else if (_feeBase.GovRegRate.Value != govReg)
                changed = true;
            else if (_feeBase.CorpGrpRate.Value != corpGrp)
                changed = true;
            else if (_feeBase.CorpRegRate.Value != corpReg)
                changed = true;
            else if (_feeBase.MaxInvoicePercent.Value != maxInvPercent)
                changed = true;
            else if (_feeBase.InvoiceRate.Value != invRt)
                changed = true;
            else if (_feeBase.InvoicePastThreeMonthRate.Value != pastThreeInv)
                changed = true;
            else if (_feeBase.BillingNinetyPercent.Value != ninetyPercent)
                changed = true;
            else if (_feeBase.BillingNinetyNinePercent.Value != ninetyNinePercent)
                changed = true;
            else if (_feeBase.BillingHundredPercent.Value != hundreadPercent)
                changed = true;           
            else if (_feeBase.VatRate != vatRate)
                changed = true;
            //else if (_feeBase.TaxRate != taxRate)
            //    changed = true;
            else if (_feeBase.MaxCommissionCalCount.Value != calCount)
                changed = true;
            else if (_feeBase.HasCommissionCalLimit != calCountChecked)
                changed = true;
            else if (_feeBase.FineRatePerBill != fineRate)
                changed = true;
            else if (_feeBase.PenaltyWaive != penaltyWaiveFlag)
                changed = true;
            else if (_feeBase.CollectedPercent != collectedPercent)
                changed = true;
            else if (_feeBase.CaCount != caCount)
                changed = true;
            else if (_feeBase.UpperRate != upperRate)
                changed = true;
            else if (_feeBase.LowerRate != lowerRate)
                changed = true;

            return changed;
        }

        #region Change Detection

        private void houseGrpText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(houseGrpText.Text);
                houseGrpText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                houseGrpText.Focus();
                houseGrpText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void houseRegText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(houseRegText.Text);
                houseRegText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                houseRegText.Focus();
                houseRegText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void corpGrpText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(corpGrpText.Text);
                corpGrpText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                corpGrpText.Focus();
                corpGrpText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void corpRegText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(corpRegText.Text);
                corpRegText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                corpRegText.Focus();
                corpRegText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void govGrpText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(govGrpText.Text);
                govGrpText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                govGrpText.Focus();
                govGrpText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void govRegText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(govRegText.Text);
                govRegText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                govRegText.Focus();
                govRegText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void maxInvPercentText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(maxInvPercentText.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();
                maxInvPercentText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                maxInvPercentText.Focus();
                maxInvPercentText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void invRate_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(invRate.Text);
                invRate.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                invRate.Focus();
                invRate.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void pastThreeMonthText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(pastThreeMonthText.Text);
                pastThreeMonthText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                pastThreeMonthText.Focus();
                pastThreeMonthText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void ninetyPercentText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(ninetyPercentText.Text);
                ninetyPercentText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                ninetyPercentText.Focus();
                ninetyPercentText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void ninetyNinePercentText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(ninetyNinePercentText.Text);
                ninetyNinePercentText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                ninetyNinePercentText.Focus();
                ninetyNinePercentText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void hundredPercentText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(hundredPercentText.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();

                hundredPercentText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                hundredPercentText.Focus();
                hundredPercentText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }
    
        private void vatRateText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(vatRateText.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();

                vatRateText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                vatRateText.Focus();
                vatRateText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void calCountText_Leave(object sender, EventArgs e)
        {
            try
            {
                Convert.ToInt32(calCountText.Text);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง กรุณาตรวจสอบการป้อนค่า", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                calCountText.Focus();
                calCountText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void fineRateText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(fineRateText.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();
                fineRateText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception )
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                fineRateText.Focus();
                fineRateText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        #endregion

        private void houseGrpText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                houseRegText.Focus();
                houseRegText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                houseGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.HouseGrpRate);
            }
        }

        private void houseRegText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //next input
                corpGrpText.Focus();
                corpGrpText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                houseRegText.Text = DaHelper.ToMoneyFormat(_feeBase.HouseRegRate);
            }
        }

        private void corpGrpText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                corpRegText.Focus();
                corpRegText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                corpGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.CorpGrpRate);
            }
        }

        private void corpRegText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                govGrpText.Focus();
                govGrpText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                corpRegText.Text = DaHelper.ToMoneyFormat(_feeBase.CorpRegRate);
            }
        }

        private void govGrpText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                govRegText.Focus();
                govRegText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                govGrpText.Text = DaHelper.ToMoneyFormat(_feeBase.GovGrpRate);
            }
        }

        private void govRegText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cancel.Focus(); //activate leave event
                saveBt.Focus();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                govRegText.Text = DaHelper.ToMoneyFormat(_feeBase.GovRegRate);
            }
        }

        private void maxInvPercentText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                invRate.Focus();
                invRate.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                maxInvPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.MaxInvoicePercent);
            }
        }

        private void invRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                pastThreeMonthText.Focus();
                pastThreeMonthText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                invRate.Text = DaHelper.ToMoneyFormat(_feeBase.InvoiceRate);
            }
        }

        private void pastThreeMonthText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ninetyPercentText.Focus();
                ninetyPercentText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                pastThreeMonthText.Text = DaHelper.ToMoneyFormat(_feeBase.InvoicePastThreeMonthRate);
            }
        }

        private void ninetyPercentText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ninetyNinePercentText.Focus();
                ninetyNinePercentText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                ninetyPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingNinetyPercent);
            }
        }

        private void ninetyNinePercentText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                hundredPercentText.Focus();
                hundredPercentText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                ninetyNinePercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingNinetyNinePercent);
            }
        }

        private void hundredPercentText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                collectedPercentTb.Focus(); ;
            }
            else if (e.KeyCode == Keys.Escape)
            {
                hundredPercentText.Text = DaHelper.ToMoneyFormat(_feeBase.BillingHundredPercent);
            }
        }
       

        private void vatRateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                taxRateText.Focus();
                taxRateText.SelectAll();
            }
            //else if (e.KeyCode == Keys.Escape)
            //{
            //    taxRateText.Text = DaHelper.ToMoneyFormat(_feeBase.TaxRate);
            //}
        }

        private void calCountText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                fineRateText.Focus();
                fineRateText.SelectAll();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                calCountText.Text = _feeBase.MaxCommissionCalCount.Value.ToString();
            }
        }

        private void fineRateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cancel.Focus(); //activate leave event
                saveBt.Focus();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                fineRateText.Text = DaHelper.ToMoneyFormat(_feeBase.FineRatePerBill);
            }
        }

        private void lowerRateTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cancel.Focus(); //activate leave event
                saveBt.Focus();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                lowerRateTb.Text = DaHelper.ToMoneyFormat(_feeBase.LowerRate);
            }
        }

        private void collectedPercentTb_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(collectedPercentTb.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();

                collectedPercentTb.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception)
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                collectedPercentTb.Focus();
                collectedPercentTb.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void collectedPercentTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                caCountTb.Focus(); ;
            }
            else if (e.KeyCode == Keys.Escape)
            {
                collectedPercentTb.Text = DaHelper.ToMoneyFormat(_feeBase.CollectedPercent);
            }
        }

        private void caCountTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                upperRateTb.Focus();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                caCountTb.Text = DaHelper.ToMoneyFormat(_feeBase.CaCount);
            }
        }

        private void caCountTb_Leave(object sender, EventArgs e)
        {
            try
            {
                int val = Convert.ToInt32(caCountTb.Text);
                if (val < 0)
                    throw new Exception();                
            }
            catch (Exception)
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ต้องมากกว่าหรือเท่ากับ 0", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                caCountTb.Focus();
                caCountTb.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void upperRateTb_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                lowerRateTb.Focus();
            }
            else if (e.KeyCode == Keys.Escape)
            {
                upperRateTb.Text = DaHelper.ToMoneyFormat(_feeBase.UpperRate);
            }
        }

        private void upperRateTb_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(upperRateTb.Text);
                if (val.Value < 0 )
                    throw new Exception();

                upperRateTb.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception)
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ต้องมากกว่าหรือเท่ากับ 0", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                upperRateTb.Focus();
                upperRateTb.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void lowerRateTb_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(lowerRateTb.Text);
                if (val.Value < 0)
                    throw new Exception();

                lowerRateTb.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception)
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ต้องมากกว่าหรือเท่ากับ 0", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                lowerRateTb.Focus();
                lowerRateTb.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void taxRateText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                calCountText.Focus();
                calCountText.SelectAll();
            }
            //else if (e.KeyCode == Keys.Escape)
            //{
            //    taxRateText.Text = DaHelper.ToMoneyFormat(_feeBase.TaxRate);
            //}
        }

        private void taxRateText_Leave(object sender, EventArgs e)
        {
            try
            {
                decimal? val = Convert.ToDecimal(taxRateText.Text);
                if (val.Value < 0 || val.Value > 100)
                    throw new Exception();

                taxRateText.Text = DaHelper.ToMoneyFormat(val);
            }
            catch (Exception)
            {
                MessageBox.Show(null, "ป้อนค่าไม่ถูกต้อง ค่าที่เป็นไปได้ [0-100]", "ตั้งค่าระบบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                taxRateText.Focus();
                taxRateText.SelectAll();
                return;
            }

            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void calCountCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

        private void PenaltyWaiveFlagCb_CheckedChanged(object sender, EventArgs e)
        {
            if (InputHasChanged())
                saveBt.Enabled = true;
            else
                saveBt.Enabled = false;
        }

    }
}

