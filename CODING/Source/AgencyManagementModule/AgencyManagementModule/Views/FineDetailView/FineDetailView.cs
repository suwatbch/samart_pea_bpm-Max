//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.AgencyManagementModule.Utilities;
using System.Globalization;
using System.Collections.Generic;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class FineDetailView : UserControl, IFineDetailView
    {
        FineDetailInfo _fineDetailInfo;
        DateTimeFormatInfo _th_dt;

        public FineDetailView()
        {
            InitializeComponent();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;
            fineDetailGv.AutoGenerateColumns = false;
            bookDetailGv.AutoGenerateColumns = false;
            fineSumGv.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public FineDetailViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            _presenter.ShowFineDetail();
        }

        public FineDetailInfo FileDetail
        {
            set {
                _fineDetailInfo = value;
                FillFineDetail();
            }
        }

        private void FillFineDetail()
        {
            bookDetailGv.Rows.Clear();
            agentIdText.Text = _fineDetailInfo.AgentId;
            periodText.Text = DaHelper.GetBillPeriod(_fineDetailInfo.Period);
            createDateText.Text = _fineDetailInfo.CreateDate;
            finePerBillText.Text = DaHelper.ToMoneyFormat(_fineDetailInfo.FinePerBill);
            returnBillAmountText.Text = DaHelper.ToMoneyFormat(_fineDetailInfo.ReturnedInvAmount);
            string[] header = { DaHelper.ToMoneyFormat(_fineDetailInfo.TotalAmount), DaHelper.ToMoneyFormat( _fineDetailInfo.TotalAdvPayAmount),
                            _fineDetailInfo.AdvPayDate, DaHelper.ToMoneyFormat(_fineDetailInfo.TotalRemainDebtAmount),
                            _fineDetailInfo.ReturnDate };

            bookDetailGv.Rows.Add(header);

            //sort first
            _fineDetailInfo.BookFineDetail.Sort();
            _fineDetailInfo.Refresh();
            fineDetailGv.DataSource = _fineDetailInfo.BookFineDetail;
            //set display index
            fineDetailGv.Columns["BookCount"].DisplayIndex = 0;
            fineDetailGv.Columns["BookId"].DisplayIndex = 1;
            fineDetailGv.Columns["BookAmount"].DisplayIndex = 2;
            fineDetailGv.Columns["PaidDate"].DisplayIndex = 3;
            fineDetailGv.Columns["BookAdvPaidAmount"].DisplayIndex = 4;
            fineDetailGv.Columns["BookRemainDebtAmount"].DisplayIndex = 5;
            fineDetailGv.Columns["BookAdvFineAmount"].DisplayIndex = 6;
            fineDetailGv.Columns["BookAdvOverdueDay"].DisplayIndex = 7;
            fineDetailGv.Columns["ReturnBookFineAmount"].DisplayIndex = 8;
            fineDetailGv.Columns["ReturnOverdueDay"].DisplayIndex = 9;
            fineDetailGv.Columns["BookTotalFine"].DisplayIndex = 10;

            int time = 0;
            decimal? totalAmount = 0;
            //string returnDate = null;
            decimal? paidAmount = 0;
            decimal? advAmount = 0;
            decimal? remainAmount = 0;
            decimal? fineAdvAmount = 0;
            decimal? fineRemainAmount = 0;
            decimal? totalFine = 0;
            int? fineAdvDay = 0;
            int? fineRemainDay = 0;

            foreach (BookFineDetailInfo b in _fineDetailInfo.BookFineDetail)
            {
                time++;
                totalAmount += b.BookAmount;
                paidAmount += b.BookPaidAmount;
                advAmount += b.BookAdvAmount;
                remainAmount += b.BookRemainDebtAmount;
                fineAdvAmount += b.BookAdvFineAmount;
                fineRemainAmount += b.ReturnBookFineAmount;
                fineAdvDay += b.BookAdvOverdueDay;
                fineRemainDay += b.ReturnOverdueDay;
                totalFine += b.BookTotalFine;
            }

            List<FineSummaryInfo> fineList = new List<FineSummaryInfo>();
            FineSummaryInfo fineSumInfo = new FineSummaryInfo();
            fineSumInfo.SumBookAmount = DaHelper.ToMoneyFormat(totalAmount);
            //fineSumInfo.SumPaidDate = DaHelper.ToMoneyFormat(totalAmount);
            //fineSumInfo.SumAdvAmount = DaHelper.ToMoneyFormat(advAmount);
            fineSumInfo.SumAdvAmount = "";
            fineSumInfo.SumPaidAmount = DaHelper.ToMoneyFormat(paidAmount);
            fineSumInfo.SumRemainAmount = DaHelper.ToMoneyFormat(remainAmount);
            fineSumInfo.SumAdvFineAmount = DaHelper.ToMoneyFormat(fineAdvAmount);
            fineSumInfo.SumAdvOverDay = fineAdvDay.Value.ToString();
            fineSumInfo.SumReturnFineAmount = DaHelper.ToMoneyFormat(fineRemainAmount);
            fineSumInfo.SumReturnOverDay = fineRemainDay.Value.ToString();
            fineSumInfo.SumTotalFine = DaHelper.ToMoneyFormat(totalFine);

            fineList.Add(fineSumInfo);
            fineSumGv.DataSource = fineList;

            //set index
            fineSumGv.Columns["RIndex"].DisplayIndex = 0;
            fineSumGv.Columns["SumBookId"].DisplayIndex = 1;
            fineSumGv.Columns["SumPaidAmount"].DisplayIndex = 2;
            fineSumGv.Columns["SumPaidDate"].DisplayIndex = 3;
            fineSumGv.Columns["SumAdvAmount"].DisplayIndex = 4;
            fineSumGv.Columns["SumRemainAmount"].DisplayIndex = 5;
            fineSumGv.Columns["SumAdvFineAmount"].DisplayIndex = 6;
            fineSumGv.Columns["SumAdvOverDay"].DisplayIndex = 7;
            fineSumGv.Columns["SumReturnFineAmount"].DisplayIndex = 8;
            fineSumGv.Columns["SumReturnOverDay"].DisplayIndex = 9;
            fineSumGv.Columns["SumTotalFine"].DisplayIndex = 10;

            returnBillAmountText.Text = DaHelper.ToMoneyFormat(paidAmount);

            //Enable / disable cancel fine button
            cancelFineBt.Enabled = !_fineDetailInfo.IsCalculated;
        }

        private void cancelFineBt_Click(object sender, EventArgs e)
        {
            _presenter.CancelFine();
        }
    }
}

