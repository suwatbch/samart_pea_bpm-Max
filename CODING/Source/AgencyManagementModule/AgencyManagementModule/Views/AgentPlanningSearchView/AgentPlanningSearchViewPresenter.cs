//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using System.ComponentModel;
using System.Collections;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.Services;



namespace PEA.BPM.AgencyManagementModule
{
    public class AgentPlanningSearchViewPresenter : Presenter<IAgentPlanningSearchView>
    {
        private IAgencyPlanningService _agencyPlanningService;
        
        [InjectionConstructor]
                public AgentPlanningSearchViewPresenter([ServiceDependency] IAgencyPlanningService agencyPlanningService)
		{
            _agencyPlanningService = agencyPlanningService;
		}

        public PeaInfo GetBranch(string keyword, string parent)
        {
            List<PeaInfo> peaList = _agencyPlanningService.FindAndDisplayBranchByKeyword(keyword, parent);
            if (peaList.Count > 0)
                return peaList[0];
            else
                return null;
        }

        [EventPublication(EventTopicNames.NextButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> NextButtonClickedHandler;
        public void NextButtonClicked()
        {
            if (NextButtonClickedHandler != null)
                NextButtonClickedHandler(this, new EventArgs());
                //NextButtonClickedHandler(this, new EventArgs<CustomerDetail>(customerDetail));
        }

        [EventPublication(EventTopicNames.PortionSearch, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> PortionSearchButtonClickedHandler;
        public void PortionSearchButtonClicked(string peaCode)
        {
            if (PortionSearchButtonClickedHandler != null)
            {
                WorkItem.State["IAdvancePortionSearchView"] = true;
                PortionSearchButtonClickedHandler(this, new EventArgs<string>(peaCode));
            }
        }

        [EventPublication(EventTopicNames.PeaCodedSearchShowDialog, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> PeaCodedSearchShowDialogClickedHandler;
        public void PeaCodedSearchShowDialogClicked()
        {
            if (PeaCodedSearchShowDialogClickedHandler != null)
            {
                WorkItem.State["IPEACodeSearchView"] = true;
                PeaCodedSearchShowDialogClickedHandler(this, new EventArgs());
            }
        }

        [EventPublication(EventTopicNames.AgentSearch, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentSearchButtonClickedHandler;
        public void AgentSearchButtonClicked()
        {
            if (AgentSearchButtonClickedHandler != null)
            {
                WorkItem.State["IAgentSearchView"] = true;
                AgentSearchButtonClickedHandler(this, new EventArgs());
            }
        }

        [EventPublication(EventTopicNames.AgentSearchAssetShowDialog, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentSearchAssetShowDialogButtonClickedHandler;
        public void AgentSearchAssetShowDialogButtonClicked()
        {
            if (AgentSearchAssetShowDialogButtonClickedHandler != null)
                AgentSearchAssetShowDialogButtonClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.AgentAssignmentSearchButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentAssignmentSearchButtonClickedHandler;
        public void AgentAssignmentSearchButtonClicked()
        {
            if (AgentAssignmentSearchButtonClickedHandler != null)
                AgentAssignmentSearchButtonClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.AgentSearchCBoxCommitted, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentSearchCBoxCommittedHandler;
        public void AgentSearchCBoxCommitted(string peaCode, string agentId)
        {
            AgentSearchInfo agParem = new AgentSearchInfo();
            agParem.BranchId = peaCode;
            agParem.AgentId = agentId;            
            if (AgentSearchCBoxCommittedHandler != null)
                AgentSearchCBoxCommittedHandler(this, new EventArgs<string>(agentId));
        }

        #region Keydown event 

        [EventPublication(EventTopicNames.AgentSearchTextBoxKeyDown, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentSearchTextBoxKeyDownHandler;
        public void AgentSearchTextBoxKeyDown(string agentId)
        {
            if (AgentSearchTextBoxKeyDownHandler != null)
                AgentSearchTextBoxKeyDownHandler(this, new EventArgs<string>(agentId));
        }

        [EventPublication(EventTopicNames.BranchSearchTextBoxKeyDown, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BranchSearchTextBoxKeyDownHandler;
        public void BranchSearchTextBoxKeyDown(string branchId)
        {
            if (BranchSearchTextBoxKeyDownHandler != null)
                BranchSearchTextBoxKeyDownHandler(this, new EventArgs<string>(branchId));            
        }

        [EventPublication(EventTopicNames.LineSearchTextBoxKeyDown, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> LineSearchTextBoxKeyDownHandler;
        public void LineSearchTextBoxKeyDown(string peaCode, string lineKey)
        {
            List<string> lineInfo = new List<string>();
            lineInfo.Add(peaCode);
            lineInfo.Add(lineKey);

            if (LineSearchTextBoxKeyDownHandler != null)
                LineSearchTextBoxKeyDownHandler(this, new EventArgs<List<string>>(lineInfo));
        }

        [EventPublication(EventTopicNames.AgentLineSearchTextBoxKeyDown, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgentLineSearchTextBoxKeyDownHandler;
        public void AgentLineSearchTextBoxKeyDown(string agentId)
        {
            if (AgentLineSearchTextBoxKeyDownHandler != null)
                AgentLineSearchTextBoxKeyDownHandler(this, new EventArgs<string>(agentId));
        }

        [EventPublication(EventTopicNames.ShowHintEvent, PublicationScope.Global)]
        public event EventHandler<EventArgs> ShowHintHandler;
        public void ShowHint(ArrayList parem)
        {
            if (ShowHintHandler != null)
                ShowHintHandler(this, new EventArgs<ArrayList>(parem));
        }

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdateHandler;
        public void ShowStatusText(string statusText)
        {
            if (StatusUpdateHandler != null)
                StatusUpdateHandler(this, new EventArgs<string>(statusText));
        }

        [EventPublication(EventTopicNames.ShowSpecialHelpConfigPopUp, PublicationScope.Global)]
        public event EventHandler<EventArgs> SpecialHelpConfigPopUpHandler;
        public void SpecialHelpConfigClicked(LineInfo lineInfo)
        {
            if (SpecialHelpConfigPopUpHandler != null)
            {
                WorkItem.State["ISpecialHelpConfigView"] = true;
                SpecialHelpConfigPopUpHandler(this, new EventArgs<LineInfo>(lineInfo));
            }
        }

        #endregion 

        #region Button Click

        [EventPublication(EventTopicNames.SaveBtClicked, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> SaveBtClickedHandler;
        public void SaveBtClicked(BindingList<LineInfo> asiLineList)
        {
            if (SaveBtClickedHandler != null)
                SaveBtClickedHandler(this, new EventArgs<BindingList<LineInfo>>(asiLineList));
        }

        #endregion 

      

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }
    }
}

