//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Globalization;

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.Architecture.CommonUtilities;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookPaymentStatusView : UserControl, IBillBookPaymentStatusView
    {
        #region "Properties"        

        HashInfoCollection _pmList = new HashInfoCollection();

        public HashInfoCollection PmList
        {
            get
            {
                if (this._pmList.Count == 0)
                    _pmList = _presenter.GetPmList(string.Empty);

                return this._pmList;
            }          
        }

        public string BillBookId
        {           
            set 
            {                
                billBookIdText.Text = value;
                SearchBillBookStatus();
                billBookIdText.Focus();
            }
        }
        #endregion

        public BillBookPaymentStatusView()
        {
            InitializeComponent();
            paymentStatusGV.AutoGenerateColumns = false;
            summaryGv.AutoGenerateColumns = false;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookPaymentStatusViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #region "Event"
        protected override void OnLoad(EventArgs e)
        {                     
            _presenter.OnViewReady();
        }
            
        private void paymentStatusGV_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {            
            if ((paymentStatusGV.Rows[e.RowIndex].Cells["PmId"].Value != null) && (PmList != null))
            {
                bool isCheckIn = (bool)paymentStatusGV.Rows[e.RowIndex].Cells["IsCheckIn"].Value;
                string pmId = (string)paymentStatusGV.Rows[e.RowIndex].Cells["PmId"].Value;
                string pmName = PmList.GetHashValueById(pmId);
                if (isCheckIn)
                {
                    pmName = String.Format("{0} {1}", pmName, " (ตัดชำระแล้ว) ");
                }
                paymentStatusGV.Rows[e.RowIndex].Cells["PmName"].Value = pmName;
            }
        }

        private void billBookIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SearchBillBookStatus();

            }
        }

        #endregion

        #region "Helper"
        public void ClearScreen()
        {
            billBookIdText.Clear();
            billBookTypeText.Clear();
            agentNameText.Clear();
            peaNameText.Clear();
            receiveCountText.Clear();
            billPaymentDateText.Clear();
            paidDateText.Clear();

            paymentStatusGV.DataSource = new BillBookCheckinDetailInfo();
            billBookIdText.Focus();
        }

        string PadBillbookId(string billBookId)
        {
            string retVal = String.Empty;
            billBookId = billBookId.Replace("-", String.Empty);
            if (billBookId.Trim().Length > ModuleConfigurationNames.BillBookLengthOnly)
            {
                if (billBookId.Trim().Length < ModuleConfigurationNames.GroupInvoiceLength)
                {
                    string prefix = billBookId.Substring(0, 2);
                    string postfix = billBookId.Substring(2, billBookId.Length - 2);
                    return String.Format("{0}{1}", prefix, postfix.PadLeft(14, '0'));
                }
                return billBookId;
            }
            else
            {
                if (billBookId.Length > 2)
                {
                    string year = billBookId.Substring(0, 2);
                    string bookId = billBookId.Substring(2, billBookId.Length - 2);
                    return String.Format("{0}{1}", year, bookId.PadLeft(7, '0'));
                }
                else 
                {
                    return billBookId;
                }
            }
        }

        private void SearchBillBookStatus()
        {

            string billBookId = billBookIdText.Text.Replace("-", "").Trim();
            if (billBookId != String.Empty)
            {
                BillBookCheckInInfo billBook = _presenter.GroupInvoiceTextChangeComitted(billBookId, Session.Branch.Id);
                if (billBook.BookId != null)
                {
                    // groupinvoice
                    if (billBook.BookType == 2)
                    {
                        duedateLabel.Text = "วันครบกำหนดชำระ :";
                        paidDateText.Text = billBook.ReturnDueDate == null ? String.Empty : billBook.ReturnDueDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                    }
                    else 
                    {
                        duedateLabel.Text = "วันตัดชำระหนี้ :";
                        paidDateText.Text = billBook.PaidDate == null ? String.Empty : billBook.PaidDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));    
                    }

                    billBookTypeText.Text = billBook.BookOutType;
                    agentNameText.Text = String.Format(" {0} {1}", billBook.BillAgentId.Substring(6, 6), billBook.BillAgentName);
                    peaNameText.Text = Session.Branch.Name;
                    receiveCountText.Text = billBook.ReceiveCount.ToString().PadLeft(2, '0');
                    billPaymentDateText.Text = billBook.BillPaymentDate == null ? String.Empty : billBook.BillPaymentDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));                   


                    paymentStatusGV.DataSource = new BillBookCheckinDetailInfo();
                    paymentStatusGV.DataSource = billBook.BillBookCheckInDetail;

                    BindFooterData();
                    cancelBt.Focus();
                }
                else
                {
                    string branchId = Session.Branch.Id;
                    billBookId = String.Format("{0}{1}", branchId, PadBillbookId(billBookIdText.Text.Trim()));
                     billBook = _presenter.BillBookIdTextChangeCommitted(billBookId);
                    if (billBook.BookId != null)
                    {
                        billBookTypeText.Text = billBook.BookOutType;
                        agentNameText.Text = String.Format(" {0} {1}", billBook.BillAgentId.Substring(6, 6), billBook.BillAgentName);
                        peaNameText.Text = Session.Branch.Name;
                        receiveCountText.Text = billBook.ReceiveCount.ToString().PadLeft(2, '0');
                        billPaymentDateText.Text = billBook.BillPaymentDate == null ? String.Empty : billBook.BillPaymentDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                        paidDateText.Text = billBook.PaidDate == null ? String.Empty : billBook.PaidDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));

                        paymentStatusGV.DataSource = new BillBookCheckinDetailInfo();
                        paymentStatusGV.DataSource = billBook.BillBookCheckInDetail;

                        BindFooterData();
                        cancelBt.Focus();
                    }                
                    else
                    {
                        this.ClearScreen();
                        MessageBox.Show("ไม่พบข้อมูลสมุดจ่ายบิล", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //billBookIdText.Text = String.Empty;
                        billBookIdText.Focus();
                        billBookIdText.SelectAll();
                    }
                }
            }
            else
            {
                ClearScreen();
            }
        }

        private void BindFooterData()
        {
            summaryGv.AutoGenerateColumns = false;
            List<BillBookPaymentSummaryInfo> sumList = new List<BillBookPaymentSummaryInfo>();
            BillBookPaymentSummaryInfo sum = new BillBookPaymentSummaryInfo();
            decimal? totalAmount = 0;
            int mruCount = 0;
            string mru = "";
            List<HashInfo> hts = new List<HashInfo>();
            HashInfo ht = new HashInfo();

            foreach (DataGridViewRow r in paymentStatusGV.Rows)
            {
                string branchId = (string)r.Cells["BranchId"].Value;
                
                if (mru.Trim() != (string)r.Cells["MruId"].Value)
                {
                    mru = (string)r.Cells["MruId"].Value;
                    mruCount++;
                }
                
                totalAmount += (decimal?)r.Cells["TotalAmount"].Value;
                ht.Id = branchId;
                ht.Value = mru;                    
                if (!hts.Contains(ht))
                {
                    hts.Add(ht);
                }
            }
            sum.MruCount = mruCount;
            sum.CaCount = paymentStatusGV.Rows.Count;
            sum.TotalAmount = totalAmount;
            sumList.Add(sum);
            summaryGv.DataSource = sumList;
        }

        #endregion
    }
}

