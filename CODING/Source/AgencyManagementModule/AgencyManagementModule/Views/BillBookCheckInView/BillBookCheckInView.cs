//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface.Constants;
using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.Infrastructure.Interface;
using System.Collections;
using System.Drawing;
using System.Windows.Forms.VisualStyles;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.Architecture.CommonUtilities;
using System.Globalization;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookCheckInView : UserControl, IBillBookCheckInView
    {

        #region "Declare"
        private HashInfoCollection _billStatusList;
        private BillBookAmountSumInfo _returnedBillBookAmountSumInfo;
        private BillBookCheckInInfo _billBookCheckIn;
        private HashInfoCollection _pmList;
        #endregion

        #region "Properties"

        public HashInfoCollection BillStatusList
        {
            get
            {
                if (this._billStatusList == null)
                {
                    this._billStatusList = _presenter.GetBillStatusList(String.Empty);
                }
                return this._billStatusList;
            }
            set { this._billStatusList = value; }
        }

        public HashInfoCollection PmList
        {
            get
            {
                if (_pmList == null)
                {
                    this._pmList = _presenter.GetPmList(String.Empty);
                }
                return this._pmList;
            }
            set
            {
                this._pmList = value;
            }
        }

        public BillBookAmountSumInfo ReturnedBillBookAmountSumInfo
        {
            set
            {
                _returnedBillBookAmountSumInfo = value;
                FillReturnedBillBookAmountSumInfo();
            }
        }
        #endregion

        #region "Constructor"


        public BillBookCheckInView()
        {
            InitializeComponent();
            billBookSearchInfoGV.AutoGenerateColumns = false;
        }
        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookCheckInViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        #endregion

        #region "Event"

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            billBookIdText.SelectAll();
            billBookIdText.Focus();
            _presenter.ShowStatusText("Ready");
            _billBookCheckIn = new BillBookCheckInInfo();
            editCheckInBt.Enabled = false;
            viewPaymentStatusBt.Enabled = true;

        }

        private void FinishCheckIn()
        {
            DialogResult _result = MessageBox.Show("คุณต้องการสิ้นสุดการเลือกใช่หรือไม่", "สิ้นสุดการเลือก", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            if (_result == DialogResult.OK)
            {
                _billBookCheckIn.PrintPreview = printPreviewCb.Checked;
                _billBookCheckIn.BillBookCheckInDetail = CollectionBillCheckIndetail(_billBookCheckIn.BillBookCheckInDetail);
                if ((BillBookSelectAll()) || (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE))
                {
                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE)
                    {
                        if (_billBookCheckIn.BillCollectCount != 0 || _billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE)
                        {
                            _presenter.BillBookSlipPosingRecordButtonClicked(_billBookCheckIn);
                        }
                        else
                        {
                            MessageBox.Show("กรุณาเลือกข้อมูลการตัดชำระแบบกลุ่ม เพื่อทำการตัดชำระ", "สิ้นสุดการเลือก", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    else
                    {
                        _presenter.BillBookSlipPosingRecordButtonClicked(_billBookCheckIn);
                    }
                }
                else
                {
                    _presenter.BillBookCheckInFinishButtonClicked(_billBookCheckIn);
                }
            }
        }

        private bool IsPayChequeExist()
        {
            int count = 0;
            bool chequeExist = false;
            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
            {
                BillBookCheckinDetailInfo bookDetail = (BillBookCheckinDetailInfo)r.DataBoundItem;
                DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)this.billBookSearchInfoGV["checkedDgColumn", count];
                bool isCheck = Convert.ToBoolean(cb.Value);
                if ((isCheck) && (bookDetail.PaidType == (int)PaidTypeEnum.CHEQUE) && (_billBookCheckIn.BsId != "T" && _billBookCheckIn.BsId != "C") && (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK))
                {
                    chequeExist = true;
                    break;
                }
                count++;
            }
            return chequeExist;
        }

        private void finishBt_Click(object sender, EventArgs e)
        {
            FinishCheckIn();
        }

        private void viewPaymentStatusBt_Click(object sender, EventArgs e)
        {
            string remark;
            if ((Authorization.IsAuthorized(SecurityNames.BillStatusChecking, "กรุณาระบุรหัสผู้ใช้งานเพื่อตรวจสอบสถานะข้อมูล",
                    true, "ระบุรหัสผ่านเพื่อตรวจสอบสถานะข้อมูล", out remark)))
            {
                _presenter.BillBookPaymentStatusButtonClicked(billBookIdText.Text);
            }
        }

        private void selectAllBt_Click(object sender, EventArgs e)
        {
            SelectAllGridView(false, true);
            SelectAllGridView(true, true);
            ValidateCheckIn();
            CalculateBillBookCheckIn();
        }

        private void deselectAllBt_Click(object sender, EventArgs e)
        {
            if (IsPayChequeExist())
            {
                DialogResult result = MessageBox.Show("ข้อมูลเช็คของผู้ใช้ไฟ ในสมุดจ่ายบิลจะถูกยกเลิกด้วย\n คุณต้องการยกเลิกการเลือกใช่หรือไม่", "ข้อความเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (result == DialogResult.OK)
                {
                    SelectAllGridView(false, true);
                    ValidateCheckIn();
                    CalculateBillBookCheckIn();
                    clearChequeAllBillbooks();
                }
            }
            else
            {
                SelectAllGridView(false, true);
                ValidateCheckIn();
                CalculateBillBookCheckIn();
            }
        }

        private void clearChequeAllBillbooks()
        {
            int count = 0;
            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
            {
                BillBookCheckinDetailInfo bookDetail = (BillBookCheckinDetailInfo)r.DataBoundItem;
                DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV["CancelBt", count];
                DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV["AddBt", count];

                cancelBt.ReadOnly = true;
                addBt.ReadOnly = true;
                //remove check information
                foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                {
                    if (b.InvoiceNo == bookDetail.InvoiceNo)
                    {
                        b.ChequeList = null;
                        b.PaidType = (int)PaidTypeEnum.CASH;
                        break;
                    }
                }
                addBt.Value = "เพิ่ม";
                count++;
            }
        }


        private void billBookSearchInfoGV_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            billBookSearchInfoGV.EndEdit();
            if (e.RowIndex >= 0)
            {
                BillBookCheckinDetailInfo bookDetail = (BillBookCheckinDetailInfo)billBookSearchInfoGV.Rows[e.RowIndex].DataBoundItem;
                DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)this.billBookSearchInfoGV["checkedDgColumn", e.RowIndex];
                bool isCheck = Convert.ToBoolean(cb.Value);

                if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "checkedDgColumn")
                {
                    string pmId = (string)this.billBookSearchInfoGV["PmId", e.RowIndex].Value;
                    string absId = (string)this.billBookSearchInfoGV["AbsId", e.RowIndex].Value;

                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                    {
                        if (isCheck)
                        {
                            //enable this row when user  select
                            DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV["CancelBt", e.RowIndex];
                            DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV["AddBt", e.RowIndex];

                            cancelBt.ReadOnly = false;
                            addBt.ReadOnly = false;

                            if (!bookDetail.ARActive)
                            {
                                //string messaage = "ไม่สามารถเลือกเก็บเงินได้สำหรับหนี้ของผู้ใช้ไฟฟ้าหมายเลข {0} เนื่องจากมีการแก้ไขหรือยกเลิก";
                                //string caId = Convert.ToString(this.billBookSearchInfoGV["CaId", e.RowIndex].Value);
                                //messaage = String.Format(messaage, caId);
                                //DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //billBookSearchInfoGV["checkedDgColumn", e.RowIndex].Value = false;
                                //return;

                                string messaage = "หมายเลขใบแจ้งหนี้ {0} มีการแก้ไขหรือยกเลิกจาก SAP คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
                                string caId = Convert.ToString(this.billBookSearchInfoGV["InvId", e.RowIndex].Value);
                                messaage = String.Format(messaage, caId);
                                DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (result == DialogResult.No)
                                {
                                    billBookSearchInfoGV["checkedDgColumn", e.RowIndex].Value = false;
                                    return;
                                }

                            }
                            //TO DO : Replace "C" ลูกค้าชำระที่ POS ก่อนที่ Agency จะเก็บเงินได้
                            if ((pmId != PmIdEnum.AGENCY) && (pmId != PmIdEnum.NONE) && (pmId != PmIdEnum.GROUPINVOICE))
                            {
                                string messaage = "ผู้ใช้ไฟฟ้าหมายเลข {0} มีการชำระเงินด้วยช่องทางอื่นแล้ว คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
                                string caId = Convert.ToString(this.billBookSearchInfoGV["CaId", e.RowIndex].Value);
                                messaage = String.Format(messaage, caId);
                                DialogResult result = MessageBox.Show(messaage, "การเก็บเงินซ้ำซ้อน", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (result == DialogResult.No)
                                {
                                    billBookSearchInfoGV["checkedDgColumn", e.RowIndex].Value = false;
                                    return;
                                }
                            }
                            absId = "Y";
                        }
                        else
                        {
                            //disable this row when user not select
                            if (bookDetail.PaidType == (int)PaidTypeEnum.CHEQUE)
                            {
                                DialogResult result = MessageBox.Show("ข้อมูลเช็คของผู้ใช้ไฟรายนี้จะถูกยกเลิกด้วย\n คุณต้องการยกเลิกการเลือกใช่หรือไม่", "ข้อความเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                                if (result == DialogResult.OK)
                                {
                                    DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV["CancelBt", e.RowIndex];
                                    DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV["AddBt", e.RowIndex];

                                    cancelBt.ReadOnly = true;
                                    addBt.ReadOnly = true;
                                    //remove check information
                                    foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                                    {
                                        if (b.InvoiceNo == bookDetail.InvoiceNo)
                                        {
                                            b.ChequeList = null;
                                            b.PaidType = (int)PaidTypeEnum.CASH;
                                            break;
                                        }
                                    }
                                    addBt.Value = "เพิ่ม";
                                }
                                else
                                {
                                    cb.Value = true;
                                }
                            }
                            else
                            {
                                DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV["CancelBt", e.RowIndex];
                                DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV["AddBt", e.RowIndex];

                                cancelBt.ReadOnly = true;
                                addBt.ReadOnly = true;
                            }
                            absId = "N";
                            this.billBookSearchInfoGV["AbsId", e.RowIndex].Value = absId;
                            _billBookCheckIn.BillBookCheckInDetail = CollectionBillCheckIndetail(_billBookCheckIn.BillBookCheckInDetail);
                        }
                        CalculateBillBookCheckIn();
                    }
                    else if (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE)
                    {
                        if (isCheck)
                        {
                            absId = "Y";

                            decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                            decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = debtAmount;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = paidAmount;

                            CalculateGroupInvoiceCheckIn();
                            billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];
                            billBookSearchInfoGV.BeginEdit(true);

                        }
                        else
                        {
                            decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                            decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                            decimal? totalAmount = debtAmount + paidAmount;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = 0.00M;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = totalAmount.Value;
                            absId = "N";
                            CalculateGroupInvoiceCheckIn();
                        }
                    }
                }
                else if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "AddBt")
                {
                    if ((isCheck) && (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK))
                    {
                        _billBookCheckIn.BillBookCheckInDetail = CollectionBillCheckIndetail(_billBookCheckIn.BillBookCheckInDetail);
                        _billBookCheckIn.ActiveItem = bookDetail.InvoiceNo;
                        _presenter.BillBookPaymentMethodClicked(_billBookCheckIn);
                    }
                    else
                    {
                        billBookSearchInfoGV.Columns[e.ColumnIndex].ReadOnly = true;
                    }
                }
                else if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "CancelBt")
                {
                    if ((isCheck) && (bookDetail.PaidType == (int)PaidTypeEnum.CHEQUE) && (_billBookCheckIn.BsId != "T" && _billBookCheckIn.BsId != "C") && (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK))
                    {
                        DialogResult result = MessageBox.Show("ข้อมูลเช็คของผู้ใช้ไฟรายนี้จะถูกยกเลิกด้วย\n คุณต้องการยกเลิกการเลือกใช่หรือไม่", "ข้อความเตือน", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                        if (result == DialogResult.OK)
                        {
                            DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV["CancelBt", e.RowIndex];
                            DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV["AddBt", e.RowIndex];

                            cancelBt.ReadOnly = true;
                            addBt.ReadOnly = true;
                            //remove check information
                            foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                            {
                                if (b.InvoiceNo == bookDetail.InvoiceNo)
                                {
                                    b.ChequeList = null;
                                    b.PaidType = (int)PaidTypeEnum.CASH;
                                    break;
                                }
                            }
                            addBt.Value = "เพิ่ม";
                        }
                    }
                }
                else if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "PaidAmount")
                {
                    string pmId = (string)this.billBookSearchInfoGV["PmId", e.RowIndex].Value;
                    string absId = (string)this.billBookSearchInfoGV["AbsId", e.RowIndex].Value;

                    if (pmId == PmIdEnum.GROUPINVOICE)
                    {
                        if (isCheck)
                        {
                            absId = "Y";
                            this.billBookSearchInfoGV["AbsId", e.RowIndex].Value = absId;


                            //decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                            //decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                            //billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = debtAmount;
                            //billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = paidAmount;
                            //billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];

                            if (billBookSearchInfoGV.Rows[e.RowIndex].Cells["SubGroupInvoiceNo"].Value.ToString().Trim() != "")
                            {

                            }
                            else
                            {
                                decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                                decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = debtAmount;
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = paidAmount;
                                billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];

                            }

                            billBookSearchInfoGV.BeginEdit(true);

                        }
                        else
                        {
                            decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                            decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                            decimal? totalAmount = debtAmount + paidAmount;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = 0.00M;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = totalAmount.Value;
                            absId = "N";
                            this.billBookSearchInfoGV["AbsId", e.RowIndex].Value = absId;
                            CalculateGroupInvoiceCheckIn();
                        }
                    }
                }
            }
        }

        private void branchIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if ((branchIdText.Text.Length == 0 )&& (e.KeyCode == Keys.Enter))
                MRUTextBox.Focus();
            
            if ((branchIdText.Text.Length == ModuleConfigurationNames.BranchCodeLength) && (e.KeyCode == Keys.Enter))
            {
                // 2023-11-28 
                //MRUTextBox.Focus();

                // SET SEARCH DATA
                this.SelectGroupInvoice("BRANCHID", this.branchIdText.Text.Trim());
                branchIdText.Text = string.Empty;
                branchIdText.Focus();
            }

            if (e.KeyCode == Keys.F12)
            {
                FinishCheckIn();
            }
        }

        private void billBookIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                _billBookCheckIn = new BillBookCheckInInfo();
                string branchId = Session.Branch.Id;
                string billBookId = String.Format("{0}{1}", branchId, PadBillbookId(billBookIdText.Text.Trim()));
                _billBookCheckIn = _presenter.BillBookIdTextChangeCommitted(billBookId, BookTypeEnum.BILLBOOK, Session.Branch.Id);

                //search by group invoice
                if (_billBookCheckIn.BookId == null)
                {
                    _billBookCheckIn = _presenter.BillBookIdTextChangeCommitted(billBookIdText.Text.Trim(), BookTypeEnum.GROUP_INVOICE, Session.Branch.Id);
                }

                BindData();

                if (_billBookCheckIn.BookId != null)
                {
                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                    {
                        SelectAllGridView(true, false);
                        headerView.Visible = true;
                        saveBt.Enabled = true;
                        billBookSearchInfoGV.Columns["AddBt"].Visible = true;
                        billBookSearchInfoGV.Columns["CancelBt"].Visible = true;
                        billBookSearchInfoGV.Columns["TotalAmount"].Visible = true;
                        billBookSearchInfoGV.Columns["ARActive"].Visible = true;
                        if (_billBookCheckIn.BsId != BsIdEnum.CUT)
                        {
                            editCheckInBt.Enabled = false;
                            viewPaymentStatusBt.Enabled = true;
                        }
                        else
                        {
                            editCheckInBt.Enabled = true;
                            viewPaymentStatusBt.Enabled = true;
                        }

                        //เปิดปิดปุ่ม ยกเลิการตัดชำระ 
                        if (PaidStatus.Text.Trim().Equals("1")) //มีการจ่ายแล้ว ยกเลิกไม่ได้
                        {
                            editCheckInBt.Enabled = false;
                        }
                        else if (PaidStatus.Text.Trim().Equals("0"))//ยังมีการจ่ายแล้ว ยกเลิกได้
                        {
                            editCheckInBt.Enabled = true;
                        }

                    }
                    else
                    {
                        GroupInvoiceAlreadyCheckIn();
                        headerView.Visible = false;
                        saveBt.Enabled = false;
                        billBookSearchInfoGV.Columns["TotalAmount"].Visible = false;
                        billBookSearchInfoGV.Columns["AddBt"].Visible = false;
                        billBookSearchInfoGV.Columns["CancelBt"].Visible = false;
                        billBookSearchInfoGV.Columns["ARActive"].Visible = false;
                        editCheckInBt.Enabled = false;
                        viewPaymentStatusBt.Enabled = false;
                    }

                    //ย้ายไปไว้ในส่วนของ Billbook
                    //if (PaidStatus.Text.Trim().Equals("1"))
                    //{
                    //    editCheckInBt.Enabled = false;
                    //}
                    //else if (PaidStatus.Text.Trim().Equals("0"))
                    //{
                    //    editCheckInBt.Enabled = true;
                    //}
                }
                //else
                //{
                //    editCheckInBt.Enabled = false;
                //}
            }
        }

        private void MRUTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if ((MRUTextBox.Text.Length == 0) && (e.KeyCode == Keys.Enter))
                CaIdTextBox.Focus();

            if ((MRUTextBox.Text.Length == ModuleConfigurationNames.MRUCodeLength) && (e.KeyCode == Keys.Enter))
            {
                // SET SEARCH DATA
                this.SelectGroupInvoice("MRUID", this.MRUTextBox.Text.Trim());
                this.MRUTextBox.Text = string.Empty;
                this.MRUTextBox.Focus();
            }

            if (e.KeyCode == Keys.F12)
            {
                FinishCheckIn();
            }
        }

        //private void CaIdTextBox_KeyDown(object sender, KeyEventArgs e)
        //{
        //    bool _found = false;
        //    if (e.KeyCode == Keys.F12)
        //    {
        //        MRUTextBox.SelectAll();
        //        MRUTextBox.Focus();
        //    }
        //    else if (e.KeyCode == Keys.Enter)
        //    {
        //        if ((branchIdText.Text.Trim() != String.Empty) && (MRUTextBox.Text.Trim() != String.Empty) && (CaIdTextBox.Text.Trim() != String.Empty))
        //        {
        //            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
        //            {

        //                r.Selected = false;
        //                string _mruId = this.billBookSearchInfoGV["MruId", r.Index].Value.ToString();
        //                string _calId = this.billBookSearchInfoGV["CaId", r.Index].Value.ToString();
        //                string _branchId = this.billBookSearchInfoGV["BranchId", r.Index].Value.ToString();
        //                if ((_branchId == branchIdText.Text) && (_mruId == MRUTextBox.Text) && (_calId == CaIdTextBox.Text.PadLeft(ModuleConfigurationNames.CustomerNoLength, '0')))
        //                {
        //                    if( (Convert.ToString(r.Cells["ARActive"].Value) == "ยกเลิก") && (_billBookCheckIn.BookType != (int)BookTypeEnum.GROUP_INVOICE))
        //                    {
        //                        //r.Cells[0].Value = false;
        //                        //billBookSearchInfoGV.CurrentCell = r.Cells[0];
        //                        //string messaage = "ไม่สามารถเลือกเก็บเงินได้สำหรับหนี้ของผู้ใช้ไฟฟ้าหมายเลข {0} เนื่องจากมีการแก้ไขหรือยกเลิก";
        //                        //string caId = Convert.ToString(r.Cells["CaId"].Value);
        //                        //messaage = String.Format(messaage, caId);
        //                        //DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //                        //_found = true;
        //                        //break;


        //                        if (r.Cells[0].Value != null)
        //                        {
        //                            if (!((bool)(r.Cells[0].Value)))
        //                            {
        //                                string messaage = "หมายเลขใบแจ้งหนี้ {0} มีการแก้ไขหรือยกเลิกจาก SAP คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
        //                                string caId = Convert.ToString(this.billBookSearchInfoGV["InvId", r.Index].Value.ToString());
        //                                messaage = String.Format(messaage, caId);
        //                                DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        //                                if (result == DialogResult.Yes)
        //                                {
        //                                    r.Cells[0].Value = true;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                r.Cells[0].Value = false;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            r.Cells[0].Value = false;
        //                        }
        //                        r.Selected = true;
        //                        _found = true;
        //                        billBookSearchInfoGV.CurrentCell = r.Cells[0];
        //                        break;
        //                    }
        //                    else if (r.Cells[0].ValueType.Name.Equals("Boolean"))
        //                    {
        //                        bool isChecked = false;
        //                        if (r.Cells[0].Value != null)
        //                        {
        //                            r.Cells[0].Value = !((bool)(r.Cells[0].Value));
        //                            isChecked = (bool)r.Cells[0].Value == true ? true : false;
        //                        }
        //                        else
        //                        {
        //                            r.Cells[0].Value = false;
        //                            isChecked = true;
        //                        }
        //                        r.Selected = true;
        //                        _found = true;
        //                        billBookSearchInfoGV.CurrentCell = r.Cells[0];

        //                        string pmId = (string)this.billBookSearchInfoGV["PmId", r.Index].Value;
        //                        string absId = (string)this.billBookSearchInfoGV["AbsId", r.Index].Value;
        //                        if (pmId == PmIdEnum.GROUPINVOICE)
        //                        {
        //                            if (isChecked)
        //                            {
        //                                absId = "Y";

        //                                decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value.ToString());
        //                                decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value.ToString());
        //                                billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value = debtAmount;
        //                                billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value = paidAmount;
        //                                this.billBookSearchInfoGV["AbsId", r.Index].Value = absId;
        //                                CalculateGroupInvoiceCheckIn();
        //                                billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"];
        //                                billBookSearchInfoGV.BeginEdit(true);

        //                            }
        //                            else
        //                            {
        //                                decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value.ToString());
        //                                decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value.ToString());
        //                                decimal? totalAmount = debtAmount + paidAmount;
        //                                billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value = 0.00M;
        //                                billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value = totalAmount.Value;
        //                                absId = "N";
        //                                this.billBookSearchInfoGV["AbsId", r.Index].Value = absId;
        //                                CalculateGroupInvoiceCheckIn();
        //                            }
        //                        }
        //                        // 20231124 เลือกรายการของ CaId ที่ระบุทั้งหมด  เดิมทำเพียง 1 รายการแล้วหยุด
        //                        //break;   
        //                    }


        //                }
        //            }
        //            if (!_found)
        //            {
        //                MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //                return;
        //            }
        //            else
        //            {
        //                CalculateBillBookCheckIn();
        //                CaIdTextBox.Text = String.Empty;

        //            }
        //        }
        //        else if (CaIdTextBox.Text.Length == ModuleConfigurationNames.CustomerBarCodeLength)
        //        {
        //            string input = CaIdTextBox.Text.Trim();
        //            BarcodeHelper bar = new BarcodeHelper(input);

        //            if (bar.Mru != null)
        //            {
        //                string mruId = bar.Mru[1];
        //                foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
        //                {
        //                    r.Selected = false;
        //                    string _mruId = this.billBookSearchInfoGV["MruId", r.Index].Value.ToString();
        //                    string _calId = this.billBookSearchInfoGV["CaID", r.Index].Value.ToString();
        //                    string _branchId = this.billBookSearchInfoGV["BranchId", r.Index].Value.ToString();
        //                    if ((_branchId == bar.BranchId) && (_mruId == mruId) && (_calId == bar.CaId))
        //                    {
        //                        //  this.billBookSearchInfoGV[0, r.Index].Value = false;
        //                        r.Selected = true;
        //                        _found = true;
        //                        break;
        //                    }
        //                }
        //                if (!_found)
        //                {
        //                    MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //                    CaIdTextBox.Text = String.Empty;
        //                    return;
        //                }
        //                else
        //                {
        //                    CalculateBillBookCheckIn();
        //                    CaIdTextBox.Text = String.Empty;
        //                    billBookSearchInfoGV.Focus();
        //                }

        //            }
        //            else
        //            {
        //                MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //                CaIdTextBox.Text = String.Empty;
        //                return;
        //            }
        //        }
        //        else
        //        {
        //            MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //            CaIdTextBox.Text = String.Empty;
        //            return;
        //        }
        //    }

        //    if (e.KeyCode == Keys.F12)
        //    {
        //        FinishCheckIn();
        //    }
        //}

        private void CaIdTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            //bool _found = false;
            if (e.KeyCode == Keys.F12)
            {
                MRUTextBox.SelectAll();
                MRUTextBox.Focus();
            }
            else if ( (this.CaIdTextBox.Text.Trim().Length > 0) &&  (e.KeyCode == Keys.Enter))
            {
                this.SelectGroupInvoice("CAID", this.CaIdTextBox.Text.Trim());
                this.CaIdTextBox.Text = string.Empty;
                this.CaIdTextBox.Focus();
            }
            else if ((this.CaIdTextBox.Text.Trim().Length == 0) && (e.KeyCode == Keys.Enter))
            {
                branchIdText.Focus();
            }

            if (e.KeyCode == Keys.F12)
            {
                FinishCheckIn();
            }
        }

        private void editCheckInBt_Click(object sender, EventArgs e)
        {

            if ((_billBookCheckIn.BookId == null) || (_billBookCheckIn.BsId == "T"))
            {
                string remark;
                if ((Authorization.IsAuthorized(SecurityNames.CancelCheckIn, "กรุณาระบุรหัสผู้ใช้งานเพื่อยืนยันการยกเลิกการตัดชำระสมุดจ่ายบิล",
                        true, "ระบุรหัสผ่านเพื่อยืนยันการยกเลิกการตัดชำระสมุดจ่ายบิล", out remark)))
                {
                    string billBookId = _billBookCheckIn == null ? String.Empty : _billBookCheckIn.BookId;
                    _presenter.BillBookUndoSaveImgButtonClicked(billBookId);
                }
            }
            else
            {
                MessageBox.Show("ไม่สามารถยกเลิกสมุดจ่ายบิลได้เนื่องจากสมุดจ่ายบิลไม่ได้อยู่ในสถานะของการตัดชำระ", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RePrintButton_Click(object sender, EventArgs e)
        {
            //fix me!
            //LoginForm loginFm = new LoginForm();
            //loginFm.ShowDialog();

            if (this.billBookIdText.Text != "" && this.AgencyIdText.Text != "")
            {
                CheckInBillBookConditionInfoReport myCondition = new CheckInBillBookConditionInfoReport();
                myCondition.PrintPreview = printPreviewCb.Checked;
                myCondition.AgentId = this.AgencyIdText.Text.PadLeft(12, '0');
                myCondition.BillBookId = String.Format("{0}{1}", Session.Branch.Id, this.billBookIdText.Text);
                // _presenter.ReprintLoadPasteBillWithCustomerReportActivated(myCondition);
                _presenter.ReprintReportOfReturnBillBookClick(myCondition);
            }
        }

        private void billBookSearchInfoGV_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                BillBookCheckinDetailInfo detail = (BillBookCheckinDetailInfo)billBookSearchInfoGV.Rows[e.RowIndex].DataBoundItem;
                if (billBookSearchInfoGV.Rows[e.RowIndex].Cells["AddBt"].Value == null)
                {
                    DataGridViewButtonCell cancelBt = (DataGridViewButtonCell)billBookSearchInfoGV.Rows[e.RowIndex].Cells["CancelBt"];
                    DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV.Rows[e.RowIndex].Cells["AddBt"];
                    //DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)billBookSearchInfoGV.Rows[e.RowIndex].Cells["checkedDgColumn"];

                    if ((detail.AbsId == AbsIdEnum.COLLECTED) || (detail.PaidType == (int)PaidTypeEnum.CHEQUE))
                    {
                        cancelBt.ReadOnly = false;
                        addBt.ReadOnly = false;

                        if (detail.PaidType == (int)PaidTypeEnum.CHEQUE)
                            addBt.Value = "แก้ไข";
                        else
                            addBt.Value = "เพิ่ม";
                        cancelBt.Value = "ยกเลิก";
                    }
                    else
                    {
                        addBt.Value = "เพิ่ม";
                        cancelBt.Value = "ยกเลิก";
                        cancelBt.ReadOnly = true;
                        addBt.ReadOnly = true;
                    }
                }

                if (billBookSearchInfoGV.Rows[e.RowIndex].Cells["ARActive"].Value == null)
                {
                    billBookSearchInfoGV.Rows[e.RowIndex].Cells["ARActive"].Value = detail.ARActive == true ? "ปกติ" : "ยกเลิก" ;                                                                             
                }

                if ((billBookSearchInfoGV.Rows[e.RowIndex].Cells["PmName"].Value == null) && (PmList != null))
                {
                    BillBookCheckinDetailInfo _detail = (BillBookCheckinDetailInfo)billBookSearchInfoGV.Rows[e.RowIndex].DataBoundItem;
                    string _pmName = PmList.GetHashValueById(_detail.PmId);
                    billBookSearchInfoGV.Rows[e.RowIndex].Cells["PmName"].Value = _pmName;
                }
            }
        }

        private void clearBt_Click(object sender, EventArgs e)
        {
            ClearBillBookCheckInScreen();
        }

        private void billBookSearchInfoGV_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                FinishCheckIn();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                foreach (DataGridViewRow row in billBookSearchInfoGV.SelectedRows)
                {
                    bool selected = (bool)row.Cells["checkedDgColumn"].Value;
                    row.Cells["checkedDgColumn"].Value = !selected;
                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE)
                    {
                        if (!selected)
                        {
                            decimal? paidAmount = StringConvert.ToDecimal(row.Cells["PaidAmount"].Value.ToString());
                            decimal? debtAmount = StringConvert.ToDecimal(row.Cells["TotalDebt"].Value.ToString());
                            if (paidAmount == 0)
                            {
                                row.Cells["PaidAmount"].Value = debtAmount;
                                row.Cells["TotalDebt"].Value = paidAmount;
                            }

                            row.Cells["PaidAmount"].ReadOnly = false;
                            billBookSearchInfoGV.CurrentCell = row.Cells["PaidAmount"];
                            billBookSearchInfoGV.BeginEdit(true);
                            break;
                        }
                        else
                        {
                            decimal? paidAmount = StringConvert.ToDecimal(row.Cells["PaidAmount"].Value.ToString());
                            decimal? totalAmount = StringConvert.ToDecimal(row.Cells["TotalAmount"].Value.ToString());
                            row.Cells["PaidAmount"].Value = 0.00M;
                            row.Cells["TotalDebt"].Value = totalAmount.Value;
                        }

                        ChkSubGroupInvoiceCheckIn(row.Index);
                    }

                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                    {
                        CalculateBillBookCheckIn();
                    }
                    
                }
            }
        }

        private void bookIdImgHint_Click(object sender, EventArgs e)
        {
            ArrayList parem = new ArrayList();
            parem.Add("เลขที่สมุดจ่ายบิล");
            parem.Add("ระบุเลขที่สมุดจ่ายบิล หรือ");
            parem.Add("เลขที่ใบแจ้งหนี้หน่วยงาน");
            parem.Add("เลขที่สมุดจ่ายบิลเป็นตัวเลข 9 หลัก");
            parem.Add("ตัวอย่าง \"500000001\"");
            _presenter.ShowHint(parem);
        }

        private void billBookSearchInfoGV_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "PaidAmount")
                {
                    //CalculateGroupInvoiceCheckIn();
                    BillBookCheckinDetailInfo bookDetail = (BillBookCheckinDetailInfo)this.billBookSearchInfoGV.Rows[e.RowIndex].DataBoundItem;
                    DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)this.billBookSearchInfoGV["checkedDgColumn", e.RowIndex];
                    bool isCheck = Convert.ToBoolean(cb.Value);

                    ChkSubGroupInvoiceCheckIn(e.RowIndex);

                    if (isCheck)
                    {
                        if (e.ColumnIndex != 0)
                        {
                            decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                            decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value.ToString());
                            if (paidAmount == 0)
                            {
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = debtAmount;
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = paidAmount;
                            }
                            
                            //billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = false;
                            //billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];
                            //billBookSearchInfoGV.BeginEdit(true);
                            //billBookSearchInfoGV.Rows[e.RowIndex].Selected = true;

                            if(billBookSearchInfoGV.Rows[e.RowIndex].Cells["SubGroupInvoiceNo"].Value.ToString().Trim() != "")
                            {
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = true;
                                //billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];
                                //billBookSearchInfoGV.BeginEdit(true);
                                //billBookSearchInfoGV.Rows[e.RowIndex].Selected = true;
                            }
                            else
                            {
                                billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = false;
                                billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"];
                                billBookSearchInfoGV.BeginEdit(true);
                                billBookSearchInfoGV.Rows[e.RowIndex].Selected = true;
                            }
                        }
                    }
                    else
                    {
                        billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].ReadOnly = true;
                    }
                }
            }
        }

        #endregion

        #region "Helper"

        private void FillReturnedBillBookAmountSumInfo()
        {
            billCollectCount.Text = _returnedBillBookAmountSumInfo.CanCollectBillCount.ToString();
            billCannotCollectCount.Text = _returnedBillBookAmountSumInfo.ConnotCollectBillCount.ToString();
            collectAmount.Text = _returnedBillBookAmountSumInfo.CanCollectBillAmount.ToString();
            cannotCollectAmount.Text = _returnedBillBookAmountSumInfo.CannotCollectBillAmount.ToString();
        }

        private void CalculateBillBookCheckIn()
        {
            billBookSearchInfoGV.EndEdit();

            int _collectionCount = 0;
            decimal _collectionAmount = 0;
            int _cannotCollectionCount = 0;
            decimal _cannotCollectionAmount = 0;
            decimal ItemPaid = 0;

            if (_billBookCheckIn != null)
            {
                for (int i = 0; i < billBookSearchInfoGV.Rows.Count; i++)
                {
                    if ((billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value != null) && ((bool)billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value) == true)
                    {
                        _collectionAmount += Convert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["TotalAmount"].Value);
                        _collectionCount += 1;
                    }
                    else
                    {
                        _cannotCollectionAmount += Convert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["TotalAmount"].Value);
                        _cannotCollectionCount += 1;
                    }

                    ItemPaid += Convert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["ItemPaid"].Value);
                }
            }
            billCollectCount.Text = _collectionCount.ToString();
            collectAmount.Text = _collectionAmount.ToString("#,##0.00");
            billCannotCollectCount.Text = _cannotCollectionCount.ToString();
            cannotCollectAmount.Text = _cannotCollectionAmount.ToString("#,##0.00");

            if (ItemPaid > 0)
            {
                PaidStatus.Text = "1"; //Paid
            }
            else {
                PaidStatus.Text = "0"; //Not Paid
            }
        }

        private void GroupInvoiceAlreadyCheckIn()
        {
            if (_billBookCheckIn == null)
            {
                return;
            }

            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
            {
                bool isCheckIn = Convert.ToBoolean(billBookSearchInfoGV["IsCheckIn", r.Index].Value);
                this.billBookSearchInfoGV[0, r.Index].Value = isCheckIn;
            }
            CalculateGroupInvoiceCheckIn();
        }

        private void SelectAllGridView(bool setValue, bool otherChannel)
        {
            if (_billBookCheckIn == null)
            {
                return;
            }
            else if (_billBookCheckIn.BsId != BsIdEnum.CUT)
            {
                foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
                {
                    if (!setValue || _billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE || (r.Cells["ARActive"].Value == null ? "" : r.Cells["ARActive"].Value.ToString()) != "ยกเลิก")
                    {
                        BillBookCheckinDetailInfo bookDetail = (BillBookCheckinDetailInfo)r.DataBoundItem;
                        if (otherChannel)
                        {
                            this.billBookSearchInfoGV[0, r.Index].Value = setValue;
                            string pmId = r.Cells["pmId"].Value.ToString();

                            if (pmId == PmIdEnum.GROUPINVOICE)
                            {
                                if (setValue)
                                {
                                    decimal? paidAmount = StringConvert.ToDecimal(r.Cells["PaidAmount"].Value.ToString());
                                    decimal? debtAmount = StringConvert.ToDecimal(r.Cells["TotalAmount"].Value.ToString());
                                    r.Cells["PaidAmount"].Value = debtAmount;
                                    r.Cells["TotalDebt"].Value = 0.00M;
                                }
                                else
                                {
                                    decimal? paidAmount = StringConvert.ToDecimal(r.Cells["PaidAmount"].Value.ToString());
                                    decimal? totalAmount = StringConvert.ToDecimal(r.Cells["TotalAmount"].Value.ToString());
                                    r.Cells["PaidAmount"].Value = 0.00M;
                                    r.Cells["TotalDebt"].Value = totalAmount.Value;
                                }
                            }

                        }
                        else
                        {
                            string pmId = Convert.ToString(billBookSearchInfoGV["pmId", r.Index].Value);
                            if ((pmId == PmIdEnum.AGENCY) || (pmId == PmIdEnum.NONE) || (pmId == PmIdEnum.GROUPINVOICE) || (pmId == PmIdEnum.POS) || (pmId == PmIdEnum.DOUBLE))
                            {
                                if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                                {
                                    if (bookDetail.InvSel)
                                    {
                                        this.billBookSearchInfoGV[0, r.Index].Value = true;
                                    }
                                    else
                                    {
                                        this.billBookSearchInfoGV[0, r.Index].Value = false;
                                    }
                                }
                                else
                                {
                                    this.billBookSearchInfoGV[0, r.Index].Value = setValue;
                                }

                                if (pmId == PmIdEnum.GROUPINVOICE)
                                {
                                    if (setValue)
                                    {
                                        decimal? paidAmount = StringConvert.ToDecimal(r.Cells["PaidAmount"].Value.ToString());
                                        decimal? debtAmount = StringConvert.ToDecimal(r.Cells["TotalAmount"].Value.ToString());
                                        r.Cells["PaidAmount"].Value = debtAmount;
                                        r.Cells["TotalDebt"].Value = paidAmount;
                                    }
                                    else
                                    {
                                        decimal? paidAmount = StringConvert.ToDecimal(r.Cells["PaidAmount"].Value.ToString());
                                        decimal? debtAmount = StringConvert.ToDecimal(r.Cells["TotalAmount"].Value.ToString());
                                        decimal? totalAmount = debtAmount + paidAmount;
                                        r.Cells["PaidAmount"].Value = 0.00M;
                                        r.Cells["TotalDebt"].Value = totalAmount.Value;
                                    }
                                }

                                else if (!bookDetail.ARActive)
                                {
                                    if (bookDetail.InvSel)
                                    {
                                        this.billBookSearchInfoGV[0, r.Index].Value = true;
                                    }
                                    else
                                    {
                                        this.billBookSearchInfoGV[0, r.Index].Value = false;
                                    }
                                    DataGridViewRow theRow = this.billBookSearchInfoGV.Rows[r.Index];
                                    theRow.DefaultCellStyle.BackColor = Color.Red;

                                }
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
                {
                    string absId = Convert.ToString(billBookSearchInfoGV["AbsId", r.Index].Value);
                    if ((absId == AbsIdEnum.DOUBLE) || (absId == AbsIdEnum.COLLECTED))
                    {
                        this.billBookSearchInfoGV[0, r.Index].Value = setValue;
                    }
                }
            }
            CalculateBillBookCheckIn();
        }

        private bool BillBookSelectAll()
        {
            bool retVal = true;
            for (int i = 0; i < billBookSearchInfoGV.Rows.Count; i++)
            {
                if (!((billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value != null) && ((bool)billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value) == true))
                {
                    retVal = false;
                    break;
                }
            }
            return retVal;
        }


        private List<BillBookCheckinDetailInfo> CollectionBillCheckIndetail(List<BillBookCheckinDetailInfo> billBookDetails)
        {
            List<BillBookCheckinDetailInfo> retVals = new List<BillBookCheckinDetailInfo>();
            try
            {
                WaitingFormHelper.ShowWaitingForm();
                foreach (DataGridViewRow row in billBookSearchInfoGV.Rows)
                {
                    foreach (BillBookCheckinDetailInfo b in billBookDetails)
                    {
                        //if (b.InvoiceNo == row.Cells["InvId"].Value.ToString() )
                        if (b.InvoiceNo == row.Cells["InvId"].Value.ToString() && b.CaId == row.Cells["CaID"].Value.ToString()) //เพิ่ม CaId เพื่อป้องกัน Invoice ซ้ำ
                        {
                            bool _canCollect = Convert.ToBoolean(row.Cells["checkedDgColumn"].Value);
                            string _pmId = row.Cells["PmId"].Value.ToString();
                            if (_canCollect)
                            {
                                if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                                {
                                    b.PmId = PmIdEnum.AGENCY; // ตัวแทนเก็บเงิน: วางบิลเก็บเงิน                                                                      
                                }
                                else
                                {
                                    // only groupinvoicing can partial payment.
                                    decimal? paidAmount = StringConvert.ToDecimal(row.Cells["PaidAmount"].Value.ToString());
                                    decimal? totalAmount = StringConvert.ToDecimal(row.Cells["TotalAmount"].Value.ToString());
                                    b.PmId = PmIdEnum.GROUPINVOICE;
                                    b.PaidAmount = paidAmount;
                                    b.TotalDebtAmount = totalAmount - paidAmount;
                                }
                                b.AbsId = AbsIdEnum.COLLECTED; // เก็บเงินได้    
                                // b.LastPaidDt = Session.BpmDateTime.Now;
                            }
                            else
                            {
                                if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                                {
                                    b.AbsId = AbsIdEnum.UNDEFINE;
                                }
                                else
                                {
                                    b.AbsId = AbsIdEnum.UNCOLLECTED;
                                    b.PaidAmount = 0;
                                }

                            }
                            if (b.PaidType == (int)PaidTypeEnum.UNDEFINE)
                            {
                                b.PaidType = (int)PaidTypeEnum.CASH;
                            }

                            retVals.Add(b);
                            break;
                        }
                    }
                }
                WaitingFormHelper.HideWaitingForm();
            }
            catch (Exception ex)
            {

                WaitingFormHelper.HideWaitingForm();
                Logger.WriteError(Logger.Module.AGENCY, "ตัดชำระสมุดจ่ายบิล /Group Invoicing", ex.ToString());
                MessageBox.Show("ไม่ทำการรับคืนสมุดจ่ายบิลได้ โปรดติดต่อผู้ดูแลระบบ\n", "ข้อผิดพลาด",
                   MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return retVals;
        }

        private void DisableBookCheckIn()
        {
            billBookSearchInfoGV.Enabled = true;
            billBookSearchInfoGV.Columns["checkedDgColumn"].ReadOnly = true;
            //billBookSearchInfoGV.Columns["AddBt"].Frozen  = true;
            //billBookSearchInfoGV.Columns["CancelBt"].Frozen = true;
            selectAllBt.Enabled = false;
            deselectAllBt.Enabled = false;
            finishBt.Enabled = false;
            saveBt.Enabled = false;
        }

        private void EnableBookCheckIn()
        {
            billBookSearchInfoGV.Enabled = true;
            billBookSearchInfoGV.Columns["checkedDgColumn"].ReadOnly = false;
            //billBookSearchInfoGV.Columns["AddBt"].ReadOnly = false;
            //billBookSearchInfoGV.Columns["CancelBt"].ReadOnly = false;
            selectAllBt.Enabled = true;
            deselectAllBt.Enabled = true;
            finishBt.Enabled = true;
            saveBt.Enabled = true;
        }

        private void BindData()
        {
            try
            {
                EnableBookCheckIn();
                if (_billBookCheckIn.BookId != null)
                {
                    if (_billBookCheckIn.BookId.Length == ModuleConfigurationNames.BillBookIdLength)
                        billBookIdText.Text = _billBookCheckIn.BookId.Substring(ModuleConfigurationNames.BranchCodeLength, ModuleConfigurationNames.BillBookLengthOnly);
                    else
                        billBookIdText.Text = _billBookCheckIn.BookId;

                    if (_billBookCheckIn.BillAgentId == null)
                    {
                        //"ไม่พบข้อมูล CA Payer จากข้อมูลที่ค้นหา"  -- 2022-08-15 ข้อความเดิม
                         MessageBox.Show("ไม่พบข้อมูล CA Payer ที่ค้นหา เนื่องจากประวัติถูกแก้ไข โปรดตรวจสอบ CA Master", "โปรดทราบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        finishBt.Enabled = false; 
                    }
                    else
                    {
                        typeText.Text = _billBookCheckIn.BookOutType;
                        AgencyIdText.Text = _billBookCheckIn.BillAgentId.Substring(_billBookCheckIn.BillAgentId.Length - ModuleConfigurationNames.AgentIdLength, ModuleConfigurationNames.AgentIdLength);
                        AgencyName.Text = _billBookCheckIn.BillAgentName;
                        CollectType.Text = _presenter.GetContractType(_billBookCheckIn.ContractType == (int)ContractTypeEnum.EMPLOYEE ? ((int)ContractTypeEnum.EMPLOYEE).ToString() : _billBookCheckIn.AccountClassId);
                        receiveText.Text = _billBookCheckIn.ReceiveCount.ToString().PadLeft(2, '0');
                        billStatusText.Text = BillStatusList.GetHashValueById(_billBookCheckIn.BsId);
                        billPaymentDateText.Text = _billBookCheckIn.BillPaymentDate == null ? String.Empty : _billBookCheckIn.BillPaymentDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                        paidDateText.Text = _billBookCheckIn.PaidDate == null ? String.Empty : _billBookCheckIn.PaidDate.Value.ToString("dd/MM/yyyy", new CultureInfo("th-TH"));
                        billBookSearchInfoGV.DataSource = _billBookCheckIn.BillBookCheckInDetail;
                        bookTypeText.Text = _billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK ? "สมุดจ่ายบิล" : "ใบแจ้งหนี้หน่วยงาน ";

                        if (_billBookCheckIn.BsId != BsIdEnum.CUT)
                        {
                            if (_billBookCheckIn.BsId != BsIdEnum.CANCEL)
                            {
                                billBookSearchInfoGV.Columns["CancelBt"].ReadOnly = false;
                                billBookSearchInfoGV.Columns["AddBt"].ReadOnly = false;

                                billBookSearchInfoGV.Columns["PaidAmount"].Visible = false;
                                billBookSearchInfoGV.Columns["TotalDebt"].Visible = false;
                                billBookSearchInfoGV.Columns["PmName"].Visible = true;


                                if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                                {
                                    if (!Authorization.IsAuthorized(SecurityNames.ReprintCheckInReport, "Reprint check-in billbook", true))
                                    {
                                        RePrintButton.Enabled = false;
                                        return;
                                    }
                                }
                                else //group invoicing
                                {
                                    billBookSearchInfoGV.Columns["CancelBt"].ReadOnly = true;
                                    billBookSearchInfoGV.Columns["AddBt"].ReadOnly = true;

                                    billBookSearchInfoGV.Columns["PaidAmount"].Visible = true;
                                    billBookSearchInfoGV.Columns["TotalDebt"].Visible = true;
                                    billBookSearchInfoGV.Columns["PmName"].Visible = false;

                                    if (!Authorization.IsAuthorized(SecurityNames.CheckiInGroupInvoice, "Check-in group invoicing", true))
                                    {
                                        RePrintButton.Enabled = false;
                                        return;
                                    }
                                }

                                if (_billBookCheckIn.BillBookCheckInDetail != null && _billBookCheckIn.BillBookCheckInDetail.Count > 0)
                                {
                                    billBookSearchInfoGV.Enabled = true;
                                    selectAllBt.Enabled = true;
                                    deselectAllBt.Enabled = true;
                                    finishBt.Enabled = true;
                                    saveBt.Enabled = true;
                                    RePrintButton.Enabled = false;
                                    // Disable  20231128 Select Grid.
                                    //branchIdText.Text = _billBookCheckIn.BillBookCheckInDetail[0].BranchId.ToString();
                                    branchIdText.Focus();
                                }
                                else
                                {
                                    MessageBox.Show("ไม่พบข้อมูลสมุดจ่ายบิล", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    ClearBillBookCheckInScreen();
                                    billBookIdText.Clear();
                                    billBookIdText.Focus();
                                }
                            }
                            else
                            {
                                MessageBox.Show("สมุดจ่ายบิลถูกยกเลิกแล้ว", "สถานะสมุดจ่ายบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                DisableBookCheckIn();
                                RePrintButton.Enabled = false;
                            }
                        }
                        else
                        {
                            MessageBox.Show("สมุดจ่ายบิลถูกตัดชำระแล้ว", "สถานะสมุดจ่ายบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            DisableBookCheckIn();
                            RePrintButton.Enabled = true;
                        }
                        if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                        {
                            CalculateBillBookCheckIn();
                        }
                        else
                        {
                            CalculateGroupInvoiceCheckIn();
                        }
                        finishBt.Enabled = true;
                    }
                }
                else
                {
                    if (_billBookCheckIn.BookType == (int)BookTypeEnum.BILLBOOK)
                        MessageBox.Show("ไม่พบข้อมูลสมุดจ่ายบิล", "โปรดทราบ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else
                        MessageBox.Show("ไม่พบข้อมูลที่ต้องการ\n\nกรณีตัดชำระแบบรวมศูนย์ - กรุณาตรวจสอบรายการ \nโดยนำเลขที่ มท.ไปพิมพ์ที่ SAP(T-Code:ZCADE006) อีกครั้ง\nกรณีตัดชำระสมุดจ่ายบิล - กรุณาป้อนหมายเลขสมุดจ่ายบิลให้ถูกต้อง", "โปรดทราบ", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    ClearBillBookCheckInScreen();
                    billBookIdText.Clear();
                    billBookIdText.Focus();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ข้อผิดพลาด");
            }
        }

        private void ValidateCheckIn()
        {
            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
            {
                BillBookCheckinDetailInfo billBookDetail = (BillBookCheckinDetailInfo)r.DataBoundItem;
                string _pmId = (string)this.billBookSearchInfoGV["PmId", r.Index].Value;
                if ((_pmId != PmIdEnum.AGENCY) && (_pmId != PmIdEnum.NONE) && (_pmId != PmIdEnum.GROUPINVOICE))
                {
                    //TO DO : Replace "C" ลูกค้าชำระที่ POS ก่อนที่ Agency จะเก็บเงินได้
                    bool _isCheckIn = Convert.ToBoolean(billBookSearchInfoGV[0, r.Index].Value);
                    if (_isCheckIn)
                    {
                        string _messaage = "ผู้ใช้ไฟฟ้าหมายเลข {0} มีการชำระเงินด้วยช่องทางอื่นแล้ว คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
                        string _caId = this.billBookSearchInfoGV["CaId", r.Index].Value.ToString();
                        _messaage = String.Format(_messaage, _caId);
                        DialogResult _result = MessageBox.Show(_messaage, "การเก็บเงินซ้ำซ้อน", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (_result == DialogResult.No)
                        {
                            billBookSearchInfoGV[0, r.Index].Value = false;
                        }
                    }
                }
                else if ((!billBookDetail.ARActive) && (_pmId != PmIdEnum.GROUPINVOICE))
                {
                    if (billBookSearchInfoGV[0, r.Index].Value != null)
                    {
                        if (Convert.ToBoolean(billBookSearchInfoGV[0, r.Index].Value))
                        {
                            //string messaage = "ไม่สามารถเลือกเก็บเงินได้สำหรับหนี้ของผู้ใช้ไฟฟ้าหมายเลข {0} เนื่องจากมีการแก้ไขหรือยกเลิก";
                            //string caId = billBookDetail.CaId;
                            //messaage = String.Format(messaage, caId);
                            //DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            //billBookSearchInfoGV[0, r.Index].Value = false;

                            string _messaage = "หมายเลขใบแจ้งหนี้ {0} มีการแก้ไขหรือยกเลิกจาก SAP คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
                            string _caId = this.billBookSearchInfoGV["InvId", r.Index].Value.ToString();
                            _messaage = String.Format(_messaage, _caId);
                            DialogResult _result = MessageBox.Show(_messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                            if (_result == DialogResult.No)
                            {
                                billBookSearchInfoGV[0, r.Index].Value = false;
                            }
                        }
                    }
                }
            }
        }

        public void FocusBillBookId()
        {
            billBookIdText.Focus();
            billBookIdText.SelectAll();
        }

        public void ClearBillBookCheckInScreen()
        {
            _billBookCheckIn = new BillBookCheckInInfo();
            billBookIdText.Clear();
            branchIdText.Clear();
            MRUTextBox.Clear();
            CaIdTextBox.Clear();

            bookTypeText.Clear();
            typeText.Clear();
            AgencyIdText.Clear();
            AgencyName.Clear();
            CollectType.Clear();
            receiveText.Clear();
            billPaymentDateText.Clear();
            billStatusText.Clear();
            paidDateText.Clear();
            billBookSearchInfoGV.DataSource = new BillBookCheckinDetailInfo();
            CalculateBillBookCheckIn();
            finishBt.Enabled = false;
            saveBt.Enabled = false;
            selectAllBt.Enabled = false;
            deselectAllBt.Enabled = false;
            RePrintButton.Enabled = false;
            editCheckInBt.Enabled = false;
            viewPaymentStatusBt.Enabled = true;
            billBookIdText.Focus();
        }

        public void SetData(BillBookCheckInInfo billBookCheckIn)
        {
            _billBookCheckIn = billBookCheckIn;
            SetDefaultSelected();
        }

        //set check box by use abs id 
        public void SetDefaultSelected()
        {
            //BindData();
            foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
            {
                string invId = (string)this.billBookSearchInfoGV["InvId", r.Index].Value;
                foreach (BillBookCheckinDetailInfo b in _billBookCheckIn.BillBookCheckInDetail)
                {
                    if (b.InvoiceNo == invId)
                    {
                        if (b.PaidType == (int)PaidTypeEnum.CHEQUE)
                        {
                            DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV.Rows[r.Index].Cells["AddBt"];
                            addBt.Value = "แก้ไข";
                        }
                        else
                        {
                            DataGridViewButtonCell addBt = (DataGridViewButtonCell)billBookSearchInfoGV.Rows[r.Index].Cells["AddBt"];
                            addBt.Value = "เพิ่ม";
                        }
                        break;
                    }
                }
            }
        }

        string PadBillbookId(string billBookId)
        {
            string retVal = String.Empty;
            billBookId = billBookId.Replace("-", String.Empty);
            if (billBookId.Trim().Length > ModuleConfigurationNames.BillBookLengthOnly)
            {
                if (billBookId.Trim().Length < ModuleConfigurationNames.GroupInvoiceLength)
                {
                    string prefix = billBookId.Substring(0, 2);
                    string postfix = billBookId.Substring(2, billBookId.Length - 2);
                    return String.Format("{0}{1}", prefix, postfix.PadLeft(14, '0'));
                }
                return billBookId;
            }
            else
            {
                if (billBookId.Length > 2)
                {
                    string year = billBookId.Substring(0, 2);
                    string bookId = billBookId.Substring(2, billBookId.Length - 2);
                    return String.Format("{0}{1}", year, bookId.PadLeft(7, '0'));
                }
                else
                {
                    return billBookId;
                }
            }
        }

        private string GetPreviousPmId(string InvId)
        {
            BillBookCheckInInfo billBook = (BillBookCheckInInfo)_presenter.WorkItem.State["OriginalBillBook"];
            string pmId = String.Empty;
            foreach (BillBookCheckinDetailInfo b in billBook.BillBookCheckInDetail)
            {
                if (b.InvoiceNo == InvId)
                {
                    pmId = b.PmId;
                    break;
                }
            }
            return pmId;
        }

        private void CalculateGroupInvoiceCheckIn()
        {
            billBookSearchInfoGV.EndEdit();
            int _collectionCount = 0;
            decimal? _collectionAmount = 0;
            int _cannotCollectionCount = 0;
            decimal? _cannotCollectionAmount = 0;
            if (_billBookCheckIn != null)
            {
                for (int i = 0; i < billBookSearchInfoGV.Rows.Count; i++)
                {
                    decimal? paidAmount = 0;
                    decimal? debtAmount = 0;
                    if (billBookSearchInfoGV.Rows[i].Cells["PaidAmount"].Value != null)
                    {
                        paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["PaidAmount"].Value.ToString());
                    }
                    if (billBookSearchInfoGV.Rows[i].Cells["TotalDebt"].Value != null)
                    {
                        debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["TotalDebt"].Value.ToString());
                    }

                    _collectionAmount += paidAmount;
                    _cannotCollectionAmount += debtAmount;

                    if ((billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value != null) && ((bool)billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value) == true)
                    {
                        _collectionCount += 1;
                    }
                    else
                    {
                        _cannotCollectionCount += 1;
                    }
                }
            }
            billCollectCount.Text = _collectionCount.ToString();
            collectAmount.Text = _collectionAmount.Value.ToString("#,##0.00");
            billCannotCollectCount.Text = _cannotCollectionCount.ToString();
            cannotCollectAmount.Text = _cannotCollectionAmount.Value.ToString("#,##0.00");
        }
        #endregion

        private void billBookSearchInfoGV_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if (_billBookCheckIn.BookType == (int)BookTypeEnum.GROUP_INVOICE)
                {
                    if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "checkedDgColumn")
                    {
                        DataGridViewCheckBoxCell cb = (DataGridViewCheckBoxCell)this.billBookSearchInfoGV["checkedDgColumn", e.RowIndex];
                        bool isCheck = Convert.ToBoolean(cb.Value);

                        ChkSubGroupInvoiceCheckIn(e.RowIndex);

                        if (isCheck)
                        {

                        }
                        else
                        {
                            
                            CalculateGroupInvoiceCheckIn();
                        }
                    }
                    else if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "PaidAmount")
                    {
                        decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value.ToString());
                        decimal? totalAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalAmount"].Value.ToString());
                        decimal? totalDebt = totalAmount - paidAmount;

                        if (totalDebt >= 0)
                        {
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["PaidAmount"].Value = paidAmount;
                            billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalDebt"].Value = totalAmount - paidAmount;

                            CalculateGroupInvoiceCheckIn();
                        }
                        //else
                        //{
                        //    MessageBox.Show("ไม่สามารถระบุจำนวนเงินชำระมากกว่ายอดหนี้ได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[e.RowIndex - 1].Cells["PaidAmount"];
                        //    billBookSearchInfoGV.BeginEdit(true);
                        //}
                    }
                }
            }
        }

        private void billBookSearchInfoGV_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                if (billBookSearchInfoGV.Columns[e.ColumnIndex].Name == "PaidAmount" && billBookSearchInfoGV.Rows[e.RowIndex].Cells["checkedDgColumn"].Value.ToString() == "True") //201802211138 Kanokwan.L Defect#54 แก้ไขพิมพ์ 0.00 ในช่องตัดชำระแล้ว Error
                {
                    if (!TextUtility.IsNumeric(e.FormattedValue.ToString()) || StringConvert.ToDecimal(e.FormattedValue.ToString()) == null || Math.Round((decimal)StringConvert.ToDecimal(e.FormattedValue.ToString()), 2)==StringConvert.ToDecimal("0.00"))
                    {
                        MessageBox.Show("จำนวนเงินไม่ถูกต้อง", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        e.Cancel = true;
                        return;
                    }
                    decimal? paidAmount = StringConvert.ToDecimal(e.FormattedValue.ToString());

                    decimal? totalAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[e.RowIndex].Cells["TotalAmount"].FormattedValue.ToString());
                    decimal? totalDebt = totalAmount - paidAmount;

                    if (totalDebt < 0)
                    {
                        MessageBox.Show("ไม่สามารถระบุจำนวนเงินชำระมากกว่ายอดหนี้ได้", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        e.Cancel = true;
                        return;
                    }

                    // 20240516 Defact#141 ตรวจสอบยอดคงเหลือต้องมากกว่า 0.12 
                    if (totalDebt.Value <= (decimal)0.12 && totalDebt.Value > 0)
                    {
                        MessageBox.Show("ยอดคงเหลือต้องมีค่ามากกว่า 0.12", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        e.Cancel = true;
                        return;
                    }

                    //201802211138 Kanokwan.L Defect#53 ดักเงื่อนไขต้องตัดชำระมากกว่า 0.12
                    if (Math.Round((decimal)paidAmount, 2) <= StringConvert.ToDecimal("0.12") )
                    {
                        MessageBox.Show("กรุณาระบุยอดเงินมากกว่า 0.12 บาท", "ข้อผิดพลาด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        e.Cancel = true;
                        return;
                    }
                }
            }
        }

        private void saveBt_Click(object sender, EventArgs e)
        {
            try
            {
                _billBookCheckIn.BillBookCheckInDetail = CollectionBillCheckIndetail(_billBookCheckIn.BillBookCheckInDetail);
                _presenter.BillBookSaveState(_billBookCheckIn);
                MessageBox.Show("บันทึกข้อมูลการเลือกใบแจ้งหนี้เรียบร้อย", "บันทึกการเลือก", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "ข้อผิดพลาด");
            }
        }

        private void collectAmount_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }


        private void ChkSubGroupInvoiceCheckIn(int IxRow)
        {
            //billBookSearchInfoGV.EndEdit();

            if (_billBookCheckIn != null 
                && billBookSearchInfoGV.Rows[IxRow].Cells["SubGroupInvoiceNo"].Value.ToString().Trim() != ""
                )
            {
                for (int i = 0; i < billBookSearchInfoGV.Rows.Count; i++)
                {

                    if (billBookSearchInfoGV.Rows[i].Cells["SubGroupInvoiceNo"].Value == billBookSearchInfoGV.Rows[IxRow].Cells["SubGroupInvoiceNo"].Value)
                    {
                        billBookSearchInfoGV.Rows[i].Cells["checkedDgColumn"].Value = billBookSearchInfoGV.Rows[IxRow].Cells["checkedDgColumn"].Value;

                        decimal? GAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["GAmount"].Value.ToString());
                        //decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[i].Cells["TotalDebt"].Value.ToString());
                        //if (paidAmount == 0)
                        //{
                        //    paidAmount = debtAmount;
                        //}

                        if ((bool)billBookSearchInfoGV.Rows[IxRow].Cells["checkedDgColumn"].Value == true)
                        {
                            billBookSearchInfoGV.Rows[i].Cells["PaidAmount"].Value = GAmount.ToString();
                            billBookSearchInfoGV.Rows[i].Cells["TotalDebt"].Value = "0";
                            billBookSearchInfoGV.Rows[i].Cells["PaidAmount"].ReadOnly = true;
                            
                        }
                        else
                        {
                            billBookSearchInfoGV.Rows[i].Cells["PaidAmount"].Value = "0" ;
                            billBookSearchInfoGV.Rows[i].Cells["TotalDebt"].Value = GAmount.ToString();
                        }
                        
                    }
                    
                }

                CalculateGroupInvoiceCheckIn();
            }

        }

        private void SelectGroupInvoice(string searchType, string searchValue)
        {
            bool _found = false;
            bool _matchSearchConditon = false;

            if ((branchIdText.Text.Trim() != String.Empty) || (MRUTextBox.Text.Trim() != String.Empty) || (CaIdTextBox.Text.Trim() != String.Empty))
            {
                foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
                {

                    r.Selected = false;
                    string _mruId = this.billBookSearchInfoGV["MruId", r.Index].Value.ToString();
                    string _calId = this.billBookSearchInfoGV["CaId", r.Index].Value.ToString();
                    string _branchId = this.billBookSearchInfoGV["BranchId", r.Index].Value.ToString();

                    // if ((_branchId == branchIdText.Text) && (_mruId == MRUTextBox.Text) && (_calId == CaIdTextBox.Text.PadLeft(ModuleConfigurationNames.CustomerNoLength, '0')))
                    // {
                    _matchSearchConditon = false; // Set default compare. 
                    switch (searchType)
                    {
                        case "BRANCHID":
                            if (searchValue == _branchId)
                                _matchSearchConditon = true;

                            break;
                        case "MRUID":
                            if (searchValue == _mruId)
                                _matchSearchConditon = true;

                            break;
                        case "CAID":
                            if (searchValue == _calId)
                                _matchSearchConditon = true;

                            break;
                    }

                    if (_matchSearchConditon)
                    {


                        if ((Convert.ToString(r.Cells["ARActive"].Value) == "ยกเลิก") && (_billBookCheckIn.BookType != (int)BookTypeEnum.GROUP_INVOICE))
                        {

                            if (r.Cells[0].Value != null)
                            {
                                if (!((bool)(r.Cells[0].Value)))
                                {
                                    string messaage = "หมายเลขใบแจ้งหนี้ {0} มีการแก้ไขหรือยกเลิกจาก SAP คุณต้องการยืนยันการเก็บเงินใช่หรือไม่";
                                    string caId = Convert.ToString(this.billBookSearchInfoGV["InvId", r.Index].Value.ToString());
                                    messaage = String.Format(messaage, caId);
                                    DialogResult result = MessageBox.Show(messaage, "แก้ไขหรือยกเลิกหนี้ของผู้ใช้ไฟ", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                    if (result == DialogResult.Yes)
                                    {
                                        r.Cells[0].Value = true;
                                    }
                                }
                                else
                                {
                                    r.Cells[0].Value = false;
                                }
                            }
                            else
                            {
                                r.Cells[0].Value = false;
                            }
                            r.Selected = true;
                            _found = true;
                            billBookSearchInfoGV.CurrentCell = r.Cells[0];
                            break;
                        }
                        else if (r.Cells[0].ValueType.Name.Equals("Boolean"))
                        {
                            bool isChecked = false;
                            if (r.Cells[0].Value != null)
                            {
                                r.Cells[0].Value = !((bool)(r.Cells[0].Value));
                                isChecked = (bool)r.Cells[0].Value == true ? true : false;
                            }
                            else
                            {
                                r.Cells[0].Value = false;
                                isChecked = true;
                            }
                            r.Selected = true;
                            _found = true;
                            billBookSearchInfoGV.CurrentCell = r.Cells[0];

                            string pmId = (string)this.billBookSearchInfoGV["PmId", r.Index].Value;
                            string absId = (string)this.billBookSearchInfoGV["AbsId", r.Index].Value;
                            if (pmId == PmIdEnum.GROUPINVOICE)
                            {
                                if (isChecked)
                                {
                                    absId = "Y";

                                    decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value.ToString());
                                    decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value.ToString());
                                    billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value = debtAmount;
                                    billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value = paidAmount;
                                    this.billBookSearchInfoGV["AbsId", r.Index].Value = absId;
                                    CalculateGroupInvoiceCheckIn();
                                    billBookSearchInfoGV.CurrentCell = billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"];
                                    billBookSearchInfoGV.BeginEdit(true);

                                }
                                else
                                {
                                    decimal? paidAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value.ToString());
                                    decimal? debtAmount = StringConvert.ToDecimal(billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value.ToString());
                                    decimal? totalAmount = debtAmount + paidAmount;
                                    billBookSearchInfoGV.Rows[r.Index].Cells["PaidAmount"].Value = 0.00M;
                                    billBookSearchInfoGV.Rows[r.Index].Cells["TotalDebt"].Value = totalAmount.Value;
                                    absId = "N";
                                    this.billBookSearchInfoGV["AbsId", r.Index].Value = absId;
                                    CalculateGroupInvoiceCheckIn();
                                }
                            }
                            //break;
                        }

                    } //Check 3 text
                }
                if (!_found)
                {
                    MessageBox.Show("ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else
                {
                    CalculateBillBookCheckIn();
                    CaIdTextBox.Text = String.Empty;

                }
            }
            else if (CaIdTextBox.Text.Length == ModuleConfigurationNames.CustomerBarCodeLength)
            {
                string input = CaIdTextBox.Text.Trim();
                BarcodeHelper bar = new BarcodeHelper(input);

                if (bar.Mru != null)
                {
                    string mruId = bar.Mru[1];
                    foreach (DataGridViewRow r in billBookSearchInfoGV.Rows)
                    {
                        r.Selected = false;
                        string _mruId = this.billBookSearchInfoGV["MruId", r.Index].Value.ToString();
                        string _calId = this.billBookSearchInfoGV["CaID", r.Index].Value.ToString();
                        string _branchId = this.billBookSearchInfoGV["BranchId", r.Index].Value.ToString();
                        if ((_branchId == bar.BranchId) && (_mruId == mruId) && (_calId == bar.CaId))
                        {
                            //  this.billBookSearchInfoGV[0, r.Index].Value = false;
                            r.Selected = true;
                            _found = true;
                            break;
                        }
                    }
                    if (!_found)
                    {
                        MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        CaIdTextBox.Text = String.Empty;
                        return;
                    }
                    else
                    {
                        CalculateBillBookCheckIn();
                        CaIdTextBox.Text = String.Empty;
                        billBookSearchInfoGV.Focus();
                    }

                }
                else
                {
                    MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    CaIdTextBox.Text = String.Empty;
                    return;
                }
            }
            else
            {
                MessageBox.Show(null, "ไม่พบข้อมูลผู้ใช้ไฟ้าในสมุดจ่ายบิล", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Error);
                CaIdTextBox.Text = String.Empty;
                return;
            }

        }                   


    }
}


