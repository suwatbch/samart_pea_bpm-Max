//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using PEA.BPM.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using PEA.BPM.AgencyManagementModule.Interface.Services;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.Interface;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule
{
    public class CommissionManagementViewPresenter : Presenter<ICommissionManagementView>
    {

        //ICommissionMgtReportService _commissionReportService;

        //[InjectionConstructor]
        //public CommissionManagementViewPresenter([ServiceDependency] ICommissionMgtReportService commissionReportService)
		//{
            //_commissionReportService = commissionReportService;
		//}

        /// <summary>
        /// This method is a placeholder that will be called by the view when it's been loaded <see cref="System.Winforms.Control.OnLoad"/>
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }       

        [EventPublication(EventTopicNames.AgencyCommissionSaveButton, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> AgencyCommissionSaveButtonClickedHandler;
        public void AgencyCommissionSaveButtonClicked(HelpOfferInfo helpInfo)
        {
            if (AgencyCommissionSaveButtonClickedHandler != null)
                AgencyCommissionSaveButtonClickedHandler(this, new EventArgs<HelpOfferInfo>(helpInfo));
        }

        [EventPublication(EventTopicNames.ClearActiveCommissionId, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ClearActiveCommissionIdClickedHandler;
        public void ClearActiveCommissionIdClicked()
        {
            if (ClearActiveCommissionIdClickedHandler != null)
                ClearActiveCommissionIdClickedHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.ReprintCommissionReport, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> ReprintCommissionReportClickedHandler;
        public void ReprintCommissionReportClicked()
        {
            if (ReprintCommissionReportClickedHandler != null)
                ReprintCommissionReportClickedHandler(this, new EventArgs<string>(""));
        }

        [EventPublication(EventTopicNames.CommissionAgentIdTextCommitted, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CommissionAgentIdTextCommittedHandler;
        public void CommissionAgentIdTextCommitted(string agencyId)
        {
            if (CommissionAgentIdTextCommittedHandler != null)
                CommissionAgentIdTextCommittedHandler(this, new EventArgs<string>(agencyId));
        }

        [EventPublication(EventTopicNames.CommissionBookCreateDateDropDown, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> CommissionBookCreateDateDropDownHandler;
        public void CommissionBookCreateDateDropDown(BookSearchInfo searchInfo)
        {
            if (CommissionBookCreateDateDropDownHandler != null)
                CommissionBookCreateDateDropDownHandler(this, new EventArgs<BookSearchInfo>(searchInfo));
        }

        [EventPublication(EventTopicNames.BookCreateDate, PublicationScope.WorkItem)]
        public event EventHandler<EventArgs> BookCreateDateSelectedHandler;
        public void BookCreateDateSelected(BookSearchInfo searchInfo)
        {
            if (BookCreateDateSelectedHandler != null)
                BookCreateDateSelectedHandler(this, new EventArgs<BookSearchInfo>(searchInfo));
        }

        //This Event use for Load Commission Voucher Report Screen
        //Create By Chettha Pattananitisak Date 21/03/2007 Time 12:25
        [EventPublication(EventTopicNames.ShowCommissionVoucherOfAgencyReportView, PublicationScope.Global)]
        public event EventHandler<EventArgs> ShowCommissionVoucherOfAgencyReportViewHandler;
        public void CommissionVoucherOfAgencyClicked()
        {
            if (ShowCommissionVoucherOfAgencyReportViewHandler != null)
                ShowCommissionVoucherOfAgencyReportViewHandler(this, new EventArgs());
        }

        //This Event use for Load Data To Report Entities
        //Create By Chettha Pattananitisak Date 29/03/2007 Time 16:45
        [EventPublication(EventTopicNames.ShowCAB04_01Report, PublicationScope.Global)]
        public event EventHandler<EventArgs> LoadCommissionDataToReportEntitiesHandler;
        public void CommissionDataToReportEntitiesClicked()
        {
            if (LoadCommissionDataToReportEntitiesHandler != null)
                LoadCommissionDataToReportEntitiesHandler(this, new EventArgs());
        }
        
        [EventPublication(EventTopicNames.FineDetailView, PublicationScope.Global)]
        public event EventHandler<EventArgs> FineDetailVieweHandler;
        public void ShowFineDetailView()
        {
            if (FineDetailVieweHandler != null)
            {
                WorkItem.State["FineDetailView"] = true;
                FineDetailVieweHandler(this, new EventArgs());
            }
        }

        [EventPublication(EventTopicNames.TaxDetailView, PublicationScope.Global)]
        public event EventHandler<EventArgs> TaxDetailViewHandler;
        public void ShowTaxDetailView()
        {
            if (TaxDetailViewHandler != null)
                TaxDetailViewHandler(this, new EventArgs());
        }

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdateHandler;
        public void ShowStatusText(string statusText)
        {
            if (StatusUpdateHandler != null)
                StatusUpdateHandler(this, new EventArgs<string>(statusText));
        }

        [EventPublication(EventTopicNames.CommissionPrintPreview, PublicationScope.Global)]
        public event EventHandler<EventArgs> CommissionPrintPreviewHandler;
        public void SetPrintPreview(bool printPreview)
        {
            if (CommissionPrintPreviewHandler != null)
                CommissionPrintPreviewHandler(this, new EventArgs<bool> (printPreview));
        }


        [EventPublication(EventTopicNames.GetTravelHelpRate, PublicationScope.Global)]
        public event EventHandler<EventArgs> GetTravelHelpRateHandler;
        public void GetTravelHelpRate(TravelHelpRateConditionInfo spcCondition)
        {
            if (GetTravelHelpRateHandler != null)
                GetTravelHelpRateHandler(this, new EventArgs<TravelHelpRateConditionInfo>(spcCondition));
        }

    }
}

