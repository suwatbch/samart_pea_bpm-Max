//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;
using System.Globalization;

using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Architecture.ArchitectureTool.ErrorHandling;
using PEA.BPM.Architecture.CommonUtilities;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;
using PEA.BPM.AgencyManagementModule.DataSet;
using PEA.BPM.AgencyManagementModule.Interface;
using PEA.BPM.AgencyManagementModule.Utilities;
using PEA.BPM.Architecture.ArchitectureTool.Security;
using PEA.BPM.AgencyManagementModule.Interface.Constants;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class CommissionManagementView : UserControl, ICommissionManagementView
    {
        #region "Private Properties"
        private List<CommissionBaseInfo> _commissionBaseList;
        private List<CommissionBaseTotalInfo> _baseTotalCommissionList;
        private SpecialCommissionInfo _specialCommissionInfo;
        private InvoiceCommissionInfo _invoiceCommssionInfo;
        private TravelHelpRate _travelHelpRate;
        private FineInfo _fineInfo;
        private decimal? _grandTotal = 0;
        private AgentInfo _agentInfo;
        private DateTimeFormatInfo _th_dt;
        private DateTimeFormatInfo _us_dt;
        private List<string> _createDtList;
        private bool _readyToSave;
        private string _bookRange;
        private decimal? _totalSpecialHelp = 0;
        private decimal? _autoAmount = 0;  //included fine        
        private decimal? _fineAmount = 0;
        private decimal? _vat = 0;
        private decimal? _tax = 0;
        private decimal? _vatRate = 0;
        private decimal? _taxRate = 0;
        private bool _overLimit = false;

        private bool IsFineChange
        {
            get
            {
                return !(fineOrgText.Text == fineText.Text);
            }
        }

        private bool IsSpecialHelpChange
        {
            get 
            {
                return !((trasportationCostText.Text == trasportationCostOrgText.Text) &&
                        (extraCostText.Text == extraCostOrgText.Text) &&
                        (travelHelpText.Text == travelHelpOrgText.Text));
            }
        }
        #endregion

        #region "Public properties"
        public bool PrintButton
        {
            set { printBt.Enabled = value; }
            get { return printBt.Enabled; }
        }

        public bool OverLimit
        {
            set { this._overLimit = value; }
            get { return this._overLimit; }
        }
      
        public bool PrintPreview
        {
            get { return printPreviewCb.Checked; }
            set { printPreviewCb.Checked = value; }
        }

        public decimal? VatRate
        {
            set { this._vatRate = value; }
            get { return this._vatRate / 100; }
        }

        public decimal? TaxRate
        {
            set { this._taxRate = value; }
            get { return this._taxRate / 100; }
 
        }

        public void SetTravelHelpRateReadOnly(bool read)
        {
            trasportationCostText.ReadOnly = read;
            extraCostText.ReadOnly = read;
            travelHelpText.ReadOnly = read;
        }

        public bool SaveButton
        {
            set { recordBt.Enabled = value; }
        }

        public AgentInfo AgentInfo
        {
            set
            {
                _agentInfo = value;
                if (_agentInfo != null && _agentInfo.Id != null)
                {
                    agentIdText.Text = _agentInfo.Id.Substring(_agentInfo.Id.Length - ModuleConfigurationNames.AgentIdLength, ModuleConfigurationNames.AgentIdLength);
                    agentNameText.Text =  _agentInfo.Name;
                    receiveRangeText.Focus();
                    agentNameText.Enabled = true;
                    receiveRangeText.Enabled = true;
                    returnDt.Enabled = true;
                    createDtCBox.Enabled = true;
                    calculateBt.Enabled = true;

                    penaltyWaiveTb.Text = _agentInfo.PenaltyWaiveFlag ? "คิดค่าปรับ" : "ไม่คิดค่าปรับ";
                    commissionBaseDataGV.Columns["RegularPeople"].Visible = _agentInfo.IsPersonalBpType;
                    commissionBaseDataGV.Columns["Corporate"].Visible = !_agentInfo.IsPersonalBpType;

                    if (billingPeriodText.Text.Replace("/", "").Trim() == string.Empty)
                    {
                        billingPeriodText.Focus();
                        billingPeriodText.SelectAll();
                        return;
                    }

                    BookSearchInfo searchInfo = new BookSearchInfo();
                    searchInfo.AgentId = agentIdText.Text;
                    searchInfo.BillPeriod = billingPeriodText.Text;
                    searchInfo.PenaltyWaiveFlag = _agentInfo.PenaltyWaiveFlag;
                    _presenter.CommissionBookCreateDateDropDown(searchInfo);
                    createDtCBox.Enabled = true;
                    createDtCBox.Focus();
                }
                else
                {
                    MessageBox.Show(null, "ไม่พบข้อมูลตัวแทนเก็บเงินในระบบหรือ \nตัวแทนจดทะเบียนต่างสาขา", "ไม่พบข้อมูลตัวแทน", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    agentIdText.SelectAll();
                    //clear and diable some boxes
                    agentNameText.Enabled = false;
                    agentNameText.ResetText();
                    receiveRangeText.Enabled = false;
                    receiveRangeText.ResetText();
                    returnDt.Enabled = false;
                    returnDt.ResetText();
                    createDtCBox.Enabled = false;
                    createDtCBox.ResetText();
                    calculateBt.Enabled = false;
                }

                receiveRangeText.ReadOnly = true;
            }
        }

        public string BookRange
        {
            set
            {
                _bookRange = value;
                FillBookRange();
            }
            get { return receiveRangeText.Text; }
        }

        public string ReturnDate
        {
            set { returnDt.Text = value; }
            get { return returnDt.Text; }
        }

        public List<string> BookCreateDateList
        {
            set
            {
                _createDtList = value;
                createDtCBox.DataSource = _createDtList;
                //if (_createDtList != null && _createDtList.Count > 0)
                //{
                //    BookSearchInfo searchInfo = new BookSearchInfo();
                //    createDtCBox.SelectedIndex = 0;
                //    string sDt = _createDtList[0];// default
                //    searchInfo.AgentId = agentIdText.Text;
                //    searchInfo.BillPeriod = billingPeriodText.Text;
                //    searchInfo.CreateDate = DateTime.ParseExact(sDt, "dd/MM/yyyy", _th_dt);
                //    searchInfo.AllowCalculate = false;
                //    _presenter.BookCreateDateSelected(searchInfo);
                //}
            }
        }

        public CommissionBaseTotalInfo BaseTotalCommission
        {
            set
            {
                _baseTotalCommissionList.Add((CommissionBaseTotalInfo)value);
                FillToalCommissionBase();
            }
        }

        public SpecialCommissionInfo SpecialCommission
        {
            set
            {
                _specialCommissionInfo = value;
                FillSpecialCommission();
            }
        }

        public TravelHelpRate TravelHelpRate
        {
            set
            {
                _travelHelpRate = value;
                FillTravelHelpRate();
            }
        }

        public InvoiceCommissionInfo InvoiceCommission
        {
            set
            {
                _invoiceCommssionInfo = value;
                FillInvoiceCommission();
            }
        }

        public FineInfo Fine
        {
            set
            {
                _fineInfo = value;
                FillFineInformation();
            }
        }

        public decimal? GrandTotal
        {
            set
            {
                _grandTotal = value;
                grandTotalText.Text = DaHelper.ToMoneyFormat(_grandTotal);
            }

            get { return _grandTotal; }
        }
        
        public Cursor ScreenCursor
        {
            set
            {
                this.Cursor = value;
            }
        }

        public decimal? AdvPaymentAmount
        {
            set { advPaymentText.Text = DaHelper.ToMoneyFormat(value); }
        }
        #endregion

        public CommissionManagementView()
        {
            InitializeComponent();
            commissionBaseDataGV.AutoGenerateColumns = false;
            baseSummarizeGV.AutoGenerateColumns = false;
            inBoundGV.AutoGenerateColumns = false;
            sumInBoundGV.AutoGenerateColumns = false;
            _baseTotalCommissionList = new List<CommissionBaseTotalInfo>();
            CultureInfo th_culture = new CultureInfo("th-TH");
            _th_dt = th_culture.DateTimeFormat;

            CultureInfo us_culture = new CultureInfo("en-US");
            _us_dt = us_culture.DateTimeFormat;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public CommissionManagementViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #region "Helper"

        private  void FillTravelHelpRate()
        {
            if (_travelHelpRate != null)
            {
                if (_travelHelpRate.TransportHelp > _travelHelpRate.WaterHelp && _travelHelpRate.TransportHelp > _travelHelpRate.FarlandHelp)
                {
                    _totalSpecialHelp = _travelHelpRate.TransportHelp +  _travelHelpRate.ExtraMoneyHelp;
                    
                    trasportationCostText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.TransportHelp);                   
                    extraCostText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.ExtraMoneyHelp);
                    travelHelpText.Text = "0.00";
                    totalHelpingCostText.Text = DaHelper.ToMoneyFormat(_totalSpecialHelp);
                }
                else if (_travelHelpRate.WaterHelp > _travelHelpRate.FarlandHelp)
                {
                    _totalSpecialHelp = _travelHelpRate.WaterHelp + _travelHelpRate.ExtraMoneyHelp;
                    trasportationCostText.Text = "0.00";
                    extraCostText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.ExtraMoneyHelp);
                    travelHelpText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.WaterHelp); ;
                    totalHelpingCostText.Text = DaHelper.ToMoneyFormat(_totalSpecialHelp);
                }
                else
                {
                    _totalSpecialHelp = _travelHelpRate.FarlandHelp + _travelHelpRate.ExtraMoneyHelp;
                    trasportationCostText.Text = "0.00";
                    extraCostText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.ExtraMoneyHelp);
                    travelHelpText.Text = DaHelper.ToMoneyFormat(_travelHelpRate.FarlandHelp); ;
                    totalHelpingCostText.Text = DaHelper.ToMoneyFormat(_totalSpecialHelp);
                }                       

                trasportationCostText.ReadOnly = false;
                trasportationCostOrgText.Text = trasportationCostText.Text;
                extraCostText.ReadOnly = false;
                extraCostOrgText.Text = extraCostText.Text;
                travelHelpText.ReadOnly = false;
                travelHelpOrgText.Text = travelHelpText.Text;
            }
        }

        public void FocusRecordButton()
        {
            recordBt.Focus();
        }        

        //Fix me! vat rate must come from database
        public decimal? GetVat()
        {
            if (VatRate == null)
                return 0;
            decimal? fineAmount = 0;
            if (_fineInfo != null)
                fineAmount = _fineInfo.Amount;
            decimal? net = _autoAmount + _totalSpecialHelp;
            _vat = net * (decimal)VatRate;
            return (decimal?)Math.Round((double)_vat.Value, 2, MidpointRounding.AwayFromZero);
        }
     
        public decimal? GetTax()
        {
            if (TaxRate == null)
                return 0;
            decimal? fineAmount = 0;
            if (_fineInfo != null)
                fineAmount = _fineInfo.Amount;
            decimal? net = _autoAmount + _totalSpecialHelp;
            _tax = net * TaxRate;
            return (decimal?)Math.Round(_tax.Value, 2, MidpointRounding.AwayFromZero);
        }


        //public decimal? PriorTax
        //{
        //    set
        //    {
        //        _tax = value/100;
        //        priorTaxText.Text = DaHelper.ToMoneyFormat((decimal?)Math.Round((double)_tax, 2));
        //    }
        //}

        public void Recalculate()
        {
            decimal? income = (_autoAmount + _totalSpecialHelp);
            //Fix me! vary rate - phase 2            
            _grandTotal = (income + GetVat()) - GetTax();
            _grandTotal =  _grandTotal - _fineAmount;
            vatText.Text = DaHelper.ToMoneyFormat(GetVat());
            priorTaxText.Text = DaHelper.ToMoneyFormat(GetTax());
            grandTotalText.Text = DaHelper.ToMoneyFormat(_grandTotal);          
            _readyToSave = true;
        }

        public bool CalculateButton
        {
            set { calculateBt.Enabled = value; }
        }

        public void ResetFine()
        {
            fineText.Text = "0.00";
            _fineAmount = 0;
            Recalculate();
        }

        public void PlusSpecialMoney()
        {
            //user does not input this values
            _totalSpecialHelp = Convert.ToDecimal(totalHelpingCostText.Text);

            //the last function called when successfully calculating commission
            //trasportationCostText.SelectAll();
            //trasportationCostText.Focus();
        }
      
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            CommissionBaseTotalInfo init = new CommissionBaseTotalInfo();
            init.TotalValue = 0;
            List<CommissionBaseTotalInfo> initList = new List<CommissionBaseTotalInfo>();
            initList.Add(init);
            baseSummarizeGV.DataSource = initList;
            billingPeriodText.Focus();
            billingPeriodText.SelectAll();
            _agentInfo = null;
            _presenter.ShowStatusText("Ready");
        }

        public List<CommissionBaseInfo> CommissionBaseList
        {
            set
            {
                _commissionBaseList = value;
                FillCommissionBase();
            }
        }

        private void FillBookRange()
        {
            if (_bookRange != null)
            {
                //receiveRangeText.ReadOnly = false;
                receiveRangeText.Text = _bookRange;
            }
            else
            {
                MessageBox.Show(null, "ไม่พบสมุดจ่ายบิลที่สามารถคำนวณค่าตอบแทน", "ไม่พบข้อมูล", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                //receiveRangeText.ReadOnly = true;
                calculateBt.Enabled = false;
            }
        }

        private void FillSpecialCommission()
        {
            List<InBoundCollectionInfo> inboundCollectionInfo = _specialCommissionInfo.InBoundCollectionInfoList;
            inBoundGV.Enabled = false;
            inBoundGV.DataSource = inboundCollectionInfo;
            inBoundGV.Enabled = true;

            List<InBoundCollectionInfo> sumInBound = new List<InBoundCollectionInfo>();
            InBoundCollectionInfo sumInBoundItem = new InBoundCollectionInfo();
            sumInBoundItem.BillCount = inboundCollectionInfo[0].BillCount + inboundCollectionInfo[1].BillCount;
            sumInBoundItem.Total = inboundCollectionInfo[0].Total + inboundCollectionInfo[1].Total;

            sumInBound.Add(sumInBoundItem);
            sumInBoundGV.Enabled = false; 
            sumInBoundGV.DataSource = sumInBound;
            sumInBoundGV.Enabled = true;;
            _autoAmount += (_specialCommissionInfo.CompletedBillTotal + _specialCommissionInfo.InBoundBillTotal);

            //completed collection
            completePercentText.Text = DaHelper.ToMoneyFormat(_specialCommissionInfo.CompletedBillPercent);
            completeAmountText.Text = DaHelper.ToMoneyFormat(_specialCommissionInfo.CompletedBillTotal);
        }

        private void FillInvoiceCommission()
        {
            label11.Text = String.Format("{0:0.##}",_invoiceCommssionInfo.Percent)+ "% ของใบแจ้งค่าไฟฟ้าที่เก็บเงินไม่ได้ :";
            percentInvoiceText.Text = _invoiceCommssionInfo.PercentSlip.ToString();
            actualInvoiceText.Text = _invoiceCommssionInfo.ActualSlipToCustomer.ToString();
            threeMonthNoPaidInvoiceText.Text = _invoiceCommssionInfo.ThreeMonthNoPaidSlip.ToString();
            totalInvoiceCommissionText.Text = DaHelper.ToMoneyFormat(_invoiceCommssionInfo.Total);
            _autoAmount += _invoiceCommssionInfo.Total;
        }

        //private void FillBooniesCommission()
        //{
        //    trasportationCostText.Text = DaHelper.ToMoneyFormat(_booniesCommission.Transport);
        //    extraCostText.Text = DaHelper.ToMoneyFormat(_booniesCommission.SpecialOffer);
        //    booniesCostText.Text = DaHelper.ToMoneyFormat(_booniesCommission.ExtraForBoonies);
        //    totalHelpingCostText.Text = DaHelper.ToMoneyFormat(_booniesCommission.Total);
        //    trasportationCostText.ReadOnly = false;
        //    extraCostText.ReadOnly = false;
        //    booniesCostText.ReadOnly = false;
        //    //_grandTotal = _booniesCommission.Total;
        //}

        private void FillFineInformation()
        {
            fineText.Text = DaHelper.ToMoneyFormat(_fineInfo.Amount);
            fineOrgText.Text = DaHelper.ToMoneyFormat(_fineInfo.Amount);
            //filed fineId in case we want to add "Show fine informatin feature"
            _fineAmount = _fineInfo.Amount;
        }

        private void FillToalCommissionBase()
        {
            baseSummarizeGV.Enabled = false;
            baseSummarizeGV.DataSource = _baseTotalCommissionList;
            baseSummarizeGV.Enabled = true;
        }
       
        private void FillCommissionBase()
        {
            CommissionBaseTotalInfo b = new CommissionBaseTotalInfo();
            decimal? gtotal = 0;
            int? billCountFirstAll = 0;
            int? billCountFirstActual = 0;
            int? billCountRepeatAll = 0;
            int? billCountRepeatActual = 0;

            decimal? amountFirstAll = 0;
            decimal? amountRepeatAll = 0;
            decimal? amountFirstActual = 0;
            decimal? amountRepeatActual = 0;

            foreach (CommissionBaseInfo bInfo in _commissionBaseList)
            {
                billCountFirstAll += bInfo.BillCountFirstAll;
                billCountFirstActual += bInfo.BillCountFirstActual;
                billCountRepeatAll += bInfo.BillCountRepeatAll;
                billCountRepeatActual += bInfo.BillCountRepeatActual;
                amountFirstAll += bInfo.AmountFirstAll;
                amountRepeatAll += bInfo.AmountRepeatAll;
                amountFirstActual += bInfo.AmountFirstActual;
                amountRepeatActual += bInfo.AmountRepearActual;
                gtotal += bInfo.TotalBase;
            }

            //fill total in footer
            b.SumBillCountFirstAll = billCountFirstAll;
            b.SumBillCountFirstActual = billCountFirstActual;
            b.SumBillCountRepeatAll = billCountRepeatAll;
            b.SumBillCountRepeatActual = billCountRepeatActual;

            b.SumAmountFirstAll = amountFirstAll;
            b.SumAmountFirstActual = amountFirstActual;
            b.SumAmountRepeatAll = amountRepeatAll;
            b.SumAmountRepeatActual = amountRepeatActual;

            b.TotalValue = gtotal;
            BaseTotalCommission = b;
            _autoAmount = gtotal;

            commissionBaseDataGV.Enabled = false;
            commissionBaseDataGV.DataSource = _commissionBaseList;
            commissionBaseDataGV.Enabled = true;            
        }       

        public void CalculateCommission()
        {
            if (Authorization.IsAuthorized(SecurityNames.CommissionAndFine, true))
            {
                if (billingPeriodText.Text.Replace("/", "").Trim() == "")
                {
                    MessageBox.Show(null, "กรุณาระบุรอบเดือนของสมุดจ่ายบิล", "ไม่ระบุรอบเดือน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    billingPeriodText.Focus();
                    return;
                }

                if (_agentInfo == null)
                {
                    MessageBox.Show(null, "กรุณาระบุตัวแทนเก็บเงินที่จะคิดค่าตอบแทน", "ไม่ระบุตัวแทน", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    agentIdText.Focus();
                    return;
                }

                if (createDtCBox.Items.Count == 0)
                {
                    MessageBox.Show(null, "กรุณาระบุวันออกสมุดจ่ายบิล", "ไม่ระบุรอบบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    createDtCBox.SelectAll();
                    createDtCBox.Focus();
                    return;
                }

                ProcessCreateDtChanged();
            }
        }

        private void GetTravelHelpRate()
        {
            TravelHelpRateConditionInfo spc = new TravelHelpRateConditionInfo();
            if (createDtCBox.SelectedValue != null)
            {
                string sDt = createDtCBox.SelectedValue.ToString();

                spc.AgencyId = agentIdText.Text.Trim().PadLeft(12, '0');
                spc.BookPeriod = DaHelper.SetBillPeriod(billingPeriodText.Text.Trim());
                spc.CreateDate = DateTime.ParseExact(sDt, "dd/MM/yyyy", _th_dt);
                spc.CalculateDate = Session.BpmDateTime.Now;
                spc.BranchId = Session.Branch.Id;
                _presenter.GetTravelHelpRate(spc);
            }
        }
      
        public CommissionVoucherConditionPrintReport GetAgencyCommissionScreenInfo(string cmdId)
        {
            CommissionVoucherConditionPrintReport cv = new CommissionVoucherConditionPrintReport();
            //string bookPeriod = billingPeriodText.Text;
            cv.PeriodBook = billingPeriodText.Text.Trim();
            cv.AgencyId = agentIdText.Text.Trim();
            cv.AgencyName = agentNameText.Text.Trim();

            IFormatProvider provider = CultureInfo.CreateSpecificCulture("th-TH");
            cv.CreateDate = Convert.ToDateTime(this.createDtCBox.Text, provider);

            //commission can include first or repeated billbook together
            //Out = นำออกเก็บ, Resident = บ้านอยู่อาศัย , SmallBiz = ธุรกิจขนาดเล็ก, Government = ราชการ, Keep = เก็บจริง
            cv.TotalBillOutResident = Convert.ToInt32(this.commissionBaseDataGV.Rows[0].Cells["BillCount_First_All"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[0].Cells["BillCount_Rev_All"].Value);
            cv.AmountBillOutResident = Convert.ToDecimal(this.commissionBaseDataGV.Rows[0].Cells["BillAmount_First_All"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[0].Cells["BillCount_Rev_Net"].Value);
            cv.TotalBillOutSmallBiz = Convert.ToInt32(this.commissionBaseDataGV.Rows[1].Cells["BillCount_First_All"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[1].Cells["BillCount_Rev_All"].Value);
            cv.AmountBillOutSmallBiz = Convert.ToDecimal(this.commissionBaseDataGV.Rows[1].Cells["BillAmount_First_All"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[1].Cells["BillCount_Rev_Net"].Value);
            cv.TotalBillOutGoverment = Convert.ToInt32(this.commissionBaseDataGV.Rows[2].Cells["BillCount_First_All"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[2].Cells["BillCount_Rev_All"].Value);
            cv.AmountBillOutGoverment = Convert.ToDecimal(this.commissionBaseDataGV.Rows[2].Cells["BillAmount_First_All"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[2].Cells["BillCount_Rev_Net"].Value);
            cv.TotalBillKeepResident = Convert.ToInt32(this.commissionBaseDataGV.Rows[0].Cells["BillCount_First_Net"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[0].Cells["BillAmount_Rev_All"].Value);
            cv.AmountBillKeepResident = Convert.ToDecimal(this.commissionBaseDataGV.Rows[0].Cells["BillAmount_First_Net"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[0].Cells["BillAmount_Rev_Net"].Value);
            cv.TotalBillKeepSmallBiz = Convert.ToInt32(this.commissionBaseDataGV.Rows[1].Cells["BillCount_First_Net"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[1].Cells["BillAmount_Rev_All"].Value);
            cv.AmountBillKeepSmallBiz = Convert.ToDecimal(this.commissionBaseDataGV.Rows[1].Cells["BillAmount_First_Net"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[1].Cells["BillAmount_Rev_Net"].Value);
            cv.TotalBillKeepGoverment = Convert.ToInt32(this.commissionBaseDataGV.Rows[2].Cells["BillCount_First_Net"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[2].Cells["BillAmount_Rev_All"].Value);
            cv.AmountBillKeepGoverment = Convert.ToDecimal(this.commissionBaseDataGV.Rows[2].Cells["BillAmount_First_Net"].Value) +
                                    Convert.ToDecimal(this.commissionBaseDataGV.Rows[2].Cells["BillAmount_Rev_Net"].Value);
            cv.TotalBillKeepGovPaid = Convert.ToInt32(this.commissionBaseDataGV.Rows[3].Cells["BillCount_First_Net"].Value) +
                                    Convert.ToInt32(this.commissionBaseDataGV.Rows[3].Cells["BillAmount_Rev_All"].Value);
            cv.AmountBillKeepGovPaid = Convert.ToDecimal(this.commissionBaseDataGV.Rows[3].Cells["BillAmount_First_Net"].Value) +
                                   Convert.ToDecimal(this.commissionBaseDataGV.Rows[3].Cells["BillAmount_Rev_Net"].Value);
       

            int limitPaste = Convert.ToInt32(percentInvoiceText.Text);
            int totalBillPasteThreeMonth = Convert.ToInt32(threeMonthNoPaidInvoiceText.Text);
            int totalPaste = Convert.ToInt32(actualInvoiceText.Text);

            cv.TotalBillPasteCommission = (totalPaste + totalBillPasteThreeMonth) >= limitPaste ? limitPaste : (totalPaste + totalBillPasteThreeMonth);

            cv.TotalBillPaste = Convert.ToInt32(actualInvoiceText.Text);
            cv.TotalBillPasteThreeMonth = Convert.ToInt32(threeMonthNoPaidInvoiceText.Text);
            cv.FineSendMoneyLate = Convert.ToDecimal(fineText.Text);
            cv.SeventyFiveToNighty = Convert.ToDecimal(inBoundGV.Rows[0].Cells["Total"].Value);
            cv.Bill75To90 = Convert.ToInt32(inBoundGV.Rows[0].Cells["BillCount"].Value);
            cv.NightyUp = Convert.ToDecimal(inBoundGV.Rows[1].Cells["Total"].Value);
            cv.Bill90Up = Convert.ToInt32(inBoundGV.Rows[1].Cells["BillCount"].Value);
            cv.Hundread = Convert.ToDecimal(completeAmountText.Text);
            cv.CmdId = cmdId;
            cv.IsPersonType = _agentInfo.IsPersonalBpType;
            cv.BranchId = _agentInfo.TechBranchId;
            return cv;
        }

        private void SaveCommission()
        {
            if (IsAuthorized())
            {
                _readyToSave = IsValideSpecialHelp();
                if (_readyToSave)
                {
                    DialogResult dlg = MessageBox.Show(null, "กรุณายืนยันการบันทึกค่าตอบแทนและค่าปรับ", "บันทึกข้อมูล", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                    if (dlg == DialogResult.OK)
                    {
                        HelpOfferInfo helpInfo = new HelpOfferInfo();
                        helpInfo.HelpFarLand = Convert.ToDecimal(travelHelpText.Text);
                        helpInfo.HelpSpecialMoney = Convert.ToDecimal(extraCostText.Text);
                        helpInfo.HelpTransport = Convert.ToDecimal(trasportationCostText.Text);
                        helpInfo.TotalHelp = Convert.ToDecimal(totalHelpingCostText.Text);
                        // Add to AgnecyCommission not calculate net . ((_autoAmount + _totalSpecialHelp + _vat) ;//- (_fineInfo.Amount + _tax))
                        helpInfo.TotalCommission = (_autoAmount + _totalSpecialHelp + _vat);//- (_fineInfo.Amount + _tax));  //without tax, vat
                        _fineInfo.Amount = StringConvert.ToDecimal(fineText.Text.Trim());
                        helpInfo.FineAmount = _fineInfo.Amount;
                        helpInfo.BaseCmAmount = Convert.ToDecimal(baseSummarizeGV.Rows[0].Cells["TotalValue"].Value);
                        helpInfo.SpecialCmAmount = _specialCommissionInfo.CompletedBillTotal + _specialCommissionInfo.InBoundBillTotal;
                        helpInfo.InvCmAmount = Convert.ToDecimal(totalInvoiceCommissionText.Text);
                        helpInfo.TaxAmount = _tax;
                        helpInfo.VatAmount = _vat;
                        helpInfo.ModifiedBy = Session.User.Id;

                        //[1] = >90%
                        if (_specialCommissionInfo.InBoundCollectionInfoList[1].Total > 0 || _specialCommissionInfo.CompletedBillTotal > 0)
                            helpInfo.OverNinety = true;
                        else
                            helpInfo.OverNinety = false;

                        recordBt.Enabled = false;
                        _presenter.SetPrintPreview(printPreviewCb.Checked);
                        _presenter.AgencyCommissionSaveButtonClicked(helpInfo);
                    }
                }
            }
        }      

        private void ProcessCreateDtChanged()
        {
            //load retrun date and number of book (range)
            if (createDtCBox.SelectedValue != null)
            {
                _baseTotalCommissionList = new List<CommissionBaseTotalInfo>();
                BookSearchInfo searchInfo = new BookSearchInfo();
                string sDt = createDtCBox.SelectedValue.ToString();
                searchInfo.PenaltyWaiveFlag = _agentInfo.PenaltyWaiveFlag;
                searchInfo.AgentId = agentIdText.Text;
                searchInfo.BillPeriod = billingPeriodText.Text;
                //we need time to match with create date in database
                if (_th_dt.NativeCalendarName != "พุทธศักราช")
                    searchInfo.CreateDate = DateTime.ParseExact(sDt, "dd/MM/yyyy", _th_dt).AddYears(-543);
                else
                    searchInfo.CreateDate = DateTime.ParseExact(sDt, "dd/MM/yyyy", _th_dt);
                searchInfo.AllowCalculate = true;
                _presenter.SetPrintPreview(printPreviewCb.Checked);
                _presenter.BookCreateDateSelected(searchInfo);
            }
        }   

        public void ClearCalculation()
        {
            _readyToSave = false;
            recordBt.Enabled = false;
            baseSummarizeGV.DataSource = new List<CommissionBaseTotalInfo>();
            commissionBaseDataGV.DataSource = new List<CommissionBaseInfo>();
            inBoundGV.DataSource = new List<InBoundCollectionInfo>();
            sumInBoundGV.DataSource = new InBoundCollectionInfo();
            completeAmountText.Text = "0.00";
            completePercentText.ResetText();
            advPaymentText.Text = "0.00";
            fineText.Text = "0.00";
            percentInvoiceText.ResetText();
            actualInvoiceText.ResetText();
            threeMonthNoPaidInvoiceText.ResetText();
            totalInvoiceCommissionText.Text = "0.00";
            trasportationCostText.Text = "0.00";
            extraCostText.Text = "0.00";
            travelHelpText.Text = "0.00";
            totalHelpingCostText.Text = "0.00";
            grandTotalText.Text = "0.00";
            percentInvoiceText.Text = "0";
            actualInvoiceText.Text = "0";
            threeMonthNoPaidInvoiceText.Text = "0";
            priorTaxText.Text = "0.00";
            vatText.Text = "0.00";
            trasportationCostText.ReadOnly = true;
            extraCostText.ReadOnly = true;
            travelHelpText.ReadOnly = true;
        }

        public void ClearScreen(bool clearActiveCommission)
        {
            _readyToSave = false;
            recordBt.Enabled = false;
            billingPeriodText.ResetText();
            agentIdText.ResetText();
            agentNameText.ResetText();
            returnDt.ResetText();
            penaltyWaiveTb.ResetText();
            receiveRangeText.Text = "00-00";
            baseSummarizeGV.DataSource = new List<CommissionBaseTotalInfo>();
            commissionBaseDataGV.DataSource = new List<CommissionBaseInfo>();

            commissionBaseDataGV.Columns["RegularPeople"].Visible = true;
            commissionBaseDataGV.Columns["Corporate"].Visible = true; 

            inBoundGV.DataSource = new List<InBoundCollectionInfo>();
            sumInBoundGV.DataSource = new InBoundCollectionInfo();
            completeAmountText.Text = "0.00";
            completePercentText.ResetText();
            advPaymentText.Text = "0.00";
            fineText.Text = "0.00";
            label11.Text = "100% ของใบแจ้งค่าไฟฟ้าที่เก็บเงินไม่ได้ :";
            percentInvoiceText.ResetText();
            actualInvoiceText.ResetText();
            threeMonthNoPaidInvoiceText.ResetText();
            totalInvoiceCommissionText.Text = "0.00";
            trasportationCostText.Text = "0.00";
            extraCostText.Text = "0.00";
            travelHelpText.Text = "0.00";
            totalHelpingCostText.Text = "0.00";
            grandTotalText.Text = "0.00";
            percentInvoiceText.Text = "0";
            actualInvoiceText.Text = "0";
            threeMonthNoPaidInvoiceText.Text = "0";
            createDtCBox.DataSource = null;
            priorTaxText.Text = "0.00";
            vatText.Text = "0.00";
            trasportationCostText.ReadOnly = true;
            extraCostText.ReadOnly = true;
            travelHelpText.ReadOnly = true;
            billingPeriodText.Focus();

            if (clearActiveCommission)
                _presenter.ClearActiveCommissionIdClicked();

            _baseTotalCommissionList = new List<CommissionBaseTotalInfo>();
            CommissionBaseTotalInfo b = new CommissionBaseTotalInfo();
            b.TotalValue = 0;
            BaseTotalCommission = b;
            
        }        
        
        private bool IsValideSpecialHelp()
        {
            bool result = _readyToSave;
            string errorMsg = String.Empty;
            decimal? transportHelp = StringConvert.ToDecimal(trasportationCostText.Text);
            decimal? extraHelp = StringConvert.ToDecimal(extraCostText.Text);
            decimal? farLandHelp = StringConvert.ToDecimal(travelHelpText.Text);
            if ((transportHelp == null) || (transportHelp < 0))
            {
                errorMsg += "ค่าพาหนะไม่ถูกต้อง \n";
                trasportationCostText.SelectAll();
                trasportationCostText.Focus();
                result = false;
            }

            if ((extraHelp == null) || (extraHelp < 0))
            {
                errorMsg += "เงินเพิ่มพิเศษไม่ถูกต้อง \n";
                extraCostText.SelectAll();
                extraCostText.Focus();
                result = false;
            }

            if ((farLandHelp == null) || (farLandHelp < 0))
            {
                errorMsg += "เงินช่วยเหลือพื้นที่ทุรกันดารไม่ถูกต้อง \n";
                travelHelpText.SelectAll();
                travelHelpText.Focus();
                result = false;
            }
            if (errorMsg != String.Empty)
            {
                MessageBox.Show(null, errorMsg, "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return result;
        }
       
        private bool IsAuthorized()
        {
            bool isAuthorized = true;
            string remark;
            if (IsFineChange)
            {
                if (!(Authorization.IsAuthorized(SecurityNames.CancelFine, "กรุณาระบุรหัสผู้ใช้งานเพื่อยืนยันการยกเลิกค่าปรับ",
                    true, "ระบุข้อมูลเพื่อยืนยันการยกเลิกค่าปรับ", out remark)))
                {
                    isAuthorized = false;
                    return isAuthorized;
                }
            }

            if (IsSpecialHelpChange)
            {
                if (!(Authorization.IsAuthorized(SecurityNames.EditSpecialHelp, "กรุณาระบุรหัสผู้ใช้งานเพื่อยืนยันการแก้ไขเงินช่วยเหลือ",
                    true, "ระบุข้อมูลเพื่อยืนยันการแก้ไขเงินช่วยเหลือ", out remark)))
                {
                    isAuthorized = false;
                    return isAuthorized;
                }
            }

            return isAuthorized;
        }        
#endregion

        #region "Event"
        private void recordBt_Click(object sender, EventArgs e)
        {          
            SaveCommission();
        }

        private void billingPeriodText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && billingPeriodText.Text.Length == ModuleConfigurationNames.BillPeriodLength)
            {
                if (!TextUtility.IsValidPeriod(billingPeriodText.Text))
                {
                    DialogResult dlg = MessageBox.Show(null, "ค่ารอบเดือนไม่ถูกต้อง กรุณากดปุ่ม Ok เพื่อกำหนดเป็นเดือนปัจจุบัน \nกด Cancel เพื่อป้อนค่าใหม่ ", "ป้อนค่าผิด", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                    if (dlg == DialogResult.OK)
                    {
                        DateTime defDate = Session.BpmDateTime.Now;
                        string defInput = defDate.ToString("MM/yyyy", _th_dt);
                        billingPeriodText.Text = defInput;
                        agentIdText.Focus();
                        agentIdText.SelectAll();
                    }
                    else
                    {
                        billingPeriodText.SelectAll();
                    }
                }
                else
                {
                    agentIdText.Focus();
                    agentIdText.SelectAll();
                }
            }
            else if (e.KeyCode == Keys.N)
            {
                string p = Session.BpmDateTime.Now.ToString("yyyyMMdd", _th_dt);
                string curPer = string.Format("{0}/{1}", p.Substring(4, 2), p.Substring(0, 4));
                billingPeriodText.Text = curPer;

                agentIdText.Focus();
                agentIdText.SelectAll();
            }
        }
         
        private void agentIdText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Tab)
            {
                string agentId = agentIdText.Text.PadLeft(12, '0');
                _presenter.SetPrintPreview(printPreviewCb.Checked);
                _presenter.CommissionAgentIdTextCommitted(agentId);

                if (createDtCBox.Items.Count > 0)
                {
                    CalculateCommission();
                }
            }
        }

        private void receiveRangeText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && receiveRangeText.Text.Length == ModuleConfigurationNames.ReceiveRangeLength)
            {
                //validate range of this agency
                if (_bookRange != null)
                {
                    char[] splitter = { '-' };
                    try
                    {
                        string[] org = _bookRange.Split(splitter);

                        int bcount = Convert.ToInt32(org[0]);
                        int ecount = Convert.ToInt32(org[1]);

                        string[] input = receiveRangeText.Text.Split(splitter);

                        int binput = Convert.ToInt32(input[0]);
                        int einput = Convert.ToInt32(input[1]);

                        if (binput < bcount || einput > ecount)
                        {
                            MessageBox.Show(null, "ครั้งที่รับไปเกินขอบเขตที่รับจริงของตัวแทน", "ป้อนค่าไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            //receiveRangeText.Focus();
                            receiveRangeText.SelectAll();
                        }
                        else
                            calculateBt.Focus();
                    }
                    catch (Exception)
                    {
                        MessageBox.Show(null, "ป้อนข้อมูลไม่ถูกต้อง กรุณาป้อนใหม่อีกครั้ง", "ป้อนค่าไม่ถูกต้อง", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        receiveRangeText.SelectAll();
                    }
                }
            }
            else if (e.KeyCode == Keys.Escape)
            {
                receiveRangeText.Text = _bookRange;
            }
        }


        private void createDt_SelectionChangeCommitted(object sender, EventArgs e)
        {
            ProcessCreateDtChanged();
        }

        private void calculateBt_Click(object sender, EventArgs e)
        {
            CalculateCommission();
        }

        private void clearBt_Click(object sender, EventArgs e)
        {
            ClearScreen(true);
            printBt.Enabled = false;
        }

        private void fineText_KeyDown(object sender, KeyEventArgs e)
        {
            //see fine detial
            if (e.KeyCode == Keys.F1 && _fineInfo != null && _fineInfo.Enabled)
            {
                if (!printBt.Enabled)
                {
                    if (_fineInfo != null && _fineInfo.Enabled && _fineInfo.Amount > 0)
                    {
                        if (_agentInfo != null && _agentInfo.Id != null)
                            _presenter.ShowFineDetailView();
                    }
                }
                else
                {
                    if (Convert.ToDouble(fineText.Text.Trim()) > 0)
                    {
                        if (_agentInfo != null && _agentInfo.Id != null)
                            _presenter.ShowFineDetailView();
                    }
                }
            }
        }

        private void printBt_Click(object sender, EventArgs e)
        {
            _presenter.SetPrintPreview(printPreviewCb.Checked);
            _presenter.ReprintCommissionReportClicked();
        }

        private void createDt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //check if this calcount has been calculated
                ProcessCreateDtChanged();
                calculateBt.Focus();
            }
        }

        private void priorTaxText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F1)
            {
                if (_agentInfo != null && _agentInfo.Id != null)
                    _presenter.ShowTaxDetailView();
            }
        }

        private void fineText_Enter(object sender, EventArgs e)
        {
            _presenter.ShowStatusText("กดปุ่ม F1 เพื่อแสดงรายละเอียดค่าปรับ");
        }

        private void fineText_Leave(object sender, EventArgs e)
        {
            _presenter.ShowStatusText("Ready");
        }

        private void priorTaxText_Enter(object sender, EventArgs e)
        {
            _presenter.ShowStatusText("กดปุ่ม F1 เพื่อแสดงรายละเอียดภาษีหัก ณ ที่จ่าย");
        }

        private void priorTaxText_Leave(object sender, EventArgs e)
        {
            _presenter.ShowStatusText("Ready");
        }

        private void trasportationCostText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Down)
            {
                decimal? transCost = 0;

                transCost = StringConvert.ToDecimal(trasportationCostText.Text);
                if (transCost == null || transCost < 0)
                {
                    trasportationCostText.SelectAll();
                    trasportationCostText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                trasportationCostText.Text = DaHelper.ToMoneyFormat(transCost);
                decimal? newTotalSpecialHelp = transCost + Convert.ToDecimal(extraCostText.Text) + Convert.ToDecimal(travelHelpText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();
                extraCostText.Focus();
                extraCostText.SelectAll();
            }
            else if (e.KeyCode == Keys.F12)
            {
                SaveCommission();
            }
        }

        private void extraCostText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Down)
            {
                decimal? extraCost = 0;
                extraCost = StringConvert.ToDecimal(extraCostText.Text);

                if (extraCost == null || extraCost < 0)
                {
                    extraCostText.SelectAll();
                    extraCostText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                extraCostText.Text = DaHelper.ToMoneyFormat(extraCost);
                decimal? newTotalSpecialHelp = extraCost + Convert.ToDecimal(trasportationCostText.Text) + Convert.ToDecimal(travelHelpText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();
                travelHelpText.Focus();
                travelHelpText.SelectAll();
            }
            else if (e.KeyCode == Keys.Up)
            {
                trasportationCostText.Focus();
                trasportationCostText.SelectAll();
            }
            else if (e.KeyCode == Keys.F12)
            {
                SaveCommission();
            }
        }

        private void booniesCostText_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Down)
            {
                decimal? boonieCost = 0;
                boonieCost = StringConvert.ToDecimal(travelHelpText.Text);
                if (boonieCost == null || boonieCost < 0)
                {
                    travelHelpText.SelectAll();
                    travelHelpText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                travelHelpText.Text = DaHelper.ToMoneyFormat(boonieCost);
                decimal? newTotalSpecialHelp = boonieCost + Convert.ToDecimal(trasportationCostText.Text) + Convert.ToDecimal(extraCostText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();

                recordBt.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                extraCostText.Focus();
                extraCostText.SelectAll();
            }
            else if (e.KeyCode == Keys.F12)
            {
                SaveCommission();
            }
        }

        private void fineDetailImg_Click(object sender, EventArgs e)
        {
            if (!printBt.Enabled)
            {
                if (_fineInfo != null && _fineInfo.Enabled && _fineInfo.Amount > 0)
                {
                    if (_agentInfo != null && _agentInfo.Id != null)
                        _presenter.ShowFineDetailView();
                }
            }
            else
            {
                
                if (Convert.ToDouble(fineText.Text.Trim()) > 0)
                {
                    if (_agentInfo != null && _agentInfo.Id != null)
                        _presenter.ShowFineDetailView();
                }
            }
        }

        private void taxPictureBox_Click(object sender, EventArgs e)
        {
            if (_agentInfo != null && _agentInfo.Id != null)
                _presenter.ShowTaxDetailView();
        }

        private void trasportationCostText_Leave(object sender, EventArgs e)
        {
            if (trasportationCostText.Enabled)
            {
                decimal? transCost = 0;

                transCost = StringConvert.ToDecimal(trasportationCostText.Text);
                if (transCost == null || transCost < 0)
                {
                    trasportationCostText.SelectAll();
                    trasportationCostText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                trasportationCostText.Text = DaHelper.ToMoneyFormat(transCost);
                decimal? newTotalSpecialHelp = transCost + Convert.ToDecimal(extraCostText.Text) + Convert.ToDecimal(travelHelpText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();
            }
        }       

        private void extraCostText_Leave(object sender, EventArgs e)
        {
            if (extraCostText.Enabled)
            {
                decimal? extraCost = 0;
                extraCost = StringConvert.ToDecimal(extraCostText.Text);

                if (extraCost == null || extraCost < 0)
                {
                    extraCostText.SelectAll();
                    extraCostText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                extraCostText.Text = DaHelper.ToMoneyFormat(extraCost);
                decimal? newTotalSpecialHelp = extraCost + Convert.ToDecimal(trasportationCostText.Text) + Convert.ToDecimal(travelHelpText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();
            }
        }

        private void travelHelpText_Leave(object sender, EventArgs e)
        {
            if (travelHelpText.Enabled)
            {
                decimal? boonieCost = 0;
                boonieCost = StringConvert.ToDecimal(travelHelpText.Text);
                if (boonieCost == null || boonieCost < 0)
                {
                    travelHelpText.SelectAll();
                    travelHelpText.Focus();
                    MessageBox.Show(null, "กรุณาป้อนค่าที่เป็นจำนวนเงินค่าบวกเท่านั้น เช่น 65.50", "ป้อนข้อมูลผิด", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                travelHelpText.Text = DaHelper.ToMoneyFormat(boonieCost);
                decimal? newTotalSpecialHelp = boonieCost + Convert.ToDecimal(trasportationCostText.Text) + Convert.ToDecimal(extraCostText.Text);
                totalHelpingCostText.Text = DaHelper.ToMoneyFormat(newTotalSpecialHelp);
                _totalSpecialHelp = newTotalSpecialHelp;
                Recalculate();
            }
        }

#endregion

        #region ICommissionManagementView Members


        public decimal? SetFine
        {
           set {fineText.Text = Convert.ToDouble(value).ToString("#,##0.00"); }
        }

        public decimal? SetTransCost
        {
            set { trasportationCostText.Text = Convert.ToDouble(value).ToString("#,##0.00"); }
        }

        public decimal? SetFarLandHelp
        {
            set { travelHelpText.Text = Convert.ToDouble(value).ToString("#,##0.00"); }
        }

        public decimal? SetSpecialMoney
        {
            set { extraCostText.Text = Convert.ToDouble(value).ToString("#,##0.00"); }
        }

        public void setDBFine()
        {
            _fineAmount = Convert.ToDecimal(fineText.Text.Trim());
            _totalSpecialHelp = Convert.ToDecimal(trasportationCostText.Text.Trim()) + Convert.ToDecimal(travelHelpText.Text.Trim()) + Convert.ToDecimal(extraCostText.Text.Trim());
            totalHelpingCostText.Text = _totalSpecialHelp.Value.ToString("#,##0.00");
            Recalculate();
        }
     
        public void SetOverLimit(bool overLimit)
        {
            if (overLimit)
            {
                MessageBox.Show(null, "ไม่สามารถทำการคำนวณค่าปรับค่าตอบแทนได้ เนื่องจากจำนวนครั้งในการคำนวณค่าตอบแทนเกินจากที่กำหนดไว้ ", "คำนวณค่าตอบแทนเกินกำหนด", MessageBoxButtons.OK, MessageBoxIcon.Question);
                OverLimit = overLimit;
            }
            recordBt.Enabled = !overLimit;
            printBt.Enabled = !overLimit;
            
        }

        #endregion

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void commissionBaseDataGV_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}

