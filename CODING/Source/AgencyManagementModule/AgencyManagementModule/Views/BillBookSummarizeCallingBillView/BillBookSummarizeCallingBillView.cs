//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using PEA.BPM.Infrastructure.Interface;
using PEA.BPM.AgencyManagementModule.Interface.BusinessEntities;

namespace PEA.BPM.AgencyManagementModule
{
    [SmartPart]
    public partial class BillBookSummarizeCallingBillView : UserControl, IBillBookSummarizeCallingBillView
    {
        private BindingList<CallingBillSummaryInfo> _billSummaryInfoList;
        private bool _loaded;
        private bool _isEditBillBook = false;

        public BindingList<CallingBillSummaryInfo> BillSummaryInfoList
        {
            set {
                _billSummaryInfoList = value;
                FillCallingBillSummaryInfo();
                FillSummaryGv();
            }            
        }

        public void SetCancelBillBook(bool enable)
        {
            cancelBt.Enabled = enable;
            savePrintBt.Enabled = !enable;
            //callingBillSummaryGV.ReadOnly = enable;
            _isEditBillBook = enable;
        }      

        public BillBookSummarizeCallingBillView()
        {
            int row = 0;
            InitializeComponent();
            callingBillSummaryGV.AutoGenerateColumns = false;
            summaryGv.AutoGenerateColumns = false;
            InitialSummaryGV();
            _loaded = true;
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public BillBookSummarizeCallingBillViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();

            cancelBt.Enabled = _isEditBillBook;
        }

        public void Clear()
        {
            if (_billSummaryInfoList != null)
                _billSummaryInfoList.Clear();

            //callingBillSummaryGV.DataSource = null;
            FillZeroSummaryGv();
        }

        private void FillCallingBillSummaryInfo()
        {
            callingBillSummaryGV.Enabled = false;
            callingBillSummaryGV.DataSource = _billSummaryInfoList;
            callingBillSummaryGV.Enabled = true;
        }

        private void callingBillSummaryGV_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                string peaCode = (string)callingBillSummaryGV.Rows[e.RowIndex].Cells["PeaCode"].Value;
                string lineId = (string)callingBillSummaryGV.Rows[e.RowIndex].Cells["LineId"].Value;
                _presenter.SummaryViewSelectEventClicked(peaCode, lineId);
            }
        }

        private void backBt_Click(object sender, EventArgs e)
        {
            _presenter.BackToBookManagementViewActivated();
        }

        private void savePrintBt_Click(object sender, EventArgs e)
        {
            if (callingBillSummaryGV.Rows.Count == 0)
            {
                MessageBox.Show(null, "กรุณาป้อนข้อมูลบิลที่จะจัดทำสมุด", "ไม่พบบิล", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            _presenter.BillBookSaveRequestClicked();
        }


        private void FillZeroSummaryGv()
        {
            List<SummaryBillViewSummaryFooterInfo> footerList = new List<SummaryBillViewSummaryFooterInfo>();
            SummaryBillViewSummaryFooterInfo footer = new SummaryBillViewSummaryFooterInfo();
            footer.CurrentBillAmount = 0;
            footer.CurrentBillCount = 0;
            footer.InvAmount = 0;
            footer.InvCount = 0;
            footer.LineCount = 0;
            footer.OverallAmount = 0;
            footer.OverallCount = 0;
            footer.PastBillAmount = 0;
            footer.PastBillCount = 0;
            footer.Header = " สรุปรวม ";
            footerList.Add(footer);
            summaryGv.DataSource = footerList;
            RefreshSummaryGvDisplayIndex();
            cancelBt.Enabled = false;
        }


        private void FillSummaryGv()
        {
            if (_billSummaryInfoList != null)
            {
                Hashtable lineList = new Hashtable();
                List<SummaryBillViewSummaryFooterInfo> footerList = new List<SummaryBillViewSummaryFooterInfo>();
                SummaryBillViewSummaryFooterInfo footer = new SummaryBillViewSummaryFooterInfo();

                foreach (CallingBillSummaryInfo bill in _billSummaryInfoList)
                {
                    //count number of lines in this book
                    string compId = bill.PeaCode + bill.LineId;
                    if (!lineList.Contains(compId))
                    {
                        lineList.Add(compId, null);
                        footer.LineCount++;
                    }

                    footer.CurrentBillCount += bill.BillCountCurrent;
                    footer.CurrentBillAmount += bill.AmountCurrent;
                    footer.PastBillCount += bill.BillCountPast;
                    footer.PastBillAmount += bill.AmountPast;
                    footer.InvCount += bill.SlipCount;
                    footer.InvAmount += bill.AmountSlip;
                }

                footer.OverallCount += (footer.PastBillCount + footer.CurrentBillCount + footer.InvCount);
                footer.OverallAmount += (footer.PastBillAmount + footer.CurrentBillAmount + footer.InvAmount);

                footer.Header = " สรุปรวม ";
                footerList.Add(footer);
                summaryGv.DataSource = footerList;
                RefreshSummaryGvDisplayIndex();
            }
        }

        private void RefreshSummaryGvDisplayIndex()
        {
            summaryGv.Columns["Header"].DisplayIndex = 0;
            summaryGv.Columns["LineCount"].DisplayIndex = 1;
            summaryGv.Columns["CurrentBillCount"].DisplayIndex = 2;
            summaryGv.Columns["CurrentBillAmount"].DisplayIndex = 3;
            summaryGv.Columns["PastBillCount"].DisplayIndex = 4;
            summaryGv.Columns["PastBillAmount"].DisplayIndex = 5;
            //summaryGv.Columns["InvCount"].DisplayIndex = 6;
            //summaryGv.Columns["InvAmount"].DisplayIndex = 7;
            summaryGv.Columns["OverallCount"].DisplayIndex = 6;
            summaryGv.Columns["OverallAmount"].DisplayIndex = 7;
            summaryGv.Columns["Dummy"].DisplayIndex = 8;
        }

        private void InitialSummaryGV()
        {
            try
            {
                summaryGv.Columns["Header"].Width = callingBillSummaryGV.RowHeadersWidth + callingBillSummaryGV.Columns["PeaCode"].Width;
                summaryGv.Columns["LineCount"].Width = callingBillSummaryGV.Columns["LineId"].Width;
                summaryGv.Columns["CurrentBillCount"].Width = callingBillSummaryGV.Columns["BillCountCurrent"].Width;
                summaryGv.Columns["CurrentBillAmount"].Width = callingBillSummaryGV.Columns["AmountCurrent"].Width;
                summaryGv.Columns["PastBillCount"].Width = callingBillSummaryGV.Columns["BillCountPast"].Width;
                summaryGv.Columns["PastBillAmount"].Width = callingBillSummaryGV.Columns["AmountPast"].Width;
                summaryGv.Columns["OverallCount"].Width = callingBillSummaryGV.Columns["TotalCount"].Width;
                summaryGv.Columns["OverallAmount"].Width = callingBillSummaryGV.Columns["TotalAmount"].Width;
                summaryGv.Columns["Dummy"].Width = callingBillSummaryGV.Width;
            }
            catch (Exception)
            {
              
            }
        }

        private void callingBillSummaryGV_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
        {
            if (_loaded)
                InitialSummaryGV();
        }

        private void cancelBt_Click(object sender, EventArgs e)
        {
            _presenter.CancelBillBookClicked();
        }

        #region IBillBookSummarizeCallingBillView Members


        public void setInitialSelectedLine()
        {
            int row = 0;
            if (callingBillSummaryGV.Rows.Count > 0)
            {
                if (callingBillSummaryGV.CurrentRow.Index != 0)
                {
                    row = callingBillSummaryGV.CurrentRow.Index;
                }
                string peaCode = (string)callingBillSummaryGV.Rows[row].Cells["PeaCode"].Value;
                string lineId = (string)callingBillSummaryGV.Rows[row].Cells["LineId"].Value;
                _presenter.SummaryViewSelectEventClicked(peaCode, lineId);
            }
        }

        #endregion
    }
}

